{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26941/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26941/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26941"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26941"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26941/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5156,
            "forks_count": 5156,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1738,
            "open_issues_count": 1738,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-01-23T01:27:16Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 251208,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 72998,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-01-23T01:05:36Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 72998,
            "watchers_count": 72998,
            "web_commit_signoff_required": false
        },
        "sha": "13d50c3b13fb6f2bba948e50fefee451e0a90487",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": null,
    "closed_at": "2024-01-22T21:36:40Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1451520634"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451520634"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe pull this out of the function to the top level? Would make it easier to change later on.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-13T13:43:21Z",
            "diff_hunk": "@@ -0,0 +1,125 @@\n+local M = {}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+local function get_python_candidates()\n+  return {\n+    'python3',\n+    'python3.12',\n+    'python3.11',\n+    'python3.10',\n+    'python3.9',\n+    'python3.8',\n+    'python3.7',\n+    'python',\n+  }\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @param major_version integer\n+--- @return integer, string\n+local function check_for_module(prog, module, major_version)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return 0, prog .. ' not found in search path or not executable.'\n+  end\n+\n+  local min_version = '3.7'",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1451520634",
            "id": 1451520634,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WhHJ6",
            "original_commit_id": "8445c3dc3e8a090f8b994efd7ad2db50ef252b7c",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1820019666,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451520634/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-13T13:43:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451520634",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1451520759"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451520759"
                }
            },
            "author_association": "MEMBER",
            "body": "Why not a static table? (Also at top level, before any functions.)\r\n\r\nOr maybe we can combine this somehow with the `min_version` variable? (E.g., define `max_version` and then use `vim.version` to check for valid candidates.)",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-13T13:43:45Z",
            "diff_hunk": "@@ -0,0 +1,125 @@\n+local M = {}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+local function get_python_candidates()\n+  return {\n+    'python3',\n+    'python3.12',\n+    'python3.11',\n+    'python3.10',\n+    'python3.9',\n+    'python3.8',\n+    'python3.7',\n+    'python',\n+  }\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1451520759",
            "id": 1451520759,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WhHL3",
            "original_commit_id": "8445c3dc3e8a090f8b994efd7ad2db50ef252b7c",
            "original_line": 30,
            "original_position": 30,
            "original_start_line": 19,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1820019707,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451520759/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-13T13:47:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451520759",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1451521408"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451521408"
                }
            },
            "author_association": "MEMBER",
            "body": "Similarly, such a \"constant\" could be defined in top level (and the check can use `vim.version`).",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-13T13:45:58Z",
            "diff_hunk": "@@ -0,0 +1,125 @@\n+local M = {}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+local function get_python_candidates()\n+  return {\n+    'python3',\n+    'python3.12',\n+    'python3.11',\n+    'python3.10',\n+    'python3.9',\n+    'python3.8',\n+    'python3.7',\n+    'python',\n+  }\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @param major_version integer\n+--- @return integer, string\n+local function check_for_module(prog, module, major_version)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return 0, prog .. ' not found in search path or not executable.'\n+  end\n+\n+  local min_version = '3.7'\n+\n+  --   Try to load module, and output Python version.\n+  --   Exit codes:\n+  --     0  module can be loaded.\n+  --     2  module cannot be loaded.\n+  --     Otherwise something else went wrong (e.g. 1 or 127).\n+  local prog_exitcode, prog_version = import_module(prog, module)\n+  if prog_exitcode == 2 or prog_exitcode == 0 then\n+    -- Check version only for expected return codes.\n+    if not vim.startswith(prog_version, tostring(major_version)) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python %s.',\n+          prog_path,\n+          prog_version,\n+          major_version\n+        )\n+    elseif\n+      vim.startswith(prog_version, tostring(major_version))\n+      and vim.version.lt(prog_version, min_version)\n+    then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python >= %s.',\n+          prog_path,\n+          prog_version,\n+          min_version\n+        )\n+    end\n+  end\n+\n+  if prog_exitcode == 2 then\n+    return 0, string.format('%s does not have the \"%s\" module.', prog_path, module)\n+  elseif prog_exitcode == 127 then\n+    -- This can happen with pyenv's shims.\n+    return 0, string.format('%s does not exist: %s', prog_path, prog_version)\n+  elseif prog_exitcode ~= 0 then\n+    return 0,\n+      string.format(\n+        'Checking %s caused an unknown error. (%s, output: %s) Report this at https://github.com/neovim/neovim',\n+        prog_path,\n+        prog_exitcode,\n+        prog_version\n+      )\n+  end\n+\n+  return 1, ''\n+end\n+\n+--- @param module string\n+--- @param major_version integer\n+--- @return string[]\n+function M.detect_by_module(module, major_version)\n+  if major_version ~= 3 then",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1451521408",
            "id": 1451521408,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WhHWA",
            "original_commit_id": "8445c3dc3e8a090f8b994efd7ad2db50ef252b7c",
            "original_line": 96,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1820019938,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451521408/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-13T13:47:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451521408",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1451522249"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451522249"
                }
            },
            "author_association": "MEMBER",
            "body": "Why not use `vim.version` for the whole check (and for the one above)?",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-13T13:48:31Z",
            "diff_hunk": "@@ -0,0 +1,125 @@\n+local M = {}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+local function get_python_candidates()\n+  return {\n+    'python3',\n+    'python3.12',\n+    'python3.11',\n+    'python3.10',\n+    'python3.9',\n+    'python3.8',\n+    'python3.7',\n+    'python',\n+  }\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @param major_version integer\n+--- @return integer, string\n+local function check_for_module(prog, module, major_version)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return 0, prog .. ' not found in search path or not executable.'\n+  end\n+\n+  local min_version = '3.7'\n+\n+  --   Try to load module, and output Python version.\n+  --   Exit codes:\n+  --     0  module can be loaded.\n+  --     2  module cannot be loaded.\n+  --     Otherwise something else went wrong (e.g. 1 or 127).\n+  local prog_exitcode, prog_version = import_module(prog, module)\n+  if prog_exitcode == 2 or prog_exitcode == 0 then\n+    -- Check version only for expected return codes.\n+    if not vim.startswith(prog_version, tostring(major_version)) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python %s.',\n+          prog_path,\n+          prog_version,\n+          major_version\n+        )\n+    elseif\n+      vim.startswith(prog_version, tostring(major_version))\n+      and vim.version.lt(prog_version, min_version)",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1451522249",
            "id": 1451522249,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WhHjJ",
            "original_commit_id": "8445c3dc3e8a090f8b994efd7ad2db50ef252b7c",
            "original_line": 62,
            "original_position": 62,
            "original_start_line": 61,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1820020226,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451522249/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-13T13:48:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451522249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460669828"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460669828"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we use a normal `require('vim.provider.python')`? With this `vim.provider` is loaded on the first access, but right now it's going to load all (future) providers inside straight away, unless we also make those lazy loaded too. And `require` should just be easier.\r\n```suggestion\r\n  return luaeval('require(\"vim.provider.python\").call(_A[1], _A[2])', [a:method, a:args])\r\n```",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:17:59Z",
            "diff_hunk": "@@ -1,45 +1,16 @@\n-\" The Python3 provider uses a Python3 host to emulate an environment for running\n-\" python3 plugins. :help provider\n-\"\n-\" Associating the plugin with the Python3 host is the first step because\n-\" plugins will be passed as command-line arguments\n-\n if exists('g:loaded_python3_provider')\n   finish\n endif\n-let [s:prog, s:err] = provider#pythonx#Detect(3)\n-let g:loaded_python3_provider = empty(s:prog) ? 1 : 2\n+let g:loaded_python3_provider = 1\n \n-function! provider#python3#Prog() abort\n-  return s:prog\n+function! provider#python3#Call(method, args) abort\n+  return v:lua.vim.provider.python.call(a:method, a:args)",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460669828",
            "id": 1460669828,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEA2E",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 7,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/autoload/provider/python3.vim",
            "position": null,
            "pull_request_review_id": 1834731890,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460669828/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:19:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460669828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460670374"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460670374"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we deprecate this function first and then remove? A skeleton like vimscript that only contains the (public) autoload functions, e.g. `provider#python3#Prog()` `provider#python3#Error()` etc. are left but simply calls the lua counterpart.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:23:12Z",
            "diff_hunk": "@@ -1,45 +1,16 @@\n-\" The Python3 provider uses a Python3 host to emulate an environment for running\n-\" python3 plugins. :help provider\n-\"\n-\" Associating the plugin with the Python3 host is the first step because\n-\" plugins will be passed as command-line arguments\n-\n if exists('g:loaded_python3_provider')\n   finish\n endif\n-let [s:prog, s:err] = provider#pythonx#Detect(3)\n-let g:loaded_python3_provider = empty(s:prog) ? 1 : 2\n+let g:loaded_python3_provider = 1\n \n-function! provider#python3#Prog() abort",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460670374",
            "id": 1460670374,
            "line": 13,
            "node_id": "PRRC_kwDOAPphoM5XEA-m",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 13,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/autoload/provider/python3.vim",
            "position": 13,
            "pull_request_review_id": 1834732363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460670374/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:49:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460670374",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460670422"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460670422"
                }
            },
            "author_association": "MEMBER",
            "body": "It gets overridden below (L15) but then why would we need to declare this here?",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:23:43Z",
            "diff_hunk": "@@ -1,45 +1,16 @@\n-\" The Python3 provider uses a Python3 host to emulate an environment for running\n-\" python3 plugins. :help provider\n-\"\n-\" Associating the plugin with the Python3 host is the first step because\n-\" plugins will be passed as command-line arguments\n-\n if exists('g:loaded_python3_provider')\n   finish\n endif\n-let [s:prog, s:err] = provider#pythonx#Detect(3)\n-let g:loaded_python3_provider = empty(s:prog) ? 1 : 2\n+let g:loaded_python3_provider = 1",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460670422",
            "id": 1460670422,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEA_W",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 4,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/autoload/provider/python3.vim",
            "position": null,
            "pull_request_review_id": 1834732363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460670422/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:49:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460670422",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460670444"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460670444"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    local pynvim_table = vim.provider.python.detect_by_module('pynvim')\r\n```",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:24:04Z",
            "diff_hunk": "@@ -364,7 +364,7 @@ function M.check()\n     -- can import 'pynvim'. If so, that Python failed to import 'neovim' as\n     -- well, which is most probably due to a failed pip upgrade:\n     -- https://github.com/neovim/neovim/wiki/Following-HEAD#20181118\n-    local pynvim_table = vim.fn['provider#pythonx#DetectByModule']('pynvim', 3)\n+    local pynvim_table = vim.provider.detect_by_module('pynvim')",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460670444",
            "id": 1460670444,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEA_s",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 367,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/lua/provider/python/health.lua",
            "position": null,
            "pull_request_review_id": 1834732435,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460670444/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:24:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460670444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460671822"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460671822"
                }
            },
            "author_association": "MEMBER",
            "body": "Note: `vim.provider.python.detect_by_module('pynvim')` would return:\r\n```lua\r\n{ \"/path/to/valid/.venv/bin/python3\", \"\" }  -- ok\r\n{ \"\", \"ERROR: ...\" }  -- error\r\n```\r\n\r\nbecause this function is a direct translation of the vimscript autoload function.\r\n\r\n```suggestion\r\n--- @return {[1]: string, [2]: string}\r\n```\r\nwhere `[1]` is the path to detected python, `[2]` is an error.\r\n\r\nOr a data structure will be better (the vimscript bridge also needs to be adjusted accordingly):\r\n\r\n```suggestion\r\n--- @return { ['executable']: string, ['error']: string }\r\n```\r\n(or equivalent `@class` `@field` etc.)\r\n\r\nBut I think a more Lua-idomatic way would be much better, since this is a new API:\r\n```suggestion\r\n--- @return executable string?  path to detected python, if any; nil or not found\r\n--- @return error string? error message if python can't be detected by {module}; nil if success\r\n```\r\n\r\nThen the only problematic caller will be `let [s:prog, s:err] = ...` because the `v:lua` bridge will strip off the second return value, which however could be addressed by `luaeval`?",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:34:01Z",
            "diff_hunk": "@@ -0,0 +1,163 @@\n+local M = {}\n+local min_version = '3.7'\n+local max_version = '3.12'\n+local s_err = ''\n+local s_host = ''\n+\n+local python_candidates = {\n+  'python3',\n+  'python3.12',\n+  'python3.11',\n+  'python3.10',\n+  'python3.9',\n+  'python3.8',\n+  'python3.7',\n+  'python',\n+}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function check_for_module(prog, module)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return 0, prog .. ' not found in search path or not executable.'\n+  end\n+\n+  --   Try to load module, and output Python version.\n+  --   Exit codes:\n+  --     0  module can be loaded.\n+  --     2  module cannot be loaded.\n+  --     Otherwise something else went wrong (e.g. 1 or 127).\n+  local prog_exitcode, prog_version = import_module(prog, module)\n+  if prog_exitcode == 2 or prog_exitcode == 0 then\n+    -- Check version only for expected return codes.\n+    if vim.version.lt(prog_version, min_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python >= %s.',\n+          prog_path,\n+          prog_version,\n+          min_version\n+        )\n+    elseif vim.version.gt(prog_version, max_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python <= %s.',\n+          prog_path,\n+          prog_version,\n+          max_version\n+        )\n+    end\n+  end\n+\n+  if prog_exitcode == 2 then\n+    return 0, string.format('%s does not have the \"%s\" module.', prog_path, module)\n+  elseif prog_exitcode == 127 then\n+    -- This can happen with pyenv's shims.\n+    return 0, string.format('%s does not exist: %s', prog_path, prog_version)\n+  elseif prog_exitcode ~= 0 then\n+    return 0,\n+      string.format(\n+        'Checking %s caused an unknown error. (%s, output: %s) Report this at https://github.com/neovim/neovim',\n+        prog_path,\n+        prog_exitcode,\n+        prog_version\n+      )\n+  end\n+\n+  return 1, ''\n+end\n+\n+--- @param module string\n+--- @return string[]",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460671822",
            "id": 1460671822,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEBVO",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 80,
            "original_position": 89,
            "original_start_line": null,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1834732363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460671822/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:57:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460671822",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460671984"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460671984"
                }
            },
            "author_association": "MEMBER",
            "body": "Well, I think this seems to be a problem that inherits from the previous vimscript provider, but it doesn't feel quite natural that `g:python3_host_prog` is just picked (also it does not check the availability of the `module`).\r\n\r\nThe current behavior:\r\n\r\n```\r\n:lua vim.g.python3_host_prog = '/path/to/valid/python3'\r\n:= vim.provider.python.detect_by_module('not_existent_module')\r\n{ \"/path/to/valid/python3\", \"\" }\r\n```\r\n\r\nWhat I propose is to move checking `g:python3_host_prog` out of this function so that this function can work as self-described. \r\n\r\nI'm fine with changing this as a separate PR if this PR is more about translating and re-writing the provider in Lua, but I believe we've got a good chance to fix.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:36:09Z",
            "diff_hunk": "@@ -0,0 +1,163 @@\n+local M = {}\n+local min_version = '3.7'\n+local max_version = '3.12'\n+local s_err = ''\n+local s_host = ''\n+\n+local python_candidates = {\n+  'python3',\n+  'python3.12',\n+  'python3.11',\n+  'python3.10',\n+  'python3.9',\n+  'python3.8',\n+  'python3.7',\n+  'python',\n+}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function check_for_module(prog, module)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return 0, prog .. ' not found in search path or not executable.'\n+  end\n+\n+  --   Try to load module, and output Python version.\n+  --   Exit codes:\n+  --     0  module can be loaded.\n+  --     2  module cannot be loaded.\n+  --     Otherwise something else went wrong (e.g. 1 or 127).\n+  local prog_exitcode, prog_version = import_module(prog, module)\n+  if prog_exitcode == 2 or prog_exitcode == 0 then\n+    -- Check version only for expected return codes.\n+    if vim.version.lt(prog_version, min_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python >= %s.',\n+          prog_path,\n+          prog_version,\n+          min_version\n+        )\n+    elseif vim.version.gt(prog_version, max_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python <= %s.',\n+          prog_path,\n+          prog_version,\n+          max_version\n+        )\n+    end\n+  end\n+\n+  if prog_exitcode == 2 then\n+    return 0, string.format('%s does not have the \"%s\" module.', prog_path, module)\n+  elseif prog_exitcode == 127 then\n+    -- This can happen with pyenv's shims.\n+    return 0, string.format('%s does not exist: %s', prog_path, prog_version)\n+  elseif prog_exitcode ~= 0 then\n+    return 0,\n+      string.format(\n+        'Checking %s caused an unknown error. (%s, output: %s) Report this at https://github.com/neovim/neovim',\n+        prog_path,\n+        prog_exitcode,\n+        prog_version\n+      )\n+  end\n+\n+  return 1, ''\n+end\n+\n+--- @param module string\n+--- @return string[]\n+function M.detect_by_module(module)\n+  local python_exe = tostring(vim.fn.expand(vim.g.python3_host_prog or '', true))",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460671984",
            "id": 1460671984,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEBXw",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 83,
            "original_position": 91,
            "original_start_line": null,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1834732363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460671984/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:49:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460671984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460672045"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460672045"
                }
            },
            "author_association": "MEMBER",
            "body": "Also we can go a little bit Lua-idomatic. `nil` for falsy values, not empty strings.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:36:51Z",
            "diff_hunk": "@@ -0,0 +1,163 @@\n+local M = {}\n+local min_version = '3.7'\n+local max_version = '3.12'\n+local s_err = ''\n+local s_host = ''\n+\n+local python_candidates = {\n+  'python3',\n+  'python3.12',\n+  'python3.11',\n+  'python3.10',\n+  'python3.9',\n+  'python3.8',\n+  'python3.7',\n+  'python',\n+}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function check_for_module(prog, module)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return 0, prog .. ' not found in search path or not executable.'\n+  end\n+\n+  --   Try to load module, and output Python version.\n+  --   Exit codes:\n+  --     0  module can be loaded.\n+  --     2  module cannot be loaded.\n+  --     Otherwise something else went wrong (e.g. 1 or 127).\n+  local prog_exitcode, prog_version = import_module(prog, module)\n+  if prog_exitcode == 2 or prog_exitcode == 0 then\n+    -- Check version only for expected return codes.\n+    if vim.version.lt(prog_version, min_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python >= %s.',\n+          prog_path,\n+          prog_version,\n+          min_version\n+        )\n+    elseif vim.version.gt(prog_version, max_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python <= %s.',\n+          prog_path,\n+          prog_version,\n+          max_version\n+        )\n+    end\n+  end\n+\n+  if prog_exitcode == 2 then\n+    return 0, string.format('%s does not have the \"%s\" module.', prog_path, module)\n+  elseif prog_exitcode == 127 then\n+    -- This can happen with pyenv's shims.\n+    return 0, string.format('%s does not exist: %s', prog_path, prog_version)\n+  elseif prog_exitcode ~= 0 then\n+    return 0,\n+      string.format(\n+        'Checking %s caused an unknown error. (%s, output: %s) Report this at https://github.com/neovim/neovim',\n+        prog_path,\n+        prog_exitcode,\n+        prog_version\n+      )\n+  end\n+\n+  return 1, ''\n+end\n+\n+--- @param module string\n+--- @return string[]\n+function M.detect_by_module(module)\n+  local python_exe = tostring(vim.fn.expand(vim.g.python3_host_prog or '', true))",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460672045",
            "id": 1460672045,
            "in_reply_to_id": 1460671984,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEBYt",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 83,
            "original_position": 91,
            "original_start_line": null,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1834732363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460672045/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:49:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460672045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460673496"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460673496"
                }
            },
            "author_association": "MEMBER",
            "body": "Related to the comment on `runtime/lua/vim/provider/python.lua`.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:46:59Z",
            "diff_hunk": "@@ -938,10 +938,9 @@ function module.missing_provider(provider)\n     --- @type string?\n     local e = module.fn['provider#' .. provider .. '#Detect']()[2]\n     return e ~= '' and e or false\n-  elseif provider == 'python' or provider == 'python3' then\n-    local py_major_version = (provider == 'python3' and 3 or 2)\n+  elseif provider == 'python' then\n     --- @type string?\n-    local e = module.fn['provider#pythonx#Detect'](py_major_version)[2]\n+    local e = module.exec_lua(\"return vim.provider.python.detect_by_module('neovim')[2]\")",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460673496",
            "id": 1460673496,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEBvY",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 943,
            "original_position": 9,
            "original_start_line": null,
            "path": "test/functional/helpers.lua",
            "position": null,
            "pull_request_review_id": 1834732363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460673496/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:49:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460673496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460673539"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460673539"
                }
            },
            "author_association": "MEMBER",
            "body": "`python3` or `python` (consistency)? Or is it like getting prepared for python4 in the future?",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:47:28Z",
            "diff_hunk": "@@ -13,7 +13,7 @@ local dedent = helpers.dedent\n \n do\n   clear()\n-  local reason = missing_provider('python3')\n+  local reason = missing_provider('python')",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460673539",
            "id": 1460673539,
            "line": 16,
            "node_id": "PRRC_kwDOAPphoM5XEBwD",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 16,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/provider/python3_spec.lua",
            "position": 5,
            "pull_request_review_id": 1834732363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460673539/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:49:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460673539",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460674001"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674001"
                }
            },
            "author_association": "MEMBER",
            "body": "If we are doing this, then we should make the `vim.provider.python` module lazy-loaded from `vim.provider` (which will be always executed on startup!). ",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:51:35Z",
            "diff_hunk": "@@ -1,45 +1,16 @@\n-\" The Python3 provider uses a Python3 host to emulate an environment for running\n-\" python3 plugins. :help provider\n-\"\n-\" Associating the plugin with the Python3 host is the first step because\n-\" plugins will be passed as command-line arguments\n-\n if exists('g:loaded_python3_provider')\n   finish\n endif\n-let [s:prog, s:err] = provider#pythonx#Detect(3)\n-let g:loaded_python3_provider = empty(s:prog) ? 1 : 2\n+let g:loaded_python3_provider = 1\n \n-function! provider#python3#Prog() abort\n-  return s:prog\n+function! provider#python3#Call(method, args) abort\n+  return v:lua.vim.provider.python.call(a:method, a:args)",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460674001",
            "id": 1460674001,
            "in_reply_to_id": 1460669828,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEB3R",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 7,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/autoload/provider/python3.vim",
            "position": null,
            "pull_request_review_id": 1834735105,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674001/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:51:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460674611"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674611"
                }
            },
            "author_association": "MEMBER",
            "body": "Shall I revert this?",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:57:26Z",
            "diff_hunk": "@@ -13,7 +13,7 @@ local dedent = helpers.dedent\n \n do\n   clear()\n-  local reason = missing_provider('python3')\n+  local reason = missing_provider('python')",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460674611",
            "id": 1460674611,
            "in_reply_to_id": 1460673539,
            "line": 16,
            "node_id": "PRRC_kwDOAPphoM5XECAz",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 16,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/provider/python3_spec.lua",
            "position": 5,
            "pull_request_review_id": 1834735515,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674611/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:57:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674611",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460674682"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674682"
                }
            },
            "author_association": "MEMBER",
            "body": "Idk, didn't wanna forget it in case the one on line 15 was removed. I'll remove it.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:57:58Z",
            "diff_hunk": "@@ -1,45 +1,16 @@\n-\" The Python3 provider uses a Python3 host to emulate an environment for running\n-\" python3 plugins. :help provider\n-\"\n-\" Associating the plugin with the Python3 host is the first step because\n-\" plugins will be passed as command-line arguments\n-\n if exists('g:loaded_python3_provider')\n   finish\n endif\n-let [s:prog, s:err] = provider#pythonx#Detect(3)\n-let g:loaded_python3_provider = empty(s:prog) ? 1 : 2\n+let g:loaded_python3_provider = 1",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460674682",
            "id": 1460674682,
            "in_reply_to_id": 1460670422,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XECB6",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 4,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/autoload/provider/python3.vim",
            "position": null,
            "pull_request_review_id": 1834735562,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674682/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T21:57:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674682",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460674762"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674762"
                }
            },
            "author_association": "MEMBER",
            "body": "I think `python` is OK, because in general I think it'd be great to rename the name of provider `python3` to `python` in this opportunity. The lua module is also named `vim.provider.python` not `vim.provider.python3`. But we must keep the backward compatibility (e.g. `g:python\"3\"_host_prog`, etc.). This will require more discussion and decision among the team.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T21:59:17Z",
            "diff_hunk": "@@ -13,7 +13,7 @@ local dedent = helpers.dedent\n \n do\n   clear()\n-  local reason = missing_provider('python3')\n+  local reason = missing_provider('python')",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460674762",
            "id": 1460674762,
            "in_reply_to_id": 1460673539,
            "line": 16,
            "node_id": "PRRC_kwDOAPphoM5XECDK",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 16,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/provider/python3_spec.lua",
            "position": 5,
            "pull_request_review_id": 1834735648,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674762/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T22:01:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460674762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460675507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460675507"
                }
            },
            "author_association": "MEMBER",
            "body": "If you say this is fine then it's fine. If anyone disagrees they can bring it up themselves.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T22:05:46Z",
            "diff_hunk": "@@ -13,7 +13,7 @@ local dedent = helpers.dedent\n \n do\n   clear()\n-  local reason = missing_provider('python3')\n+  local reason = missing_provider('python')",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460675507",
            "id": 1460675507,
            "in_reply_to_id": 1460673539,
            "line": 16,
            "node_id": "PRRC_kwDOAPphoM5XECOz",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 16,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/provider/python3_spec.lua",
            "position": 5,
            "pull_request_review_id": 1834736179,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460675507/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T22:05:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460675507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460676834"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460676834"
                }
            },
            "author_association": "MEMBER",
            "body": "These functions are not documented and IIUC were meant to be internal implementation. We should be able to remove private functions without needing to deprecate them.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T22:09:01Z",
            "diff_hunk": "@@ -1,45 +1,16 @@\n-\" The Python3 provider uses a Python3 host to emulate an environment for running\n-\" python3 plugins. :help provider\n-\"\n-\" Associating the plugin with the Python3 host is the first step because\n-\" plugins will be passed as command-line arguments\n-\n if exists('g:loaded_python3_provider')\n   finish\n endif\n-let [s:prog, s:err] = provider#pythonx#Detect(3)\n-let g:loaded_python3_provider = empty(s:prog) ? 1 : 2\n+let g:loaded_python3_provider = 1\n \n-function! provider#python3#Prog() abort",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460676834",
            "id": 1460676834,
            "in_reply_to_id": 1460670374,
            "line": 13,
            "node_id": "PRRC_kwDOAPphoM5XECji",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 13,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/autoload/provider/python3.vim",
            "position": 13,
            "pull_request_review_id": 1834736506,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460676834/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-21T12:36:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460676834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460677493"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460677493"
                }
            },
            "author_association": "MEMBER",
            "body": "This will throw once python version becomes 3.13 (and if Neovim is frozen..)\r\n\r\nBut why do want to have a maximum version? It didn't exist before, so I suggest we remove `max_version`. Python version compatibility will be mostly determined by `pynvim`, so I think it'd be good to remain open for forward compatibility.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T22:10:13Z",
            "diff_hunk": "@@ -0,0 +1,163 @@\n+local M = {}\n+local min_version = '3.7'\n+local max_version = '3.12'\n+local s_err = ''\n+local s_host = ''\n+\n+local python_candidates = {\n+  'python3',\n+  'python3.12',\n+  'python3.11',\n+  'python3.10',\n+  'python3.9',\n+  'python3.8',\n+  'python3.7',\n+  'python',\n+}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function check_for_module(prog, module)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return 0, prog .. ' not found in search path or not executable.'\n+  end\n+\n+  --   Try to load module, and output Python version.\n+  --   Exit codes:\n+  --     0  module can be loaded.\n+  --     2  module cannot be loaded.\n+  --     Otherwise something else went wrong (e.g. 1 or 127).\n+  local prog_exitcode, prog_version = import_module(prog, module)\n+  if prog_exitcode == 2 or prog_exitcode == 0 then\n+    -- Check version only for expected return codes.\n+    if vim.version.lt(prog_version, min_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python >= %s.',\n+          prog_path,\n+          prog_version,\n+          min_version\n+        )\n+    elseif vim.version.gt(prog_version, max_version) then",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460677493",
            "id": 1460677493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XECt1",
            "original_commit_id": "57c42206dd6da9d2f7989df45b930abd7a324b6b",
            "original_line": 59,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1834736615,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460677493/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T22:10:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460677493",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460682288"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460682288"
                }
            },
            "author_association": "MEMBER",
            "body": "https://github.com/neovim/neovim/pull/26941#discussion_r1451520759\r\n\r\nMaybe I misunderstood the comment, will recheck",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-20T22:22:20Z",
            "diff_hunk": "@@ -0,0 +1,163 @@\n+local M = {}\n+local min_version = '3.7'\n+local max_version = '3.12'\n+local s_err = ''\n+local s_host = ''\n+\n+local python_candidates = {\n+  'python3',\n+  'python3.12',\n+  'python3.11',\n+  'python3.10',\n+  'python3.9',\n+  'python3.8',\n+  'python3.7',\n+  'python',\n+}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function check_for_module(prog, module)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return 0, prog .. ' not found in search path or not executable.'\n+  end\n+\n+  --   Try to load module, and output Python version.\n+  --   Exit codes:\n+  --     0  module can be loaded.\n+  --     2  module cannot be loaded.\n+  --     Otherwise something else went wrong (e.g. 1 or 127).\n+  local prog_exitcode, prog_version = import_module(prog, module)\n+  if prog_exitcode == 2 or prog_exitcode == 0 then\n+    -- Check version only for expected return codes.\n+    if vim.version.lt(prog_version, min_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python >= %s.',\n+          prog_path,\n+          prog_version,\n+          min_version\n+        )\n+    elseif vim.version.gt(prog_version, max_version) then",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460682288",
            "id": 1460682288,
            "in_reply_to_id": 1460677493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XED4w",
            "original_commit_id": "57c42206dd6da9d2f7989df45b930abd7a324b6b",
            "original_line": 59,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1834737493,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460682288/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T22:22:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460682288",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460839354"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460839354"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, you're right, it didn't exist before. Removing it.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-21T12:16:13Z",
            "diff_hunk": "@@ -0,0 +1,163 @@\n+local M = {}\n+local min_version = '3.7'\n+local max_version = '3.12'\n+local s_err = ''\n+local s_host = ''\n+\n+local python_candidates = {\n+  'python3',\n+  'python3.12',\n+  'python3.11',\n+  'python3.10',\n+  'python3.9',\n+  'python3.8',\n+  'python3.7',\n+  'python',\n+}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function check_for_module(prog, module)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return 0, prog .. ' not found in search path or not executable.'\n+  end\n+\n+  --   Try to load module, and output Python version.\n+  --   Exit codes:\n+  --     0  module can be loaded.\n+  --     2  module cannot be loaded.\n+  --     Otherwise something else went wrong (e.g. 1 or 127).\n+  local prog_exitcode, prog_version = import_module(prog, module)\n+  if prog_exitcode == 2 or prog_exitcode == 0 then\n+    -- Check version only for expected return codes.\n+    if vim.version.lt(prog_version, min_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python >= %s.',\n+          prog_path,\n+          prog_version,\n+          min_version\n+        )\n+    elseif vim.version.gt(prog_version, max_version) then",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460839354",
            "id": 1460839354,
            "in_reply_to_id": 1460677493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEqO6",
            "original_commit_id": "57c42206dd6da9d2f7989df45b930abd7a324b6b",
            "original_line": 59,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1835331611,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460839354/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-21T12:16:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460839354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460872114"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460872114"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm willing to fix low-hanging problems if they don't take too much time, otherwise I'll leave it as an exercise for the reader.\r\n\r\nHonestly I have no clue wtf is happening in `detect_by_module` so I'm hesistant to even touch it. Why would detecting python version dependent on the module?",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-21T13:16:34Z",
            "diff_hunk": "@@ -0,0 +1,163 @@\n+local M = {}\n+local min_version = '3.7'\n+local max_version = '3.12'\n+local s_err = ''\n+local s_host = ''\n+\n+local python_candidates = {\n+  'python3',\n+  'python3.12',\n+  'python3.11',\n+  'python3.10',\n+  'python3.9',\n+  'python3.8',\n+  'python3.7',\n+  'python',\n+}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function check_for_module(prog, module)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return 0, prog .. ' not found in search path or not executable.'\n+  end\n+\n+  --   Try to load module, and output Python version.\n+  --   Exit codes:\n+  --     0  module can be loaded.\n+  --     2  module cannot be loaded.\n+  --     Otherwise something else went wrong (e.g. 1 or 127).\n+  local prog_exitcode, prog_version = import_module(prog, module)\n+  if prog_exitcode == 2 or prog_exitcode == 0 then\n+    -- Check version only for expected return codes.\n+    if vim.version.lt(prog_version, min_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python >= %s.',\n+          prog_path,\n+          prog_version,\n+          min_version\n+        )\n+    elseif vim.version.gt(prog_version, max_version) then\n+      return 0,\n+        string.format(\n+          '%s is Python %s and cannot provide Python <= %s.',\n+          prog_path,\n+          prog_version,\n+          max_version\n+        )\n+    end\n+  end\n+\n+  if prog_exitcode == 2 then\n+    return 0, string.format('%s does not have the \"%s\" module.', prog_path, module)\n+  elseif prog_exitcode == 127 then\n+    -- This can happen with pyenv's shims.\n+    return 0, string.format('%s does not exist: %s', prog_path, prog_version)\n+  elseif prog_exitcode ~= 0 then\n+    return 0,\n+      string.format(\n+        'Checking %s caused an unknown error. (%s, output: %s) Report this at https://github.com/neovim/neovim',\n+        prog_path,\n+        prog_exitcode,\n+        prog_version\n+      )\n+  end\n+\n+  return 1, ''\n+end\n+\n+--- @param module string\n+--- @return string[]\n+function M.detect_by_module(module)\n+  local python_exe = tostring(vim.fn.expand(vim.g.python3_host_prog or '', true))",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460872114",
            "id": 1460872114,
            "in_reply_to_id": 1460671984,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEyOy",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 83,
            "original_position": 91,
            "original_start_line": null,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": null,
            "pull_request_review_id": 1835341424,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460872114/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-21T13:16:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460872114",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460912864"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460912864"
                }
            },
            "author_association": "MEMBER",
            "body": "No longer needed\r\n```suggestion\r\n```",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-21T14:24:16Z",
            "diff_hunk": "@@ -40,6 +40,7 @@ for k, v in pairs({\n   secure = true,\n   snippet = true,\n   _watch = true,\n+  provider = true,",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460912864",
            "id": 1460912864,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XE8Lg",
            "original_commit_id": "d044870569090de7e76af5c880eef031b03f5ec1",
            "original_line": 43,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1835355073,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460912864/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-21T14:24:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460912864",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1460912965"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460912965"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-21T14:24:24Z",
            "diff_hunk": "@@ -60,6 +60,7 @@ vim._submodules = {\n   iter = true,\n   re = true,\n   text = true,\n+  provider = true,",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1460912965",
            "id": 1460912965,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XE8NF",
            "original_commit_id": "d044870569090de7e76af5c880eef031b03f5ec1",
            "original_line": 63,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_init_packages.lua",
            "position": null,
            "pull_request_review_id": 1835355073,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460912965/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-21T14:24:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460912965",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1461024325"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1461024325"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm already fine with removing `vim.provider` which is currently done, but another possible solution is to use lazy-loading in `vim.provider` as in `vim.treesitter`: See \r\nTreesitterModule, https://github.com/neovim/neovim/blob/master/runtime/lua/vim/treesitter.lua#L7-L13 so we don't need to do `require('vim.treesitter.python')` but simply `vim.treesitter`.",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-21T18:00:49Z",
            "diff_hunk": "@@ -1,45 +1,16 @@\n-\" The Python3 provider uses a Python3 host to emulate an environment for running\n-\" python3 plugins. :help provider\n-\"\n-\" Associating the plugin with the Python3 host is the first step because\n-\" plugins will be passed as command-line arguments\n-\n if exists('g:loaded_python3_provider')\n   finish\n endif\n-let [s:prog, s:err] = provider#pythonx#Detect(3)\n-let g:loaded_python3_provider = empty(s:prog) ? 1 : 2\n+let g:loaded_python3_provider = 1\n \n-function! provider#python3#Prog() abort\n-  return s:prog\n+function! provider#python3#Call(method, args) abort\n+  return v:lua.vim.provider.python.call(a:method, a:args)",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1461024325",
            "id": 1461024325,
            "in_reply_to_id": 1460669828,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XFXZF",
            "original_commit_id": "0c7ad223f9f644c522364b49bb3de37b598dbcd4",
            "original_line": 7,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/autoload/provider/python3.vim",
            "position": null,
            "pull_request_review_id": 1835388978,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1461024325/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-21T18:00:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1461024325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1462010567"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1462010567"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this can be nil. need to throw errors (with the second arg)",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-22T15:15:06Z",
            "diff_hunk": "@@ -0,0 +1,150 @@\n+local M = {}\n+local min_version = '3.7'\n+local s_err ---@type string?\n+local s_host ---@type string?\n+\n+local python_candidates = {\n+  'python3',\n+  'python3.12',\n+  'python3.11',\n+  'python3.10',\n+  'python3.9',\n+  'python3.8',\n+  'python3.7',\n+  'python',\n+}\n+\n+--- @param prog string\n+--- @param module string\n+--- @return integer, string\n+local function import_module(prog, module)\n+  local program = [[\n+import sys, importlib.util;\n+sys.path = [p for p in sys.path if p != \"\"];\n+sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]));]]\n+\n+  program = program\n+    .. string.format('sys.exit(2 * int(importlib.util.find_spec(\"%s\") is None))', module)\n+\n+  local out = vim.system({ prog, '-W', 'ignore', '-c', program }):wait()\n+  return out.code, assert(out.stdout)\n+end\n+\n+--- @param prog string\n+--- @param module string\n+--- @return string?\n+local function check_for_module(prog, module)\n+  local prog_path = vim.fn.exepath(prog)\n+  if prog_path == '' then\n+    return prog .. ' not found in search path or not executable.'\n+  end\n+\n+  --   Try to load module, and output Python version.\n+  --   Exit codes:\n+  --     0  module can be loaded.\n+  --     2  module cannot be loaded.\n+  --     Otherwise something else went wrong (e.g. 1 or 127).\n+  local prog_exitcode, prog_version = import_module(prog, module)\n+  if prog_exitcode == 2 or prog_exitcode == 0 then\n+    -- Check version only for expected return codes.\n+    if vim.version.lt(prog_version, min_version) then\n+      return string.format(\n+        '%s is Python %s and cannot provide Python >= %s.',\n+        prog_path,\n+        prog_version,\n+        min_version\n+      )\n+    end\n+  end\n+\n+  if prog_exitcode == 2 then\n+    return string.format('%s does not have the \"%s\" module.', prog_path, module)\n+  elseif prog_exitcode == 127 then\n+    -- This can happen with pyenv's shims.\n+    return string.format('%s does not exist: %s', prog_path, prog_version)\n+  elseif prog_exitcode ~= 0 then\n+    return string.format(\n+      'Checking %s caused an unknown error. (%s, output: %s) Report this at https://github.com/neovim/neovim',\n+      prog_path,\n+      prog_exitcode,\n+      prog_version\n+    )\n+  end\n+\n+  return nil\n+end\n+\n+--- @param module string\n+--- @return string? path to detected python, if any; nil if not found\n+--- @return string? error message if python can't be detected by {module}; nil if success\n+function M.detect_by_module(module)\n+  local python_exe = vim.fn.expand(vim.g.python3_host_prog or '', true)\n+\n+  if python_exe ~= '' then\n+    return vim.fn.exepath(vim.fn.expand(python_exe, true)), nil\n+  end\n+\n+  local errors = {}\n+  for _, exe in ipairs(python_candidates) do\n+    local error = check_for_module(exe, module)\n+    if not error then\n+      return exe, error\n+    end\n+    -- Accumulate errors in case we don't find any suitable Python executable.\n+    table.insert(errors, error)\n+  end\n+\n+  -- No suitable Python executable found.\n+  return nil, 'Could not load Python :\\n' .. table.concat(errors, '\\n')\n+end\n+\n+function M.require(host)\n+  -- Python host arguments\n+  local prog = M.detect_by_module('neovim')",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1462010567",
            "id": 1462010567,
            "line": 103,
            "node_id": "PRRC_kwDOAPphoM5XJILH",
            "original_commit_id": "94b2f2dd3712f2d6dbb01562682ed1f2734572cc",
            "original_line": 103,
            "original_position": 103,
            "original_start_line": null,
            "path": "runtime/lua/vim/provider/python.lua",
            "position": 103,
            "pull_request_review_id": 1836714114,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1462010567/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-22T21:38:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1462010567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26941#discussion_r1462442069"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26941"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1462442069"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  return v:lua.require('vim.provider.python').call(a:method, a:args)\r\n```\r\n\r\nIt'd be a nit-picking, but can we use `v:lua.require(...)` instead (three similar ones)? The reason is because vimlsp complains about `'` these (E488: Trailing characters: ')",
            "commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "created_at": "2024-01-22T21:27:09Z",
            "diff_hunk": "@@ -1,45 +1,15 @@\n-\" The Python3 provider uses a Python3 host to emulate an environment for running\n-\" python3 plugins. :help provider\n-\"\n-\" Associating the plugin with the Python3 host is the first step because\n-\" plugins will be passed as command-line arguments\n-\n if exists('g:loaded_python3_provider')\n   finish\n endif\n-let [s:prog, s:err] = provider#pythonx#Detect(3)\n-let g:loaded_python3_provider = empty(s:prog) ? 1 : 2\n \n-function! provider#python3#Prog() abort\n-  return s:prog\n+function! provider#python3#Call(method, args) abort\n+  return v:lua.require'vim.provider.python'.call(a:method, a:args)",
            "html_url": "https://github.com/neovim/neovim/pull/26941#discussion_r1462442069",
            "id": 1462442069,
            "line": 6,
            "node_id": "PRRC_kwDOAPphoM5XKxhV",
            "original_commit_id": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
            "original_line": 6,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/autoload/provider/python3.vim",
            "position": 16,
            "pull_request_review_id": 1836714114,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1462442069/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-22T22:14:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1462442069",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I'd consider this done. Review away.\r\n\r\nI haven't removed `runtime/autoload/provider/python3.vim` as I suspect it'll be easier to remove all the `#Call` and `#Require` functions for all providers at the same time.",
            "created_at": "2024-01-20T21:04:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/26941#issuecomment-1902264908",
            "id": 1902264908,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26941",
            "node_id": "IC_kwDOAPphoM5xYkJM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902264908/reactions"
            },
            "updated_at": "2024-01-20T21:04:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902264908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is useful work, but I also want to note a general direction we should consider: move all such providers to `vim.ui` (or possibly some other Lua module): #27119\r\n\r\nThe old `{runtime}/provider/*` pattern is basically unnecessary since Lua monkey-patching is actually more flexible (and allows stacking, unlike the old pattern). ",
            "created_at": "2024-01-21T19:53:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/26941#issuecomment-1902742833",
            "id": 1902742833,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26941",
            "node_id": "IC_kwDOAPphoM5xaY0x",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902742833/reactions"
            },
            "updated_at": "2024-01-21T19:57:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902742833",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk unsure if you just mean I should move all of the functions into `runtime/lua/vim/ui.lua` or if you had something else in mind? I'm not that familiar with the provider code so I don't really know what you have in mind.",
            "created_at": "2024-01-21T20:28:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/26941#issuecomment-1902752863",
            "id": 1902752863,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26941",
            "node_id": "IC_kwDOAPphoM5xabRf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902752863/reactions"
            },
            "updated_at": "2024-01-21T20:28:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902752863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk Current providers are just for C to call into from :py, :ruby, :perl, clipboard etc. though, I don't think they contain anything relevant to UI? I don't know the history, but was it ever meant to be changed by the user? Except some basic config, like python interpreter path etc",
            "created_at": "2024-01-21T20:41:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/26941#issuecomment-1902757701",
            "id": 1902757701,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26941",
            "node_id": "IC_kwDOAPphoM5xacdF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902757701/reactions"
            },
            "updated_at": "2024-01-21T20:41:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902757701",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @justinmk unsure if you just mean I should move all of the functions into `runtime/lua/vim/ui.lua` or if you had something else in mind?\r\n\r\nNo changes needed in this PR. \r\n\r\n> @justinmk Current providers are just for C to call into from :py, :ruby, :perl, clipboard etc. though, I don't think they contain anything relevant to UI?\r\n\r\nPlease discuss in https://github.com/neovim/neovim/issues/27119\r\n\r\n> I don't know the history, but was it ever meant to be changed by the user?\r\n\r\nYes, the entire \"provider\" model was intended to be overridable. Clipboard is the most obvious example. It didn't work well because they can't be stacked or inherited.",
            "created_at": "2024-01-21T22:51:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/26941#issuecomment-1902792829",
            "id": 1902792829,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26941",
            "node_id": "IC_kwDOAPphoM5xalB9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902792829/reactions"
            },
            "updated_at": "2024-01-21T22:51:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902792829",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26941/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26941/commits",
    "created_at": "2024-01-07T13:56:14Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26941.diff",
    "draft": false,
    "head": {
        "label": "dundargoc:refactor/provider/python",
        "ref": "refactor/provider/python",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/dundargoc/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/dundargoc/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/dundargoc/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/dundargoc/neovim/branches{/branch}",
            "clone_url": "https://github.com/dundargoc/neovim.git",
            "collaborators_url": "https://api.github.com/repos/dundargoc/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/dundargoc/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/dundargoc/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/dundargoc/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/dundargoc/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/dundargoc/neovim/contributors",
            "created_at": "2021-06-20T10:14:48Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/dundargoc/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/dundargoc/neovim/downloads",
            "events_url": "https://api.github.com/repos/dundargoc/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/dundargoc/neovim/forks",
            "full_name": "dundargoc/neovim",
            "git_commits_url": "https://api.github.com/repos/dundargoc/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/dundargoc/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/dundargoc/neovim/git/tags{/sha}",
            "git_url": "git://github.com/dundargoc/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": false,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/dundargoc/neovim/hooks",
            "html_url": "https://github.com/dundargoc/neovim",
            "id": 378614899,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/dundargoc/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/dundargoc/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/dundargoc/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/dundargoc/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/dundargoc/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/dundargoc/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/dundargoc/neovim/merges",
            "milestones_url": "https://api.github.com/repos/dundargoc/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzg2MTQ4OTk=",
            "notifications_url": "https://api.github.com/repos/dundargoc/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/dundargoc/neovim/pulls{/number}",
            "pushed_at": "2024-01-22T23:42:26Z",
            "releases_url": "https://api.github.com/repos/dundargoc/neovim/releases{/id}",
            "size": 247813,
            "ssh_url": "git@github.com:dundargoc/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/dundargoc/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/dundargoc/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/dundargoc/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/dundargoc/neovim/subscription",
            "svn_url": "https://github.com/dundargoc/neovim",
            "tags_url": "https://api.github.com/repos/dundargoc/neovim/tags",
            "teams_url": "https://api.github.com/repos/dundargoc/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/dundargoc/neovim/git/trees{/sha}",
            "updated_at": "2023-07-31T17:43:26Z",
            "url": "https://api.github.com/repos/dundargoc/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
            "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
            "followers_url": "https://api.github.com/users/dundargoc/followers",
            "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
            "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/dundargoc",
            "id": 33953936,
            "login": "dundargoc",
            "node_id": "MDQ6VXNlcjMzOTUzOTM2",
            "organizations_url": "https://api.github.com/users/dundargoc/orgs",
            "received_events_url": "https://api.github.com/users/dundargoc/received_events",
            "repos_url": "https://api.github.com/users/dundargoc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/dundargoc"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26941",
    "id": 1667754905,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26941",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 144672485,
            "name": "provider",
            "node_id": "MDU6TGFiZWwxNDQ2NzI0ODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/provider"
        }
    ],
    "locked": false,
    "merge_commit_sha": "eb5d15e3838f53e2fcd25989c88db87458e9f984",
    "merged_at": "2024-01-22T21:36:40Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 252,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": "2024-03-01T08:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 134,
        "state": "open",
        "title": "0.10",
        "updated_at": "2024-01-22T22:15:07Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "PR_kwDOAPphoM5jZ-uZ",
    "number": 26941,
    "patch_url": "https://github.com/neovim/neovim/pull/26941.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26941/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/09d8f13c9d05e4f7b5615dc61df5c8b4ececd8bd",
    "title": "refactor: rewrite python provider in lua",
    "updated_at": "2024-01-22T22:15:07Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26941",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
        "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
        "followers_url": "https://api.github.com/users/dundargoc/followers",
        "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
        "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dundargoc",
        "id": 33953936,
        "login": "dundargoc",
        "node_id": "MDQ6VXNlcjMzOTUzOTM2",
        "organizations_url": "https://api.github.com/users/dundargoc/orgs",
        "received_events_url": "https://api.github.com/users/dundargoc/received_events",
        "repos_url": "https://api.github.com/users/dundargoc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dundargoc"
    }
}