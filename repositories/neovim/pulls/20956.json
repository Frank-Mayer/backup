{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/20956/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/20956/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/20956"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/20956"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/20956/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5259,
            "forks_count": 5259,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1730,
            "open_issues_count": 1730,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-02-20T01:37:56Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 253965,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 74120,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-02-20T01:31:12Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 74120,
            "watchers_count": 74120,
            "web_commit_signoff_required": false
        },
        "sha": "9736605672e8648bbe8739a6fdd1c315183bce40",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Add the `vim.secure.read()` function in Lua which prompts the user whether the given file is trusted or not. This function is used to implement the `'exrc'` feature. By explicitly asking the user whether or not a `.nvimrc` or `.exrc` file is trusted (and only sourcing the file if so), the most trivial security issues with the `'exrc'` options are resolved and the function can be un-deprecated.\r\n\r\nCloses #20911.",
    "closed_at": "2022-11-17T15:47:42Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014756236"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014756236"
                }
            },
            "author_association": "MEMBER",
            "body": "Since this is just a lua function, is having `opts` necessary if it's unused? Adding it later on if needed won't break anything.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T01:51:00Z",
            "diff_hunk": "@@ -892,6 +892,108 @@ function vim._init_default_mappings()\n   ]])\n end\n \n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---@param opts (table|nil) Options (currently unused).",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014756236",
            "id": 1014756236,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48e_OM",
            "original_commit_id": "801c8197610d567fc3c5195232dc780427a386e4",
            "original_line": 900,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1169534038,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014756236/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T02:10:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014756236",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014756332"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014756332"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim.validate` arguments?\r\n\r\nAlso, maybe it could be its own module, like `vim.secure.read(...)`. Then we can add more functions later, like `vim.secure.trust(path)` to manage trusted files programmatically.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T01:52:36Z",
            "diff_hunk": "@@ -892,6 +892,108 @@ function vim._init_default_mappings()\n   ]])\n end\n \n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---@param opts (table|nil) Options (currently unused).\n+---\n+---@return (string|nil) The contents of the given file if it is trusted, or nil\n+---                     otherwise.\n+function vim.readsecure(path, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014756332",
            "id": 1014756332,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48e_Ps",
            "original_commit_id": "801c8197610d567fc3c5195232dc780427a386e4",
            "original_line": 904,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1169534038,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014756332/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T02:10:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014756332",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014757101"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014757101"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    vim.api.nvim_set_current_buf(buf)\r\n```",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T02:02:54Z",
            "diff_hunk": "@@ -892,6 +892,108 @@ function vim._init_default_mappings()\n   ]])\n end\n \n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---@param opts (table|nil) Options (currently unused).\n+---\n+---@return (string|nil) The contents of the given file if it is trusted, or nil\n+---                     otherwise.\n+function vim.readsecure(path, opts)\n+  local fullpath = vim.fn.fnamemodify(vim.fs.normalize(path), ':p')\n+  local trust = {}\n+  do\n+    local f = io.open(vim.fn.stdpath('state') .. '/trust', 'r')\n+    if f then\n+      local contents = f:read('*a')\n+      if contents then\n+        for line in vim.gsplit(contents, '\\n') do\n+          local hash, file = string.match(line, '^(%S+) (.+)$')\n+          if hash and file then\n+            trust[file] = hash\n+          end\n+        end\n+      end\n+      f:close()\n+    end\n+  end\n+\n+  if trust[fullpath] == '!' then\n+    -- File is blacklisted\n+    return nil\n+  end\n+\n+  local contents\n+  do\n+    local f = io.open(fullpath, 'r')\n+    if not f then\n+      return nil\n+    end\n+    contents = f:read('*a')\n+    f:close()\n+  end\n+\n+  local hash = vim.fn.sha256(contents)\n+  if trust[fullpath] == hash then\n+    -- File already exists in trust database\n+    return contents\n+  end\n+\n+  -- File either does not exist in trust database or the hash does not match\n+  local choice = vim.fn.confirm(\n+    string.format('%s is not trusted.', fullpath),\n+    '&ignore\\n&view\\n&blacklist\\n&trust',\n+    1\n+  )\n+\n+  if choice == 0 or choice == 1 then\n+    -- Cancelled or ignored\n+    return nil\n+  elseif choice == 2 then\n+    -- View\n+    local buf = vim.api.nvim_create_buf(false, true)\n+    local lines = vim.split(contents, '\\n')\n+\n+    -- Trim trailing newline\n+    if lines[#lines] == '' then\n+      lines[#lines] = nil\n+    end\n+\n+    vim.api.nvim_buf_set_lines(buf, 0, -1, false, lines)\n+    vim.cmd('new')\n+    local win = vim.api.nvim_get_current_win()\n+    vim.api.nvim_win_set_buf(win, buf)",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014757101",
            "id": 1014757101,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48e_bt",
            "original_commit_id": "f7ef695b4bec0e15a8d6dcdf69c625f31c59b6ac",
            "original_line": 967,
            "original_position": 76,
            "original_start_line": 966,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1169534038,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014757101/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-11-06T02:10:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014757101",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014757615"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014757615"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim` and the returned string is not popped from the stack. Popping the string from the stack could free the string, so I think it just has to be copied. `lua_tolstring` will also return the length, that can be used for malloc and memcpy",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T02:10:11Z",
            "diff_hunk": "@@ -2177,3 +2177,14 @@ char *nlua_funcref_str(LuaRef ref)\n   kv_printf(str, \"<Lua %d>\", ref);\n   return str.items;\n }\n+\n+const char *nlua_read_secure(const char *path)\n+{\n+  lua_State *const lstate = global_lstate;\n+  lua_getglobal(lstate, \"vim\");\n+  lua_getfield(lstate, -1, \"readsecure\");\n+  lua_pushstring(lstate, path);\n+  lua_newtable(lstate);\n+  lua_call(lstate, 2, 1);\n+  return lua_tostring(lstate, -1);",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014757615",
            "id": 1014757615,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48e_jv",
            "original_commit_id": "f7ef695b4bec0e15a8d6dcdf69c625f31c59b6ac",
            "original_line": 2189,
            "original_position": 13,
            "original_start_line": null,
            "path": "src/nvim/lua/executor.c",
            "position": null,
            "pull_request_review_id": 1169534038,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014757615/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T02:10:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014757615",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014761520"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761520"
                }
            },
            "author_association": "MEMBER",
            "body": "Fixed in 4a2674d4effcdb7a742926000cc9de6d3522c3f0",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T03:03:24Z",
            "diff_hunk": "@@ -2177,3 +2177,14 @@ char *nlua_funcref_str(LuaRef ref)\n   kv_printf(str, \"<Lua %d>\", ref);\n   return str.items;\n }\n+\n+const char *nlua_read_secure(const char *path)\n+{\n+  lua_State *const lstate = global_lstate;\n+  lua_getglobal(lstate, \"vim\");\n+  lua_getfield(lstate, -1, \"readsecure\");\n+  lua_pushstring(lstate, path);\n+  lua_newtable(lstate);\n+  lua_call(lstate, 2, 1);\n+  return lua_tostring(lstate, -1);",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014761520",
            "id": 1014761520,
            "in_reply_to_id": 1014757615,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48fAgw",
            "original_commit_id": "f7ef695b4bec0e15a8d6dcdf69c625f31c59b6ac",
            "original_line": 2189,
            "original_position": 13,
            "original_start_line": null,
            "path": "src/nvim/lua/executor.c",
            "position": null,
            "pull_request_review_id": 1169537532,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761520/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T03:03:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014761544"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761544"
                }
            },
            "author_association": "MEMBER",
            "body": "Fixed in 864ad2711dd8a1955b6839d3d17108504a129488",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T03:03:41Z",
            "diff_hunk": "@@ -892,6 +892,108 @@ function vim._init_default_mappings()\n   ]])\n end\n \n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---@param opts (table|nil) Options (currently unused).",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014761544",
            "id": 1014761544,
            "in_reply_to_id": 1014756236,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48fAhI",
            "original_commit_id": "801c8197610d567fc3c5195232dc780427a386e4",
            "original_line": 900,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1169537538,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761544/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T03:03:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761544",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014761857"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761857"
                }
            },
            "author_association": "MEMBER",
            "body": "41d591ab56946f8cb5a3b9db60013a74ae1f1da2",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T03:09:35Z",
            "diff_hunk": "@@ -892,6 +892,108 @@ function vim._init_default_mappings()\n   ]])\n end\n \n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---@param opts (table|nil) Options (currently unused).\n+---\n+---@return (string|nil) The contents of the given file if it is trusted, or nil\n+---                     otherwise.\n+function vim.readsecure(path, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014761857",
            "id": 1014761857,
            "in_reply_to_id": 1014756332,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48fAmB",
            "original_commit_id": "801c8197610d567fc3c5195232dc780427a386e4",
            "original_line": 904,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1169537827,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761857/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T03:09:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761857",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014761867"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761867"
                }
            },
            "author_association": "MEMBER",
            "body": "Fixed in a1dc757291aed157943cc0ac94a634acc2f0d40c",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T03:09:41Z",
            "diff_hunk": "@@ -892,6 +892,108 @@ function vim._init_default_mappings()\n   ]])\n end\n \n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---@param opts (table|nil) Options (currently unused).\n+---\n+---@return (string|nil) The contents of the given file if it is trusted, or nil\n+---                     otherwise.\n+function vim.readsecure(path, opts)\n+  local fullpath = vim.fn.fnamemodify(vim.fs.normalize(path), ':p')\n+  local trust = {}\n+  do\n+    local f = io.open(vim.fn.stdpath('state') .. '/trust', 'r')\n+    if f then\n+      local contents = f:read('*a')\n+      if contents then\n+        for line in vim.gsplit(contents, '\\n') do\n+          local hash, file = string.match(line, '^(%S+) (.+)$')\n+          if hash and file then\n+            trust[file] = hash\n+          end\n+        end\n+      end\n+      f:close()\n+    end\n+  end\n+\n+  if trust[fullpath] == '!' then\n+    -- File is blacklisted\n+    return nil\n+  end\n+\n+  local contents\n+  do\n+    local f = io.open(fullpath, 'r')\n+    if not f then\n+      return nil\n+    end\n+    contents = f:read('*a')\n+    f:close()\n+  end\n+\n+  local hash = vim.fn.sha256(contents)\n+  if trust[fullpath] == hash then\n+    -- File already exists in trust database\n+    return contents\n+  end\n+\n+  -- File either does not exist in trust database or the hash does not match\n+  local choice = vim.fn.confirm(\n+    string.format('%s is not trusted.', fullpath),\n+    '&ignore\\n&view\\n&blacklist\\n&trust',\n+    1\n+  )\n+\n+  if choice == 0 or choice == 1 then\n+    -- Cancelled or ignored\n+    return nil\n+  elseif choice == 2 then\n+    -- View\n+    local buf = vim.api.nvim_create_buf(false, true)\n+    local lines = vim.split(contents, '\\n')\n+\n+    -- Trim trailing newline\n+    if lines[#lines] == '' then\n+      lines[#lines] = nil\n+    end\n+\n+    vim.api.nvim_buf_set_lines(buf, 0, -1, false, lines)\n+    vim.cmd('new')\n+    local win = vim.api.nvim_get_current_win()\n+    vim.api.nvim_win_set_buf(win, buf)",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014761867",
            "id": 1014761867,
            "in_reply_to_id": 1014757101,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48fAmL",
            "original_commit_id": "f7ef695b4bec0e15a8d6dcdf69c625f31c59b6ac",
            "original_line": 967,
            "original_position": 76,
            "original_start_line": 966,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1169537833,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761867/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-11-06T03:09:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014761867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014762625"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014762625"
                }
            },
            "author_association": "MEMBER",
            "body": "`:new` creates a new buffer, it can replace `nvim_create_buf` entirely.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T03:22:36Z",
            "diff_hunk": "@@ -0,0 +1,104 @@\n+local M = {}\n+\n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---\n+---@return (string|nil) The contents of the given file if it is trusted, or nil\n+---                     otherwise.\n+function M.read(path)\n+  vim.validate({ path = { path, 's' } })\n+  local fullpath = vim.fn.fnamemodify(vim.fs.normalize(path), ':p')\n+  local trust = {}\n+  do\n+    local f = io.open(vim.fn.stdpath('state') .. '/trust', 'r')\n+    if f then\n+      local contents = f:read('*a')\n+      if contents then\n+        for line in vim.gsplit(contents, '\\n') do\n+          local hash, file = string.match(line, '^(%S+) (.+)$')\n+          if hash and file then\n+            trust[file] = hash\n+          end\n+        end\n+      end\n+      f:close()\n+    end\n+  end\n+\n+  if trust[fullpath] == '!' then\n+    -- File is blacklisted\n+    return nil\n+  end\n+\n+  local contents\n+  do\n+    local f = io.open(fullpath, 'r')\n+    if not f then\n+      return nil\n+    end\n+    contents = f:read('*a')\n+    f:close()\n+  end\n+\n+  local hash = vim.fn.sha256(contents)\n+  if trust[fullpath] == hash then\n+    -- File already exists in trust database\n+    return contents\n+  end\n+\n+  -- File either does not exist in trust database or the hash does not match\n+  local choice = vim.fn.confirm(\n+    string.format('%s is not trusted.', fullpath),\n+    '&ignore\\n&view\\n&blacklist\\n&trust',\n+    1\n+  )\n+\n+  if choice == 0 or choice == 1 then\n+    -- Cancelled or ignored\n+    return nil\n+  elseif choice == 2 then\n+    -- View\n+    local buf = vim.api.nvim_create_buf(false, true)\n+    local lines = vim.split(contents, '\\n')\n+\n+    -- Trim trailing newline\n+    if lines[#lines] == '' then\n+      lines[#lines] = nil\n+    end\n+\n+    vim.api.nvim_buf_set_lines(buf, 0, -1, false, lines)\n+    vim.cmd('new')",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014762625",
            "id": 1014762625,
            "line": 68,
            "node_id": "PRRC_kwDOAPphoM48fAyB",
            "original_commit_id": "c00311a33941c0a9002543fecdfe462704149c6c",
            "original_line": 68,
            "original_position": 73,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": 68,
            "pull_request_review_id": 1169538422,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014762625/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T03:26:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014762625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014762870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014762870"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure about this, but I think `len` might not include the null byte.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T03:26:22Z",
            "diff_hunk": "@@ -2177,3 +2177,26 @@ char *nlua_funcref_str(LuaRef ref)\n   kv_printf(str, \"<Lua %d>\", ref);\n   return str.items;\n }\n+\n+char *nlua_read_secure(const char *path)\n+{\n+  lua_State *const lstate = global_lstate;\n+  lua_getglobal(lstate, \"vim\");\n+  lua_getfield(lstate, -1, \"secure\");\n+  lua_getfield(lstate, -1, \"read\");\n+  lua_pushstring(lstate, path);\n+  lua_call(lstate, 1, 1);\n+\n+  size_t len = 0;\n+  const char *contents = lua_tolstring(lstate, -1, &len);\n+  char *buf = NULL;\n+  if (contents != NULL) {\n+    buf = xcalloc(len, sizeof(char));",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014762870",
            "id": 1014762870,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48fA12",
            "original_commit_id": "c00311a33941c0a9002543fecdfe462704149c6c",
            "original_line": 2194,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/lua/executor.c",
            "position": null,
            "pull_request_review_id": 1169538422,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014762870/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T03:26:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014762870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014832133"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014832133"
                }
            },
            "author_association": "MEMBER",
            "body": "Fixed in 61cea11c82492c90c6b465deceaf9a53b3851c04",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T13:41:20Z",
            "diff_hunk": "@@ -0,0 +1,104 @@\n+local M = {}\n+\n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---\n+---@return (string|nil) The contents of the given file if it is trusted, or nil\n+---                     otherwise.\n+function M.read(path)\n+  vim.validate({ path = { path, 's' } })\n+  local fullpath = vim.fn.fnamemodify(vim.fs.normalize(path), ':p')\n+  local trust = {}\n+  do\n+    local f = io.open(vim.fn.stdpath('state') .. '/trust', 'r')\n+    if f then\n+      local contents = f:read('*a')\n+      if contents then\n+        for line in vim.gsplit(contents, '\\n') do\n+          local hash, file = string.match(line, '^(%S+) (.+)$')\n+          if hash and file then\n+            trust[file] = hash\n+          end\n+        end\n+      end\n+      f:close()\n+    end\n+  end\n+\n+  if trust[fullpath] == '!' then\n+    -- File is blacklisted\n+    return nil\n+  end\n+\n+  local contents\n+  do\n+    local f = io.open(fullpath, 'r')\n+    if not f then\n+      return nil\n+    end\n+    contents = f:read('*a')\n+    f:close()\n+  end\n+\n+  local hash = vim.fn.sha256(contents)\n+  if trust[fullpath] == hash then\n+    -- File already exists in trust database\n+    return contents\n+  end\n+\n+  -- File either does not exist in trust database or the hash does not match\n+  local choice = vim.fn.confirm(\n+    string.format('%s is not trusted.', fullpath),\n+    '&ignore\\n&view\\n&blacklist\\n&trust',\n+    1\n+  )\n+\n+  if choice == 0 or choice == 1 then\n+    -- Cancelled or ignored\n+    return nil\n+  elseif choice == 2 then\n+    -- View\n+    local buf = vim.api.nvim_create_buf(false, true)\n+    local lines = vim.split(contents, '\\n')\n+\n+    -- Trim trailing newline\n+    if lines[#lines] == '' then\n+      lines[#lines] = nil\n+    end\n+\n+    vim.api.nvim_buf_set_lines(buf, 0, -1, false, lines)\n+    vim.cmd('new')",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014832133",
            "id": 1014832133,
            "in_reply_to_id": 1014762625,
            "line": 68,
            "node_id": "PRRC_kwDOAPphoM48fRwF",
            "original_commit_id": "c00311a33941c0a9002543fecdfe462704149c6c",
            "original_line": 68,
            "original_position": 73,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": 68,
            "pull_request_review_id": 1169598645,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014832133/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T13:41:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014832133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014832168"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014832168"
                }
            },
            "author_association": "MEMBER",
            "body": "It does not. Fixed in d1a847ca9a7323db1b74a2fd77ee8b351be1696d",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T13:41:34Z",
            "diff_hunk": "@@ -2177,3 +2177,26 @@ char *nlua_funcref_str(LuaRef ref)\n   kv_printf(str, \"<Lua %d>\", ref);\n   return str.items;\n }\n+\n+char *nlua_read_secure(const char *path)\n+{\n+  lua_State *const lstate = global_lstate;\n+  lua_getglobal(lstate, \"vim\");\n+  lua_getfield(lstate, -1, \"secure\");\n+  lua_getfield(lstate, -1, \"read\");\n+  lua_pushstring(lstate, path);\n+  lua_call(lstate, 1, 1);\n+\n+  size_t len = 0;\n+  const char *contents = lua_tolstring(lstate, -1, &len);\n+  char *buf = NULL;\n+  if (contents != NULL) {\n+    buf = xcalloc(len, sizeof(char));",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014832168",
            "id": 1014832168,
            "in_reply_to_id": 1014762870,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48fRwo",
            "original_commit_id": "c00311a33941c0a9002543fecdfe462704149c6c",
            "original_line": 2194,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/lua/executor.c",
            "position": null,
            "pull_request_review_id": 1169598673,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014832168/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T13:41:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014832168",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014833205"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014833205"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we get rid of everything related to `secure` inside `if (do_user_initialization())` now?",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T13:48:53Z",
            "diff_hunk": "@@ -1987,7 +1987,11 @@ static void source_startup_scripts(const mparm_T *const parmp)\n #endif\n       secure = p_secure;\n \n-      if (do_source(VIMRC_FILE, true, DOSO_VIMRC) == FAIL) {\n+      char *str = nlua_read_secure(VIMRC_FILE);\n+      if (str != NULL) {\n+        do_source_str(str, VIMRC_FILE);\n+        xfree(str);\n+      } else {\n #if defined(UNIX)\n         // if \".exrc\" is not owned by user set 'secure' mode",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014833205",
            "id": 1014833205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48fSA1",
            "original_commit_id": "d1a847ca9a7323db1b74a2fd77ee8b351be1696d",
            "original_line": 1996,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/main.c",
            "position": null,
            "pull_request_review_id": 1169599685,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014833205/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T14:03:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014833205",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014834583"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014834583"
                }
            },
            "author_association": "MEMBER",
            "body": "To ensure correctness, I think we should discard any relative paths here and accept only absolute paths. `^/` for mac/linux and probably something like `^%a:\\\\` for windows.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T13:58:14Z",
            "diff_hunk": "@@ -0,0 +1,102 @@\n+local M = {}\n+\n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---\n+---@return (string|nil) The contents of the given file if it is trusted, or nil\n+---                     otherwise.\n+function M.read(path)\n+  vim.validate({ path = { path, 's' } })\n+  local fullpath = vim.fn.fnamemodify(vim.fs.normalize(path), ':p')\n+  local trust = {}\n+  do\n+    local f = io.open(vim.fn.stdpath('state') .. '/trust', 'r')\n+    if f then\n+      local contents = f:read('*a')\n+      if contents then\n+        for line in vim.gsplit(contents, '\\n') do\n+          local hash, file = string.match(line, '^(%S+) (.+)$')",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014834583",
            "id": 1014834583,
            "line": 25,
            "node_id": "PRRC_kwDOAPphoM48fSWX",
            "original_commit_id": "35d54f469507f3204f95e215e67c0170e63d178e",
            "original_line": 25,
            "original_position": 21,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": 25,
            "pull_request_review_id": 1169599685,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014834583/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T14:03:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014834583",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014873318"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014873318"
                }
            },
            "author_association": "MEMBER",
            "body": "Is this actually necessary? The input path argument is already expanded to a full (absolute) path, so if a relative path exists here it would never compare equal against the absolute input path.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T18:30:25Z",
            "diff_hunk": "@@ -0,0 +1,102 @@\n+local M = {}\n+\n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---\n+---@return (string|nil) The contents of the given file if it is trusted, or nil\n+---                     otherwise.\n+function M.read(path)\n+  vim.validate({ path = { path, 's' } })\n+  local fullpath = vim.fn.fnamemodify(vim.fs.normalize(path), ':p')\n+  local trust = {}\n+  do\n+    local f = io.open(vim.fn.stdpath('state') .. '/trust', 'r')\n+    if f then\n+      local contents = f:read('*a')\n+      if contents then\n+        for line in vim.gsplit(contents, '\\n') do\n+          local hash, file = string.match(line, '^(%S+) (.+)$')",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014873318",
            "id": 1014873318,
            "in_reply_to_id": 1014834583,
            "line": 25,
            "node_id": "PRRC_kwDOAPphoM48fbzm",
            "original_commit_id": "35d54f469507f3204f95e215e67c0170e63d178e",
            "original_line": 25,
            "original_position": 21,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": 25,
            "pull_request_review_id": 1169635944,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014873318/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T18:30:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014873318",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014874854"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014874854"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, you're right, it's not necessary. What worries me however is that `:p`'s behavior in `fnamemodify` is \"unpredictable\" if file doesn't exist, and that could potentially lead to something unexpected. Can you replace that with `fs_realpath`? `fs_realpath` fails when file doesn't exist",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T18:42:28Z",
            "diff_hunk": "@@ -0,0 +1,102 @@\n+local M = {}\n+\n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---\n+---@return (string|nil) The contents of the given file if it is trusted, or nil\n+---                     otherwise.\n+function M.read(path)\n+  vim.validate({ path = { path, 's' } })\n+  local fullpath = vim.fn.fnamemodify(vim.fs.normalize(path), ':p')\n+  local trust = {}\n+  do\n+    local f = io.open(vim.fn.stdpath('state') .. '/trust', 'r')\n+    if f then\n+      local contents = f:read('*a')\n+      if contents then\n+        for line in vim.gsplit(contents, '\\n') do\n+          local hash, file = string.match(line, '^(%S+) (.+)$')",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014874854",
            "id": 1014874854,
            "in_reply_to_id": 1014834583,
            "line": 25,
            "node_id": "PRRC_kwDOAPphoM48fcLm",
            "original_commit_id": "35d54f469507f3204f95e215e67c0170e63d178e",
            "original_line": 25,
            "original_position": 21,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": 25,
            "pull_request_review_id": 1169637138,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014874854/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T18:42:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014874854",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014887220"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014887220"
                }
            },
            "author_association": "MEMBER",
            "body": "Fixed in 7578fc69f2f9940b36b019a7d3fe0729302890e6. I think it might make sense to also use `fs_realpath` in `vim.fs.normalize()`. If we make that change then we can remove it here.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-06T20:24:04Z",
            "diff_hunk": "@@ -0,0 +1,102 @@\n+local M = {}\n+\n+--- Attempt to read the file at {path} prompting the user if the file should be\n+--- trusted. The user's choice is persisted in a trust database at\n+--- $XDG_STATE_HOME/nvim/trust.\n+---\n+---@param path (string) Path to a file to read.\n+---\n+---@return (string|nil) The contents of the given file if it is trusted, or nil\n+---                     otherwise.\n+function M.read(path)\n+  vim.validate({ path = { path, 's' } })\n+  local fullpath = vim.fn.fnamemodify(vim.fs.normalize(path), ':p')\n+  local trust = {}\n+  do\n+    local f = io.open(vim.fn.stdpath('state') .. '/trust', 'r')\n+    if f then\n+      local contents = f:read('*a')\n+      if contents then\n+        for line in vim.gsplit(contents, '\\n') do\n+          local hash, file = string.match(line, '^(%S+) (.+)$')",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014887220",
            "id": 1014887220,
            "in_reply_to_id": 1014834583,
            "line": 25,
            "node_id": "PRRC_kwDOAPphoM48ffM0",
            "original_commit_id": "35d54f469507f3204f95e215e67c0170e63d178e",
            "original_line": 25,
            "original_position": 21,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": 25,
            "pull_request_review_id": 1169647550,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014887220/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-06T20:24:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014887220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014933027"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014933027"
                }
            },
            "author_association": "MEMBER",
            "body": "I see that `vim.readsecure()` https://github.com/neovim/neovim/pull/20925 was closed but don't see a rationale. Why introduce a new module for this? Do we plan to have many more functions in `vim.secure`? \r\n\r\nThe current functionality at least seems to be covered by a parameter on `vim.read({secure=true, path=...})`. Otherwise `vim.readsecure()` works, if the interface is expected to be different than `vim.read()`.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-07T01:16:07Z",
            "diff_hunk": "@@ -2353,4 +2353,20 @@ parents({start})                                            *vim.fs.parents()*\n     Return: ~\n         (function) Iterator\n \n+\n+==============================================================================\n+Lua module: secure                                                *lua-secure*",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014933027",
            "id": 1014933027,
            "line": 2359,
            "node_id": "PRRC_kwDOAPphoM48fqYj",
            "original_commit_id": "bc5f9cdbccbe8033812a94b5b4ac193060575d9f",
            "original_line": 2359,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 6,
            "pull_request_review_id": 1169696985,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014933027/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-07T01:16:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014933027",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014933893"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014933893"
                }
            },
            "author_association": "MEMBER",
            "body": "The hash check is worth mentioning here too.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-07T01:19:41Z",
            "diff_hunk": "@@ -2253,6 +2253,18 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tThis option is reset when the 'paste' option is set and restored when\n \tthe 'paste' option is reset.\n \n+\t\t\t\t\t*'exrc'* *'ex'* *'noexrc'* *'noex'*\n+'exrc' 'ex'\t\tboolean (default off)\n+\t\t\tglobal\n+\tEnables the reading of .nvimrc and .exrc files in the current\n+\tdirectory.\n+\n+\tThe file is only sourced if the user indicates the file is trusted.\n+\tSee |vim.secure.read()|.",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014933893",
            "id": 1014933893,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48fqmF",
            "original_commit_id": "bc5f9cdbccbe8033812a94b5b4ac193060575d9f",
            "original_line": 2263,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1169698133,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014933893/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-07T01:19:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014933893",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014950754"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014950754"
                }
            },
            "author_association": "MEMBER",
            "body": "See @ii14's [comment](https://github.com/neovim/neovim/pull/20956#discussion_r1014756332). The thinking was there may be other useful APIs that could fall under the \"secure\" umbrella (e.g. an interface to add or remove items from the trust database).",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-07T02:16:48Z",
            "diff_hunk": "@@ -2353,4 +2353,20 @@ parents({start})                                            *vim.fs.parents()*\n     Return: ~\n         (function) Iterator\n \n+\n+==============================================================================\n+Lua module: secure                                                *lua-secure*",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014950754",
            "id": 1014950754,
            "in_reply_to_id": 1014933027,
            "line": 2359,
            "node_id": "PRRC_kwDOAPphoM48futi",
            "original_commit_id": "bc5f9cdbccbe8033812a94b5b4ac193060575d9f",
            "original_line": 2359,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 6,
            "pull_request_review_id": 1169721085,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014950754/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-07T02:16:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014950754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014956314"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014956314"
                }
            },
            "author_association": "MEMBER",
            "body": "\"vim.secure\" is a lofty  name for this :) Maybe `vim.localrc` or `vim.exrc`. \r\n\r\nNot trying to bikeshed, but thinking of `trust()` and looking at https://github.com/ii14/exrc.vim/blob/master/doc/exrc.txt and related plugins, clearly the direction is to support the features of these \"local vimrc\" plugins. `vim.secure` doesn't seem like the theme here.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-07T02:33:35Z",
            "diff_hunk": "@@ -2353,4 +2353,20 @@ parents({start})                                            *vim.fs.parents()*\n     Return: ~\n         (function) Iterator\n \n+\n+==============================================================================\n+Lua module: secure                                                *lua-secure*",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014956314",
            "id": 1014956314,
            "in_reply_to_id": 1014933027,
            "line": 2359,
            "node_id": "PRRC_kwDOAPphoM48fwEa",
            "original_commit_id": "bc5f9cdbccbe8033812a94b5b4ac193060575d9f",
            "original_line": 2359,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 6,
            "pull_request_review_id": 1169728440,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014956314/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-07T03:15:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014956314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014960264"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014960264"
                }
            },
            "author_association": "MEMBER",
            "body": "33c1e7ec33d3502bd779849a89a8411275438e1f",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-07T02:46:07Z",
            "diff_hunk": "@@ -2253,6 +2253,18 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tThis option is reset when the 'paste' option is set and restored when\n \tthe 'paste' option is reset.\n \n+\t\t\t\t\t*'exrc'* *'ex'* *'noexrc'* *'noex'*\n+'exrc' 'ex'\t\tboolean (default off)\n+\t\t\tglobal\n+\tEnables the reading of .nvimrc and .exrc files in the current\n+\tdirectory.\n+\n+\tThe file is only sourced if the user indicates the file is trusted.\n+\tSee |vim.secure.read()|.",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014960264",
            "id": 1014960264,
            "in_reply_to_id": 1014933893,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48fxCI",
            "original_commit_id": "bc5f9cdbccbe8033812a94b5b4ac193060575d9f",
            "original_line": 2263,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1169733795,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014960264/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-07T02:46:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014960264",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1014960368"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014960368"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, and there is a lot of other code we can remove as well because of this. eabc7a5dadcd25821a1b0645681e87e118d075a2",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-07T02:46:27Z",
            "diff_hunk": "@@ -1987,7 +1987,11 @@ static void source_startup_scripts(const mparm_T *const parmp)\n #endif\n       secure = p_secure;\n \n-      if (do_source(VIMRC_FILE, true, DOSO_VIMRC) == FAIL) {\n+      char *str = nlua_read_secure(VIMRC_FILE);\n+      if (str != NULL) {\n+        do_source_str(str, VIMRC_FILE);\n+        xfree(str);\n+      } else {\n #if defined(UNIX)\n         // if \".exrc\" is not owned by user set 'secure' mode",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1014960368",
            "id": 1014960368,
            "in_reply_to_id": 1014833205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM48fxDw",
            "original_commit_id": "d1a847ca9a7323db1b74a2fd77ee8b351be1696d",
            "original_line": 1996,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/main.c",
            "position": null,
            "pull_request_review_id": 1169733954,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014960368/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-07T02:46:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1014960368",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1015036604"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1015036604"
                }
            },
            "author_association": "MEMBER",
            "body": "vimrcs are the most obvious use case for this, but it could be used for anything really, not necessarily even vim script or lua.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-07T06:16:03Z",
            "diff_hunk": "@@ -2353,4 +2353,20 @@ parents({start})                                            *vim.fs.parents()*\n     Return: ~\n         (function) Iterator\n \n+\n+==============================================================================\n+Lua module: secure                                                *lua-secure*",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1015036604",
            "id": 1015036604,
            "in_reply_to_id": 1014933027,
            "line": 2359,
            "node_id": "PRRC_kwDOAPphoM48gDq8",
            "original_commit_id": "bc5f9cdbccbe8033812a94b5b4ac193060575d9f",
            "original_line": 2359,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 6,
            "pull_request_review_id": 1169838112,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1015036604/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-07T06:16:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1015036604",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/20956#discussion_r1015559370"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/20956"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1015559370"
                }
            },
            "author_association": "MEMBER",
            "body": ">The current functionality at least seems to be covered by a parameter on vim.read({secure=true, path=...}). Otherwise vim.readsecure() works, if the interface is expected to be different than vim.read().\r\n\r\nI do think that the \"readsecure\" interface might be different enough to warrant being separate from a more generic `read` function. For example, we might want to expose the ability to specify the prompt text, or modify some parameters of how the file is displayed when the user wants to view it (e.g. setting the buffer filetype). None of these would make sense for a generic `read` function.\r\n\r\nRe: `vim.secure.read()` vs `vim.readsecure()`: I don't have a dog in that fight, but I'd prefer we just pick something and not bikeshed too long. It sounds like @ii14 already has some ideas on other functions that would fit in a \"secure\" module. We also have plenty of time until the next release cycle if we want to just throw it under `vim.readsecure()` for now and refactor into a separate module later on when we have more use cases.",
            "commit_id": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
            "created_at": "2022-11-07T15:25:22Z",
            "diff_hunk": "@@ -2353,4 +2353,20 @@ parents({start})                                            *vim.fs.parents()*\n     Return: ~\n         (function) Iterator\n \n+\n+==============================================================================\n+Lua module: secure                                                *lua-secure*",
            "html_url": "https://github.com/neovim/neovim/pull/20956#discussion_r1015559370",
            "id": 1015559370,
            "in_reply_to_id": 1014933027,
            "line": 2359,
            "node_id": "PRRC_kwDOAPphoM48iDTK",
            "original_commit_id": "bc5f9cdbccbe8033812a94b5b4ac193060575d9f",
            "original_line": 2359,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 6,
            "pull_request_review_id": 1170602134,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1015559370/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-11-07T15:25:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1015559370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Need to update the E12 this message, it's [confusing](https://github.com/neovim/neovim/issues/9881) and after this PR will be wrong(?): https://github.com/neovim/neovim/blob/16eed6e7663afccfe36fd8c0301927fd1858c5c8/src/nvim/globals.h#L866",
            "created_at": "2022-11-07T01:26:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1304970995",
            "id": 1304970995,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5NyEbz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1304970995/reactions"
            },
            "updated_at": "2022-11-07T01:26:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1304970995",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "E12 won't be used anymore, since we don't need to set `secure` when sourcing a .nvimrc or .exrc file.",
            "created_at": "2022-11-07T02:45:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1305009709",
            "id": 1305009709,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5NyN4t",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1305009709/reactions"
            },
            "updated_at": "2022-11-07T02:45:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1305009709",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">E12 won't be used anymore, since we don't need to set secure when sourcing a .nvimrc or .exrc file.\r\n\r\nActually I'm going to walk this back a bit. There are still cases where we can be in a \"secure\" mode, but sourcing a .nvimrc or .exrc file will not enable it. So I've updated the message to `E12: Command not allowed in secure mode in current dir or tag search`.",
            "created_at": "2022-11-11T02:46:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1311162586",
            "id": 1311162586,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5OJsDa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1311162586/reactions"
            },
            "updated_at": "2022-11-11T02:46:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1311162586",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk @ii14 Any other review feedback apart from the naming?\r\n\r\nAn executive decision on the name would be good too, don't want this to get hung up for too long on naming. The name is changeable before the release if we change our minds.",
            "created_at": "2022-11-14T17:49:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1314147286",
            "id": 1314147286,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5OVEvW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1314147286/reactions"
            },
            "updated_at": "2022-11-14T17:49:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1314147286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Looks good to me. We're going to need some way of having lua files, but even before we add that it's going to be few lines of code to implement it on your own after this PR.",
            "created_at": "2022-11-14T21:10:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1314384312",
            "id": 1314384312,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5OV-m4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1314384312/reactions"
            },
            "updated_at": "2022-11-14T21:10:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1314384312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Rebased on master. I am going to go ahead and merge when CI passes just so we can move forward. We can eliminate the `vim.secure` module and rename it back to `vim.readsecure()` if it turns out we don't need a full module, but no reason we can't do that in a follow up.",
            "created_at": "2022-11-17T15:25:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1318800296",
            "id": 1318800296,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5Om0uo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 2,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1318800296/reactions"
            },
            "updated_at": "2022-11-17T15:25:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1318800296",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sorry for the delay! Something else I forgot to mention: this is a step towards the _project_ concept.\r\n\r\n- https://github.com/neovim/neovim/issues/8610\r\n\r\nThat further suggests that `vim.secure` is not the central topic for this idea. Perhaps `vim.config`? `vim.workspace`? Or do these features actually belong in `vim.fs` ?\r\n\r\n",
            "created_at": "2022-11-18T01:13:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1319424362",
            "id": 1319424362,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5OpNFq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1319424362/reactions"
            },
            "updated_at": "2022-11-18T01:13:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1319424362",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk I'd frame it as maybe a building block for projects, not necessarily a part of it. The way I personally imagine projects is similar to lspconfig - you set up some pattern for the project and match buffers against it. At least in my idea of how projects would work, there is nothing that enforces where these patterns are supposed to be defined. So you could use `vim.secure` to scan for project files, or you could just as well define them in init.vim/lua.\r\n\r\n It would be nice to have some other functions here, namely for whitelisting and blacklisting files (`vim.secure.{allow,deny}`), that's why I thought it would be nice to have it be its own module. But I suppose it could be a submodule of `vim.fs` like `vim.fs.secure.read()` or something similar instead.",
            "created_at": "2022-11-18T02:01:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1319450251",
            "id": 1319450251,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5OpTaL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1319450251/reactions"
            },
            "updated_at": "2022-11-18T02:01:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1319450251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">Or do these features actually belong in vim.fs ?\r\n\r\nI think a `vim.fs.read()` function with a `secure` option could make sense, but I think we also want an API to manage the trust file (something like `vim.secure.allow()/deny()` like @ii14 mentioned), and that does not seem like a good fit for `vim.fs`.",
            "created_at": "2022-11-18T03:26:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1319496842",
            "id": 1319496842,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5OpeyK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1319496842/reactions"
            },
            "updated_at": "2022-11-18T03:26:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1319496842",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is loading `.exrc/.nvimrc` file intended to work only with `init.vim`, or it should also support `init.lua` ?\r\nFrom what I see in https://github.com/neovim/neovim/blob/master/src/nvim/main.c#L1913-L1934, this currently works only if user is using `init.vim` as a configuration file.\r\n",
            "created_at": "2022-11-18T10:19:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1319804777",
            "id": 1319804777,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5Oqp9p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1319804777/reactions"
            },
            "updated_at": "2022-11-18T10:19:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1319804777",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It should also work with init.lua. I am not sure why that function is written that way. Please open an issue (or better yet, a PR).",
            "created_at": "2022-11-18T14:17:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1320052095",
            "id": 1320052095,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5OrmV_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320052095/reactions"
            },
            "updated_at": "2022-11-18T14:17:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320052095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">  I am not sure why that function is written that way\r\n\r\nI opened a similar issue some time ago https://github.com/neovim/neovim/issues/13501 and this comment adds some reasoning around it https://github.com/neovim/neovim/issues/13501#issuecomment-755326024",
            "created_at": "2022-11-18T14:22:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1320061132",
            "id": 1320061132,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5OrojM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320061132/reactions"
            },
            "updated_at": "2022-11-18T14:22:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320061132",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But I suppose it could be a submodule of `vim.fs` like `vim.fs.secure.read()` or something similar instead.\r\n\r\nNot in favor of a sub-submodule. Before adding a module ask if it is really a major topic or if it can be functions on an existing module. Over-granularity defeats the purpose of having modules because having 100 modules is no better than having a big flat list of functions: user has no idea where anything lives. Sub-sub-modules are even worse because now you have to drill into a tree to find things.",
            "created_at": "2022-11-18T14:45:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/20956#issuecomment-1320089758",
            "id": 1320089758,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
            "node_id": "IC_kwDOAPphoM5Orvie",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320089758/reactions"
            },
            "updated_at": "2022-11-18T14:45:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320089758",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/20956/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/20956/commits",
    "created_at": "2022-11-06T01:41:04Z",
    "diff_url": "https://github.com/neovim/neovim/pull/20956.diff",
    "draft": false,
    "head": {
        "label": "gpanders:lua-readsecure",
        "ref": "lua-readsecure",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/gpanders/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gpanders/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gpanders/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gpanders/neovim/branches{/branch}",
            "clone_url": "https://github.com/gpanders/neovim.git",
            "collaborators_url": "https://api.github.com/repos/gpanders/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gpanders/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/gpanders/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gpanders/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gpanders/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gpanders/neovim/contributors",
            "created_at": "2021-06-11T03:58:44Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gpanders/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/gpanders/neovim/downloads",
            "events_url": "https://api.github.com/repos/gpanders/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gpanders/neovim/forks",
            "full_name": "gpanders/neovim",
            "git_commits_url": "https://api.github.com/repos/gpanders/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gpanders/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gpanders/neovim/git/tags{/sha}",
            "git_url": "git://github.com/gpanders/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/gpanders/neovim/hooks",
            "html_url": "https://github.com/gpanders/neovim",
            "id": 375899052,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/gpanders/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gpanders/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gpanders/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/gpanders/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gpanders/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/gpanders/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gpanders/neovim/merges",
            "milestones_url": "https://api.github.com/repos/gpanders/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzU4OTkwNTI=",
            "notifications_url": "https://api.github.com/repos/gpanders/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gpanders/neovim/pulls{/number}",
            "pushed_at": "2024-02-16T20:00:22Z",
            "releases_url": "https://api.github.com/repos/gpanders/neovim/releases{/id}",
            "size": 246006,
            "ssh_url": "git@github.com:gpanders/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gpanders/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/gpanders/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gpanders/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/gpanders/neovim/subscription",
            "svn_url": "https://github.com/gpanders/neovim",
            "tags_url": "https://api.github.com/repos/gpanders/neovim/tags",
            "teams_url": "https://api.github.com/repos/gpanders/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/gpanders/neovim/git/trees{/sha}",
            "updated_at": "2022-01-07T19:38:08Z",
            "url": "https://api.github.com/repos/gpanders/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/20956",
    "id": 1111838732,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20956",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": false,
    "merge_commit_sha": "32cba4cee6c2ca232b5def16fe1bae8166d093f1",
    "merged_at": "2022-11-17T15:47:41Z",
    "milestone": {
        "closed_at": "2023-04-11T12:13:17Z",
        "closed_issues": 152,
        "created_at": "2021-10-30T10:41:36Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
            "events_url": "https://api.github.com/users/clason/events{/privacy}",
            "followers_url": "https://api.github.com/users/clason/followers",
            "following_url": "https://api.github.com/users/clason/following{/other_user}",
            "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/clason",
            "id": 2361214,
            "login": "clason",
            "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
            "organizations_url": "https://api.github.com/users/clason/orgs",
            "received_events_url": "https://api.github.com/users/clason/received_events",
            "repos_url": "https://api.github.com/users/clason/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/clason"
        },
        "description": "",
        "due_on": "2023-04-07T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/28",
        "id": 7307009,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/28/labels",
        "node_id": "MI_kwDOAPphoM4Ab38B",
        "number": 28,
        "open_issues": 0,
        "state": "closed",
        "title": "0.9",
        "updated_at": "2024-02-15T21:39:01Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/28"
    },
    "node_id": "PR_kwDOAPphoM5CRVAM",
    "number": 20956,
    "patch_url": "https://github.com/neovim/neovim/pull/20956.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/20956/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/6d9c3d903ecee2d1d21d0a0806f1a2bebe628e8e",
    "title": "feat: implement vim.secure.read() and use it for 'exrc'",
    "updated_at": "2024-02-15T21:39:01Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/20956",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
        "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gpanders/followers",
        "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gpanders",
        "id": 8965202,
        "login": "gpanders",
        "node_id": "MDQ6VXNlcjg5NjUyMDI=",
        "organizations_url": "https://api.github.com/users/gpanders/orgs",
        "received_events_url": "https://api.github.com/users/gpanders/received_events",
        "repos_url": "https://api.github.com/users/gpanders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gpanders"
    }
}