{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31399/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31399/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31399"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31399"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31399/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ce818a9a914b3c8ddd0cf747238ae5a4d0a18671"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5726,
            "forks_count": 5726,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1842,
            "open_issues_count": 1842,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-12-03T00:32:23Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 296843,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 83804,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-12-03T02:31:16Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 83804,
            "watchers_count": 83804,
            "web_commit_signoff_required": false
        },
        "sha": "ab9cfc4dc3422af5235759efef456d3e02745217",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Alright, let's try this again without the massive amount of pull requests. ðŸ˜„ Each commit here should be a standalone change, and I'll document the processes here.\r\n\r\nThis is geared towards tackling #30889, specifically on supporting\r\n\r\n1. Ability to load an image into memory\r\n2. Display an image with absolute coordinates\r\n3. Support different backends for rendering images such as iterm2 and kitty\r\n4. Smartly detect the type(s) of backend graphics supported\r\n\r\nThings for later PRs would include\r\n\r\n1. Inline image support (attach to a buffer, reflow text around it)\r\n2. Alternative image formats (I think PNG is what is supported right now?)\r\n3. Video feeds (more complex, more limited backend support)\r\n\r\n## Breakdown of commits\r\n\r\n### 1. Loading an image into memory\r\n\r\nImplements `vim.img.load()` to load from a file or wrap base64 encoded bytes as a `vim.img.Image` instance.\r\n\r\n### 2. Implement skeleton of vim.img.show() without backends\r\n\r\nImplements the skeleton of `vim.img.show()` with any backend implemented.\r\n\r\n### 3. Implement vim.img._terminal to support basic functionality needed for backends\r\n\r\nImplements a `vim.img._terminal` module that supports writing to the tty tied to neovim as well as basic operations to manipulate the cursor, needed for backend implementations.\r\n\r\n### 4. Implement `vim.img.Image` method `for_each_chunk` to streamline backend processing\r\n\r\nImplements a method `image:for_each_chunk` for instances of `vim.img.Image`. This method streamlines chunked iteration of image bytes, which is important when working with ssh or tmux and a protocol that supports chunked image rendering such as `iterm2` or `kitty`.\r\n\r\n### 5. Implement iterm2 backend\r\n\r\nImplements the iterm2 backend, supporting both iTerm 3.5+ support for multipart images, and falling back to older protocol that sends the entire image at once, which is needed for support on other terminals such as WezTerm.\r\n\r\n### 6. Implement kitty backend\r\n\r\nImplements the kitty graphics protocol as a backend, using kitty's chunked image rendering, which should work within tmux and ssh if we keep the chunks small enough.\r\n\r\n### 7. Implement `vim.img.protocol()` to detect preferred graphics protocol\r\n\r\nImplements `vim.img.protocol()` that can be used to detect the preferred graphics protocol.\r\n\r\nThis is a reverse-engineered copy of how `timg` implements graphics protocol support, and relies on a couple of terminal queries, hence we implement `vim.img._terminal.query()` and `vim.img._terminal.graphics.detect()` to support figuring out if the terminal supports iterm2, kitty, or sixel protocols and mirrors the logic from `timg`.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1864093226"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864093226"
                }
            },
            "author_association": "MEMBER",
            "body": "Imo it would also be nice to be able to do something like this:\r\n\r\n```lua\r\nlocal image = vim.img.load({\r\n    filename = \"/Users/senkwich/Pictures/org-roam-logo.png\",\r\n})\r\n\r\nimage:show({\r\n    pos = { row = 8, col = 8 }, \r\n    backend = \"iterm2\",\r\n})\r\n```\r\n\r\nwhat do you think?",
            "commit_id": "33ee5810ddf72d6cb9ec0497af01e3d7003c9963",
            "created_at": "2024-11-30T05:26:53Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1864093226",
            "id": 1864093226,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vG84q",
            "original_commit_id": "33ee5810ddf72d6cb9ec0497af01e3d7003c9963",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 1,
            "pull_request_review_id": 2470715000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864093226/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-11-30T05:26:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864093226",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1864321758"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864321758"
                }
            },
            "author_association": "NONE",
            "body": "> Imo it would also be nice to be able to do something like this:\n> \n> ```lua\n> local image = vim.img.load({\n>     filename = \"/Users/senkwich/Pictures/org-roam-logo.png\",\n> })\n> \n> image:show({\n>     pos = { row = 8, col = 8 }, \n>     backend = \"iterm2\",\n> })\n> ```\n> \n> what do you think?\n\nSure, seems fine to me. It'd defer to `vim.img.show` underneath. Or we move the logic of show to it and call out to it within show. ",
            "commit_id": "33ee5810ddf72d6cb9ec0497af01e3d7003c9963",
            "created_at": "2024-11-30T16:43:48Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1864321758",
            "id": 1864321758,
            "in_reply_to_id": 1864093226,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vH0re",
            "original_commit_id": "33ee5810ddf72d6cb9ec0497af01e3d7003c9963",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 1,
            "pull_request_review_id": 2470949395,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864321758/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-11-30T16:43:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864321758",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1864375317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864375317"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  local handle = assert(io.open(M.tty_name(), \"w\"))\r\n```\r\n\r\nDoes the same since the return type on error is `{ nil, \"%s: No such file or directory\", 2 }`.",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-11-30T17:43:50Z",
            "diff_hunk": "@@ -0,0 +1,133 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = \"\\x07\", -- aka ^G\n+  ESC = \"\\x1B\", -- aka ^[ aka \\033\n+}\n+\n+---Retrieve the tty name used by the editor.\n+---\n+---E.g. /dev/ttys008\n+---@return string|nil\n+local function get_tty_name()\n+  if vim.fn.has(\"win32\") == 1 then\n+    -- On windows, we use \\\\.\\CON for reading and writing\n+    return \"\\\\\\\\.\\\\CON\"\n+  else\n+    -- Linux/Mac: Use `tty` command, which reads the terminal name\n+    --            in the form of something like /dev/ttys008\n+    local handle = io.popen(\"tty 2>/dev/null\")\n+    if not handle then return nil end\n+    local result = handle:read(\"*a\")\n+    handle:close()\n+    result = vim.fn.trim(result)\n+    if result == \"\" then return nil end\n+    return result\n+  end\n+end\n+\n+---Returns the name of the tty associated with the terminal.\n+---@return string\n+function M.tty_name()\n+  if not M.__tty_name then\n+    M.__tty_name = assert(get_tty_name(), \"failed to read editor tty name\")\n+  end\n+\n+  return M.__tty_name\n+end\n+\n+---Writes data to the editor tty.\n+---@param ... string|number\n+function M.write(...)\n+  local handle = io.open(M.tty_name(), \"w\")\n+  if not handle then\n+    error(\"failed to open \" .. M.tty_name())\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1864375317",
            "id": 1864375317,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vIBwV",
            "original_commit_id": "33ee5810ddf72d6cb9ec0497af01e3d7003c9963",
            "original_line": 47,
            "original_position": 47,
            "original_start_line": 44,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2470994902,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864375317/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-30T17:44:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864375317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865785053"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865785053"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim.ui.img` seems like the right place for this (else why do we have `vim.ui`? :)",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T12:44:17Z",
            "diff_hunk": "@@ -31,6 +31,7 @@ for k, v in pairs({\n   loader = true,\n   func = true,\n   F = true,\n+  img = true,",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865785053",
            "id": 1865785053,
            "line": 34,
            "node_id": "PRRC_kwDOAPphoM5vNZ7d",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 34,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 4,
            "pull_request_review_id": 2472597418,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865785053/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T12:44:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865785053",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865788219"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865788219"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a need for this to be defined on `vim`? usually code should just `require()` stuff, just-in-time if it wants \"lazy\" behavior.\r\n\r\n `vim._defer_require` is for things that we actually need on `vim.*`.",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T12:46:42Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+local img = vim._defer_require('vim.img', {\n+  _backend = ..., --- @module 'vim.img._backend'\n+  _detect = ..., --- @module 'vim.img._detect'\n+  _image = ..., --- @module 'vim.img._image'\n+  _terminal = ..., --- @module 'vim.img._terminal'",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865788219",
            "id": 1865788219,
            "line": 5,
            "node_id": "PRRC_kwDOAPphoM5vNas7",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/img.lua",
            "position": 5,
            "pull_request_review_id": 2472602585,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865788219/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T12:46:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865788219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865791901"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865791901"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's try to orient around \"UI\", not \"terminal\", where possible. This might only support terminals for now. But there is really no need to mention \"neovim\" etc here anyway.\r\n\r\n```suggestion\r\n--- Displays an image. Currently only supports the |TUI|.\r\n```",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T12:49:23Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+local img = vim._defer_require('vim.img', {\n+  _backend = ..., --- @module 'vim.img._backend'\n+  _detect = ..., --- @module 'vim.img._detect'\n+  _image = ..., --- @module 'vim.img._image'\n+  _terminal = ..., --- @module 'vim.img._terminal'\n+})\n+\n+---Loads an image into memory, returning a wrapper around the image.\n+---\n+---Accepts `data` as base64-encoded bytes, or a `filename` that will be loaded.\n+---@param opts {data?:string, filename?:string}\n+---@return vim.img.Image\n+function img.load(opts)\n+  return img._image:new(opts)\n+end\n+\n+img.protocol = (function()\n+  ---@class vim.img.Protocol 'iterm2'|'kitty'|'sixel'\n+\n+  ---@type vim.img.Protocol|nil\n+  local protocol = nil\n+\n+  local loaded = false\n+\n+  ---Determines the preferred graphics protocol to use by default.\n+  ---\n+  ---@return vim.img.Protocol|nil\n+  return function()\n+    if not loaded then\n+      local graphics = img._detect().graphics\n+\n+      ---@diagnostic disable-next-line:cast-type-mismatch\n+      ---@cast graphics vim.img.Protocol|nil\n+      protocol = graphics\n+\n+      loaded = true\n+    end\n+\n+    return protocol\n+  end\n+end)()\n+\n+---@class vim.img.Opts: vim.img.Backend.RenderOpts\n+---@field backend? vim.img.Protocol|vim.img.Backend\n+\n+---Displays the image within the terminal used by neovim.",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865791901",
            "id": 1865791901,
            "line": 46,
            "node_id": "PRRC_kwDOAPphoM5vNbmd",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": null,
            "path": "runtime/lua/vim/img.lua",
            "position": 46,
            "pull_request_review_id": 2472608213,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865791901/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T12:50:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865791901",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865796429"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865796429"
                }
            },
            "author_association": "MEMBER",
            "body": "would \"provider\" fit here? that aligns with our existing vocabulary. or \"strategy\", I guess.\r\n```suggestion\r\n---@class vim.img.Provider\r\n```",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T12:52:55Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+---@class vim.img.Backend",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865796429",
            "id": 1865796429,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vNctN",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_backend.lua",
            "position": 1,
            "pull_request_review_id": 2472615517,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865796429/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T12:52:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865796429",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865801668"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865801668"
                }
            },
            "author_association": "MEMBER",
            "body": "should this live in `runtime/lua/vim/termcap.lua` ? cc @gpanders ",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T12:56:29Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865801668",
            "id": 1865801668,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vNd_E",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": 1,
            "pull_request_review_id": 2472623185,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865801668/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-12-02T12:56:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865801668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865804083"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865804083"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a `on_xx` name that makes sense here, instead of `cb` / `callback` (which are discouraged)\r\n\r\n```suggestion\r\nfunction M:load_from_file(filename, on_load)\r\n```",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T12:58:09Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)\n+  opts = opts or {}\n+\n+  -- Chunk size, defaulting to 4k\n+  local chunk_size = opts.size or 4096\n+\n+  local data = self.data\n+  if not data then\n+    return\n+  end\n+\n+  local pos = 1\n+  local len = string.len(data)\n+  while pos <= len do\n+    -- Get our next chunk from [pos, pos + chunk_size)\n+    local end_pos = pos + chunk_size - 1\n+    local chunk = data:sub(pos, end_pos)\n+\n+    -- If we have a chunk available, invoke our callback\n+    if string.len(chunk) > 0 then\n+      local has_more = end_pos + 1 <= len\n+      pcall(f, chunk, pos, has_more)\n+    end\n+\n+    pos = end_pos + 1\n+  end\n+end\n+\n+---Displays the image within the terminal used by neovim.\n+---@param opts? vim.img.Opts\n+function M:show(opts)\n+  vim.img.show(self, opts)\n+end\n+\n+---Loads data for an image from a file, replacing any existing data.\n+---If a callback provided, will load asynchronously; otherwise, is blocking.\n+---@param filename string\n+---@param cb fun(err:string|nil, image:vim.img.Image|nil)\n+---@overload fun(filename:string):vim.img.Image\n+function M:load_from_file(filename, cb)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865804083",
            "id": 1865804083,
            "line": 78,
            "node_id": "PRRC_kwDOAPphoM5vNekz",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 78,
            "pull_request_review_id": 2472626732,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865804083/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T12:58:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865804083",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865806661"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865806661"
                }
            },
            "author_association": "MEMBER",
            "body": "why is this code not in `runtime/lua/vim/img.lua` ?",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T12:59:57Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865806661",
            "id": 1865806661,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vNfNF",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 1,
            "pull_request_review_id": 2472630752,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865806661/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-12-02T12:59:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865806661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865811123"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865811123"
                }
            },
            "author_association": "MEMBER",
            "body": "RFC: should we use pixels consistently, and maybe provide a `pixels_to_cells` util function (and `cells_to_pixels`)?\r\n\r\nAfter all, even for `crop` I would guess it will be very common to want to decide the crop dimensions based on cells. ",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T13:03:07Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+---@class vim.img.Backend\n+---@field render fun(image:vim.img.Image, opts?:vim.img.Backend.RenderOpts)\n+\n+---@class vim.img.Backend.RenderOpts\n+---@field crop? {x:integer, y:integer, width:integer, height:integer} units are pixels\n+---@field pos? {row:integer, col:integer} units are cells\n+---@field size? {width:integer, height:integer} units are cells",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865811123",
            "id": 1865811123,
            "line": 7,
            "node_id": "PRRC_kwDOAPphoM5vNgSz",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 5,
            "path": "runtime/lua/vim/img/_backend.lua",
            "position": 7,
            "pull_request_review_id": 2472637581,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865811123/reactions"
            },
            "side": "RIGHT",
            "start_line": 5,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-02T13:03:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865811123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866064296"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866064296"
                }
            },
            "author_association": "MEMBER",
            "body": "`:help dev-patterns`\r\n\r\n```suggestion\r\nfunction M:for_each_chunk(opts, f)\r\n```\r\n\r\nIf you want to support optional `opts`, make it an \"overload\".",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:32:12Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866064296",
            "id": 1866064296,
            "line": 39,
            "node_id": "PRRC_kwDOAPphoM5vOeGo",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 39,
            "pull_request_review_id": 2473041675,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866064296/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:33:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866064296",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866073747"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866073747"
                }
            },
            "author_association": "MEMBER",
            "body": "normally new() would not be an instance/self method, see e.g. `Iter.new` https://github.com/neovim/neovim/blob/c7ec010ade0832e43c7a319ea69fae642771479d/runtime/lua/vim/iter.lua#L1018",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:37:55Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866073747",
            "id": 1866073747,
            "line": 10,
            "node_id": "PRRC_kwDOAPphoM5vOgaT",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 10,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 10,
            "pull_request_review_id": 2473057382,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866073747/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:37:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866073747",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866076814"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866076814"
                }
            },
            "author_association": "MEMBER",
            "body": "nit: probably should be an error? or this should force it to load?\r\n\r\nor alternatively, this could check `size() == 0`, then we don't need `is_loaded()` (until proven otherwise)",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:39:06Z",
            "diff_hunk": "@@ -0,0 +1,108 @@\n+---@class vim.img.KittyBackend: vim.img.Backend\n+local M = {}\n+\n+---For kitty, we need to write an image in chunks\n+---\n+---Graphics codes are in this form:\n+---\n+---    <ESC>_G<control data>;<payload><ESC>\\\n+---\n+---To stream data for a PNG, we specify the format `f=100`.\n+---\n+---To simultaneously transmit and display an image, we use `a=T`.\n+---\n+---Chunking data (such as from over a network) requires the\n+---specification of `m=0|1`, where all chunks must have a\n+---value of `1` except the very last chunk.\n+---@param data string\n+local function write_seq(data)\n+  local terminal = require('vim.img._terminal')\n+\n+  terminal.write(terminal.code.ESC .. '_G') -- Begin sequence\n+  terminal.write(data) -- Primary data\n+  terminal.write(terminal.code.ESC .. '\\\\') -- End sequence\n+end\n+\n+---Builds a header table of key value pairs.\n+---@param opts vim.img.Backend.RenderOpts\n+---@return table<string, string>\n+local function make_header(opts)\n+  ---@type table<string, string>\n+  local header = {}\n+\n+  header['a'] = 'T'\n+  header['f'] = '100'\n+\n+  local crop = opts.crop\n+  local size = opts.size\n+\n+  if crop then\n+    header['x'] = tostring(crop.x)\n+    header['y'] = tostring(crop.y)\n+    header['w'] = tostring(crop.width)\n+    header['h'] = tostring(crop.height)\n+  end\n+\n+  if size then\n+    header['c'] = tostring(size.width)\n+    header['r'] = tostring(size.height)\n+  end\n+\n+  return header\n+end\n+\n+---@param image vim.img.Image\n+---@param opts vim.img.Backend.RenderOpts\n+local function write_multipart_image(image, opts)\n+  image:for_each_chunk(function(chunk, pos, has_more)\n+    local data = {}\n+\n+    -- If at the beginning of our image, mark as a PNG to be\n+    -- transmitted and displayed immediately\n+    if pos == 1 then\n+      -- Add an entry in our data to write out to the terminal\n+      -- that is \"k=v,\" for the key-value entries from the header\n+      for key, value in pairs(make_header(opts)) do\n+        table.insert(data, key .. '=' .. value .. ',')\n+      end\n+    end\n+\n+    -- If we are still sending chunks and not at the end\n+    if has_more then\n+      table.insert(data, 'm=1')\n+    else\n+      table.insert(data, 'm=0')\n+    end\n+\n+    -- If we have a chunk available, write it\n+    if string.len(chunk) > 0 then\n+      table.insert(data, ';')\n+      table.insert(data, chunk)\n+    end\n+\n+    write_seq(table.concat(data))\n+  end)\n+end\n+\n+---@param image vim.img.Image\n+---@param opts? vim.img.Backend.RenderOpts\n+function M.render(image, opts)\n+  local terminal = require('vim.img._terminal')\n+\n+  if not image:is_loaded() then\n+    return",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866076814",
            "id": 1866076814,
            "line": 93,
            "node_id": "PRRC_kwDOAPphoM5vOhKO",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 93,
            "original_position": 93,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_backend/kitty.lua",
            "position": 93,
            "pull_request_review_id": 2473061654,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866076814/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:41:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866076814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866083848"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866083848"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we return an iterator instead (`:help iterator`)? That is more idiomatic, and composes with `vim.iter`, `ipairs()`, etc.",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:42:49Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866083848",
            "id": 1866083848,
            "in_reply_to_id": 1866064296,
            "line": 39,
            "node_id": "PRRC_kwDOAPphoM5vOi4I",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 39,
            "pull_request_review_id": 2473072508,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866083848/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:43:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866083848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866086124"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866086124"
                }
            },
            "author_association": "NONE",
            "body": "> RFC: should we use pixels consistently, and maybe provide a pixels_to_cells util function (and cells_to_pixels)?\r\n\r\nI saw something like that in `image.nvim`, so it'd be a good idea. I wasn't happy that the units were different between crop and the others. For me personally, I don't know how I'd think of crop in cells, though, as it's in relation to the raw image file whereas `pos` and `size` are in relation to placement on top of neovim.\r\n\r\nSo two different coordinate spaces; however, happy to switch `crop` to be the same units",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:44:10Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+---@class vim.img.Backend\n+---@field render fun(image:vim.img.Image, opts?:vim.img.Backend.RenderOpts)\n+\n+---@class vim.img.Backend.RenderOpts\n+---@field crop? {x:integer, y:integer, width:integer, height:integer} units are pixels\n+---@field pos? {row:integer, col:integer} units are cells\n+---@field size? {width:integer, height:integer} units are cells",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866086124",
            "id": 1866086124,
            "in_reply_to_id": 1865811123,
            "line": 7,
            "node_id": "PRRC_kwDOAPphoM5vOjbs",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 5,
            "path": "runtime/lua/vim/img/_backend.lua",
            "position": 7,
            "pull_request_review_id": 2473075922,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866086124/reactions"
            },
            "side": "RIGHT",
            "start_line": 5,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-02T15:44:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866086124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866099662"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866099662"
                }
            },
            "author_association": "NONE",
            "body": "Just a separation of responsibilities to different files. Can merge it into `img.lua` if that's a better practice.",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:51:46Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866099662",
            "id": 1866099662,
            "in_reply_to_id": 1865806661,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vOmvO",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 1,
            "pull_request_review_id": 2473095971,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866099662/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-12-02T15:51:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866099662",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866104355"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866104355"
                }
            },
            "author_association": "NONE",
            "body": "Happy for it to live wherever you'd like. It felt odd to have this live under `img`, and I was unaware of `termcap.lua`. Let me know what you'd like to do.\r\n\r\nAlso happy to break out this logic to a separate PR if we want to review and merge this logic separately. It'd need to be handled prior to the image work, though. Or it can live in this PR.",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:54:29Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866104355",
            "id": 1866104355,
            "in_reply_to_id": 1865801668,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vOn4j",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": 1,
            "pull_request_review_id": 2473102898,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866104355/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-12-02T15:54:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866104355",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866112258"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866112258"
                }
            },
            "author_association": "NONE",
            "body": "@justinmk sure, happy to put it there. Would you like me to refactor this PR to have it placed under the namespace?",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:59:10Z",
            "diff_hunk": "@@ -31,6 +31,7 @@ for k, v in pairs({\n   loader = true,\n   func = true,\n   F = true,\n+  img = true,",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866112258",
            "id": 1866112258,
            "in_reply_to_id": 1865785053,
            "line": 34,
            "node_id": "PRRC_kwDOAPphoM5vOp0C",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 34,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 4,
            "pull_request_review_id": 2473115154,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866112258/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:59:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866112258",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866113370"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866113370"
                }
            },
            "author_association": "NONE",
            "body": "Cool, I wasn't sure the best practice here. I just looked at how `vim.lsp` was done and copied it. So I can switch to regular `require` instead.",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:59:48Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+local img = vim._defer_require('vim.img', {\n+  _backend = ..., --- @module 'vim.img._backend'\n+  _detect = ..., --- @module 'vim.img._detect'\n+  _image = ..., --- @module 'vim.img._image'\n+  _terminal = ..., --- @module 'vim.img._terminal'",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866113370",
            "id": 1866113370,
            "in_reply_to_id": 1865788219,
            "line": 5,
            "node_id": "PRRC_kwDOAPphoM5vOqFa",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/img.lua",
            "position": 5,
            "pull_request_review_id": 2473116850,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866113370/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:59:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866113370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866116472"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866116472"
                }
            },
            "author_association": "NONE",
            "body": "@justinmk yeah, I can do that. Was unaware of neovim having an iterator, so it'll be nice to get a feel for how that works.",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T16:01:46Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866116472",
            "id": 1866116472,
            "in_reply_to_id": 1866064296,
            "line": 39,
            "node_id": "PRRC_kwDOAPphoM5vOq14",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 39,
            "pull_request_review_id": 2473121745,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866116472/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T16:01:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866116472",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866124325"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866124325"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe we can punt on this for now, because these fields are dict-like. But there is still some ambiguity with the current key names (`crop.width` is pixels, but `size.width` is cells).\r\n\r\nInstead, we could future-proof this by requiring an explicit `unit` field (note: below is pseudocode, I didn't check LuaLS syntax):\r\n\r\n```\r\n---@class img.Pos\r\n---@field unit:string\r\n---@field x:integer\r\n---@field y:integer\r\n\r\n---@class img.Region\r\n---@field pos1: img.Pos\r\n---@field pos2: img.Pos\r\n\r\n---@field crop? img.Region\r\n---@field pos?  img.Pos\r\n---@field size? {unit:string, width:integer, height:integer}\r\n```\r\n\r\nNote: the above is flirting with https://github.com/neovim/neovim/issues/25509 territory, and I don't want to encumber this PR with that scope. But it'll help to at least reference it and see if it makes sense to stub a similar skeleton here.",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T16:06:19Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+---@class vim.img.Backend\n+---@field render fun(image:vim.img.Image, opts?:vim.img.Backend.RenderOpts)\n+\n+---@class vim.img.Backend.RenderOpts\n+---@field crop? {x:integer, y:integer, width:integer, height:integer} units are pixels\n+---@field pos? {row:integer, col:integer} units are cells\n+---@field size? {width:integer, height:integer} units are cells",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866124325",
            "id": 1866124325,
            "in_reply_to_id": 1865811123,
            "line": 7,
            "node_id": "PRRC_kwDOAPphoM5vOswl",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 5,
            "path": "runtime/lua/vim/img/_backend.lua",
            "position": 7,
            "pull_request_review_id": 2473135788,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866124325/reactions"
            },
            "side": "RIGHT",
            "start_line": 5,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-02T16:06:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866124325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "NONE",
            "body": "Heads up, I know there is formatting of commit messages needed and linting for preferences in Lua style guides.\r\n\r\nThe current code is me migrating over my working code from a private repo - not a fork of neovim - to be a pull request here. I'll work on updating the PR to be compliant, but wanted the code to be visible for comments.\r\n\r\nIn particular, I could use help in rewriting that parts of the PR that make use of Lua's io library - assuming we want to use a neovim equivalent - and to refactor parts of the code that could be improved. So looking for stronger critique, challenges, and suggestions ðŸ˜„ This was an example-turned-PR, so not all of the code is high quality!\r\n\r\n---\r\n\r\nAn example of doing this with the current PR:\r\n\r\n![image-example-pr](https://github.com/user-attachments/assets/466de1a6-333f-4e97-a90f-ea3e1ae241da)\r\n\r\n```lua\r\nlocal file = vim.img.load({\r\n    filename = \"/Users/senkwich/Pictures/org-roam-logo.png\",\r\n})\r\n\r\nvim.img.show(file, {\r\n    pos = { row = 8, col = 8 }, \r\n    backend = \"iterm2\",\r\n})\r\n```\r\n",
            "created_at": "2024-11-30T00:42:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2508758798",
            "id": 2508758798,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6ViJ8O",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2508758798/reactions"
            },
            "updated_at": "2024-11-30T01:17:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2508758798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk heads up, one complexity that we'll punt for now is supporting non-PNG images. I think we can write a pretty straightforward decoder for BMP & GIF, but JPEG is very complex and would /probably/ need a specialized C function to do it with the assistance of a JPEG-oriented library. This is in order to get RGB or RGBA data.\r\n\r\n@kovidgoyal I'm assuming my understanding of pixel formats is correct in that if we fed in any other image format that was not PNG, using `f=100` would not work, and we'd need to instead decode the base64 image data, figure out the format (i.e. bmp, jpeg, etc) and then extract a 24-bit RGB or a 32-bit RGBA set of data to feed in order for your protocol to work.\r\n\r\nI don't know what iterm2's graphics protocol supports as I've only tested with png and I don't see anything mentioned on their doc page. I also don't know what sixel supports or how it works since I haven't read the documentation yet, but I imagine given the age of sixel that we'd need to support image decoding of some kind to break out rgb/rgba data.",
            "created_at": "2024-11-30T21:29:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2509390983",
            "id": 2509390983,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6VkkSH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509390983/reactions"
            },
            "updated_at": "2024-11-30T21:29:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509390983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "On Sat, Nov 30, 2024 at 01:29:25PM -0800, Chip Senkbeil wrote:\n> @justinmk heads up, one complexity that we'll punt for now is supporting non-PNG images. I think we can write a pretty straightforward decoder for BMP & GIF, but JPEG is very complex and would /probably/ need a specialized C function to do it with the assistance of a JPEG-oriented library. This is in order to get RGB or RGBA data.\n>\n> @kovidgoyal I'm assuming my understanding of pixel formats is correct in that if we fed in any other image format that was not PNG, using `f=100` would not work, and we'd need to instead decode the base64 image data, figure out the format (i.e. bmp, jpeg, etc) and then extract a 24-bit RGB or a 32-bit RGBA set of data to feed in order for your protocol to work.\n\nYes, correct. You can use either imagemagick or the statically compiled\nkitten binary that comes as part of kitty to do this.\n\n>\n> I don't know what iterm2's graphics protocol supports as I've only tested with png and I don't see anything mentioned on their doc page. I also don't know what sixel supports or how it works since I haven't read the documentation yet, but I imagine given the age of sixel that we'd need to support image decoding of some kind to break out rgb/rgba data.\n\nsixel supports nothing, you need to convert every image format to the\nsixel format and transmit that.\n",
            "created_at": "2024-12-01T03:15:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2509545697",
            "id": 2509545697,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6VlKDh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509545697/reactions"
            },
            "updated_at": "2024-12-01T03:15:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509545697",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1308621?v=4",
                "events_url": "https://api.github.com/users/kovidgoyal/events{/privacy}",
                "followers_url": "https://api.github.com/users/kovidgoyal/followers",
                "following_url": "https://api.github.com/users/kovidgoyal/following{/other_user}",
                "gists_url": "https://api.github.com/users/kovidgoyal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kovidgoyal",
                "id": 1308621,
                "login": "kovidgoyal",
                "node_id": "MDQ6VXNlcjEzMDg2MjE=",
                "organizations_url": "https://api.github.com/users/kovidgoyal/orgs",
                "received_events_url": "https://api.github.com/users/kovidgoyal/received_events",
                "repos_url": "https://api.github.com/users/kovidgoyal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kovidgoyal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kovidgoyal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kovidgoyal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> This generally LGTM ðŸš€ , modulo the above comments. Thank you!\r\n> \r\n> If you are wondering how to write tests, my first thought is to look at `terminal/clipboard_spec.lua`\r\n> \r\n> https://github.com/neovim/neovim/blob/c7ec010ade0832e43c7a319ea69fae642771479d/test/functional/terminal/clipboard_spec.lua#L49\r\n> \r\n> \r\n> , and maybe `:help v:termresponse`, `:help TermResponse`.\r\n\r\nGreat, I'll take a look. I've written tests for plugins of mine using the busted/luassert libraries.\r\n\r\nAn open question for you and others is if there's a best practice for testing the images themselves. I can verify that we write escape codes to a terminal in a format that we expect. I don't know how - or if it matters - to test that an image actually shows up. Feels like that's out of scope beyond manually asserting that they work on a handful of terminals.",
            "created_at": "2024-12-02T16:03:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2511936495",
            "id": 2511936495,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6VuRvv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2511936495/reactions"
            },
            "updated_at": "2024-12-02T16:03:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2511936495",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> there's a best practice for testing the images themselves. I can verify that we write escape codes to a terminal in a format that we expect. I don't know how - or if it matters - to test that an image actually shows up. Feels like that's out of scope beyond manually asserting that they work on a handful of terminals.\r\n\r\nFor now it's fine to just test that the right escape codes surround a bunch of base64 bytes. ",
            "created_at": "2024-12-02T16:07:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2511953737",
            "id": 2511953737,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6VuV9J",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2511953737/reactions"
            },
            "updated_at": "2024-12-02T16:07:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2511953737",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31399/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31399/commits",
    "created_at": "2024-11-29T22:01:21Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31399.diff",
    "draft": false,
    "head": {
        "label": "chipsenkbeil:feat/ImageApi",
        "ref": "feat/ImageApi",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/chipsenkbeil/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/chipsenkbeil/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/chipsenkbeil/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/chipsenkbeil/neovim/branches{/branch}",
            "clone_url": "https://github.com/chipsenkbeil/neovim.git",
            "collaborators_url": "https://api.github.com/repos/chipsenkbeil/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/chipsenkbeil/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/chipsenkbeil/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/chipsenkbeil/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/chipsenkbeil/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/chipsenkbeil/neovim/contributors",
            "created_at": "2024-11-29T21:51:25Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/chipsenkbeil/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/chipsenkbeil/neovim/downloads",
            "events_url": "https://api.github.com/repos/chipsenkbeil/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/chipsenkbeil/neovim/forks",
            "full_name": "chipsenkbeil/neovim",
            "git_commits_url": "https://api.github.com/repos/chipsenkbeil/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/chipsenkbeil/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/chipsenkbeil/neovim/git/tags{/sha}",
            "git_url": "git://github.com/chipsenkbeil/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/chipsenkbeil/neovim/hooks",
            "html_url": "https://github.com/chipsenkbeil/neovim",
            "id": 896248861,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/chipsenkbeil/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/chipsenkbeil/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/chipsenkbeil/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/chipsenkbeil/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/chipsenkbeil/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/chipsenkbeil/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/chipsenkbeil/neovim/merges",
            "milestones_url": "https://api.github.com/repos/chipsenkbeil/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDONWusHQ",
            "notifications_url": "https://api.github.com/repos/chipsenkbeil/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/chipsenkbeil/neovim/pulls{/number}",
            "pushed_at": "2024-12-01T20:24:09Z",
            "releases_url": "https://api.github.com/repos/chipsenkbeil/neovim/releases{/id}",
            "size": 289248,
            "ssh_url": "git@github.com:chipsenkbeil/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/chipsenkbeil/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/chipsenkbeil/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/chipsenkbeil/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/chipsenkbeil/neovim/subscription",
            "svn_url": "https://github.com/chipsenkbeil/neovim",
            "tags_url": "https://api.github.com/repos/chipsenkbeil/neovim/tags",
            "teams_url": "https://api.github.com/repos/chipsenkbeil/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/chipsenkbeil/neovim/git/trees{/sha}",
            "updated_at": "2024-12-01T06:32:39Z",
            "url": "https://api.github.com/repos/chipsenkbeil/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
            "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
            "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
            "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
            "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/chipsenkbeil",
            "id": 2481802,
            "login": "chipsenkbeil",
            "node_id": "MDQ6VXNlcjI0ODE4MDI=",
            "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
            "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
            "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/chipsenkbeil",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31399",
    "id": 2207978338,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "95d62a9901eff451582521bbd1bee407721ed3a2",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6DmxNi",
    "number": 31399,
    "patch_url": "https://github.com/neovim/neovim/pull/31399.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31399/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
    "title": "feat(img): implement image API for absolute positions",
    "updated_at": "2024-12-02T16:07:41Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
        "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
        "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
        "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
        "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chipsenkbeil",
        "id": 2481802,
        "login": "chipsenkbeil",
        "node_id": "MDQ6VXNlcjI0ODE4MDI=",
        "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
        "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
        "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chipsenkbeil",
        "user_view_type": "public"
    }
}