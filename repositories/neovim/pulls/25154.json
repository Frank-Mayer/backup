{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25154/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25154/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25154"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25154"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25154/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/fe3265c2c381cb499441199a62e3d5c56a585ab7"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5038,
            "forks_count": 5038,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1707,
            "open_issues_count": 1707,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-12-07T01:35:41Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 241695,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 71531,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-12-07T01:52:10Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 71531,
            "watchers_count": 71531,
            "web_commit_signoff_required": false
        },
        "sha": "2e92065686f62851318150a315591c30b8306a4b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Might be jumping the gun on this (not very critical), but it was low-cost to just post it.\r\n\r\nIt replaces the lost recursive functionality from #25118 and mainly it would just exist to nudge people away from coming up with something worse.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25154#discussion_r1325829021"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325829021"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I don't think a \"default\" for a key makes sense here",
            "commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "created_at": "2023-09-14T11:47:55Z",
            "diff_hunk": "@@ -2323,6 +2323,18 @@ vim.tbl_values({t})                                         *vim.tbl_values()*\n     Return: ~\n         (list) List of values\n \n+vim.traverse({node}, {key}, {visitor})                        *vim.traverse()*\n+    Visits children of a node recursively, applying the provided visitor\n+    function\n+\n+    Parameters: ~\n+      • {node}     (table) The root node to visit\n+      • {key}      nil|string|fun(node: Node): Node[] How to find the children",
            "html_url": "https://github.com/neovim/neovim/pull/25154#discussion_r1325829021",
            "id": 1325829021,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PBoud",
            "original_commit_id": "0889fa30290843222a7a12e1a10b2a1bed3a5b79",
            "original_line": 2332,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1626695638,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325829021/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-14T11:47:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325829021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25154#discussion_r1326322788"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326322788"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        local comments = {}\r\n        vim.traverse(\r\n```\r\nA bit pedantic,  but I like code snippets to be copy&pasteable, if possible :)",
            "commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "created_at": "2023-09-14T17:44:48Z",
            "diff_hunk": "@@ -2323,6 +2323,30 @@ vim.tbl_values({t})                                         *vim.tbl_values()*\n     Return: ~\n         (list) List of values\n \n+vim.traverse({tree}, {key}, {visitor})                        *vim.traverse()*\n+    Traverses any tree-like object defined by `key`, calling the provided\n+    `visitor` on each descendant.\n+\n+    Example: >lua\n+\n+        vim.traverse(",
            "html_url": "https://github.com/neovim/neovim/pull/25154#discussion_r1326322788",
            "id": 1326322788,
            "line": 2332,
            "node_id": "PRRC_kwDOAPphoM5PDhRk",
            "original_commit_id": "39c94c983562d635879358df8d3328bc433dad29",
            "original_line": 2332,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 10,
            "pull_request_review_id": 1627452046,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326322788/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-14T17:45:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326322788",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25154#discussion_r1326351087"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326351087"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "no worries",
            "commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "created_at": "2023-09-14T18:12:02Z",
            "diff_hunk": "@@ -2323,6 +2323,30 @@ vim.tbl_values({t})                                         *vim.tbl_values()*\n     Return: ~\n         (list) List of values\n \n+vim.traverse({tree}, {key}, {visitor})                        *vim.traverse()*\n+    Traverses any tree-like object defined by `key`, calling the provided\n+    `visitor` on each descendant.\n+\n+    Example: >lua\n+\n+        vim.traverse(",
            "html_url": "https://github.com/neovim/neovim/pull/25154#discussion_r1326351087",
            "id": 1326351087,
            "in_reply_to_id": 1326322788,
            "line": 2332,
            "node_id": "PRRC_kwDOAPphoM5PDoLv",
            "original_commit_id": "39c94c983562d635879358df8d3328bc433dad29",
            "original_line": 2332,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 10,
            "pull_request_review_id": 1627500066,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326351087/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-14T18:12:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326351087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25154#discussion_r1326797007"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326797007"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it would be helpful to return the `node` if `visitor` returns `true` (and else return `nil`). TypeScript does something like that [here](https://github.com/microsoft/TypeScript/blob/b3770e78527a379d2345412bbab5acc0bafe0090/src/compiler/core.ts#L34).",
            "commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "created_at": "2023-09-15T05:11:24Z",
            "diff_hunk": "@@ -396,6 +396,37 @@ function vim.tbl_deep_extend(behavior, ...)\n   return tbl_extend(behavior, true, ...)\n end\n \n+--- Traverses any tree-like object defined by `key`,\n+--- calling the provided `visitor` on each descendant.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- local comments = {}\n+--- vim.traverse(\n+---   language_tree,\n+---   function(tree) return tree:children() end,\n+---   function(tree)\n+---     if tree:lang() == \"comment\" then\n+---       table.insert(comments, tree)\n+---     end\n+---   end\n+--- )\n+--- ```\n+---\n+---@param tree any The object to traverse.\n+---@param key string|fun(subtree: any): any[] Define the \"children\" to visit.\n+---@param visitor fun(subtree: any): boolean|nil Function to call on each descendant.\n+---       Return true to skip the rest of `subtree`.",
            "html_url": "https://github.com/neovim/neovim/pull/25154#discussion_r1326797007",
            "id": 1326797007,
            "line": 420,
            "node_id": "PRRC_kwDOAPphoM5PFVDP",
            "original_commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "original_line": 420,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 25,
            "pull_request_review_id": 1628201425,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326797007/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T05:12:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326797007",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25154#discussion_r1326799587"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326799587"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Interesting! I thought about `vim.traverse` having a return value; what makes it hard is that you need to apply a reducer (such as sum, or array accumulate) since multiple branches may return. Whereas when iterating over a list there is only one branch.\r\n\r\nI could make a `tree_reduce` but I think I'd be getting ahead of myself.\r\n\r\nI'll think about it some more!",
            "commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "created_at": "2023-09-15T05:16:18Z",
            "diff_hunk": "@@ -396,6 +396,37 @@ function vim.tbl_deep_extend(behavior, ...)\n   return tbl_extend(behavior, true, ...)\n end\n \n+--- Traverses any tree-like object defined by `key`,\n+--- calling the provided `visitor` on each descendant.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- local comments = {}\n+--- vim.traverse(\n+---   language_tree,\n+---   function(tree) return tree:children() end,\n+---   function(tree)\n+---     if tree:lang() == \"comment\" then\n+---       table.insert(comments, tree)\n+---     end\n+---   end\n+--- )\n+--- ```\n+---\n+---@param tree any The object to traverse.\n+---@param key string|fun(subtree: any): any[] Define the \"children\" to visit.\n+---@param visitor fun(subtree: any): boolean|nil Function to call on each descendant.\n+---       Return true to skip the rest of `subtree`.",
            "html_url": "https://github.com/neovim/neovim/pull/25154#discussion_r1326799587",
            "id": 1326799587,
            "in_reply_to_id": 1326797007,
            "line": 420,
            "node_id": "PRRC_kwDOAPphoM5PFVrj",
            "original_commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "original_line": 420,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 25,
            "pull_request_review_id": 1628204971,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326799587/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T05:17:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326799587",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25154#discussion_r1326804741"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326804741"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmmm that's true. There's also the hacky approach of having a special return value for indicating that the traversal must stop completely, like done [here](https://github.com/microsoft/TypeScript/blob/b3770e78527a379d2345412bbab5acc0bafe0090/src/compiler/utilitiesPublic.ts#L717). I don't like this too much though :/",
            "commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "created_at": "2023-09-15T05:25:36Z",
            "diff_hunk": "@@ -396,6 +396,37 @@ function vim.tbl_deep_extend(behavior, ...)\n   return tbl_extend(behavior, true, ...)\n end\n \n+--- Traverses any tree-like object defined by `key`,\n+--- calling the provided `visitor` on each descendant.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- local comments = {}\n+--- vim.traverse(\n+---   language_tree,\n+---   function(tree) return tree:children() end,\n+---   function(tree)\n+---     if tree:lang() == \"comment\" then\n+---       table.insert(comments, tree)\n+---     end\n+---   end\n+--- )\n+--- ```\n+---\n+---@param tree any The object to traverse.\n+---@param key string|fun(subtree: any): any[] Define the \"children\" to visit.\n+---@param visitor fun(subtree: any): boolean|nil Function to call on each descendant.\n+---       Return true to skip the rest of `subtree`.",
            "html_url": "https://github.com/neovim/neovim/pull/25154#discussion_r1326804741",
            "id": 1326804741,
            "in_reply_to_id": 1326797007,
            "line": 420,
            "node_id": "PRRC_kwDOAPphoM5PFW8F",
            "original_commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "original_line": 420,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 25,
            "pull_request_review_id": 1628211879,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326804741/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T05:25:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326804741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25154#discussion_r1326809840"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326809840"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think that makes sense for a \"find\" use-case rather than a \"map\"/\"forEach\" use-case; if you care about the set of things that gets iterated vs cancelled, that becomes unpredictable for the user even if they know (leaky abstraction) whether it's DFS, BFS, or iterated DFS\r\n\r\nThe intention of this PR was to serve the \"forEach\" use-case and internally we usually use recursion in that way (and so cancelling wants to be of children not of siblings). But I've seen at least one plugin on GitHub Search that used it in a \"find\"-y way, so who knows, maybe \"find_in_tree\" or something could be a future utility lol.",
            "commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "created_at": "2023-09-15T05:34:51Z",
            "diff_hunk": "@@ -396,6 +396,37 @@ function vim.tbl_deep_extend(behavior, ...)\n   return tbl_extend(behavior, true, ...)\n end\n \n+--- Traverses any tree-like object defined by `key`,\n+--- calling the provided `visitor` on each descendant.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- local comments = {}\n+--- vim.traverse(\n+---   language_tree,\n+---   function(tree) return tree:children() end,\n+---   function(tree)\n+---     if tree:lang() == \"comment\" then\n+---       table.insert(comments, tree)\n+---     end\n+---   end\n+--- )\n+--- ```\n+---\n+---@param tree any The object to traverse.\n+---@param key string|fun(subtree: any): any[] Define the \"children\" to visit.\n+---@param visitor fun(subtree: any): boolean|nil Function to call on each descendant.\n+---       Return true to skip the rest of `subtree`.",
            "html_url": "https://github.com/neovim/neovim/pull/25154#discussion_r1326809840",
            "id": 1326809840,
            "in_reply_to_id": 1326797007,
            "line": 420,
            "node_id": "PRRC_kwDOAPphoM5PFYLw",
            "original_commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "original_line": 420,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 25,
            "pull_request_review_id": 1628218890,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326809840/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T05:35:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326809840",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25154#discussion_r1326816147"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326816147"
                }
            },
            "author_association": "MEMBER",
            "body": "Sounds reasonable :) FWIW \"visiting\" a tree could mean a ton of things.",
            "commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "created_at": "2023-09-15T05:44:34Z",
            "diff_hunk": "@@ -396,6 +396,37 @@ function vim.tbl_deep_extend(behavior, ...)\n   return tbl_extend(behavior, true, ...)\n end\n \n+--- Traverses any tree-like object defined by `key`,\n+--- calling the provided `visitor` on each descendant.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- local comments = {}\n+--- vim.traverse(\n+---   language_tree,\n+---   function(tree) return tree:children() end,\n+---   function(tree)\n+---     if tree:lang() == \"comment\" then\n+---       table.insert(comments, tree)\n+---     end\n+---   end\n+--- )\n+--- ```\n+---\n+---@param tree any The object to traverse.\n+---@param key string|fun(subtree: any): any[] Define the \"children\" to visit.\n+---@param visitor fun(subtree: any): boolean|nil Function to call on each descendant.\n+---       Return true to skip the rest of `subtree`.",
            "html_url": "https://github.com/neovim/neovim/pull/25154#discussion_r1326816147",
            "id": 1326816147,
            "in_reply_to_id": 1326797007,
            "line": 420,
            "node_id": "PRRC_kwDOAPphoM5PFZuT",
            "original_commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "original_line": 420,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 25,
            "pull_request_review_id": 1628227163,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326816147/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T05:45:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1326816147",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25154#discussion_r1327807098"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327807098"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "In Lua any value is a valid index, including functions, so this check will have an unexpected effect if a tree uses functions as its keys. I know this is a very weird use-case, but I think it is best avoided.",
            "commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "created_at": "2023-09-15T21:29:15Z",
            "diff_hunk": "@@ -396,6 +396,37 @@ function vim.tbl_deep_extend(behavior, ...)\n   return tbl_extend(behavior, true, ...)\n end\n \n+--- Traverses any tree-like object defined by `key`,\n+--- calling the provided `visitor` on each descendant.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- local comments = {}\n+--- vim.traverse(\n+---   language_tree,\n+---   function(tree) return tree:children() end,\n+---   function(tree)\n+---     if tree:lang() == \"comment\" then\n+---       table.insert(comments, tree)\n+---     end\n+---   end\n+--- )\n+--- ```\n+---\n+---@param tree any The object to traverse.\n+---@param key string|fun(subtree: any): any[] Define the \"children\" to visit.\n+---@param visitor fun(subtree: any): boolean|nil Function to call on each descendant.\n+---       Return true to skip the rest of `subtree`.\n+function vim.traverse(tree, key, visitor)\n+  if not visitor(tree) then\n+    local children = type(key) == 'function' and key(tree) or tree[key]",
            "html_url": "https://github.com/neovim/neovim/pull/25154#discussion_r1327807098",
            "id": 1327807098,
            "line": 423,
            "node_id": "PRRC_kwDOAPphoM5PJLp6",
            "original_commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "original_line": 423,
            "original_position": 28,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 28,
            "pull_request_review_id": 1629750660,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327807098/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T21:29:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327807098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4954650?v=4",
                "events_url": "https://api.github.com/users/HiPhish/events{/privacy}",
                "followers_url": "https://api.github.com/users/HiPhish/followers",
                "following_url": "https://api.github.com/users/HiPhish/following{/other_user}",
                "gists_url": "https://api.github.com/users/HiPhish/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HiPhish",
                "id": 4954650,
                "login": "HiPhish",
                "node_id": "MDQ6VXNlcjQ5NTQ2NTA=",
                "organizations_url": "https://api.github.com/users/HiPhish/orgs",
                "received_events_url": "https://api.github.com/users/HiPhish/received_events",
                "repos_url": "https://api.github.com/users/HiPhish/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HiPhish/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HiPhish/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HiPhish"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25154#discussion_r1327812548"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25154"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327812548"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Are you saying a user might want to pass in a `type(key) == 'function'` but get `tree[key]`? I think the user can accomplish that with `vim.traverse(tree, function(tree) return tree[key] end, visitor)` instead of `vim.traverse(tree, key, visitor)`.",
            "commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "created_at": "2023-09-15T21:35:28Z",
            "diff_hunk": "@@ -396,6 +396,37 @@ function vim.tbl_deep_extend(behavior, ...)\n   return tbl_extend(behavior, true, ...)\n end\n \n+--- Traverses any tree-like object defined by `key`,\n+--- calling the provided `visitor` on each descendant.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- local comments = {}\n+--- vim.traverse(\n+---   language_tree,\n+---   function(tree) return tree:children() end,\n+---   function(tree)\n+---     if tree:lang() == \"comment\" then\n+---       table.insert(comments, tree)\n+---     end\n+---   end\n+--- )\n+--- ```\n+---\n+---@param tree any The object to traverse.\n+---@param key string|fun(subtree: any): any[] Define the \"children\" to visit.\n+---@param visitor fun(subtree: any): boolean|nil Function to call on each descendant.\n+---       Return true to skip the rest of `subtree`.\n+function vim.traverse(tree, key, visitor)\n+  if not visitor(tree) then\n+    local children = type(key) == 'function' and key(tree) or tree[key]",
            "html_url": "https://github.com/neovim/neovim/pull/25154#discussion_r1327812548",
            "id": 1327812548,
            "in_reply_to_id": 1327807098,
            "line": 423,
            "node_id": "PRRC_kwDOAPphoM5PJM_E",
            "original_commit_id": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
            "original_line": 423,
            "original_position": 28,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 28,
            "pull_request_review_id": 1629756866,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327812548/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T21:35:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327812548",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": ">  although this means the optional arg isn't last.\r\n\r\nGeneral API guideline is:\r\n* mandatory arguments are positional\r\n* optional arguments are keyword-style (i.e., through a final `opts` table)",
            "created_at": "2023-09-14T11:18:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1719258279",
            "id": 1719258279,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mecyn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719258279/reactions"
            },
            "updated_at": "2023-09-14T11:18:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719258279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Just going by the documentation, that looks to be rather specific to treesitter -- too much to be under the general `vim` API.\r\n\r\nI suspect that the function itself is much more general, and would recommend that the documentation reflect that (\"traverse an arbitrary tree defined by ...\"), with treesitter tree used as an example.",
            "created_at": "2023-09-14T11:22:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1719264155",
            "id": 1719264155,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5meeOb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719264155/reactions"
            },
            "updated_at": "2023-09-14T11:22:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719264155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > although this means the optional arg isn't last.\r\n> \r\n> General API guideline is:\r\n> \r\n> * mandatory arguments are positional\r\n> * optional arguments are keyword-style (i.e., through a final `opts` table)\r\n\r\nNeed to amend that. The callback should always be last. `opts` can be penultimate. It's much more readable if the callback is the final arg, otherwise one must travel to the end of the callback body to see if additional args were passed.",
            "created_at": "2023-09-14T11:24:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1719266502",
            "id": 1719266502,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5meezG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719266502/reactions"
            },
            "updated_at": "2023-09-14T11:24:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719266502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "In this case, we can just make `key` mandatory, though; I don't see much benefit of allowing (explicit) `nil` for a (treesitter specific) default.",
            "created_at": "2023-09-14T11:26:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1719269861",
            "id": 1719269861,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mefnl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719269861/reactions"
            },
            "updated_at": "2023-09-14T11:26:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719269861",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Just going by the documentation, that looks to be rather specific to treesitter\r\n\r\nReworded.\r\n\r\nTechnically, you can use `vim.traverse` on graphs as well, provided you check for revisitation (it just so happens that trees are exactly the set of graphs with no revisitation)\r\n\r\n> we can just make key mandatory\r\n\r\nGood, that solves the dilemma. Updated.\r\n\r\nI also removed the generic since it doesn't seem to work well with the doc pipeline (or Lua in general)",
            "created_at": "2023-09-14T17:25:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1719860025",
            "id": 1719860025,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mgvs5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719860025/reactions"
            },
            "updated_at": "2023-09-14T17:27:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719860025",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think a concrete example would be helpful then, though?",
            "created_at": "2023-09-14T17:28:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1719862835",
            "id": 1719862835,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mgwYz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719862835/reactions"
            },
            "updated_at": "2023-09-14T17:28:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719862835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > > although this means the optional arg isn't last.\r\n> > \r\n> > \r\n> > General API guideline is:\r\n> > \r\n> > * mandatory arguments are positional\r\n> > * optional arguments are keyword-style (i.e., through a final `opts` table)\r\n> \r\n> Need to amend that. The callback should always be last. `opts` can be penultimate. It's much more readable if the callback is the final arg, otherwise one must travel to the end of the callback body to see if additional args were passed.\r\n\r\n@justinmk mind adding that to `:h dev-api`? These things are hard to remember later on.",
            "created_at": "2023-09-14T17:29:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1719865210",
            "id": 1719865210,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mgw96",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719865210/reactions"
            },
            "updated_at": "2023-09-14T17:29:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719865210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I think a concrete example would be helpful then, though?\r\n\r\nSure, added",
            "created_at": "2023-09-14T17:42:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1719881701",
            "id": 1719881701,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mg0_l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719881701/reactions"
            },
            "updated_at": "2023-12-06T01:41:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1719881701",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If I may chime in, would it make sense to have an iterator instead or at least in addition to a `traverse` function? Then we could use a `for` loop to iterate through the nodes of a graph:\r\n\r\n```lua\r\nfor node in vim.traverse(my_graph, keyfunc) do\r\n    print(vim.inspect(node))\r\nend\r\n```\r\n\r\nThis seems to be more idiomatic Lua code to me. A visitor function is usually called for its side effects anyway, so the `traverse` function would not compose with other functions anyway.",
            "created_at": "2023-09-15T20:57:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1721856635",
            "id": 1721856635,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5moXJ7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721856635/reactions"
            },
            "updated_at": "2023-09-15T20:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721856635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4954650?v=4",
                "events_url": "https://api.github.com/users/HiPhish/events{/privacy}",
                "followers_url": "https://api.github.com/users/HiPhish/followers",
                "following_url": "https://api.github.com/users/HiPhish/following{/other_user}",
                "gists_url": "https://api.github.com/users/HiPhish/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HiPhish",
                "id": 4954650,
                "login": "HiPhish",
                "node_id": "MDQ6VXNlcjQ5NTQ2NTA=",
                "organizations_url": "https://api.github.com/users/HiPhish/orgs",
                "received_events_url": "https://api.github.com/users/HiPhish/received_events",
                "repos_url": "https://api.github.com/users/HiPhish/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HiPhish/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HiPhish/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HiPhish"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Interesting, that sounds like an improved version of https://github.com/neovim/neovim/pull/25154#discussion_r1326804741.\r\n\r\nWith an iterator you lose the ability to short-circuit a subtree, but you gain the ability to short-circuit an entire traversal.\r\n\r\nSo I'd make that as two separate functions `vim.traverse` and `vim.iter_tree` (or `vim.iter_graph` with one or two extra lines of impl - but IDK if anyone actually uses graphs).\r\n\r\nIt really depends on Neovim's stance on \"YAGNI\" and all that, which is hard to evaluate in an open ecosystem. It sounds like people would use it though, so I'd be happy to make both functions (in the same PR or in separate PR).\r\n\r\n",
            "created_at": "2023-09-15T21:10:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1721867254",
            "id": 1721867254,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5moZv2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721867254/reactions"
            },
            "updated_at": "2023-09-15T21:17:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721867254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> With an iterator you lose the ability to short-circuit a subtree\r\n\r\nDo you mean that you want to be able to tell the iterating function \"don't descend further down the tree, go back up and resume from there\" in the middle of traversal? Could this perhaps be implemented inside the key function?\r\n\r\n```lua\r\nlocal function key_function(node)\r\n\t-- short-circuit if some condition is met, pretend that the current node\r\n\t-- has no children whatsoever\r\n\tif some_predicate(node) then return {} end\r\n\t-- Otherwise descend into the children\r\n\treturn node:get_children()\r\nend\r\n```",
            "created_at": "2023-09-15T21:25:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1721879833",
            "id": 1721879833,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5moc0Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721879833/reactions"
            },
            "updated_at": "2023-09-15T21:25:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721879833",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4954650?v=4",
                "events_url": "https://api.github.com/users/HiPhish/events{/privacy}",
                "followers_url": "https://api.github.com/users/HiPhish/followers",
                "following_url": "https://api.github.com/users/HiPhish/following{/other_user}",
                "gists_url": "https://api.github.com/users/HiPhish/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HiPhish",
                "id": 4954650,
                "login": "HiPhish",
                "node_id": "MDQ6VXNlcjQ5NTQ2NTA=",
                "organizations_url": "https://api.github.com/users/HiPhish/orgs",
                "received_events_url": "https://api.github.com/users/HiPhish/received_events",
                "repos_url": "https://api.github.com/users/HiPhish/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HiPhish/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HiPhish/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HiPhish"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Could this perhaps be implemented inside the key function?\r\n\r\nBased on the recursions that I see in the Neovim codebase, it would probably be duplicated logic with the visitor in many cases. So I think it's easiest to split into two APIs and not have one API try to do everything",
            "created_at": "2023-09-15T21:28:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1721881997",
            "id": 1721881997,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5modWN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721881997/reactions"
            },
            "updated_at": "2023-09-15T21:29:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721881997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Based on the recursions that I see in the Neovim codebase, it would probably be duplicated logic with the visitor in many cases.\r\n\r\nI don't quite understand what you mean.\r\n\r\n> So I think it's easiest to split into two APIs and not have one API try to do everything\r\n\r\nWe already have several places where two different APIs do almost but not quite the same, so I really would not like to see this happen again. But at least here they would have radically different use-cases.",
            "created_at": "2023-09-15T21:36:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1721889057",
            "id": 1721889057,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mofEh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721889057/reactions"
            },
            "updated_at": "2023-09-15T21:36:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721889057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4954650?v=4",
                "events_url": "https://api.github.com/users/HiPhish/events{/privacy}",
                "followers_url": "https://api.github.com/users/HiPhish/followers",
                "following_url": "https://api.github.com/users/HiPhish/following{/other_user}",
                "gists_url": "https://api.github.com/users/HiPhish/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HiPhish",
                "id": 4954650,
                "login": "HiPhish",
                "node_id": "MDQ6VXNlcjQ5NTQ2NTA=",
                "organizations_url": "https://api.github.com/users/HiPhish/orgs",
                "received_events_url": "https://api.github.com/users/HiPhish/received_events",
                "repos_url": "https://api.github.com/users/HiPhish/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HiPhish/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HiPhish/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HiPhish"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > Based on the recursions that I see in the Neovim codebase, it would probably be duplicated logic with the visitor in many cases.\r\n> \r\n> I don't quite understand what you mean.\r\n\r\nSo, many instances of recursion in the Neovim codebase look like:\r\n```lua\r\nfunction do_recursive_thing(tree)\r\n  do_the_work(tree) -- has side effects, also typically inline\r\n  if work_result then\r\n    for _, subtree in pairs(tree.children) do_recursive_thing(subtree) end\r\n  end\r\nend\r\n```\r\n\r\nIf you had to calculate `work_result` in `key`, then you'd `do_the_work()` twice:\r\n\r\n```lua\r\nfor subtree in vim.iter_graph(tree,\r\n  function(subtree)\r\n    do_the_work(subtree)\r\n    if work_result then return subtree.children else return {} end\r\n  end)\r\n  do_the_work(subtree)\r\nend\r\n```\r\n\r\nYou could refactor it to not, but at that point you're better off not using the API. Versus:\r\n\r\n```lua\r\nvim.traverse(tree, \"children\", function(subtree)\r\n  do_the_work(subtree)\r\n  return not work_result\r\nend)\r\n```",
            "created_at": "2023-09-15T21:46:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1721895688",
            "id": 1721895688,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mogsI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721895688/reactions"
            },
            "updated_at": "2023-09-15T21:47:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721895688",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> We already have several places where two different APIs do almost but not quite the same, so I really would not like to see this happen again.\r\n\r\nEvery stdlib in the world ends up looking like this (especially string/regex/array libs), sometimes the reason is not good, often it is (things that look similar actually being just different enough that trying to abstract over it ends up looking/performing ugly)",
            "created_at": "2023-09-15T21:52:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1721900089",
            "id": 1721900089,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mohw5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721900089/reactions"
            },
            "updated_at": "2023-09-15T21:52:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721900089",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, but we can have nice things, even at the cost of deprecating old patterns that have not stood the test of time :)",
            "created_at": "2023-09-15T22:00:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1721905848",
            "id": 1721905848,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mojK4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721905848/reactions"
            },
            "updated_at": "2023-09-15T22:00:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721905848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Fair enough.\r\n\r\nThat said, in this particular case, two-in-one seems truly unviable. Iterator vs callback are too fundamentally different as per https://github.com/neovim/neovim/pull/25154#issuecomment-1721895688 and https://github.com/neovim/neovim/pull/25154#issuecomment-1721867254.",
            "created_at": "2023-09-15T22:10:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1721925225",
            "id": 1721925225,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5mon5p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721925225/reactions"
            },
            "updated_at": "2023-09-15T22:10:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721925225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "OK, I now understand the problem with duplicate logic. The issue is that whether to resume iteration depends on the result of the loop body, but there is no way of passing the result of the current iteration back to the key function. We could move all side effects into the key function and have an empty loop body, but at this point we are back to the function but less readable.",
            "created_at": "2023-09-15T22:26:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1721957354",
            "id": 1721957354,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5movvq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721957354/reactions"
            },
            "updated_at": "2023-09-15T22:26:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721957354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4954650?v=4",
                "events_url": "https://api.github.com/users/HiPhish/events{/privacy}",
                "followers_url": "https://api.github.com/users/HiPhish/followers",
                "following_url": "https://api.github.com/users/HiPhish/following{/other_user}",
                "gists_url": "https://api.github.com/users/HiPhish/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HiPhish",
                "id": 4954650,
                "login": "HiPhish",
                "node_id": "MDQ6VXNlcjQ5NTQ2NTA=",
                "organizations_url": "https://api.github.com/users/HiPhish/orgs",
                "received_events_url": "https://api.github.com/users/HiPhish/received_events",
                "repos_url": "https://api.github.com/users/HiPhish/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HiPhish/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HiPhish/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HiPhish"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Current status on this:\r\n\r\n* Leaving as-is as I don't see a way to hybridize traverse with iter/find (open to other improvements though)\r\n* Will make a separate PR for iter (which also handles find)\r\n* Any opinions on location? I put it in `shared.lua` since it feels most similar to `tbl_*` functions; not in `func.lua` since it's imperative programming; and no `tree.lua` or `graph.lua` yet (could it make sense to create that? would just have `vim.graph.traverse()` and `vim.graph.iter()` for now)",
            "created_at": "2023-09-22T16:52:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1731738495",
            "id": 1731738495,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5nODt_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1731738495/reactions"
            },
            "updated_at": "2023-09-22T17:07:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1731738495",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thinking about [Iter:join()](https://github.com/neovim/neovim/issues/26409), and how `flatten()` is a special-case of iterable `traverse`...\r\n\r\n>  don't see a way to hybridize traverse with iter/find \r\n\r\nCould we return an iterator if `visitor` is nil? @HiPhish @gpanders @lewis6991 \r\n\r\n> Any opinions on location?\r\n\r\nSeems flexible enough and fundamental enough to live at `vim.traverse()`. ",
            "created_at": "2023-12-06T01:52:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/25154#issuecomment-1841947685",
            "id": 1841947685,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
            "node_id": "IC_kwDOAPphoM5tyeQl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1841947685/reactions"
            },
            "updated_at": "2023-12-06T01:52:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1841947685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25154/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25154/commits",
    "created_at": "2023-09-14T11:13:43Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25154.diff",
    "draft": false,
    "head": {
        "label": "llllvvuu:feat/traverse",
        "ref": "feat/traverse",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/llllvvuu/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/llllvvuu/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/llllvvuu/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/llllvvuu/neovim/branches{/branch}",
            "clone_url": "https://github.com/llllvvuu/neovim.git",
            "collaborators_url": "https://api.github.com/repos/llllvvuu/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/llllvvuu/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/llllvvuu/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/llllvvuu/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/llllvvuu/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/llllvvuu/neovim/contributors",
            "created_at": "2023-09-10T03:41:28Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/llllvvuu/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/llllvvuu/neovim/downloads",
            "events_url": "https://api.github.com/repos/llllvvuu/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/llllvvuu/neovim/forks",
            "full_name": "llllvvuu/neovim",
            "git_commits_url": "https://api.github.com/repos/llllvvuu/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/llllvvuu/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/llllvvuu/neovim/git/tags{/sha}",
            "git_url": "git://github.com/llllvvuu/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/llllvvuu/neovim/hooks",
            "html_url": "https://github.com/llllvvuu/neovim",
            "id": 689514052,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/llllvvuu/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/llllvvuu/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/llllvvuu/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/llllvvuu/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/llllvvuu/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/llllvvuu/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/llllvvuu/neovim/merges",
            "milestones_url": "https://api.github.com/repos/llllvvuu/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOKRkmRA",
            "notifications_url": "https://api.github.com/repos/llllvvuu/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/llllvvuu/neovim/pulls{/number}",
            "pushed_at": "2023-11-14T04:05:03Z",
            "releases_url": "https://api.github.com/repos/llllvvuu/neovim/releases{/id}",
            "size": 226755,
            "ssh_url": "git@github.com:llllvvuu/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/llllvvuu/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/llllvvuu/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/llllvvuu/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/llllvvuu/neovim/subscription",
            "svn_url": "https://github.com/llllvvuu/neovim",
            "tags_url": "https://api.github.com/repos/llllvvuu/neovim/tags",
            "teams_url": "https://api.github.com/repos/llllvvuu/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/llllvvuu/neovim/git/trees{/sha}",
            "updated_at": "2023-09-10T03:41:28Z",
            "url": "https://api.github.com/repos/llllvvuu/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "fe3265c2c381cb499441199a62e3d5c56a585ab7",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
            "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
            "followers_url": "https://api.github.com/users/llllvvuu/followers",
            "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
            "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/llllvvuu",
            "id": 5601392,
            "login": "llllvvuu",
            "node_id": "MDQ6VXNlcjU2MDEzOTI=",
            "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
            "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
            "repos_url": "https://api.github.com/users/llllvvuu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/llllvvuu"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25154",
    "id": 1515509478,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25154",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": false,
    "merge_commit_sha": "1c5fa7a0105d63efbdb6c25d6a12246d91214f9a",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5aVNbm",
    "number": 25154,
    "patch_url": "https://github.com/neovim/neovim/pull/25154.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25154/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/fe3265c2c381cb499441199a62e3d5c56a585ab7",
    "title": "feat(shared.lua): `vim.traverse`",
    "updated_at": "2023-12-06T01:52:05Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25154",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
        "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
        "followers_url": "https://api.github.com/users/llllvvuu/followers",
        "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
        "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/llllvvuu",
        "id": 5601392,
        "login": "llllvvuu",
        "node_id": "MDQ6VXNlcjU2MDEzOTI=",
        "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
        "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
        "repos_url": "https://api.github.com/users/llllvvuu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/llllvvuu"
    }
}