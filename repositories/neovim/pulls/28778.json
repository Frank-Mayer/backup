{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28778/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28778/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/28778"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28778"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28778/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/aaaeae0d3febd028e3eb12795e0e782a09b309ba"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5383,
            "forks_count": 5383,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1728,
            "open_issues_count": 1728,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-05-20T23:45:59Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 270386,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 77935,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-05-21T02:01:06Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 77935,
            "watchers_count": 77935,
            "web_commit_signoff_required": false
        },
        "sha": "91892f56b6cbf21c24474e8e5f0199f02a0602b1",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Deprecation with vim.deprecate is currently too noisy. Show the\r\nfollowing warning instead:\r\n\r\n\\<function\\> is deprecated. Run \":checkhealth vim.deprecated\" for more information.\r\n\r\nThe important part is that the full message needs to be short enough to\r\nfit in one line in order to not trigger the \"Press ENTER or type command\r\nto continue\" prompt.\r\n\r\nThe full information and stack trace for the deprecated functions will\r\nbe shown in the new healthcheck `vim.deprecated`.\r\n\r\n`vim.deprecate` has also been split into two functions: `vim.deprecate`\r\nwhich is the public facing deprecation function and `vim._deprecate`,\r\nwhich is the intermal one only meant to be used by neovim.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606055866"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606055866"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we wanted to extend its life until 0.13? #28780",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T15:35:15Z",
            "diff_hunk": "@@ -553,7 +553,7 @@ end\n ---@param t table List-like table\n ---@return table Flattened copy of the given list-like table\n function vim.tbl_flatten(t)\n-  vim.deprecate('vim.tbl_flatten', 'vim.iter(…):flatten():totable()', '0.13')\n+  vim._deprecate('vim.tbl_flatten', 'vim.iter(…):flatten():totable()', '0.12')",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606055866",
            "id": 1606055866,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fune6",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 556,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2065102984,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606055866/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T15:58:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606055866",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606057221"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606057221"
                }
            },
            "author_association": "MEMBER",
            "body": "Unlike the semantic of `vim.notify_once` where only one notification is made per `msg`, this will suppress echoing for *any* further message. I can get why you chose this way --- to prevent multiple messages printed during startup and hence the 'hit-enter-prompt' (even if there are 2+ different messages). (Also, nitpicking on name: it's not using \"vim.notify\").\r\n\r\nHowever, there is one problem about this. `vim._deprecate` warnings (for Nvim Lua APIs) *can* still happen again after vim startup and a warning message is shown once, when a deprecated function is used in later calls by plugin or user config upon some events, scheduled asynchronously, etc. Those warnings will be silenced, although collected in `:checkhealth vim.deprecate`.\r\n\r\nAs a potential solution, we could change the notification behavior to the previous one (`vim.notify`) or as same as `vim.deprecate` after VimEnter. Other solutions will also work.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T15:43:58Z",
            "diff_hunk": "@@ -1042,50 +1042,75 @@ end\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)\n-  plugin = plugin or 'Nvim'\n-  local will_be_removed = 'will be removed'\n-\n-  -- Only issue warning if feature is hard-deprecated as specified by MAINTAIN.md.\n-  -- Example: if removal_version is 0.12 (soft-deprecated since 0.10-dev), show warnings starting at\n-  -- 0.11, including 0.11-dev\n-  if plugin == 'Nvim' then\n-    local major, minor = version:match('(%d+)%.(%d+)')\n-    major, minor = tonumber(major), tonumber(minor)\n-\n-    local hard_deprecated_since = string.format('nvim-%d.%d', major, minor - 1)\n-    -- Assume there will be no next minor version before bumping up the major version\n-    local is_hard_deprecated = minor == 0 or vim.fn.has(hard_deprecated_since) == 1\n-    if not is_hard_deprecated then\n-      return\n-    end\n-\n-    local removal_version = string.format('nvim-%d.%d', major, minor)\n-    will_be_removed = vim.fn.has(removal_version) == 1 and 'was removed' or will_be_removed\n-  else\n-    vim.validate {\n-      name = { name, 'string' },\n-      alternative = { alternative, 'string', true },\n-      version = { version, 'string', true },\n-      plugin = { plugin, 'string', true },\n-    }\n-  end\n+  vim.validate {\n+    name = { name, 'string' },\n+    alternative = { alternative, 'string', true },\n+    version = { version, 'string', true },\n+    plugin = { plugin, 'string', true },\n+  }\n \n   local msg = ('%s is deprecated'):format(name)\n   msg = alternative and ('%s, use %s instead.'):format(msg, alternative) or (msg .. '.')\n-  msg = ('%s%s\\nFeature %s in %s %s'):format(\n-    msg,\n-    (plugin == 'Nvim' and ' :help deprecated' or ''),\n-    will_be_removed,\n-    plugin,\n-    version\n-  )\n+  msg = ('%s\\nFeature will be removed in %s %s'):format(msg, plugin, version)\n   local displayed = vim.notify_once(msg, vim.log.levels.WARN)\n   if displayed and backtrace ~= false then\n     vim.notify(debug.traceback('', 2):sub(2), vim.log.levels.WARN)\n   end\n   return displayed and msg or nil\n end\n \n+do\n+  local function truncated_echo(msg)\n+    -- Truncate message to avoid hit-enter-prompt\n+    local max_width = vim.o.columns * math.max(vim.o.cmdheight - 1, 0) + vim.v.echospace\n+    local msg_truncated = string.sub(msg, 1, max_width)\n+    vim.api.nvim_echo({ { msg_truncated, 'WarningMsg' } }, true, {})\n+  end\n+\n+  local notified = false\n+\n+  function vim._notify_once_truncated(msg)\n+    if not notified then",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606057221",
            "id": 1606057221,
            "line": 1072,
            "node_id": "PRRC_kwDOAPphoM5fun0F",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 1072,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 73,
            "pull_request_review_id": 2065102984,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606057221/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T16:13:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606057221",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606059421"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606059421"
                }
            },
            "author_association": "MEMBER",
            "body": "Although it's not very important, the behavior of `vim._deprecate` (plugin = 'Nvim') and `vim.deprecate` (for plugins?) are different. I wonder if we can make it more consistent while making deprecation warnings less annoying as intended.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T15:58:01Z",
            "diff_hunk": "@@ -1042,50 +1042,75 @@ end\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606059421",
            "id": 1606059421,
            "line": 1043,
            "node_id": "PRRC_kwDOAPphoM5fuoWd",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 1043,
            "original_position": 3,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 10,
            "pull_request_review_id": 2065102984,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606059421/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T15:58:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606059421",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606062524"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606062524"
                }
            },
            "author_association": "MEMBER",
            "body": "Does it mean that we only collect one backtrace for each deprecated API? I think it would be good to collect multiple invocations. For instance, `vim.tbl_islist` is used in many (20+) places, and one might want to see them all at once rather than `:checkhealth` as many times.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T16:17:09Z",
            "diff_hunk": "@@ -0,0 +1,28 @@\n+local M = {}\n+local health = vim.health\n+\n+local deprecated = {}\n+\n+function M.check()\n+  for name, v in vim.spairs(deprecated) do\n+    health.start('')\n+\n+    local alternative, version, backtrace = v[1], v[2], v[3]\n+    local major, minor = version:match('(%d+)%.(%d+)')\n+    major, minor = tonumber(major), tonumber(minor)\n+    local removal_version = string.format('nvim-%d.%d', major, minor)\n+    local will_be_removed = vim.fn.has(removal_version) == 1 and 'was removed' or 'will be removed'\n+\n+    local msg = ('%s is deprecated. Feature %s in Nvim %s'):format(name, will_be_removed, version)\n+    local msg_alternative = alternative and ('use %s instead.'):format(alternative)\n+    local advice = { msg_alternative }\n+    table.insert(advice, backtrace)\n+    health.warn(msg, advice)\n+  end\n+end\n+\n+function M.add(name, alternative, version, backtrace)\n+  deprecated[name] = { alternative, version, backtrace }",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606062524",
            "id": 1606062524,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fupG8",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 25,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/lua/vim/deprecated/health.lua",
            "position": null,
            "pull_request_review_id": 2065109165,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606062524/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T16:17:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606062524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606064291"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606064291"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    local msg_truncated = vim.fn.strcharpart(msg, 0, max_width)\r\n```\r\n\r\nUsing `strcharpart()` makes it will work with multibyte characters. Unless `truncatead_echo()` will be used in a \"fast\" context while `strcharpart()` can not. But it seems like `strcharpart()` should be usable in fast context.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T16:28:40Z",
            "diff_hunk": "@@ -1042,50 +1042,75 @@ end\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)\n-  plugin = plugin or 'Nvim'\n-  local will_be_removed = 'will be removed'\n-\n-  -- Only issue warning if feature is hard-deprecated as specified by MAINTAIN.md.\n-  -- Example: if removal_version is 0.12 (soft-deprecated since 0.10-dev), show warnings starting at\n-  -- 0.11, including 0.11-dev\n-  if plugin == 'Nvim' then\n-    local major, minor = version:match('(%d+)%.(%d+)')\n-    major, minor = tonumber(major), tonumber(minor)\n-\n-    local hard_deprecated_since = string.format('nvim-%d.%d', major, minor - 1)\n-    -- Assume there will be no next minor version before bumping up the major version\n-    local is_hard_deprecated = minor == 0 or vim.fn.has(hard_deprecated_since) == 1\n-    if not is_hard_deprecated then\n-      return\n-    end\n-\n-    local removal_version = string.format('nvim-%d.%d', major, minor)\n-    will_be_removed = vim.fn.has(removal_version) == 1 and 'was removed' or will_be_removed\n-  else\n-    vim.validate {\n-      name = { name, 'string' },\n-      alternative = { alternative, 'string', true },\n-      version = { version, 'string', true },\n-      plugin = { plugin, 'string', true },\n-    }\n-  end\n+  vim.validate {\n+    name = { name, 'string' },\n+    alternative = { alternative, 'string', true },\n+    version = { version, 'string', true },\n+    plugin = { plugin, 'string', true },\n+  }\n \n   local msg = ('%s is deprecated'):format(name)\n   msg = alternative and ('%s, use %s instead.'):format(msg, alternative) or (msg .. '.')\n-  msg = ('%s%s\\nFeature %s in %s %s'):format(\n-    msg,\n-    (plugin == 'Nvim' and ' :help deprecated' or ''),\n-    will_be_removed,\n-    plugin,\n-    version\n-  )\n+  msg = ('%s\\nFeature will be removed in %s %s'):format(msg, plugin, version)\n   local displayed = vim.notify_once(msg, vim.log.levels.WARN)\n   if displayed and backtrace ~= false then\n     vim.notify(debug.traceback('', 2):sub(2), vim.log.levels.WARN)\n   end\n   return displayed and msg or nil\n end\n \n+do\n+  local function truncated_echo(msg)\n+    -- Truncate message to avoid hit-enter-prompt\n+    local max_width = vim.o.columns * math.max(vim.o.cmdheight - 1, 0) + vim.v.echospace\n+    local msg_truncated = string.sub(msg, 1, max_width)",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606064291",
            "id": 1606064291,
            "line": 1065,
            "node_id": "PRRC_kwDOAPphoM5fupij",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 1065,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 66,
            "pull_request_review_id": 2065110648,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606064291/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T16:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606064291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606069837"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606069837"
                }
            },
            "author_association": "MEMBER",
            "body": "Oops, thanks.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T17:08:19Z",
            "diff_hunk": "@@ -553,7 +553,7 @@ end\n ---@param t table List-like table\n ---@return table Flattened copy of the given list-like table\n function vim.tbl_flatten(t)\n-  vim.deprecate('vim.tbl_flatten', 'vim.iter(…):flatten():totable()', '0.13')\n+  vim._deprecate('vim.tbl_flatten', 'vim.iter(…):flatten():totable()', '0.12')",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606069837",
            "id": 1606069837,
            "in_reply_to_id": 1606055866,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fuq5N",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 556,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2065115843,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606069837/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T17:08:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606069837",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606074018"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606074018"
                }
            },
            "author_association": "MEMBER",
            "body": "nit: let's not change arguments here --- Ref: #28824",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T17:38:28Z",
            "diff_hunk": "@@ -1276,12 +1276,10 @@ M.handlers.signs = {\n         local sign = vim.fn.sign_getdefined(name)[1]\n         if sign then\n           local severity = M.severity[v:upper()]\n-          vim.deprecate(\n+          vim._deprecate(\n             'Defining diagnostic signs with :sign-define or sign_define()',\n             'vim.diagnostic.config()',\n-            '0.12',\n-            nil,\n-            false\n+            '0.12'",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606074018",
            "id": 1606074018,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fur6i",
            "original_commit_id": "ad25067c153679a4aff9c3da13c57adbda99d176",
            "original_line": 1282,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2065119509,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606074018/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T19:39:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606074018",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606087052"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606087052"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't get it. vim.notify triggers the press enter prompt. How does using that help?",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T19:10:21Z",
            "diff_hunk": "@@ -1042,50 +1042,75 @@ end\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)\n-  plugin = plugin or 'Nvim'\n-  local will_be_removed = 'will be removed'\n-\n-  -- Only issue warning if feature is hard-deprecated as specified by MAINTAIN.md.\n-  -- Example: if removal_version is 0.12 (soft-deprecated since 0.10-dev), show warnings starting at\n-  -- 0.11, including 0.11-dev\n-  if plugin == 'Nvim' then\n-    local major, minor = version:match('(%d+)%.(%d+)')\n-    major, minor = tonumber(major), tonumber(minor)\n-\n-    local hard_deprecated_since = string.format('nvim-%d.%d', major, minor - 1)\n-    -- Assume there will be no next minor version before bumping up the major version\n-    local is_hard_deprecated = minor == 0 or vim.fn.has(hard_deprecated_since) == 1\n-    if not is_hard_deprecated then\n-      return\n-    end\n-\n-    local removal_version = string.format('nvim-%d.%d', major, minor)\n-    will_be_removed = vim.fn.has(removal_version) == 1 and 'was removed' or will_be_removed\n-  else\n-    vim.validate {\n-      name = { name, 'string' },\n-      alternative = { alternative, 'string', true },\n-      version = { version, 'string', true },\n-      plugin = { plugin, 'string', true },\n-    }\n-  end\n+  vim.validate {\n+    name = { name, 'string' },\n+    alternative = { alternative, 'string', true },\n+    version = { version, 'string', true },\n+    plugin = { plugin, 'string', true },\n+  }\n \n   local msg = ('%s is deprecated'):format(name)\n   msg = alternative and ('%s, use %s instead.'):format(msg, alternative) or (msg .. '.')\n-  msg = ('%s%s\\nFeature %s in %s %s'):format(\n-    msg,\n-    (plugin == 'Nvim' and ' :help deprecated' or ''),\n-    will_be_removed,\n-    plugin,\n-    version\n-  )\n+  msg = ('%s\\nFeature will be removed in %s %s'):format(msg, plugin, version)\n   local displayed = vim.notify_once(msg, vim.log.levels.WARN)\n   if displayed and backtrace ~= false then\n     vim.notify(debug.traceback('', 2):sub(2), vim.log.levels.WARN)\n   end\n   return displayed and msg or nil\n end\n \n+do\n+  local function truncated_echo(msg)\n+    -- Truncate message to avoid hit-enter-prompt\n+    local max_width = vim.o.columns * math.max(vim.o.cmdheight - 1, 0) + vim.v.echospace\n+    local msg_truncated = string.sub(msg, 1, max_width)\n+    vim.api.nvim_echo({ { msg_truncated, 'WarningMsg' } }, true, {})\n+  end\n+\n+  local notified = false\n+\n+  function vim._notify_once_truncated(msg)\n+    if not notified then",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606087052",
            "id": 1606087052,
            "in_reply_to_id": 1606057221,
            "line": 1072,
            "node_id": "PRRC_kwDOAPphoM5fuvGM",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 1072,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 73,
            "pull_request_review_id": 2065130247,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606087052/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T19:10:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606087052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606087463"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606087463"
                }
            },
            "author_association": "MEMBER",
            "body": "We could change vim.deprecate so plugins use the new deprecation functionality as well.. Do you think that's the way to go?",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T19:13:23Z",
            "diff_hunk": "@@ -1042,50 +1042,75 @@ end\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606087463",
            "id": 1606087463,
            "in_reply_to_id": 1606059421,
            "line": 1043,
            "node_id": "PRRC_kwDOAPphoM5fuvMn",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 1043,
            "original_position": 3,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 10,
            "pull_request_review_id": 2065130591,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606087463/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T19:13:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606087463",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606089893"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606089893"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm actually you're right. I was somehow assuming users would be overriding `vim.notify` with [some plugins](https://github.com/rcarriga/nvim-notify) so that it doesn't write into `:message`. But if such plugins are not used, i.e. with the factory default setting of `vim.notify`, it will trigger the hit-enter-prompt (no matter vim has entered or not). Never mind about the potential solution suggested. If we'd want to completely eliminate the hit-enter-prompt, we shouldn't use `vim.notify` at all.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T19:31:57Z",
            "diff_hunk": "@@ -1042,50 +1042,75 @@ end\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)\n-  plugin = plugin or 'Nvim'\n-  local will_be_removed = 'will be removed'\n-\n-  -- Only issue warning if feature is hard-deprecated as specified by MAINTAIN.md.\n-  -- Example: if removal_version is 0.12 (soft-deprecated since 0.10-dev), show warnings starting at\n-  -- 0.11, including 0.11-dev\n-  if plugin == 'Nvim' then\n-    local major, minor = version:match('(%d+)%.(%d+)')\n-    major, minor = tonumber(major), tonumber(minor)\n-\n-    local hard_deprecated_since = string.format('nvim-%d.%d', major, minor - 1)\n-    -- Assume there will be no next minor version before bumping up the major version\n-    local is_hard_deprecated = minor == 0 or vim.fn.has(hard_deprecated_since) == 1\n-    if not is_hard_deprecated then\n-      return\n-    end\n-\n-    local removal_version = string.format('nvim-%d.%d', major, minor)\n-    will_be_removed = vim.fn.has(removal_version) == 1 and 'was removed' or will_be_removed\n-  else\n-    vim.validate {\n-      name = { name, 'string' },\n-      alternative = { alternative, 'string', true },\n-      version = { version, 'string', true },\n-      plugin = { plugin, 'string', true },\n-    }\n-  end\n+  vim.validate {\n+    name = { name, 'string' },\n+    alternative = { alternative, 'string', true },\n+    version = { version, 'string', true },\n+    plugin = { plugin, 'string', true },\n+  }\n \n   local msg = ('%s is deprecated'):format(name)\n   msg = alternative and ('%s, use %s instead.'):format(msg, alternative) or (msg .. '.')\n-  msg = ('%s%s\\nFeature %s in %s %s'):format(\n-    msg,\n-    (plugin == 'Nvim' and ' :help deprecated' or ''),\n-    will_be_removed,\n-    plugin,\n-    version\n-  )\n+  msg = ('%s\\nFeature will be removed in %s %s'):format(msg, plugin, version)\n   local displayed = vim.notify_once(msg, vim.log.levels.WARN)\n   if displayed and backtrace ~= false then\n     vim.notify(debug.traceback('', 2):sub(2), vim.log.levels.WARN)\n   end\n   return displayed and msg or nil\n end\n \n+do\n+  local function truncated_echo(msg)\n+    -- Truncate message to avoid hit-enter-prompt\n+    local max_width = vim.o.columns * math.max(vim.o.cmdheight - 1, 0) + vim.v.echospace\n+    local msg_truncated = string.sub(msg, 1, max_width)\n+    vim.api.nvim_echo({ { msg_truncated, 'WarningMsg' } }, true, {})\n+  end\n+\n+  local notified = false\n+\n+  function vim._notify_once_truncated(msg)\n+    if not notified then",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606089893",
            "id": 1606089893,
            "in_reply_to_id": 1606057221,
            "line": 1072,
            "node_id": "PRRC_kwDOAPphoM5fuvyl",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 1072,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 73,
            "pull_request_review_id": 2065119509,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606089893/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T19:39:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606089893",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606090707"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606090707"
                }
            },
            "author_association": "MEMBER",
            "body": "If we go with this PR, then plugins should use the same way of showing deprecation messages as Nvim. Though `vim.deprecate` no longer benefits from `vim.notify` and `vim.notify_once`.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T19:39:16Z",
            "diff_hunk": "@@ -1042,50 +1042,75 @@ end\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606090707",
            "id": 1606090707,
            "in_reply_to_id": 1606059421,
            "line": 1043,
            "node_id": "PRRC_kwDOAPphoM5fuv_T",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 1043,
            "original_position": 3,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 10,
            "pull_request_review_id": 2065119509,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606090707/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T19:39:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606090707",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606091397"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606091397"
                }
            },
            "author_association": "MEMBER",
            "body": "On the other hand a non-blocking notification like the plugin could also work, although I suspect it'll be more ambitious.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T19:42:35Z",
            "diff_hunk": "@@ -1042,50 +1042,75 @@ end\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)\n-  plugin = plugin or 'Nvim'\n-  local will_be_removed = 'will be removed'\n-\n-  -- Only issue warning if feature is hard-deprecated as specified by MAINTAIN.md.\n-  -- Example: if removal_version is 0.12 (soft-deprecated since 0.10-dev), show warnings starting at\n-  -- 0.11, including 0.11-dev\n-  if plugin == 'Nvim' then\n-    local major, minor = version:match('(%d+)%.(%d+)')\n-    major, minor = tonumber(major), tonumber(minor)\n-\n-    local hard_deprecated_since = string.format('nvim-%d.%d', major, minor - 1)\n-    -- Assume there will be no next minor version before bumping up the major version\n-    local is_hard_deprecated = minor == 0 or vim.fn.has(hard_deprecated_since) == 1\n-    if not is_hard_deprecated then\n-      return\n-    end\n-\n-    local removal_version = string.format('nvim-%d.%d', major, minor)\n-    will_be_removed = vim.fn.has(removal_version) == 1 and 'was removed' or will_be_removed\n-  else\n-    vim.validate {\n-      name = { name, 'string' },\n-      alternative = { alternative, 'string', true },\n-      version = { version, 'string', true },\n-      plugin = { plugin, 'string', true },\n-    }\n-  end\n+  vim.validate {\n+    name = { name, 'string' },\n+    alternative = { alternative, 'string', true },\n+    version = { version, 'string', true },\n+    plugin = { plugin, 'string', true },\n+  }\n \n   local msg = ('%s is deprecated'):format(name)\n   msg = alternative and ('%s, use %s instead.'):format(msg, alternative) or (msg .. '.')\n-  msg = ('%s%s\\nFeature %s in %s %s'):format(\n-    msg,\n-    (plugin == 'Nvim' and ' :help deprecated' or ''),\n-    will_be_removed,\n-    plugin,\n-    version\n-  )\n+  msg = ('%s\\nFeature will be removed in %s %s'):format(msg, plugin, version)\n   local displayed = vim.notify_once(msg, vim.log.levels.WARN)\n   if displayed and backtrace ~= false then\n     vim.notify(debug.traceback('', 2):sub(2), vim.log.levels.WARN)\n   end\n   return displayed and msg or nil\n end\n \n+do\n+  local function truncated_echo(msg)\n+    -- Truncate message to avoid hit-enter-prompt\n+    local max_width = vim.o.columns * math.max(vim.o.cmdheight - 1, 0) + vim.v.echospace\n+    local msg_truncated = string.sub(msg, 1, max_width)\n+    vim.api.nvim_echo({ { msg_truncated, 'WarningMsg' } }, true, {})\n+  end\n+\n+  local notified = false\n+\n+  function vim._notify_once_truncated(msg)\n+    if not notified then",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606091397",
            "id": 1606091397,
            "in_reply_to_id": 1606057221,
            "line": 1072,
            "node_id": "PRRC_kwDOAPphoM5fuwKF",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 1072,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 73,
            "pull_request_review_id": 2065133851,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606091397/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T19:42:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606091397",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606106400"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606106400"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's just merge your PR, I don't wanna think about this",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T21:35:23Z",
            "diff_hunk": "@@ -1276,12 +1276,10 @@ M.handlers.signs = {\n         local sign = vim.fn.sign_getdefined(name)[1]\n         if sign then\n           local severity = M.severity[v:upper()]\n-          vim.deprecate(\n+          vim._deprecate(\n             'Defining diagnostic signs with :sign-define or sign_define()',\n             'vim.diagnostic.config()',\n-            '0.12',\n-            nil,\n-            false\n+            '0.12'",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606106400",
            "id": 1606106400,
            "in_reply_to_id": 1606074018,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fuz0g",
            "original_commit_id": "ad25067c153679a4aff9c3da13c57adbda99d176",
            "original_line": 1282,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2065147020,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606106400/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T21:35:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606106400",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606107779"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606107779"
                }
            },
            "author_association": "MEMBER",
            "body": "The `defaults to \"Nvim\"` in the comment above is no longer true.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-19T21:46:01Z",
            "diff_hunk": "@@ -1042,50 +1042,75 @@ end\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606107779",
            "id": 1606107779,
            "in_reply_to_id": 1606059421,
            "line": 1043,
            "node_id": "PRRC_kwDOAPphoM5fu0KD",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 1043,
            "original_position": 3,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 10,
            "pull_request_review_id": 2065148405,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606107779/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-19T21:46:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606107779",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1606613181"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606613181"
                }
            },
            "author_association": "MEMBER",
            "body": "> If we go with this PR, then plugins should use the same way of showing deprecation messages as Nvim. Though `vim.deprecate` no longer benefits from `vim.notify` and `vim.notify_once`.\n\nI'm not sure they should. I think a problem with vim.deprecate is that we made it public too soon and it just grew without much consideration. I think giving the internal deprecation mechanism some room to mature a bit would help us more in the long run.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-20T11:14:16Z",
            "diff_hunk": "@@ -1042,50 +1042,75 @@ end\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1606613181",
            "id": 1606613181,
            "in_reply_to_id": 1606059421,
            "line": 1043,
            "node_id": "PRRC_kwDOAPphoM5fwvi9",
            "original_commit_id": "101acb9349cd9c48eb22e5d78b85c450ac98ae41",
            "original_line": 1043,
            "original_position": 3,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 10,
            "pull_request_review_id": 2065965431,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606613181/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-20T11:15:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1606613181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1607371987"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607371987"
                }
            },
            "author_association": "MEMBER",
            "body": "I think https://github.com/neovim/neovim/pull/28778/files#r1606057221 is still applicable. `vim._deprecate` should give warning messages for any subsequent calls after the first invocation (and vim has started up and in use).\r\n\r\n<!--\r\nKind of re-inventing the wheel like `vim.notify_once`, but:\r\n```suggestion\r\n    if not notified[msg] then\r\n      truncated_echo(msg)\r\n      notified[msg] = true\r\n```\r\n-->",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-20T22:55:25Z",
            "diff_hunk": "@@ -1036,56 +1036,97 @@ end\n ---@param name        string     Deprecated feature (function, API, etc.).\n ---@param alternative string|nil Suggested alternative feature.\n ---@param version     string     Version when the deprecated function will be removed.\n----@param plugin      string|nil Name of the plugin that owns the deprecated feature.\n----                              Defaults to \"Nvim\".\n+---@param plugin      string     Name of the plugin that owns the deprecated feature.\n ---@param backtrace   boolean|nil Prints backtrace. Defaults to true.\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)\n-  plugin = plugin or 'Nvim'\n-  local will_be_removed = 'will be removed'\n-\n-  -- Only issue warning if feature is hard-deprecated as specified by MAINTAIN.md.\n-  -- Example: if removal_version is 0.12 (soft-deprecated since 0.10-dev), show warnings starting at\n-  -- 0.11, including 0.11-dev\n-  if plugin == 'Nvim' then\n-    local major, minor = version:match('(%d+)%.(%d+)')\n-    major, minor = tonumber(major), tonumber(minor)\n-\n-    local hard_deprecated_since = string.format('nvim-%d.%d', major, minor - 1)\n-    -- Assume there will be no next minor version before bumping up the major version\n-    local is_hard_deprecated = minor == 0 or vim.fn.has(hard_deprecated_since) == 1\n-    if not is_hard_deprecated then\n-      return\n-    end\n-\n-    local removal_version = string.format('nvim-%d.%d', major, minor)\n-    will_be_removed = vim.fn.has(removal_version) == 1 and 'was removed' or will_be_removed\n-  else\n-    vim.validate {\n-      name = { name, 'string' },\n-      alternative = { alternative, 'string', true },\n-      version = { version, 'string', true },\n-      plugin = { plugin, 'string', true },\n-    }\n-  end\n+  vim.validate {\n+    name = { name, 'string' },\n+    alternative = { alternative, 'string', true },\n+    version = { version, 'string', true },\n+    plugin = { plugin, 'string', true },\n+  }\n \n   local msg = ('%s is deprecated'):format(name)\n   msg = alternative and ('%s, use %s instead.'):format(msg, alternative) or (msg .. '.')\n-  msg = ('%s%s\\nFeature %s in %s %s'):format(\n-    msg,\n-    (plugin == 'Nvim' and ' :help deprecated' or ''),\n-    will_be_removed,\n-    plugin,\n-    version\n-  )\n+  msg = ('%s\\nFeature will be removed in %s %s'):format(msg, plugin, version)\n   local displayed = vim.notify_once(msg, vim.log.levels.WARN)\n   if displayed and backtrace ~= false then\n     vim.notify(debug.traceback('', 2):sub(2), vim.log.levels.WARN)\n   end\n   return displayed and msg or nil\n end\n \n+do\n+  local function truncated_echo(msg)\n+    -- Truncate message to avoid hit-enter-prompt\n+    local max_width = vim.o.columns * math.max(vim.o.cmdheight - 1, 0) + vim.v.echospace\n+    local msg_truncated = string.sub(msg, 1, max_width)\n+    vim.api.nvim_echo({ { msg_truncated, 'WarningMsg' } }, true, {})\n+  end\n+\n+  local notified = false\n+\n+  function vim._truncated_echo_once(msg)\n+    if not notified then\n+      truncated_echo(msg)\n+      notified = true",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1607371987",
            "id": 1607371987,
            "line": 1074,
            "node_id": "PRRC_kwDOAPphoM5fzozT",
            "original_commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "original_line": 1074,
            "original_position": 75,
            "original_start_line": 1072,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 75,
            "pull_request_review_id": 2067169412,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607371987/reactions"
            },
            "side": "RIGHT",
            "start_line": 1072,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-20T22:57:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607371987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1607379293"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607379293"
                }
            },
            "author_association": "MEMBER",
            "body": "Changing signature to avoid `nil` positional arguments would be a good idea and sounds like a better API design.\r\n\r\nBut one thing to think about the future: do we plan to eventually change the API of `vim.deprecate` match this (or supporting both signatures for a while ~~with deprecating `vim.deprecate`~~)? If not for any reason, we should use a similar signature and parameters.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-20T23:02:46Z",
            "diff_hunk": "@@ -1036,56 +1036,97 @@ end\n ---@param name        string     Deprecated feature (function, API, etc.).\n ---@param alternative string|nil Suggested alternative feature.\n ---@param version     string     Version when the deprecated function will be removed.\n----@param plugin      string|nil Name of the plugin that owns the deprecated feature.\n----                              Defaults to \"Nvim\".\n+---@param plugin      string     Name of the plugin that owns the deprecated feature.\n ---@param backtrace   boolean|nil Prints backtrace. Defaults to true.\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)\n-  plugin = plugin or 'Nvim'\n-  local will_be_removed = 'will be removed'\n-\n-  -- Only issue warning if feature is hard-deprecated as specified by MAINTAIN.md.\n-  -- Example: if removal_version is 0.12 (soft-deprecated since 0.10-dev), show warnings starting at\n-  -- 0.11, including 0.11-dev\n-  if plugin == 'Nvim' then\n-    local major, minor = version:match('(%d+)%.(%d+)')\n-    major, minor = tonumber(major), tonumber(minor)\n-\n-    local hard_deprecated_since = string.format('nvim-%d.%d', major, minor - 1)\n-    -- Assume there will be no next minor version before bumping up the major version\n-    local is_hard_deprecated = minor == 0 or vim.fn.has(hard_deprecated_since) == 1\n-    if not is_hard_deprecated then\n-      return\n-    end\n-\n-    local removal_version = string.format('nvim-%d.%d', major, minor)\n-    will_be_removed = vim.fn.has(removal_version) == 1 and 'was removed' or will_be_removed\n-  else\n-    vim.validate {\n-      name = { name, 'string' },\n-      alternative = { alternative, 'string', true },\n-      version = { version, 'string', true },\n-      plugin = { plugin, 'string', true },\n-    }\n-  end\n+  vim.validate {\n+    name = { name, 'string' },\n+    alternative = { alternative, 'string', true },\n+    version = { version, 'string', true },\n+    plugin = { plugin, 'string', true },\n+  }\n \n   local msg = ('%s is deprecated'):format(name)\n   msg = alternative and ('%s, use %s instead.'):format(msg, alternative) or (msg .. '.')\n-  msg = ('%s%s\\nFeature %s in %s %s'):format(\n-    msg,\n-    (plugin == 'Nvim' and ' :help deprecated' or ''),\n-    will_be_removed,\n-    plugin,\n-    version\n-  )\n+  msg = ('%s\\nFeature will be removed in %s %s'):format(msg, plugin, version)\n   local displayed = vim.notify_once(msg, vim.log.levels.WARN)\n   if displayed and backtrace ~= false then\n     vim.notify(debug.traceback('', 2):sub(2), vim.log.levels.WARN)\n   end\n   return displayed and msg or nil\n end\n \n+do\n+  local function truncated_echo(msg)\n+    -- Truncate message to avoid hit-enter-prompt\n+    local max_width = vim.o.columns * math.max(vim.o.cmdheight - 1, 0) + vim.v.echospace\n+    local msg_truncated = string.sub(msg, 1, max_width)\n+    vim.api.nvim_echo({ { msg_truncated, 'WarningMsg' } }, true, {})\n+  end\n+\n+  local notified = false\n+\n+  function vim._truncated_echo_once(msg)\n+    if not notified then\n+      truncated_echo(msg)\n+      notified = true\n+      return true\n+    end\n+    return false\n+  end\n+end\n+\n+local function traceback()\n+  local level = 4\n+  local backtrace = { 'stack traceback:' }\n+  while true do\n+    local info = debug.getinfo(level, 'Sl')\n+    if not info then\n+      break\n+    end\n+    local msg = ('  %s:%s'):format(info.source:sub(2), info.currentline)\n+    table.insert(backtrace, msg)\n+    level = level + 1\n+  end\n+  return table.concat(backtrace, '\\n')\n+end\n+\n+--- Shows a deprecation message to the user. Internal function customized to fit neovim's needs.\n+---\n+---@param name        string     Deprecated feature (function, API, etc.).\n+---@param version     string     Version when the deprecated function will be removed.\n+---@param opts        table|nil  Optional parameters.\n+---                              - alternative: suggested replacement function\n+---\n+---@return string|nil # Deprecated message, or nil if no message was shown.\n+function vim._deprecate(name, version, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1607379293",
            "id": 1607379293,
            "line": 1104,
            "node_id": "PRRC_kwDOAPphoM5fzqld",
            "original_commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "original_line": 1104,
            "original_position": 105,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 105,
            "pull_request_review_id": 2067181047,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607379293/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-20T23:10:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607379293",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1607381317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607381317"
                }
            },
            "author_association": "MEMBER",
            "body": "> Changing signature to avoid `nil` positional arguments would be a good idea, one thing to think about the future: do we plan to eventually change the API of `vim.deprecate` match this (or supporting both signatures for a while ~~with deprecating `vim.deprecate`~~)?\n\nNot a definitive plan, but a strong possibility.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-20T23:06:16Z",
            "diff_hunk": "@@ -1036,56 +1036,97 @@ end\n ---@param name        string     Deprecated feature (function, API, etc.).\n ---@param alternative string|nil Suggested alternative feature.\n ---@param version     string     Version when the deprecated function will be removed.\n----@param plugin      string|nil Name of the plugin that owns the deprecated feature.\n----                              Defaults to \"Nvim\".\n+---@param plugin      string     Name of the plugin that owns the deprecated feature.\n ---@param backtrace   boolean|nil Prints backtrace. Defaults to true.\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)\n-  plugin = plugin or 'Nvim'\n-  local will_be_removed = 'will be removed'\n-\n-  -- Only issue warning if feature is hard-deprecated as specified by MAINTAIN.md.\n-  -- Example: if removal_version is 0.12 (soft-deprecated since 0.10-dev), show warnings starting at\n-  -- 0.11, including 0.11-dev\n-  if plugin == 'Nvim' then\n-    local major, minor = version:match('(%d+)%.(%d+)')\n-    major, minor = tonumber(major), tonumber(minor)\n-\n-    local hard_deprecated_since = string.format('nvim-%d.%d', major, minor - 1)\n-    -- Assume there will be no next minor version before bumping up the major version\n-    local is_hard_deprecated = minor == 0 or vim.fn.has(hard_deprecated_since) == 1\n-    if not is_hard_deprecated then\n-      return\n-    end\n-\n-    local removal_version = string.format('nvim-%d.%d', major, minor)\n-    will_be_removed = vim.fn.has(removal_version) == 1 and 'was removed' or will_be_removed\n-  else\n-    vim.validate {\n-      name = { name, 'string' },\n-      alternative = { alternative, 'string', true },\n-      version = { version, 'string', true },\n-      plugin = { plugin, 'string', true },\n-    }\n-  end\n+  vim.validate {\n+    name = { name, 'string' },\n+    alternative = { alternative, 'string', true },\n+    version = { version, 'string', true },\n+    plugin = { plugin, 'string', true },\n+  }\n \n   local msg = ('%s is deprecated'):format(name)\n   msg = alternative and ('%s, use %s instead.'):format(msg, alternative) or (msg .. '.')\n-  msg = ('%s%s\\nFeature %s in %s %s'):format(\n-    msg,\n-    (plugin == 'Nvim' and ' :help deprecated' or ''),\n-    will_be_removed,\n-    plugin,\n-    version\n-  )\n+  msg = ('%s\\nFeature will be removed in %s %s'):format(msg, plugin, version)\n   local displayed = vim.notify_once(msg, vim.log.levels.WARN)\n   if displayed and backtrace ~= false then\n     vim.notify(debug.traceback('', 2):sub(2), vim.log.levels.WARN)\n   end\n   return displayed and msg or nil\n end\n \n+do\n+  local function truncated_echo(msg)\n+    -- Truncate message to avoid hit-enter-prompt\n+    local max_width = vim.o.columns * math.max(vim.o.cmdheight - 1, 0) + vim.v.echospace\n+    local msg_truncated = string.sub(msg, 1, max_width)\n+    vim.api.nvim_echo({ { msg_truncated, 'WarningMsg' } }, true, {})\n+  end\n+\n+  local notified = false\n+\n+  function vim._truncated_echo_once(msg)\n+    if not notified then\n+      truncated_echo(msg)\n+      notified = true\n+      return true\n+    end\n+    return false\n+  end\n+end\n+\n+local function traceback()\n+  local level = 4\n+  local backtrace = { 'stack traceback:' }\n+  while true do\n+    local info = debug.getinfo(level, 'Sl')\n+    if not info then\n+      break\n+    end\n+    local msg = ('  %s:%s'):format(info.source:sub(2), info.currentline)\n+    table.insert(backtrace, msg)\n+    level = level + 1\n+  end\n+  return table.concat(backtrace, '\\n')\n+end\n+\n+--- Shows a deprecation message to the user. Internal function customized to fit neovim's needs.\n+---\n+---@param name        string     Deprecated feature (function, API, etc.).\n+---@param version     string     Version when the deprecated function will be removed.\n+---@param opts        table|nil  Optional parameters.\n+---                              - alternative: suggested replacement function\n+---\n+---@return string|nil # Deprecated message, or nil if no message was shown.\n+function vim._deprecate(name, version, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1607381317",
            "id": 1607381317,
            "in_reply_to_id": 1607379293,
            "line": 1104,
            "node_id": "PRRC_kwDOAPphoM5fzrFF",
            "original_commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "original_line": 1104,
            "original_position": 105,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 105,
            "pull_request_review_id": 2067183885,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607381317/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-20T23:06:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607381317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1607382982"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607382982"
                }
            },
            "author_association": "MEMBER",
            "body": "Uh, you suggested I use notify which doesn’t work. What am I supposed to do?",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-20T23:09:05Z",
            "diff_hunk": "@@ -1036,56 +1036,97 @@ end\n ---@param name        string     Deprecated feature (function, API, etc.).\n ---@param alternative string|nil Suggested alternative feature.\n ---@param version     string     Version when the deprecated function will be removed.\n----@param plugin      string|nil Name of the plugin that owns the deprecated feature.\n----                              Defaults to \"Nvim\".\n+---@param plugin      string     Name of the plugin that owns the deprecated feature.\n ---@param backtrace   boolean|nil Prints backtrace. Defaults to true.\n ---\n ---@return string|nil # Deprecated message, or nil if no message was shown.\n function vim.deprecate(name, alternative, version, plugin, backtrace)\n-  plugin = plugin or 'Nvim'\n-  local will_be_removed = 'will be removed'\n-\n-  -- Only issue warning if feature is hard-deprecated as specified by MAINTAIN.md.\n-  -- Example: if removal_version is 0.12 (soft-deprecated since 0.10-dev), show warnings starting at\n-  -- 0.11, including 0.11-dev\n-  if plugin == 'Nvim' then\n-    local major, minor = version:match('(%d+)%.(%d+)')\n-    major, minor = tonumber(major), tonumber(minor)\n-\n-    local hard_deprecated_since = string.format('nvim-%d.%d', major, minor - 1)\n-    -- Assume there will be no next minor version before bumping up the major version\n-    local is_hard_deprecated = minor == 0 or vim.fn.has(hard_deprecated_since) == 1\n-    if not is_hard_deprecated then\n-      return\n-    end\n-\n-    local removal_version = string.format('nvim-%d.%d', major, minor)\n-    will_be_removed = vim.fn.has(removal_version) == 1 and 'was removed' or will_be_removed\n-  else\n-    vim.validate {\n-      name = { name, 'string' },\n-      alternative = { alternative, 'string', true },\n-      version = { version, 'string', true },\n-      plugin = { plugin, 'string', true },\n-    }\n-  end\n+  vim.validate {\n+    name = { name, 'string' },\n+    alternative = { alternative, 'string', true },\n+    version = { version, 'string', true },\n+    plugin = { plugin, 'string', true },\n+  }\n \n   local msg = ('%s is deprecated'):format(name)\n   msg = alternative and ('%s, use %s instead.'):format(msg, alternative) or (msg .. '.')\n-  msg = ('%s%s\\nFeature %s in %s %s'):format(\n-    msg,\n-    (plugin == 'Nvim' and ' :help deprecated' or ''),\n-    will_be_removed,\n-    plugin,\n-    version\n-  )\n+  msg = ('%s\\nFeature will be removed in %s %s'):format(msg, plugin, version)\n   local displayed = vim.notify_once(msg, vim.log.levels.WARN)\n   if displayed and backtrace ~= false then\n     vim.notify(debug.traceback('', 2):sub(2), vim.log.levels.WARN)\n   end\n   return displayed and msg or nil\n end\n \n+do\n+  local function truncated_echo(msg)\n+    -- Truncate message to avoid hit-enter-prompt\n+    local max_width = vim.o.columns * math.max(vim.o.cmdheight - 1, 0) + vim.v.echospace\n+    local msg_truncated = string.sub(msg, 1, max_width)\n+    vim.api.nvim_echo({ { msg_truncated, 'WarningMsg' } }, true, {})\n+  end\n+\n+  local notified = false\n+\n+  function vim._truncated_echo_once(msg)\n+    if not notified then\n+      truncated_echo(msg)\n+      notified = true",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1607382982",
            "id": 1607382982,
            "in_reply_to_id": 1607371987,
            "line": 1074,
            "node_id": "PRRC_kwDOAPphoM5fzrfG",
            "original_commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "original_line": 1074,
            "original_position": 75,
            "original_start_line": 1072,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 75,
            "pull_request_review_id": 2067186501,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607382982/reactions"
            },
            "side": "RIGHT",
            "start_line": 1072,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-20T23:09:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607382982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1607383226"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607383226"
                }
            },
            "author_association": "MEMBER",
            "body": "Note: For now `vim._deprecate` does not have `backtrace` in opts, so this will no longer suppress backtrace.\r\n\r\nThough it'd be even better if we can allow suppressing backtraces (not mandatory), adding stacktrace back here for this particular instance would be also fine, as the stacktrace information (which we think is useless) will be shown only in `:checkhealth` rather than as a message.",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-20T23:09:35Z",
            "diff_hunk": "@@ -1276,12 +1276,10 @@ M.handlers.signs = {\n         local sign = vim.fn.sign_getdefined(name)[1]\n         if sign then\n           local severity = M.severity[v:upper()]\n-          vim.deprecate(\n+          vim._deprecate(\n             'Defining diagnostic signs with :sign-define or sign_define()',\n-            'vim.diagnostic.config()',\n             '0.12',\n-            nil,\n-            false -- suppress backtrace\n+            { alternative = 'vim.diagnostic.config()' }",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1607383226",
            "id": 1607383226,
            "line": 1282,
            "node_id": "PRRC_kwDOAPphoM5fzri6",
            "original_commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "original_line": 1282,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": 11,
            "pull_request_review_id": 2067186851,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607383226/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-20T23:09:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607383226",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28778#discussion_r1607385247"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28778"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607385247"
                }
            },
            "author_association": "MEMBER",
            "body": "Do you anticipate suppressing backtracea in checkhealth being a real usecase for us?",
            "commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "created_at": "2024-05-20T23:13:27Z",
            "diff_hunk": "@@ -1276,12 +1276,10 @@ M.handlers.signs = {\n         local sign = vim.fn.sign_getdefined(name)[1]\n         if sign then\n           local severity = M.severity[v:upper()]\n-          vim.deprecate(\n+          vim._deprecate(\n             'Defining diagnostic signs with :sign-define or sign_define()',\n-            'vim.diagnostic.config()',\n             '0.12',\n-            nil,\n-            false -- suppress backtrace\n+            { alternative = 'vim.diagnostic.config()' }",
            "html_url": "https://github.com/neovim/neovim/pull/28778#discussion_r1607385247",
            "id": 1607385247,
            "in_reply_to_id": 1607383226,
            "line": 1282,
            "node_id": "PRRC_kwDOAPphoM5fzsCf",
            "original_commit_id": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
            "original_line": 1282,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": 11,
            "pull_request_review_id": 2067189703,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607385247/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-20T23:13:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1607385247",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "The message can still contain specifics (like the name of the function, and possibly the file?) -- the important thing is that it is guaranteed to be a single line so it doesn't trigger the dreaded \"press enter\" prompt. In particular, the full stack trace should be punted to the health check (as you propose).",
            "created_at": "2024-05-17T07:19:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/28778#issuecomment-2116911378",
            "id": 2116911378,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28778",
            "node_id": "IC_kwDOAPphoM5-LYES",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2116911378/reactions"
            },
            "updated_at": "2024-05-17T07:19:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2116911378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the important thing is that it is guaranteed to be a single line so it doesn't trigger the dreaded \"press enter\"\r\n\r\nTo be clear: it can occupy `vim.o.columns * math.max(vim.o.cmdheight - 1, 0) + vim.v.echospace` , which may be more than one line. Main goal is to avoid hit-enter prompt. `strcharpart()` may be useful.",
            "created_at": "2024-05-17T10:40:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/28778#issuecomment-2117279839",
            "id": 2117279839,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28778",
            "node_id": "IC_kwDOAPphoM5-MyBf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2117279839/reactions"
            },
            "updated_at": "2024-05-17T10:40:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2117279839",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Though vim.deprecate no longer benefits from vim.notify and vim.notify_once.\r\n\r\nI've been public about `vim.notify` being a bad design (or at least premature without rethinking the underlying message subsystem). So I think that would be ok for the time being; obviously when the redesign lands, we'll leverage that (better) API for capturing and routing such messages (e.g., via `vim.ui_attach`).",
            "created_at": "2024-05-20T09:05:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/28778#issuecomment-2120010353",
            "id": 2120010353,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28778",
            "node_id": "IC_kwDOAPphoM5-XMpx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120010353/reactions"
            },
            "updated_at": "2024-05-20T09:06:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120010353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28778/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/28778/commits",
    "created_at": "2024-05-16T16:35:31Z",
    "diff_url": "https://github.com/neovim/neovim/pull/28778.diff",
    "draft": false,
    "head": {
        "label": "dundargoc:fix/deprecate",
        "ref": "fix/deprecate",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/dundargoc/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/dundargoc/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/dundargoc/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/dundargoc/neovim/branches{/branch}",
            "clone_url": "https://github.com/dundargoc/neovim.git",
            "collaborators_url": "https://api.github.com/repos/dundargoc/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/dundargoc/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/dundargoc/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/dundargoc/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/dundargoc/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/dundargoc/neovim/contributors",
            "created_at": "2021-06-20T10:14:48Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/dundargoc/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/dundargoc/neovim/downloads",
            "events_url": "https://api.github.com/repos/dundargoc/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/dundargoc/neovim/forks",
            "full_name": "dundargoc/neovim",
            "git_commits_url": "https://api.github.com/repos/dundargoc/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/dundargoc/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/dundargoc/neovim/git/tags{/sha}",
            "git_url": "git://github.com/dundargoc/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": false,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/dundargoc/neovim/hooks",
            "html_url": "https://github.com/dundargoc/neovim",
            "id": 378614899,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/dundargoc/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/dundargoc/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/dundargoc/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/dundargoc/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/dundargoc/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/dundargoc/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/dundargoc/neovim/merges",
            "milestones_url": "https://api.github.com/repos/dundargoc/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzg2MTQ4OTk=",
            "notifications_url": "https://api.github.com/repos/dundargoc/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/dundargoc/neovim/pulls{/number}",
            "pushed_at": "2024-05-20T19:35:37Z",
            "releases_url": "https://api.github.com/repos/dundargoc/neovim/releases{/id}",
            "size": 268332,
            "ssh_url": "git@github.com:dundargoc/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/dundargoc/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/dundargoc/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/dundargoc/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/dundargoc/neovim/subscription",
            "svn_url": "https://github.com/dundargoc/neovim",
            "tags_url": "https://api.github.com/repos/dundargoc/neovim/tags",
            "teams_url": "https://api.github.com/repos/dundargoc/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/dundargoc/neovim/git/trees{/sha}",
            "updated_at": "2024-05-20T16:28:50Z",
            "url": "https://api.github.com/repos/dundargoc/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "aaaeae0d3febd028e3eb12795e0e782a09b309ba",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
            "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
            "followers_url": "https://api.github.com/users/dundargoc/followers",
            "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
            "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/dundargoc",
            "id": 33953936,
            "login": "dundargoc",
            "node_id": "MDQ6VXNlcjMzOTUzOTM2",
            "organizations_url": "https://api.github.com/users/dundargoc/orgs",
            "received_events_url": "https://api.github.com/users/dundargoc/received_events",
            "repos_url": "https://api.github.com/users/dundargoc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/dundargoc"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/28778",
    "id": 1873874860,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28778",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "cff5bfffe5b561559928abc2ef4c2fb96ffe89a2",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5vsQ-s",
    "number": 28778,
    "patch_url": "https://github.com/neovim/neovim/pull/28778.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
            "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
            "followers_url": "https://api.github.com/users/mfussenegger/followers",
            "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
            "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mfussenegger",
            "id": 38700,
            "login": "mfussenegger",
            "node_id": "MDQ6VXNlcjM4NzAw",
            "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
            "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
            "repos_url": "https://api.github.com/users/mfussenegger/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mfussenegger"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
            "events_url": "https://api.github.com/users/clason/events{/privacy}",
            "followers_url": "https://api.github.com/users/clason/followers",
            "following_url": "https://api.github.com/users/clason/following{/other_user}",
            "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/clason",
            "id": 2361214,
            "login": "clason",
            "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
            "organizations_url": "https://api.github.com/users/clason/orgs",
            "received_events_url": "https://api.github.com/users/clason/received_events",
            "repos_url": "https://api.github.com/users/clason/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/clason"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
            "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
            "followers_url": "https://api.github.com/users/seandewar/followers",
            "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
            "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/seandewar",
            "id": 6256228,
            "login": "seandewar",
            "node_id": "MDQ6VXNlcjYyNTYyMjg=",
            "organizations_url": "https://api.github.com/users/seandewar/orgs",
            "received_events_url": "https://api.github.com/users/seandewar/received_events",
            "repos_url": "https://api.github.com/users/seandewar/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/seandewar"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
            "events_url": "https://api.github.com/users/ii14/events{/privacy}",
            "followers_url": "https://api.github.com/users/ii14/followers",
            "following_url": "https://api.github.com/users/ii14/following{/other_user}",
            "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ii14",
            "id": 59243201,
            "login": "ii14",
            "node_id": "MDQ6VXNlcjU5MjQzMjAx",
            "organizations_url": "https://api.github.com/users/ii14/orgs",
            "received_events_url": "https://api.github.com/users/ii14/received_events",
            "repos_url": "https://api.github.com/users/ii14/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ii14"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/28778/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/aaaeae0d3febd028e3eb12795e0e782a09b309ba",
    "title": "fix: change deprecation presentation",
    "updated_at": "2024-05-20T23:13:27Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/28778",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
        "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
        "followers_url": "https://api.github.com/users/dundargoc/followers",
        "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
        "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dundargoc",
        "id": 33953936,
        "login": "dundargoc",
        "node_id": "MDQ6VXNlcjMzOTUzOTM2",
        "organizations_url": "https://api.github.com/users/dundargoc/orgs",
        "received_events_url": "https://api.github.com/users/dundargoc/received_events",
        "repos_url": "https://api.github.com/users/dundargoc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dundargoc"
    }
}