{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23029/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23029/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/23029"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23029"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23029/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/06d84b17e6accdab6d6c8480e685c71b28411f3c"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5007,
            "forks_count": 5007,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1693,
            "open_issues_count": 1693,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-11-24T01:27:29Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 239638,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 71179,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-11-24T00:53:36Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 71179,
            "watchers_count": 71179,
            "web_commit_signoff_required": false
        },
        "sha": "ae9654dd7336e263e18ca7da4a40a25ec684002d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "vim.iter wraps a table or iterator function into an `Iter` object with\r\nmethods such as `filtermap`, `nth`, `rev`, and `collect` which can be\r\nchained to produce iterator pipelines that do not create new tables at\r\neach step.\r\n\r\nExamples:\r\n\r\n```lua\r\nlocal it1 = vim.iter({ 1, 2, 3, 4, 5 })\r\n\r\n-- This function is evaluated \"lazily\", i.e. not until `collect()`, `foreach()`,\r\n-- `next()`, or `nth()` is called, or the iterator is used in a for loop.\r\nit1 = it1:map(function(i, v)\r\n  if i % 2 ~= 0 then\r\n    return i, v * 2\r\n  end\r\nend)\r\n\r\nlocal acc = 0\r\nfor _, v in it1 do\r\n  acc = acc + v\r\nend\r\nprint(v) -- prints 18\r\n\r\n-- Alternatively, use fold\r\n-- print(it1:fold(0, function(acc, v) return acc + v end))\r\n\r\nlocal it2 = vim.iter(vim.gsplit(\"Hello world goodbye\", \" \", {}))\r\nit2 = it2:map(function(s)\r\n  if s:match('^[a-z]') then\r\n    return s:upper()\r\n  end\r\nend)\r\nvim.print(it2:totable()) -- prints { \"WORLD\", \"GOODBYE\" }\r\n\r\nfor i, v in vim.iter({ 1, 2, 3, 4, 5 }):enumerate():rev() do\r\n  print(string.format(\"%d: %d\", i, v))\r\nend\r\n-- 1: 5\r\n-- 2: 4\r\n-- 3: 3\r\n-- 4: 2\r\n-- 5: 1\r\n```\r\n",
    "closed_at": "2023-04-17T18:54:20Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1164036947"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164036947"
                }
            },
            "author_association": "MEMBER",
            "body": "What's the reason to merge map and filter into one? In pretty much any language/stdlib these are separate functions.\r\n\r\n",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-12T12:05:32Z",
            "diff_hunk": "@@ -0,0 +1,332 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field fn function\n+---@field head ?number\n+---@field tail ?number\n+local Iter = {}\n+\n+Iter.__index = Iter\n+\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Add a filter/map step to the iterator.\n+---\n+--- Example:\n+--- <pre>\n+--- > local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(i, v)\n+--- >   if v % 2 == 0 then\n+--- >     return i, v * 3\n+--- >   end\n+--- > end)\n+--- > it:collect()\n+--- { 6, 12 }\n+--- </pre>\n+---\n+---@param f function(...):any Mapping function. Takes all values returned from the previous stage\n+---                            in the pipeline as arguments and returns a new value. Nil values\n+---                            returned from `f` are filtered from the output.\n+---@return Iter\n+function Iter.filter_map(self, f)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1164036947",
            "id": 1164036947,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FYctT",
            "original_commit_id": "2d4720a99e3a1c02c04536cd40422d0c133795e4",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "runtime/lua/vim/Iter.lua",
            "position": null,
            "pull_request_review_id": 1381167505,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164036947/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T12:17:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164036947",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1164143302"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164143302"
                }
            },
            "author_association": "MEMBER",
            "body": "That is how I did it originally. Some languages like Rust and OCaml have `filter`, `map`, and `filter_map`, but those languages are allowed to have `None` values within a list. In Lua, we cannot have `nil` values in the middle of a table, so any `nil` value returned by `map` would have to be filtered out (returning `nil` is the signal that the iterator is empty). With that constraint, `map` already becomes `filter_map`.\r\n\r\nI then combined `filter` and `filter_map` to reduce the API surface area, but we could add it back if it's useful. But note that `:filter(predicate)` is just `:filter_map(function(...) if predicate(...) return ... end)`. Useful to reduce boilerplate, but it doesn't add anything unique.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-12T13:32:29Z",
            "diff_hunk": "@@ -0,0 +1,332 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field fn function\n+---@field head ?number\n+---@field tail ?number\n+local Iter = {}\n+\n+Iter.__index = Iter\n+\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Add a filter/map step to the iterator.\n+---\n+--- Example:\n+--- <pre>\n+--- > local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(i, v)\n+--- >   if v % 2 == 0 then\n+--- >     return i, v * 3\n+--- >   end\n+--- > end)\n+--- > it:collect()\n+--- { 6, 12 }\n+--- </pre>\n+---\n+---@param f function(...):any Mapping function. Takes all values returned from the previous stage\n+---                            in the pipeline as arguments and returns a new value. Nil values\n+---                            returned from `f` are filtered from the output.\n+---@return Iter\n+function Iter.filter_map(self, f)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1164143302",
            "id": 1164143302,
            "in_reply_to_id": 1164036947,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FY2rG",
            "original_commit_id": "2d4720a99e3a1c02c04536cd40422d0c133795e4",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "runtime/lua/vim/Iter.lua",
            "position": null,
            "pull_request_review_id": 1381332881,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164143302/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T16:23:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164143302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1164239127"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164239127"
                }
            },
            "author_association": "MEMBER",
            "body": "Some languages have [transducers](https://juliafolds.github.io/Transducers.jl/dev/explanation/comparison_to_iterators/#comparison-to-iterators), too :P",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-12T14:40:42Z",
            "diff_hunk": "@@ -0,0 +1,332 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field fn function\n+---@field head ?number\n+---@field tail ?number\n+local Iter = {}\n+\n+Iter.__index = Iter\n+\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Add a filter/map step to the iterator.\n+---\n+--- Example:\n+--- <pre>\n+--- > local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(i, v)\n+--- >   if v % 2 == 0 then\n+--- >     return i, v * 3\n+--- >   end\n+--- > end)\n+--- > it:collect()\n+--- { 6, 12 }\n+--- </pre>\n+---\n+---@param f function(...):any Mapping function. Takes all values returned from the previous stage\n+---                            in the pipeline as arguments and returns a new value. Nil values\n+---                            returned from `f` are filtered from the output.\n+---@return Iter\n+function Iter.filter_map(self, f)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1164239127",
            "id": 1164239127,
            "in_reply_to_id": 1164036947,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FZOEX",
            "original_commit_id": "2d4720a99e3a1c02c04536cd40422d0c133795e4",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "runtime/lua/vim/Iter.lua",
            "position": null,
            "pull_request_review_id": 1381481515,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164239127/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T14:40:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164239127",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1164572001"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164572001"
                }
            },
            "author_association": "MEMBER",
            "body": "On further thought I think `filter()` is worth having, so I brought it back.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-12T19:48:58Z",
            "diff_hunk": "@@ -0,0 +1,332 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field fn function\n+---@field head ?number\n+---@field tail ?number\n+local Iter = {}\n+\n+Iter.__index = Iter\n+\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Add a filter/map step to the iterator.\n+---\n+--- Example:\n+--- <pre>\n+--- > local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(i, v)\n+--- >   if v % 2 == 0 then\n+--- >     return i, v * 3\n+--- >   end\n+--- > end)\n+--- > it:collect()\n+--- { 6, 12 }\n+--- </pre>\n+---\n+---@param f function(...):any Mapping function. Takes all values returned from the previous stage\n+---                            in the pipeline as arguments and returns a new value. Nil values\n+---                            returned from `f` are filtered from the output.\n+---@return Iter\n+function Iter.filter_map(self, f)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1164572001",
            "id": 1164572001,
            "in_reply_to_id": 1164036947,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FafVh",
            "original_commit_id": "2d4720a99e3a1c02c04536cd40422d0c133795e4",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "runtime/lua/vim/Iter.lua",
            "position": null,
            "pull_request_review_id": 1381995716,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164572001/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T19:48:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164572001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1164601916"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164601916"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Should it maybe be `for_each`? It seems like a lot of different languages use either camelCase `forEach` or snake_case `for_each`. (Rust, JavaScript, Java, C++, etc...). There are probably different languages that uses `foreach` as well, but IMO it looks better as `for_each` as it makes the most sense as two separate words (for each) vs (foreach)",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-12T20:13:33Z",
            "diff_hunk": "@@ -2773,4 +2808,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter_map({self}, {f})                               *Iter:filter_map()*\n+    Add a filter/map step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1164601916",
            "id": 1164601916,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Famo8",
            "original_commit_id": "5c5817b319db4eb6a585730e695f151db134b2ec",
            "original_line": 3047,
            "original_position": 176,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1382049850,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164601916/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T20:13:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164601916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblj/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblj/followers",
                "following_url": "https://api.github.com/users/seblj/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblj",
                "id": 5160701,
                "login": "seblj",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblj/orgs",
                "received_events_url": "https://api.github.com/users/seblj/received_events",
                "repos_url": "https://api.github.com/users/seblj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1164613127"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164613127"
                }
            },
            "author_association": "MEMBER",
            "body": "On the other hand, Lua tends to use single words instead of underscores:\r\n\r\n* `tonumber`\r\n* `tostring`\r\n* `collectgarbage`\r\n* `setmetatable`\r\n* `loadstring`\r\n\r\netc.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-12T20:23:05Z",
            "diff_hunk": "@@ -2773,4 +2808,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter_map({self}, {f})                               *Iter:filter_map()*\n+    Add a filter/map step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1164613127",
            "id": 1164613127,
            "in_reply_to_id": 1164601916,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FapYH",
            "original_commit_id": "5c5817b319db4eb6a585730e695f151db134b2ec",
            "original_line": 3047,
            "original_position": 176,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1382062212,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164613127/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T20:23:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164613127",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1164626009"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164626009"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ah yes, that's a good argument. It also seems that there are some languages that use `foreach`. It just feels a bit wrong to me, but I don't feel _super_ strongly about it, so fine with me to leave it as well",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-12T20:34:11Z",
            "diff_hunk": "@@ -2773,4 +2808,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter_map({self}, {f})                               *Iter:filter_map()*\n+    Add a filter/map step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1164626009",
            "id": 1164626009,
            "in_reply_to_id": 1164601916,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FashZ",
            "original_commit_id": "5c5817b319db4eb6a585730e695f151db134b2ec",
            "original_line": 3047,
            "original_position": 176,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1382076488,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164626009/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T20:34:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164626009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblj/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblj/followers",
                "following_url": "https://api.github.com/users/seblj/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblj",
                "id": 5160701,
                "login": "seblj",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblj/orgs",
                "received_events_url": "https://api.github.com/users/seblj/received_events",
                "repos_url": "https://api.github.com/users/seblj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1165999001"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1165999001"
                }
            },
            "author_association": "MEMBER",
            "body": "We should be consistent either way though, so either all functions should use `singleword` style or all should use `snake_case` style. I changed everything to use `singleword` style in 8a93df0cf9f6210f3c0a1ad506b936c9b9ff0316 as that is \"more Lua\", but if the Bikeshed Brigade comes to a consensus on `snake_case` I'll change them all back (I don't feel strongly about it either way, as long as we're consistent).",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-13T20:34:00Z",
            "diff_hunk": "@@ -2773,4 +2808,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter_map({self}, {f})                               *Iter:filter_map()*\n+    Add a filter/map step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1165999001",
            "id": 1165999001,
            "in_reply_to_id": 1164601916,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ff7uZ",
            "original_commit_id": "5c5817b319db4eb6a585730e695f151db134b2ec",
            "original_line": 3047,
            "original_position": 176,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1384166094,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1165999001/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-13T20:34:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1165999001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1166676531"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166676531"
                }
            },
            "author_association": "MEMBER",
            "body": "> In Lua, we cannot have nil values in the middle of a table,\r\n\r\nThat's not strictly speaking correct; `{ 1, 2, nil, 4 }` is a perfectly valid table (and array); just not a valid list(-like table). ",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T10:44:04Z",
            "diff_hunk": "@@ -0,0 +1,332 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field fn function\n+---@field head ?number\n+---@field tail ?number\n+local Iter = {}\n+\n+Iter.__index = Iter\n+\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Add a filter/map step to the iterator.\n+---\n+--- Example:\n+--- <pre>\n+--- > local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(i, v)\n+--- >   if v % 2 == 0 then\n+--- >     return i, v * 3\n+--- >   end\n+--- > end)\n+--- > it:collect()\n+--- { 6, 12 }\n+--- </pre>\n+---\n+---@param f function(...):any Mapping function. Takes all values returned from the previous stage\n+---                            in the pipeline as arguments and returns a new value. Nil values\n+---                            returned from `f` are filtered from the output.\n+---@return Iter\n+function Iter.filter_map(self, f)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1166676531",
            "id": 1166676531,
            "in_reply_to_id": 1164036947,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FihIz",
            "original_commit_id": "2d4720a99e3a1c02c04536cd40422d0c133795e4",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "runtime/lua/vim/Iter.lua",
            "position": null,
            "pull_request_review_id": 1385214158,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166676531/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T10:44:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166676531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1166775545"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166775545"
                }
            },
            "author_association": "MEMBER",
            "body": "My vote is for noodle case, for the following reason: we use snake case specifically for `verb_noun` idioms, and none of these functions have this \"complex syntax\" -- they're simple terms (like `foreach`, which is indeed a builtin keyword in some languages).",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T12:27:12Z",
            "diff_hunk": "@@ -2773,4 +2808,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter_map({self}, {f})                               *Iter:filter_map()*\n+    Add a filter/map step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1166775545",
            "id": 1166775545,
            "in_reply_to_id": 1164601916,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Fi5T5",
            "original_commit_id": "5c5817b319db4eb6a585730e695f151db134b2ec",
            "original_line": 3047,
            "original_position": 176,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1385369285,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166775545/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T12:27:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166775545",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1166777384"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166777384"
                }
            },
            "author_association": "MEMBER",
            "body": "On a related note, `revnext` (\"reverse next\") or `endnext` or `nextlast` might be better -- unless `nextback` is already an established term in iteratorland -- as \"back\" isn't used anywhere when talking about iterators here.\r\n\r\nAlternatively, isn't that just `:rev():next()`? Do we need a separate function for this?",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T12:29:12Z",
            "diff_hunk": "@@ -2773,4 +2870,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*\n+    Add a map and filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filtermap(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*\n+    Call a function once for each item in the pipeline.\n+\n+    This is used for functions which have side effects. To modify the values\n+    in the iterator, use |Iter:filtermap()|.\n+\n+    This function drains the iterator.\n+\n+    Parameters: ~\n+      • {f}  function(...) Function to execute for each item in the pipeline.\n+             Takes all of the values returned by the previous stage in the\n+             pipeline as arguments.\n+\n+Iter:last({self})                                                *Iter:last()*\n+    Return the last item in the iterator.\n+\n+    Drains the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abcdefg', ''))\n+     it:last()\n+     -- 'g'\n+\n+     local it = vim.iter({ 3, 6, 9, 12, 15 })\n+     it:last()\n+     -- 15\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:next({self})                                                *Iter:next()*\n+    Return the next value from the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(string.gmatch('1 2 3', 'd+')):filtermap(tonumber)\n+     it:next()\n+     -- 1\n+     it:next()\n+     -- 2\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nextback({self})                                        *Iter:nextback()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1166777384",
            "id": 1166777384,
            "line": 3108,
            "node_id": "PRRC_kwDOAPphoM5Fi5wo",
            "original_commit_id": "8a93df0cf9f6210f3c0a1ad506b936c9b9ff0316",
            "original_line": 3096,
            "original_position": 301,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 320,
            "pull_request_review_id": 1385372083,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166777384/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T12:32:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166777384",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1166780228"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166780228"
                }
            },
            "author_association": "MEMBER",
            "body": "(First point applies to all the `fooback` functions  -- the docs always talk about the \"end of the iterator\" or the \"last element\".)",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T12:32:12Z",
            "diff_hunk": "@@ -2773,4 +2870,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*\n+    Add a map and filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filtermap(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*\n+    Call a function once for each item in the pipeline.\n+\n+    This is used for functions which have side effects. To modify the values\n+    in the iterator, use |Iter:filtermap()|.\n+\n+    This function drains the iterator.\n+\n+    Parameters: ~\n+      • {f}  function(...) Function to execute for each item in the pipeline.\n+             Takes all of the values returned by the previous stage in the\n+             pipeline as arguments.\n+\n+Iter:last({self})                                                *Iter:last()*\n+    Return the last item in the iterator.\n+\n+    Drains the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abcdefg', ''))\n+     it:last()\n+     -- 'g'\n+\n+     local it = vim.iter({ 3, 6, 9, 12, 15 })\n+     it:last()\n+     -- 15\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:next({self})                                                *Iter:next()*\n+    Return the next value from the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(string.gmatch('1 2 3', 'd+')):filtermap(tonumber)\n+     it:next()\n+     -- 1\n+     it:next()\n+     -- 2\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nextback({self})                                        *Iter:nextback()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1166780228",
            "id": 1166780228,
            "in_reply_to_id": 1166777384,
            "line": 3108,
            "node_id": "PRRC_kwDOAPphoM5Fi6dE",
            "original_commit_id": "8a93df0cf9f6210f3c0a1ad506b936c9b9ff0316",
            "original_line": 3096,
            "original_position": 301,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 320,
            "pull_request_review_id": 1385376346,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166780228/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T12:32:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166780228",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1166805726"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166805726"
                }
            },
            "author_association": "MEMBER",
            "body": "> On a related note, `revnext` (\"reverse next\") or `endnext` might be better -- unless `nextback` is already an established term in iteratorland -- as \"back\" isn't used anywhere when talking about iterators here.\r\n\r\n\"back\" is a standard term in at least [Rust](https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#tymethod.next_back) and [C++](https://en.cppreference.com/w/cpp/container/vector/back).\r\n\r\n> Alternatively, isn't that just `:rev():next()`? Do we need a separate function for this?\r\n\r\nNo, it's not quite the same. `:rev()` will reverse the order of the table. One may want to remove a value from the end of the list without reversing the order of the list.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T12:58:29Z",
            "diff_hunk": "@@ -2773,4 +2870,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*\n+    Add a map and filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filtermap(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*\n+    Call a function once for each item in the pipeline.\n+\n+    This is used for functions which have side effects. To modify the values\n+    in the iterator, use |Iter:filtermap()|.\n+\n+    This function drains the iterator.\n+\n+    Parameters: ~\n+      • {f}  function(...) Function to execute for each item in the pipeline.\n+             Takes all of the values returned by the previous stage in the\n+             pipeline as arguments.\n+\n+Iter:last({self})                                                *Iter:last()*\n+    Return the last item in the iterator.\n+\n+    Drains the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abcdefg', ''))\n+     it:last()\n+     -- 'g'\n+\n+     local it = vim.iter({ 3, 6, 9, 12, 15 })\n+     it:last()\n+     -- 15\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:next({self})                                                *Iter:next()*\n+    Return the next value from the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(string.gmatch('1 2 3', 'd+')):filtermap(tonumber)\n+     it:next()\n+     -- 1\n+     it:next()\n+     -- 2\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nextback({self})                                        *Iter:nextback()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1166805726",
            "id": 1166805726,
            "in_reply_to_id": 1166777384,
            "line": 3108,
            "node_id": "PRRC_kwDOAPphoM5FjAre",
            "original_commit_id": "8a93df0cf9f6210f3c0a1ad506b936c9b9ff0316",
            "original_line": 3096,
            "original_position": 301,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 320,
            "pull_request_review_id": 1385414992,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166805726/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T12:58:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166805726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1166969249"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166969249"
                }
            },
            "author_association": "MEMBER",
            "body": "👀 ",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T15:20:13Z",
            "diff_hunk": "@@ -278,21 +278,21 @@ static const char *highlight_init_both[] = {\n \n   // LSP semantic tokens\n   \"default link @lsp.type.class Structure\",\n-  \"default link @lsp.type.comment Comment\",\n+  \"default link @lsp.type.comment @comment\",",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1166969249",
            "id": 1166969249,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Fjomh",
            "original_commit_id": "6c65a1659d0cf5abbd476100aad7600fc1b78e7a",
            "original_line": 281,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1385666588,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166969249/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T15:20:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166969249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1166969504"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166969504"
                }
            },
            "author_association": "MEMBER",
            "body": "Oops 😅 ",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T15:20:28Z",
            "diff_hunk": "@@ -278,21 +278,21 @@ static const char *highlight_init_both[] = {\n \n   // LSP semantic tokens\n   \"default link @lsp.type.class Structure\",\n-  \"default link @lsp.type.comment Comment\",\n+  \"default link @lsp.type.comment @comment\",",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1166969504",
            "id": 1166969504,
            "in_reply_to_id": 1166969249,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Fjoqg",
            "original_commit_id": "6c65a1659d0cf5abbd476100aad7600fc1b78e7a",
            "original_line": 281,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1385666982,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166969504/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T15:20:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166969504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1166971726"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166971726"
                }
            },
            "author_association": "MEMBER",
            "body": "Fixed",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T15:22:27Z",
            "diff_hunk": "@@ -278,21 +278,21 @@ static const char *highlight_init_both[] = {\n \n   // LSP semantic tokens\n   \"default link @lsp.type.class Structure\",\n-  \"default link @lsp.type.comment Comment\",\n+  \"default link @lsp.type.comment @comment\",",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1166971726",
            "id": 1166971726,
            "in_reply_to_id": 1166969249,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FjpNO",
            "original_commit_id": "6c65a1659d0cf5abbd476100aad7600fc1b78e7a",
            "original_line": 281,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1385671688,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166971726/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T15:22:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1166971726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167067295"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167067295"
                }
            },
            "author_association": "MEMBER",
            "body": "The existing functions have the arguments swapped: `tbl_map(fn, table)`. Is there a reason to change that pattern?\r\n\r\nI like trailing functions because of the syntax, but it's common to have the function first and the iterable second. \r\n\r\nPython:\r\n\r\n```\r\nclass filter(object)\r\n |  filter(function or None, iterable) --> filter object\r\n |  \r\n |  Return an iterator yielding those items of iterable for which function(item)\r\n |  is true. If function is None, return the items that are true.\r\n```\r\n\r\nHaskell:\r\n\r\n```\r\nData.List filter :: (a -> Bool) -> [a] -> [a]\r\n```\r\n\r\n\r\n\r\n",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T16:46:32Z",
            "diff_hunk": "@@ -1653,6 +1670,51 @@ endswith({s}, {suffix})                                       *vim.endswith()*\n     Return: ~\n         (boolean) `true` if `suffix` is a suffix of `s`\n \n+filter({src}, {f})                                              *vim.filter()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167067295",
            "id": 1167067295,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkAif",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 1673,
            "original_position": 28,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1385810813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167067295/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T17:10:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167067295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167070346"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167070346"
                }
            },
            "author_association": "MEMBER",
            "body": "What do you think of returning a iterator if the input was an iterator, and table only if the input was a table. \r\n\r\nIt would allow stuff like `for _, v in vim.filter(myfilter, someit()) do ...`. ",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T16:48:11Z",
            "diff_hunk": "@@ -1653,6 +1670,51 @@ endswith({s}, {suffix})                                       *vim.endswith()*\n     Return: ~\n         (boolean) `true` if `suffix` is a suffix of `s`\n \n+filter({src}, {f})                                              *vim.filter()*\n+    Filter a table or iterator.\n+\n+    This is a convenience function that performs:\n+\n+    >lua\n+\n+     vim.iter(src):filter(f):collect()\n+<\n+\n+    Parameters: ~\n+      • {src}  table|function Table or iterator function to filter\n+      • {f}    function(...):bool Filter function. Accepts the current\n+               iterator or table values as arguments and returns true if those\n+               values should be kept in the final table\n+\n+    Return: ~\n+        (table)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167070346",
            "id": 1167070346,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkBSK",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 1690,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1385810813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167070346/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T18:12:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167070346",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167072378"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167072378"
                }
            },
            "author_association": "MEMBER",
            "body": "What do you think of replacing this with a more general `reduce` or `foldl` that defaults to initial/seed={} and acc=table.insert\r\n\r\nIt would allow to compose it with other operations to compute the sum or a product and so on.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T16:50:29Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167072378",
            "id": 1167072378,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkBx6",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 2937,
            "original_position": 142,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1385810813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167072378/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T17:02:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167072378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167076041"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167076041"
                }
            },
            "author_association": "MEMBER",
            "body": "Is this worth adding given that the resulting table can easily be passed to `table.sort()` ?\r\n\r\nAsking because it seems to diverge a bit from the overall pattern",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T16:54:30Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167076041",
            "id": 1167076041,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkCrJ",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 2961,
            "original_position": 166,
            "original_start_line": 2959,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1385810813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167076041/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-04-14T17:02:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167076041",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167078858"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167078858"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd kinda prefer the shorter `map`, but I guess this is to highlight the `nil` value behavior, right?",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T16:56:51Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167078858",
            "id": 1167078858,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkDXK",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 3000,
            "original_position": 205,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1385810813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167078858/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T17:02:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167078858",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167079404"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167079404"
                }
            },
            "author_association": "MEMBER",
            "body": "Calling this `each` could be another option to avoid the singleword vs snake_case decision :p\r\n\r\nMy vote would also go for singleword, due to it fitting better with Lua builtins",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T16:57:25Z",
            "diff_hunk": "@@ -2773,4 +2808,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter_map({self}, {f})                               *Iter:filter_map()*\n+    Add a filter/map step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167079404",
            "id": 1167079404,
            "in_reply_to_id": 1164601916,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkDfs",
            "original_commit_id": "5c5817b319db4eb6a585730e695f151db134b2ec",
            "original_line": 3047,
            "original_position": 176,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1385810813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167079404/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T17:02:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167079404",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167082726"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167082726"
                }
            },
            "author_association": "MEMBER",
            "body": "Related to my comment regarding the sort option for `collect` - do we need both?",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T16:59:10Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*\n+    Add a map and filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filtermap(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*\n+    Call a function once for each item in the pipeline.\n+\n+    This is used for functions which have side effects. To modify the values\n+    in the iterator, use |Iter:filtermap()|.\n+\n+    This function drains the iterator.\n+\n+    Parameters: ~\n+      • {f}  function(...) Function to execute for each item in the pipeline.\n+             Takes all of the values returned by the previous stage in the\n+             pipeline as arguments.\n+\n+Iter:last({self})                                                *Iter:last()*\n+    Return the last item in the iterator.\n+\n+    Drains the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abcdefg', ''))\n+     it:last()\n+     -- 'g'\n+\n+     local it = vim.iter({ 3, 6, 9, 12, 15 })\n+     it:last()\n+     -- 15\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:next({self})                                                *Iter:next()*\n+    Return the next value from the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(string.gmatch('1 2 3', 'd+')):filtermap(tonumber)\n+     it:next()\n+     -- 1\n+     it:next()\n+     -- 2\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nextback({self})                                        *Iter:nextback()*\n+    Return the next value from the end of the iterator.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({1, 2, 3, 4})\n+     it:nextback()\n+     -- 4\n+     it:nextback()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nth({self}, {n})                                             *Iter:nth()*\n+    Return the nth value in the iterator.\n+\n+    This function advances the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:nth(2)\n+     -- 6\n+     it:nth(2)\n+     -- 12\n+<\n+\n+    Parameters: ~\n+      • {n}  (number) The index of the value to return.\n+\n+    Return: ~\n+        any\n+\n+Iter:nthback({self}, {n})                                     *Iter:nthback()*\n+    Return the nth value from the end of the iterator.\n+\n+    This function advances the iterator.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:nthback(2)\n+     -- 9\n+     it:nthback(2)\n+     -- 3\n+<\n+\n+    Parameters: ~\n+      • {n}  (number) The index of the value to return.\n+\n+    Return: ~\n+        any\n+\n+Iter:peek({self})                                                *Iter:peek()*\n+    Peek at the next value in the iterator without consuming it.\n+\n+    Only iterators on tables can be peeked.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:peek()\n+     -- 3\n+     it:peek()\n+     -- 3\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:peekback({self})                                        *Iter:peekback()*\n+    Return the next value from the end of the iterator without consuming it.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({1, 2, 3, 4})\n+     it:peekback()\n+     -- 4\n+     it:peekback()\n+     -- 4\n+     it:nextback()\n+     -- 4\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:rev({self})                                                  *Iter:rev()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167082726",
            "id": 1167082726,
            "line": 3205,
            "node_id": "PRRC_kwDOAPphoM5FkETm",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 3193,
            "original_position": 398,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 417,
            "pull_request_review_id": 1385810813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167082726/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T17:02:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167082726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167086882"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167086882"
                }
            },
            "author_association": "MEMBER",
            "body": "It's also common to have a `skip_while` and `take_while`. But not sure how exhaustive this initial version should be. I'd actually tend to go more minimal initially and also remove the `*back` versions, as those are not that common.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T17:01:23Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*\n+    Add a map and filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filtermap(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*\n+    Call a function once for each item in the pipeline.\n+\n+    This is used for functions which have side effects. To modify the values\n+    in the iterator, use |Iter:filtermap()|.\n+\n+    This function drains the iterator.\n+\n+    Parameters: ~\n+      • {f}  function(...) Function to execute for each item in the pipeline.\n+             Takes all of the values returned by the previous stage in the\n+             pipeline as arguments.\n+\n+Iter:last({self})                                                *Iter:last()*\n+    Return the last item in the iterator.\n+\n+    Drains the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abcdefg', ''))\n+     it:last()\n+     -- 'g'\n+\n+     local it = vim.iter({ 3, 6, 9, 12, 15 })\n+     it:last()\n+     -- 15\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:next({self})                                                *Iter:next()*\n+    Return the next value from the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(string.gmatch('1 2 3', 'd+')):filtermap(tonumber)\n+     it:next()\n+     -- 1\n+     it:next()\n+     -- 2\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nextback({self})                                        *Iter:nextback()*\n+    Return the next value from the end of the iterator.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({1, 2, 3, 4})\n+     it:nextback()\n+     -- 4\n+     it:nextback()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nth({self}, {n})                                             *Iter:nth()*\n+    Return the nth value in the iterator.\n+\n+    This function advances the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:nth(2)\n+     -- 6\n+     it:nth(2)\n+     -- 12\n+<\n+\n+    Parameters: ~\n+      • {n}  (number) The index of the value to return.\n+\n+    Return: ~\n+        any\n+\n+Iter:nthback({self}, {n})                                     *Iter:nthback()*\n+    Return the nth value from the end of the iterator.\n+\n+    This function advances the iterator.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:nthback(2)\n+     -- 9\n+     it:nthback(2)\n+     -- 3\n+<\n+\n+    Parameters: ~\n+      • {n}  (number) The index of the value to return.\n+\n+    Return: ~\n+        any\n+\n+Iter:peek({self})                                                *Iter:peek()*\n+    Peek at the next value in the iterator without consuming it.\n+\n+    Only iterators on tables can be peeked.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:peek()\n+     -- 3\n+     it:peek()\n+     -- 3\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:peekback({self})                                        *Iter:peekback()*\n+    Return the next value from the end of the iterator without consuming it.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({1, 2, 3, 4})\n+     it:peekback()\n+     -- 4\n+     it:peekback()\n+     -- 4\n+     it:nextback()\n+     -- 4\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:rev({self})                                                  *Iter:rev()*\n+    Reverse an iterator.\n+\n+    Only iterators on tables can be reversed.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 }):rev()\n+     it:collect()\n+     -- { 12, 9, 6, 3 }\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:rfind({self}, {f})                                         *Iter:rfind()*\n+    Find the first value in the iterator that satisfies the given predicate,\n+    starting from the end.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Only supported for iterators on tables.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 2, 1 }):enumerate()\n+     it:rfind(1)\n+     -- 5   1\n+     it:rfind(1)\n+     -- 1   1\n+<\n+\n+    Return: ~\n+        any\n+\n+    See also: ~\n+      • Iter.find\n+\n+Iter:skip({self}, {n})                                           *Iter:skip()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167086882",
            "id": 1167086882,
            "line": 3244,
            "node_id": "PRRC_kwDOAPphoM5FkFUi",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 3232,
            "original_position": 437,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 456,
            "pull_request_review_id": 1385810813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167086882/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T17:02:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167086882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167205401"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167205401"
                }
            },
            "author_association": "MEMBER",
            "body": "If function first, table second is more common elsewhere (which it looks like it is, judging from your examples and a few others I found), then let's go with that.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T19:21:27Z",
            "diff_hunk": "@@ -1653,6 +1670,51 @@ endswith({s}, {suffix})                                       *vim.endswith()*\n     Return: ~\n         (boolean) `true` if `suffix` is a suffix of `s`\n \n+filter({src}, {f})                                              *vim.filter()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167205401",
            "id": 1167205401,
            "in_reply_to_id": 1167067295,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkiQZ",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 1673,
            "original_position": 28,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1386077124,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167205401/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T19:21:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167205401",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167207241"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167207241"
                }
            },
            "author_association": "MEMBER",
            "body": "I think that would make this less useful. `vim.filter(myfilter, someit())` is not much less to type than `vim.iter(someit()):filter(myfilter)`.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T19:24:02Z",
            "diff_hunk": "@@ -1653,6 +1670,51 @@ endswith({s}, {suffix})                                       *vim.endswith()*\n     Return: ~\n         (boolean) `true` if `suffix` is a suffix of `s`\n \n+filter({src}, {f})                                              *vim.filter()*\n+    Filter a table or iterator.\n+\n+    This is a convenience function that performs:\n+\n+    >lua\n+\n+     vim.iter(src):filter(f):collect()\n+<\n+\n+    Parameters: ~\n+      • {src}  table|function Table or iterator function to filter\n+      • {f}    function(...):bool Filter function. Accepts the current\n+               iterator or table values as arguments and returns true if those\n+               values should be kept in the final table\n+\n+    Return: ~\n+        (table)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167207241",
            "id": 1167207241,
            "in_reply_to_id": 1167070346,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkitJ",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 1690,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1386079875,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167207241/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T19:24:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167207241",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167209792"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167209792"
                }
            },
            "author_association": "MEMBER",
            "body": "I actually had a `fold` initially, but removed it because it is more idiomatic in Lua to just use a for loop.\r\n\r\nConsider:\r\n\r\n```lua\r\nlocal sum = vim.iter(t):fold(0, function(acc, v) return acc + v end)\r\n```\r\n\r\nvs\r\n\r\n```lua\r\nlocal sum = 0\r\nfor v in vim.iter(t) do\r\n  sum = sum + v\r\nend\r\n```\r\n\r\nThe former is fewer lines, but the latter seems (to me) more idiomatic.\r\n\r\nIt may not hurt to leave it in though. I like that you can implement `collect` using `fold`, but imo it's good to have a dedicated `collect` function that converts an iterator into a table (it's not immediately obvious that `fold` would do that).\r\n\r\nI borrowed the `collect` terminology from Rust, and I quite like it, but I'm not sure if that's a standard term.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T19:27:49Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167209792",
            "id": 1167209792,
            "in_reply_to_id": 1167072378,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkjVA",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 2937,
            "original_position": 142,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1386083843,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167209792/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T19:27:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167209792",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167210253"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167210253"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm ok with removing it.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T19:28:32Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167210253",
            "id": 1167210253,
            "in_reply_to_id": 1167076041,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkjcN",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 2961,
            "original_position": 166,
            "original_start_line": 2959,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1386084578,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167210253/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-04-14T19:28:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167210253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167210546"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167210546"
                }
            },
            "author_association": "MEMBER",
            "body": ">but I guess this is to highlight the nil value behavior, right?\r\n\r\nYes, that was my reasoning for including `filter` in the name.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T19:29:01Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167210546",
            "id": 1167210546,
            "in_reply_to_id": 1167078858,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Fkjgy",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 3000,
            "original_position": 205,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1386085047,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167210546/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T19:29:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167210546",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167211593"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167211593"
                }
            },
            "author_association": "MEMBER",
            "body": "I think `rev()` is useful to have. Unlike sorting, there is no separate `table.reverse()` function.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T19:30:35Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*\n+    Add a map and filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filtermap(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*\n+    Call a function once for each item in the pipeline.\n+\n+    This is used for functions which have side effects. To modify the values\n+    in the iterator, use |Iter:filtermap()|.\n+\n+    This function drains the iterator.\n+\n+    Parameters: ~\n+      • {f}  function(...) Function to execute for each item in the pipeline.\n+             Takes all of the values returned by the previous stage in the\n+             pipeline as arguments.\n+\n+Iter:last({self})                                                *Iter:last()*\n+    Return the last item in the iterator.\n+\n+    Drains the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abcdefg', ''))\n+     it:last()\n+     -- 'g'\n+\n+     local it = vim.iter({ 3, 6, 9, 12, 15 })\n+     it:last()\n+     -- 15\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:next({self})                                                *Iter:next()*\n+    Return the next value from the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(string.gmatch('1 2 3', 'd+')):filtermap(tonumber)\n+     it:next()\n+     -- 1\n+     it:next()\n+     -- 2\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nextback({self})                                        *Iter:nextback()*\n+    Return the next value from the end of the iterator.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({1, 2, 3, 4})\n+     it:nextback()\n+     -- 4\n+     it:nextback()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nth({self}, {n})                                             *Iter:nth()*\n+    Return the nth value in the iterator.\n+\n+    This function advances the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:nth(2)\n+     -- 6\n+     it:nth(2)\n+     -- 12\n+<\n+\n+    Parameters: ~\n+      • {n}  (number) The index of the value to return.\n+\n+    Return: ~\n+        any\n+\n+Iter:nthback({self}, {n})                                     *Iter:nthback()*\n+    Return the nth value from the end of the iterator.\n+\n+    This function advances the iterator.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:nthback(2)\n+     -- 9\n+     it:nthback(2)\n+     -- 3\n+<\n+\n+    Parameters: ~\n+      • {n}  (number) The index of the value to return.\n+\n+    Return: ~\n+        any\n+\n+Iter:peek({self})                                                *Iter:peek()*\n+    Peek at the next value in the iterator without consuming it.\n+\n+    Only iterators on tables can be peeked.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:peek()\n+     -- 3\n+     it:peek()\n+     -- 3\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:peekback({self})                                        *Iter:peekback()*\n+    Return the next value from the end of the iterator without consuming it.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({1, 2, 3, 4})\n+     it:peekback()\n+     -- 4\n+     it:peekback()\n+     -- 4\n+     it:nextback()\n+     -- 4\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:rev({self})                                                  *Iter:rev()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167211593",
            "id": 1167211593,
            "in_reply_to_id": 1167082726,
            "line": 3205,
            "node_id": "PRRC_kwDOAPphoM5FkjxJ",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 3193,
            "original_position": 398,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 417,
            "pull_request_review_id": 1386086639,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167211593/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T19:30:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167211593",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167212239"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167212239"
                }
            },
            "author_association": "MEMBER",
            "body": "`skipback` is useful for creating a slice.\r\n\r\n```lua\r\n-- Remove the first 6 elements and the last 3 elements\r\nvim.iter(t):skip(6):skipback(3)\r\n```\r\n\r\nThis could replace `vim.list_slice`.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T19:31:33Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*\n+    Add a map and filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filtermap(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*\n+    Call a function once for each item in the pipeline.\n+\n+    This is used for functions which have side effects. To modify the values\n+    in the iterator, use |Iter:filtermap()|.\n+\n+    This function drains the iterator.\n+\n+    Parameters: ~\n+      • {f}  function(...) Function to execute for each item in the pipeline.\n+             Takes all of the values returned by the previous stage in the\n+             pipeline as arguments.\n+\n+Iter:last({self})                                                *Iter:last()*\n+    Return the last item in the iterator.\n+\n+    Drains the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abcdefg', ''))\n+     it:last()\n+     -- 'g'\n+\n+     local it = vim.iter({ 3, 6, 9, 12, 15 })\n+     it:last()\n+     -- 15\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:next({self})                                                *Iter:next()*\n+    Return the next value from the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(string.gmatch('1 2 3', 'd+')):filtermap(tonumber)\n+     it:next()\n+     -- 1\n+     it:next()\n+     -- 2\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nextback({self})                                        *Iter:nextback()*\n+    Return the next value from the end of the iterator.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({1, 2, 3, 4})\n+     it:nextback()\n+     -- 4\n+     it:nextback()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nth({self}, {n})                                             *Iter:nth()*\n+    Return the nth value in the iterator.\n+\n+    This function advances the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:nth(2)\n+     -- 6\n+     it:nth(2)\n+     -- 12\n+<\n+\n+    Parameters: ~\n+      • {n}  (number) The index of the value to return.\n+\n+    Return: ~\n+        any\n+\n+Iter:nthback({self}, {n})                                     *Iter:nthback()*\n+    Return the nth value from the end of the iterator.\n+\n+    This function advances the iterator.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:nthback(2)\n+     -- 9\n+     it:nthback(2)\n+     -- 3\n+<\n+\n+    Parameters: ~\n+      • {n}  (number) The index of the value to return.\n+\n+    Return: ~\n+        any\n+\n+Iter:peek({self})                                                *Iter:peek()*\n+    Peek at the next value in the iterator without consuming it.\n+\n+    Only iterators on tables can be peeked.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:peek()\n+     -- 3\n+     it:peek()\n+     -- 3\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:peekback({self})                                        *Iter:peekback()*\n+    Return the next value from the end of the iterator without consuming it.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({1, 2, 3, 4})\n+     it:peekback()\n+     -- 4\n+     it:peekback()\n+     -- 4\n+     it:nextback()\n+     -- 4\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:rev({self})                                                  *Iter:rev()*\n+    Reverse an iterator.\n+\n+    Only iterators on tables can be reversed.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 }):rev()\n+     it:collect()\n+     -- { 12, 9, 6, 3 }\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:rfind({self}, {f})                                         *Iter:rfind()*\n+    Find the first value in the iterator that satisfies the given predicate,\n+    starting from the end.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Only supported for iterators on tables.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 2, 1 }):enumerate()\n+     it:rfind(1)\n+     -- 5   1\n+     it:rfind(1)\n+     -- 1   1\n+<\n+\n+    Return: ~\n+        any\n+\n+    See also: ~\n+      • Iter.find\n+\n+Iter:skip({self}, {n})                                           *Iter:skip()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167212239",
            "id": 1167212239,
            "in_reply_to_id": 1167086882,
            "line": 3244,
            "node_id": "PRRC_kwDOAPphoM5Fkj7P",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 3232,
            "original_position": 437,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 456,
            "pull_request_review_id": 1386087626,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167212239/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T19:31:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167212239",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167213037"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167213037"
                }
            },
            "author_association": "MEMBER",
            "body": "I like `each` too 👍 ",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T19:32:44Z",
            "diff_hunk": "@@ -2773,4 +2808,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filter_map(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter_map({self}, {f})                               *Iter:filter_map()*\n+    Add a filter/map step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filter_map(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167213037",
            "id": 1167213037,
            "in_reply_to_id": 1164601916,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkkHt",
            "original_commit_id": "5c5817b319db4eb6a585730e695f151db134b2ec",
            "original_line": 3047,
            "original_position": 176,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1386088818,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167213037/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T19:32:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167213037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167224168"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167224168"
                }
            },
            "author_association": "MEMBER",
            "body": "> I borrowed the collect terminology from Rust, and I quite like it, but I'm not sure if that's a standard term.\r\n\r\nIt's used in java too but it takes a `Collector`, which is sort of a `Reducer`: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Stream.html#collect(java.util.stream.Collector)\r\n\r\nIf it's restricted to return a table I'd tend to go with `:totable`, same as https://luafun.github.io/reducing.html#fun.totable, but for stdlib I think something that is more generally useful would be warranted\r\n\r\n> It may not hurt to leave it in though. I like that you can implement collect using fold, but imo it's good to have a dedicated collect function that converts an iterator into a table (it's not immediately obvious that fold would do that).\r\n\r\nCould also still call it collect with an opts table that takes an initial value and an accumulator. They could default to an empty table and table.insert.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T19:48:56Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167224168",
            "id": 1167224168,
            "in_reply_to_id": 1167072378,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Fkm1o",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 2937,
            "original_position": 142,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1386105434,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167224168/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T19:48:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167224168",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167243464"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167243464"
                }
            },
            "author_association": "MEMBER",
            "body": "Renamed to `totable` in 341e7fef0d754c6fcfcff2adfabcb0f444f9ae81. Restored `fold` in eaa15d437e47c97c82af3eed7bb8defc1d884e62.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T20:17:53Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167243464",
            "id": 1167243464,
            "in_reply_to_id": 1167072378,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkrjI",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 2937,
            "original_position": 142,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1386135255,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167243464/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T20:17:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167243464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167244229"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167244229"
                }
            },
            "author_association": "MEMBER",
            "body": ">If it's restricted to return a table I'd tend to go with :totable, same as https://luafun.github.io/reducing.html#fun.totable, but for stdlib I think something that is more generally useful would be warranted\r\n\r\nBecause tables are so central in Lua, and because conversion to a table is slightly different implementation wise for list-like tables, map-like tables, and function iterators (for both performance and semantics reasons), I think having a dedicated `totable` makes sense. For a more generic interface, we have `fold`.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T20:19:14Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167244229",
            "id": 1167244229,
            "in_reply_to_id": 1167072378,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FkrvF",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 2937,
            "original_position": 142,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1386136491,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167244229/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T20:19:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167244229",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167254917"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167254917"
                }
            },
            "author_association": "MEMBER",
            "body": "Also added `vim.iter(t):slice()`.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-14T20:35:40Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*\n+    Add a map and filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 4 }):filtermap(function(v)\n+       if v % 2 == 0 then\n+         return v * 3\n+       end\n+     end)\n+     it:collect()\n+     -- { 6, 12 }\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):any Mapping function. Takes all values returned\n+             from the previous stage in the pipeline as arguments and returns\n+             one or more new values, which are used in the next pipeline\n+             stage. Nil return values returned are filtered from the output.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:find({self}, {f})                                           *Iter:find()*\n+    Find the first value in the iterator that satisfies the given predicate.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(12)\n+     -- 12\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(20)\n+     -- nil\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:find(function(v) return v % 4 == 0 end)\n+     -- 12\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:foreach({self}, {f})                                     *Iter:foreach()*\n+    Call a function once for each item in the pipeline.\n+\n+    This is used for functions which have side effects. To modify the values\n+    in the iterator, use |Iter:filtermap()|.\n+\n+    This function drains the iterator.\n+\n+    Parameters: ~\n+      • {f}  function(...) Function to execute for each item in the pipeline.\n+             Takes all of the values returned by the previous stage in the\n+             pipeline as arguments.\n+\n+Iter:last({self})                                                *Iter:last()*\n+    Return the last item in the iterator.\n+\n+    Drains the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abcdefg', ''))\n+     it:last()\n+     -- 'g'\n+\n+     local it = vim.iter({ 3, 6, 9, 12, 15 })\n+     it:last()\n+     -- 15\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:next({self})                                                *Iter:next()*\n+    Return the next value from the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(string.gmatch('1 2 3', 'd+')):filtermap(tonumber)\n+     it:next()\n+     -- 1\n+     it:next()\n+     -- 2\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nextback({self})                                        *Iter:nextback()*\n+    Return the next value from the end of the iterator.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({1, 2, 3, 4})\n+     it:nextback()\n+     -- 4\n+     it:nextback()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:nth({self}, {n})                                             *Iter:nth()*\n+    Return the nth value in the iterator.\n+\n+    This function advances the iterator.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:nth(2)\n+     -- 6\n+     it:nth(2)\n+     -- 12\n+<\n+\n+    Parameters: ~\n+      • {n}  (number) The index of the value to return.\n+\n+    Return: ~\n+        any\n+\n+Iter:nthback({self}, {n})                                     *Iter:nthback()*\n+    Return the nth value from the end of the iterator.\n+\n+    This function advances the iterator.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:nthback(2)\n+     -- 9\n+     it:nthback(2)\n+     -- 3\n+<\n+\n+    Parameters: ~\n+      • {n}  (number) The index of the value to return.\n+\n+    Return: ~\n+        any\n+\n+Iter:peek({self})                                                *Iter:peek()*\n+    Peek at the next value in the iterator without consuming it.\n+\n+    Only iterators on tables can be peeked.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 })\n+     it:peek()\n+     -- 3\n+     it:peek()\n+     -- 3\n+     it:next()\n+     -- 3\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:peekback({self})                                        *Iter:peekback()*\n+    Return the next value from the end of the iterator without consuming it.\n+\n+    Only supported for iterators on tables.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({1, 2, 3, 4})\n+     it:peekback()\n+     -- 4\n+     it:peekback()\n+     -- 4\n+     it:nextback()\n+     -- 4\n+<\n+\n+    Return: ~\n+        any\n+\n+Iter:rev({self})                                                  *Iter:rev()*\n+    Reverse an iterator.\n+\n+    Only iterators on tables can be reversed.\n+\n+    Example: >lua\n+\n+     local it = vim.iter({ 3, 6, 9, 12 }):rev()\n+     it:collect()\n+     -- { 12, 9, 6, 3 }\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:rfind({self}, {f})                                         *Iter:rfind()*\n+    Find the first value in the iterator that satisfies the given predicate,\n+    starting from the end.\n+\n+    Advances the iterator. Returns nil and drains the iterator if no value is\n+    found.\n+\n+    Only supported for iterators on tables.\n+\n+    Examples: >lua\n+\n+     local it = vim.iter({ 1, 2, 3, 2, 1 }):enumerate()\n+     it:rfind(1)\n+     -- 5   1\n+     it:rfind(1)\n+     -- 1   1\n+<\n+\n+    Return: ~\n+        any\n+\n+    See also: ~\n+      • Iter.find\n+\n+Iter:skip({self}, {n})                                           *Iter:skip()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167254917",
            "id": 1167254917,
            "in_reply_to_id": 1167086882,
            "line": 3244,
            "node_id": "PRRC_kwDOAPphoM5FkuWF",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 3232,
            "original_position": 437,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 456,
            "pull_request_review_id": 1386152138,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167254917/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-14T20:35:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167254917",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167437105"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167437105"
                }
            },
            "author_association": "MEMBER",
            "body": "Just FYI in case you're not aware,  lua-ls recently added support for modifiers like `private`: `@field private _table? table`\r\n\r\nIs the ? as prefix on the type intentional?  So far we afaik use it as property name suffix or add `|nil` \r\n\r\n\r\n",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-15T08:20:28Z",
            "diff_hunk": "@@ -0,0 +1,770 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field next function Return the next value in the iterator\n+---@field _table ?table Underlying table data (table iterators only)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167437105",
            "id": 1167437105,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Fla0x",
            "original_commit_id": "387f40bdb25129caa1b510a53e4fc6681810fa5d",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 1386379808,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167437105/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-15T08:42:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167437105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167439824"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167439824"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      local unpacked = unpack(args)\r\n      if f(unpacked) then\r\n        return unpacked\r\n      end\r\n```\r\n\r\nWould avoid duplicate `unpack` calls. Same for a couple of the other functions. (Or is there special arg passing semantics with Lua that I'm missing?)",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-15T08:31:49Z",
            "diff_hunk": "@@ -0,0 +1,770 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field next function Return the next value in the iterator\n+---@field _table ?table Underlying table data (table iterators only)\n+---@field _head ?number Index to the front of a table iterator (table iterators only)\n+---@field _tail ?number Index to the end of a table iterator (table iterators only)\n+local Iter = {}\n+Iter.__index = Iter\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on list-like tables.\n+local ListIter = {}\n+ListIter.__index = setmetatable(ListIter, Iter)\n+ListIter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on map-like tables.\n+local MapIter = {}\n+MapIter.__index = setmetatable(MapIter, Iter)\n+MapIter.__call = function(self)\n+  return self:next()\n+end\n+\n+---@private\n+local function unpack(t)\n+  if type(t) == 'table' then\n+    return _G.unpack(t)\n+  end\n+  return t\n+end\n+\n+---@private\n+local function pack(...)\n+  if select('#', ...) > 1 then\n+    return { ... }\n+  end\n+  return ...\n+end\n+\n+--- Add a filter step to the iterator pipeline.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+--- </pre>\n+---\n+---@param f function(...):bool Takes all values returned from the previous stage in the pipeline and\n+---                            returns false or nil if the current iterator element should be\n+---                            removed.\n+---@return Iter\n+function Iter.filter(self, f)\n+  local next = self.next\n+  self.next = function(this)\n+    while true do\n+      local args = pack(next(this))\n+      if args == nil then\n+        break\n+      end\n+      if f(unpack(args)) then\n+        return unpack(args)\n+      end",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167439824",
            "id": 1167439824,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FlbfQ",
            "original_commit_id": "387f40bdb25129caa1b510a53e4fc6681810fa5d",
            "original_line": 65,
            "original_position": 65,
            "original_start_line": 63,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 1386379808,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167439824/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-04-15T08:42:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167439824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167439883"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167439883"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n---@field _head? integer Index to the front of a table iterator (table iterators only)\r\n---@field _tail? integer Index to the end of a table iterator (table iterators only)\r\n```",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-15T08:32:22Z",
            "diff_hunk": "@@ -0,0 +1,770 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field next function Return the next value in the iterator\n+---@field _table ?table Underlying table data (table iterators only)\n+---@field _head ?number Index to the front of a table iterator (table iterators only)\n+---@field _tail ?number Index to the end of a table iterator (table iterators only)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167439883",
            "id": 1167439883,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FlbgL",
            "original_commit_id": "387f40bdb25129caa1b510a53e4fc6681810fa5d",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 6,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 1386379808,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167439883/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-04-15T08:42:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167439883",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167485050"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167485050"
                }
            },
            "author_association": "MEMBER",
            "body": "Thanks, didn’t know about the private field modifiers.\r\n\r\nThe ? is intentional to indicate optional, although in this case it’s not needed anyway, as those fields should move to the ListIter docstring.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-15T12:06:30Z",
            "diff_hunk": "@@ -0,0 +1,770 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field next function Return the next value in the iterator\n+---@field _table ?table Underlying table data (table iterators only)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167485050",
            "id": 1167485050,
            "in_reply_to_id": 1167437105,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Flmh6",
            "original_commit_id": "387f40bdb25129caa1b510a53e4fc6681810fa5d",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 1386443614,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167485050/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-15T12:06:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167485050",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167485249"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167485249"
                }
            },
            "author_association": "MEMBER",
            "body": "The pack/unpack dance is necessary because we don’t know how many args the iterator function might return.\r\n\r\n```lua \r\nlocal unpacked = unpack(args)\r\n```\r\n\r\nwill drop all but the first value.\r\n\r\nWe could avoid duplicate unpacking through a helper function maybe, though I’m not sure if that’s better from a performance perspective (I’m not sure how expensive unpack is versus another function call)",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-15T12:08:39Z",
            "diff_hunk": "@@ -0,0 +1,770 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field next function Return the next value in the iterator\n+---@field _table ?table Underlying table data (table iterators only)\n+---@field _head ?number Index to the front of a table iterator (table iterators only)\n+---@field _tail ?number Index to the end of a table iterator (table iterators only)\n+local Iter = {}\n+Iter.__index = Iter\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on list-like tables.\n+local ListIter = {}\n+ListIter.__index = setmetatable(ListIter, Iter)\n+ListIter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on map-like tables.\n+local MapIter = {}\n+MapIter.__index = setmetatable(MapIter, Iter)\n+MapIter.__call = function(self)\n+  return self:next()\n+end\n+\n+---@private\n+local function unpack(t)\n+  if type(t) == 'table' then\n+    return _G.unpack(t)\n+  end\n+  return t\n+end\n+\n+---@private\n+local function pack(...)\n+  if select('#', ...) > 1 then\n+    return { ... }\n+  end\n+  return ...\n+end\n+\n+--- Add a filter step to the iterator pipeline.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+--- </pre>\n+---\n+---@param f function(...):bool Takes all values returned from the previous stage in the pipeline and\n+---                            returns false or nil if the current iterator element should be\n+---                            removed.\n+---@return Iter\n+function Iter.filter(self, f)\n+  local next = self.next\n+  self.next = function(this)\n+    while true do\n+      local args = pack(next(this))\n+      if args == nil then\n+        break\n+      end\n+      if f(unpack(args)) then\n+        return unpack(args)\n+      end",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167485249",
            "id": 1167485249,
            "in_reply_to_id": 1167439824,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FlmlB",
            "original_commit_id": "387f40bdb25129caa1b510a53e4fc6681810fa5d",
            "original_line": 65,
            "original_position": 65,
            "original_start_line": 63,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 1386443806,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167485249/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-04-15T12:09:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167485249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167487888"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167487888"
                }
            },
            "author_association": "MEMBER",
            "body": "> The ? is intentional to indicate optional, although in this case it’s not needed anyway, as those fields should move to the ListIter docstring.\r\n\r\nI meant if the syntax is intentional. `_table ?table` vs `_table? table`. I think so far we use the latter but I'm not sure anymore.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-15T12:26:53Z",
            "diff_hunk": "@@ -0,0 +1,770 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field next function Return the next value in the iterator\n+---@field _table ?table Underlying table data (table iterators only)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167487888",
            "id": 1167487888,
            "in_reply_to_id": 1167437105,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FlnOQ",
            "original_commit_id": "387f40bdb25129caa1b510a53e4fc6681810fa5d",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 1386446534,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167487888/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-15T12:26:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167487888",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167488279"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167488279"
                }
            },
            "author_association": "MEMBER",
            "body": "Usually `?` appears after the name or the type, not before.\n\nSo either:\n```\nname? type\nname type?\n```\n\nI think `name ?type` is quite weird.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-15T12:29:05Z",
            "diff_hunk": "@@ -0,0 +1,770 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field next function Return the next value in the iterator\n+---@field _table ?table Underlying table data (table iterators only)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167488279",
            "id": 1167488279,
            "in_reply_to_id": 1167437105,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FlnUX",
            "original_commit_id": "387f40bdb25129caa1b510a53e4fc6681810fa5d",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 1386446931,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167488279/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-15T12:30:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167488279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167500811"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167500811"
                }
            },
            "author_association": "MEMBER",
            "body": "Or explicit `table|nil`; can't go wrong with that.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-15T12:45:05Z",
            "diff_hunk": "@@ -0,0 +1,770 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+---@field next function Return the next value in the iterator\n+---@field _table ?table Underlying table data (table iterators only)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167500811",
            "id": 1167500811,
            "in_reply_to_id": 1167437105,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FlqYL",
            "original_commit_id": "387f40bdb25129caa1b510a53e4fc6681810fa5d",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 1386459113,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167500811/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-15T12:45:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167500811",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1167623999"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167623999"
                }
            },
            "author_association": "MEMBER",
            "body": "I've actually had a change of heart. I changed it to `map`, and added a comment to the docstring mentioning that `nil` values are removed.\r\n\r\nThe overlap of `filter` and `filtermap` felt like it had the potential to be confusing. And like `foreach` -> `each`, using `map` sidesteps the issue of `noodlecase` vs `snake_case`.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-15T18:46:50Z",
            "diff_hunk": "@@ -2817,4 +2914,367 @@ range({spec})                                            *vim.version.range()*\n     See also: ~\n       • # https://github.com/npm/node-semver#ranges\n \n+\n+==============================================================================\n+Lua module: iter                                                    *lua-iter*\n+\n+Iter:all({self}, {pred})                                          *Iter:all()*\n+    Return true if all of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:any({self}, {pred})                                          *Iter:any()*\n+    Return true if any of the items in the iterator match the given predicate.\n+\n+    Parameters: ~\n+      • {pred}  function(...):bool Predicate function. Takes all values\n+                returned from the previous stage in the pipeline as arguments\n+                and returns true if the predicate matches.\n+\n+Iter:collect({self}, {opts})                                  *Iter:collect()*\n+    Drain the iterator into a table.\n+\n+    The final stage in the iterator pipeline must return 1 or 2 values. If\n+    only one value is returned, or if two values are returned and the first\n+    value is a number, an \"array-like\" table is returned. Otherwise, the first\n+    return value is used as the table key and the second return value as the\n+    table value.\n+\n+    Example: >lua\n+\n+     local it1 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it1:collect()\n+     -- { 100, 20, 50 }\n+\n+     local it2 = vim.iter(string.gmatch('100 20 50', 'd+')):filtermap(tonumber)\n+     it2:collect({ sort = true })\n+     -- { 20, 50, 100 }\n+<\n+\n+    Parameters: ~\n+      • {opts}  ?table Optional arguments:\n+                • sort (boolean|function): If true, sort the resulting table\n+                  before returning. If a function is provided, that function\n+                  is used as the comparator function to |table.sort()|.\n+\n+    Return: ~\n+        (table)\n+\n+Iter:enumerate({self})                                      *Iter:enumerate()*\n+    Add an iterator stage that returns the current iterator count as well as\n+    the iterator value.\n+\n+    Example: >lua\n+\n+     local it = vim.iter(vim.gsplit('abc', '')):enumerate()\n+     it:next()\n+     -- 1   'a'\n+     it:next()\n+     -- 2   'b'\n+     it:next()\n+     -- 3   'c'\n+<\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filter({self}, {f})                                       *Iter:filter()*\n+    Add a filter step to the iterator pipeline.\n+\n+    Example: >lua\n+\n+     local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+<\n+\n+    Parameters: ~\n+      • {f}  function(...):bool Takes all values returned from the previous\n+             stage in the pipeline and returns false or nil if the current\n+             iterator element should be removed.\n+\n+    Return: ~\n+        Iter\n+\n+Iter:filtermap({self}, {f})                                 *Iter:filtermap()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1167623999",
            "id": 1167623999,
            "in_reply_to_id": 1167078858,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FmIc_",
            "original_commit_id": "98f92fef5026a2a11775b4220e1ae52907e588ad",
            "original_line": 3000,
            "original_position": 205,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1386602837,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 2,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167623999/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-16T14:02:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1167623999",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1169056530"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1169056530"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n               values. Nil values are removed from the final table.\r\n```",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-17T17:27:05Z",
            "diff_hunk": "@@ -1843,6 +1820,29 @@ list_slice({list}, {start}, {finish})                       *vim.list_slice()*\n     Return: ~\n         (list) Copy of table sliced from start to finish (inclusive)\n \n+map({f}, {src}, {...})                                             *vim.map()*\n+    Map and filter a table or iterator.\n+\n+    This is a convenience function that performs:\n+\n+    >lua\n+\n+     vim.iter(src):map(f):totable()\n+<\n+\n+    Parameters: ~\n+      • {f}    function(...):?any Map function. Accepts the current iterator\n+               or table values as arguments and returns one or more new\n+               values. Nil values are removed from the final table. the final\n+               table",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1169056530",
            "id": 1169056530,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FrmMS",
            "original_commit_id": "742860d3b682d0cf7138b7108c87bff0ef4ff494",
            "original_line": 1837,
            "original_position": 75,
            "original_start_line": 1836,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1388627181,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1169056530/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-04-17T17:27:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1169056530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1169057315"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1169057315"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n---                            from the final table.\r\n```",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-17T17:27:39Z",
            "diff_hunk": "@@ -884,4 +884,112 @@ function vim.defaulttable(create)\n   })\n end\n \n+--- Create an Iter |lua-iter| object from a table or iterator.\n+---\n+--- The input value can be a table  or a function iterator (see |luaref-in|).\n+---\n+--- This function wraps the input value into an interface which allows chaining\n+--- multiple pipeline stages in an efficient manner. Each pipeline stage\n+--- receives as input the output values from the prior stage. The values used in\n+--- the first stage of the pipeline depend on the type passed to this function:\n+---\n+--- - List tables pass only the value of each element\n+--- - Non-list tables pass both the key and value of each element\n+--- - Function iterators pass all of the values returned by their respective\n+---   function\n+---\n+--- Examples:\n+--- <pre>lua\n+--- local it = vim.iter({ 1, 2, 3, 4, 5 })\n+--- it:map(function(v)\n+---   return v * 3\n+--- end)\n+--- it:rev()\n+--- it:skip(2)\n+--- it:totable()\n+--- -- { 6, 5, 4 }\n+---\n+--- vim.iter(ipairs({ 1, 2, 3, 4, 5 })):filter(function(i, v)\n+---   return i > 2\n+--- end):totable()\n+--- -- { 3, 4, 5 }\n+---\n+--- local it = vim.iter(vim.gsplit('1,2,3,4,5', ','))\n+--- it:map(function(s) return tonumber(s) end)\n+--- for i, d in it:enumerate() do\n+---   print(string.format(\"Column %d is %d\", i, d))\n+--- end\n+--- -- Column 1 is 1\n+--- -- Column 2 is 2\n+--- -- Column 3 is 3\n+--- -- Column 4 is 4\n+--- -- Column 5 is 5\n+---\n+--- vim.iter({ a = 1, b = 2, c = 3, z = 26 }):any(function(k, v)\n+---   return k == 'z'\n+--- end)\n+--- -- true\n+--- </pre>\n+---\n+---@see |lua-iter|\n+---\n+---@param src table|function Table or iterator.\n+---@return Iter @|lua-iter|\n+function vim.iter(src, ...)\n+  local Iter = require('vim.iter')\n+  return Iter.new(src, ...)\n+end\n+\n+--- Collect an iterator into a table.\n+---\n+--- This is a convenience function that performs:\n+---\n+--- <pre>lua\n+--- vim.iter(f):totable()\n+--- </pre>\n+---\n+---@param f function Iterator function\n+---@return table\n+function vim.totable(f, ...)\n+  return vim.iter(f, ...):totable()\n+end\n+\n+--- Filter a table or iterator.\n+---\n+--- This is a convenience function that performs:\n+---\n+--- <pre>lua\n+--- vim.iter(src):filter(f):totable()\n+--- </pre>\n+---\n+---@see |Iter:filter()|\n+---\n+---@param f function(...):bool Filter function. Accepts the current iterator or table values as\n+---                            arguments and returns true if those values should be kept in the\n+---                            final table\n+---@param src table|function Table or iterator function to filter\n+---@return table\n+function vim.filter(f, src, ...)\n+  return vim.iter(src, ...):filter(f):totable()\n+end\n+\n+--- Map and filter a table or iterator.\n+---\n+--- This is a convenience function that performs:\n+---\n+--- <pre>lua\n+--- vim.iter(src):map(f):totable()\n+--- </pre>\n+---\n+---@see |Iter:map()|\n+---\n+---@param f function(...):?any Map function. Accepts the current iterator or table values as\n+---                            arguments and returns one or more new values. Nil values are removed\n+---                            from the final table. the final table",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1169057315",
            "id": 1169057315,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FrmYj",
            "original_commit_id": "742860d3b682d0cf7138b7108c87bff0ef4ff494",
            "original_line": 988,
            "original_position": 105,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 1388628031,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1169057315/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-17T17:27:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1169057315",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1171995443"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171995443"
                }
            },
            "author_association": "MEMBER",
            "body": "probably worth a new `vim/iter_spec.lua` test file :)",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-20T01:37:27Z",
            "diff_hunk": "@@ -3029,6 +3029,360 @@ describe('lua stdlib', function()\n     eq(false, if_nil(d, c))\n     eq(NIL, if_nil(a))\n   end)\n+\n+  describe('vim.iter', function()",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1171995443",
            "id": 1171995443,
            "line": 3033,
            "node_id": "PRRC_kwDOAPphoM5F2zsz",
            "original_commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "original_line": 3033,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/lua/vim_spec.lua",
            "position": 5,
            "pull_request_review_id": 1393085536,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171995443/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-20T01:37:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171995443",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1173275061"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1173275061"
                }
            },
            "author_association": "MEMBER",
            "body": "I think these top-level functions should live on `vim.iter`. Because other than the `vim.tbl_xx` things (which will be deprecated), we don't have much precedent there. Putting these on `vim.inter` helps discovery and anyone worried about verbosity can do `local it = vim.iter`.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-04-21T03:44:29Z",
            "diff_hunk": "@@ -884,4 +884,109 @@ function vim.defaulttable(create)\n   })\n end\n \n+--- Create an Iter |lua-iter| object from a table or iterator.\n+---\n+--- The input value can be a table  or a function iterator (see |luaref-in|).\n+---\n+--- This function wraps the input value into an interface which allows chaining\n+--- multiple pipeline stages in an efficient manner. Each pipeline stage\n+--- receives as input the output values from the prior stage. The values used in\n+--- the first stage of the pipeline depend on the type passed to this function:\n+---\n+--- - List tables pass only the value of each element\n+--- - Non-list tables pass both the key and value of each element\n+--- - Function iterators pass all of the values returned by their respective\n+---   function\n+---\n+--- Examples:\n+--- <pre>lua\n+--- local it = vim.iter({ 1, 2, 3, 4, 5 })\n+--- it:map(function(v)\n+---   return v * 3\n+--- end)\n+--- it:rev()\n+--- it:skip(2)\n+--- it:totable()\n+--- -- { 9, 6, 3 }\n+---\n+--- vim.iter(ipairs({ 1, 2, 3, 4, 5 })):map(function(i, v)\n+---   if i > 2 then return v end\n+--- end):totable()\n+--- -- { 3, 4, 5 }\n+---\n+--- local it = vim.iter(vim.gsplit('1,2,3,4,5', ','))\n+--- it:map(function(s) return tonumber(s) end)\n+--- for i, d in it:enumerate() do\n+---   print(string.format(\"Column %d is %d\", i, d))\n+--- end\n+--- -- Column 1 is 1\n+--- -- Column 2 is 2\n+--- -- Column 3 is 3\n+--- -- Column 4 is 4\n+--- -- Column 5 is 5\n+---\n+--- vim.iter({ a = 1, b = 2, c = 3, z = 26 }):any(function(k, v)\n+---   return k == 'z'\n+--- end)\n+--- -- true\n+--- </pre>\n+---\n+---@see |lua-iter|\n+---\n+---@param src table|function Table or iterator.\n+---@return Iter @|lua-iter|\n+function vim.iter(src, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1173275061",
            "id": 1173275061,
            "line": 938,
            "node_id": "PRRC_kwDOAPphoM5F7sG1",
            "original_commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "original_line": 938,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 55,
            "pull_request_review_id": 1395014385,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1173275061/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-21T03:44:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1173275061",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1254148238"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1254148238"
                }
            },
            "author_association": "MEMBER",
            "body": "@gpanders any objection to changing this signature so that the function is the last param? That is generally the pattern we should strive for, because the function is usually the biggest part of a call (lexically).\r\n\r\n    map({src}, {f})\r\n\r\nThough if the variadic `...` arg is needed then this can't change. Is the variadic arg part of `{src}` ?",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-07-06T09:00:12Z",
            "diff_hunk": "@@ -1740,6 +1818,26 @@ list_slice({list}, {start}, {finish})                       *vim.list_slice()*\n     Return: ~\n         (list) Copy of table sliced from start to finish (inclusive)\n \n+map({f}, {src}, {...})                                             *vim.map()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1254148238",
            "id": 1254148238,
            "line": 1821,
            "node_id": "PRRC_kwDOAPphoM5KwMiO",
            "original_commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "original_line": 1821,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 96,
            "pull_request_review_id": 1516083815,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1254148238/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-06T09:03:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1254148238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1254448616"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1254448616"
                }
            },
            "author_association": "NONE",
            "body": "Just to chime in with another consideration, consistency with the map function in other languages, wikipedia has a comparison [here](https://en.wikipedia.org/wiki/Map_(higher-order_function)#Language_comparison). As you can see from that list most commonly map takes a function as its first argument and `Iter:map` does so itself too. So if consistency is of importance I'd not switch these around.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-07-06T13:31:59Z",
            "diff_hunk": "@@ -1740,6 +1818,26 @@ list_slice({list}, {start}, {finish})                       *vim.list_slice()*\n     Return: ~\n         (list) Copy of table sliced from start to finish (inclusive)\n \n+map({f}, {src}, {...})                                             *vim.map()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1254448616",
            "id": 1254448616,
            "in_reply_to_id": 1254148238,
            "line": 1821,
            "node_id": "PRRC_kwDOAPphoM5KxV3o",
            "original_commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "original_line": 1821,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 96,
            "pull_request_review_id": 1516562524,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1254448616/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-06T13:31:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1254448616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/21057514?v=4",
                "events_url": "https://api.github.com/users/sandersantema/events{/privacy}",
                "followers_url": "https://api.github.com/users/sandersantema/followers",
                "following_url": "https://api.github.com/users/sandersantema/following{/other_user}",
                "gists_url": "https://api.github.com/users/sandersantema/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sandersantema",
                "id": 21057514,
                "login": "sandersantema",
                "node_id": "MDQ6VXNlcjIxMDU3NTE0",
                "organizations_url": "https://api.github.com/users/sandersantema/orgs",
                "received_events_url": "https://api.github.com/users/sandersantema/received_events",
                "repos_url": "https://api.github.com/users/sandersantema/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sandersantema/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sandersantema/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sandersantema"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1254582140"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1254582140"
                }
            },
            "author_association": "MEMBER",
            "body": "> @gpanders any objection to changing this signature so that the function is the last param? That is generally the pattern we should strive for, because the function is usually the biggest part of a call (lexically).\r\n> \r\n> ```\r\n> map({src}, {f})\r\n> ```\r\n> \r\n> Though if the variadic `...` arg is needed then this can't change. Is the variadic arg part of `{src}` ?\r\n\r\n@mfussenegger and I [discussed this as well](https://github.com/neovim/neovim/pull/23029#discussion_r1167067295). I also prefer trailing function for stylistic reasons, but as you pointed out we need the variadic params in order for this to work properly (a Lua function iterator uses multiple values to maintain its state. For example, the `pairs()` function actually returns 3 values, `:h luaref-in`).",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-07-06T15:11:22Z",
            "diff_hunk": "@@ -1740,6 +1818,26 @@ list_slice({list}, {start}, {finish})                       *vim.list_slice()*\n     Return: ~\n         (list) Copy of table sliced from start to finish (inclusive)\n \n+map({f}, {src}, {...})                                             *vim.map()*",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1254582140",
            "id": 1254582140,
            "in_reply_to_id": 1254148238,
            "line": 1821,
            "node_id": "PRRC_kwDOAPphoM5Kx2d8",
            "original_commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "original_line": 1821,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 96,
            "pull_request_review_id": 1516776557,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1254582140/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-06T15:11:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1254582140",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1403247996"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403247996"
                }
            },
            "author_association": "MEMBER",
            "body": "@gpanders  Is this equivalent to \"pop\"? Seems like pop() would be a more familiar name.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-11-23T11:24:40Z",
            "diff_hunk": "@@ -0,0 +1,836 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+local Iter = {}\n+Iter.__index = Iter\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on list tables.\n+---@class ListIter : Iter\n+---@field _table table Underlying table data (table iterators only)\n+---@field _head number Index to the front of a table iterator (table iterators only)\n+---@field _tail number Index to the end of a table iterator (table iterators only)\n+local ListIter = {}\n+ListIter.__index = setmetatable(ListIter, Iter)\n+ListIter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on non-list tables.\n+---@class TableIter : Iter\n+local TableIter = {}\n+TableIter.__index = setmetatable(TableIter, Iter)\n+TableIter.__call = function(self)\n+  return self:next()\n+end\n+\n+---@private\n+local function unpack(t)\n+  if type(t) == 'table' then\n+    return _G.unpack(t)\n+  end\n+  return t\n+end\n+\n+---@private\n+local function pack(...)\n+  if select('#', ...) > 1 then\n+    return { ... }\n+  end\n+  return ...\n+end\n+\n+--- Add a filter step to the iterator pipeline.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+--- </pre>\n+---\n+---@param f function(...):bool Takes all values returned from the previous stage in the pipeline and\n+---                            returns false or nil if the current iterator element should be\n+---                            removed.\n+---@return Iter\n+function Iter.filter(self, f)\n+  ---@private\n+  local function fn(...)\n+    local result = nil\n+    if select(1, ...) ~= nil then\n+      if not f(...) then\n+        return true, nil\n+      else\n+        result = pack(...)\n+      end\n+    end\n+    return false, result\n+  end\n+\n+  local next = self.next\n+  self.next = function(this)\n+    local cont, result\n+    repeat\n+      cont, result = fn(next(this))\n+    until not cont\n+    return unpack(result)\n+  end\n+  return self\n+end\n+\n+---@private\n+function ListIter.filter(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  local n = self._head\n+  for i = self._head, self._tail - inc, inc do\n+    local v = self._table[i]\n+    if f(unpack(v)) then\n+      self._table[n] = v\n+      n = n + inc\n+    end\n+  end\n+  self._tail = n\n+  return self\n+end\n+\n+--- Add a map step to the iterator pipeline.\n+---\n+--- If the map function returns nil, the value is filtered from the iterator.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local it = vim.iter({ 1, 2, 3, 4 }):map(function(v)\n+---   if v % 2 == 0 then\n+---     return v * 3\n+---   end\n+--- end)\n+--- it:totable()\n+--- -- { 6, 12 }\n+--- </pre>\n+---\n+---@param f function(...):any Mapping function. Takes all values returned from the previous stage\n+---                            in the pipeline as arguments and returns one or more new values,\n+---                            which are used in the next pipeline stage. Nil return values returned\n+---                            are filtered from the output.\n+---@return Iter\n+function Iter.map(self, f)\n+  ---@private\n+  local function fn(...)\n+    local result = nil\n+    if select(1, ...) ~= nil then\n+      result = pack(f(...))\n+      if result == nil then\n+        return true, nil\n+      end\n+    end\n+    return false, result\n+  end\n+\n+  local next = self.next\n+  self.next = function(this)\n+    local cont, result\n+    repeat\n+      cont, result = fn(next(this))\n+    until not cont\n+    return unpack(result)\n+  end\n+  return self\n+end\n+\n+---@private\n+function ListIter.map(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  local n = self._head\n+  for i = self._head, self._tail - inc, inc do\n+    local v = pack(f(unpack(self._table[i])))\n+    if v ~= nil then\n+      self._table[n] = v\n+      n = n + inc\n+    end\n+  end\n+  self._tail = n\n+  return self\n+end\n+\n+--- Call a function once for each item in the pipeline.\n+---\n+--- This is used for functions which have side effects. To modify the values in the iterator, use\n+--- |Iter:map()|.\n+---\n+--- This function drains the iterator.\n+---\n+---@param f function(...) Function to execute for each item in the pipeline. Takes all of the\n+---                        values returned by the previous stage in the pipeline as arguments.\n+function Iter.each(self, f)\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      f(...)\n+      return true\n+    end\n+  end\n+  while fn(self:next()) do\n+  end\n+end\n+\n+---@private\n+function ListIter.each(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._head, self._tail - inc, inc do\n+    f(unpack(self._table[i]))\n+  end\n+  self._head = self._tail\n+end\n+\n+--- Collect the iterator into a table.\n+---\n+--- The resulting table depends on the initial source in the iterator pipeline. List-like tables\n+--- and function iterators will be collected into a list-like table. If multiple values are returned\n+--- from the final stage in the iterator pipeline, each value will be included in a table. If a\n+--- map-like table was used as the initial source, then a map-like table is returned.\n+---\n+--- Examples:\n+--- <pre>lua\n+--- vim.iter(string.gmatch('100 20 50', '%d+')):map(tonumber):totable()\n+--- -- { 100, 20, 50 }\n+---\n+--- vim.iter({ 1, 2, 3 }):map(function(v) return v, 2 * v end):totable()\n+--- -- { { 1, 2 }, { 2, 4 }, { 3, 6 } }\n+---\n+--- vim.iter({ a = 1, b = 2, c = 3 }):filter(function(k, v) return v % 2 ~= 0 end):totable()\n+--- -- { a = 1, c = 3 }\n+--- </pre>\n+---\n+---@return table\n+function Iter.totable(self)\n+  local t = {}\n+\n+  while true do\n+    local args = pack(self:next())\n+    if args == nil then\n+      break\n+    end\n+    t[#t + 1] = args\n+  end\n+  return t\n+end\n+\n+---@private\n+function ListIter.totable(self)\n+  if self._head == 1 and self._tail == #self._table + 1 and self.next == ListIter.next then\n+    return self._table\n+  end\n+\n+  return Iter.totable(self)\n+end\n+\n+---@private\n+function TableIter.totable(self)\n+  local t = {}\n+  for k, v in self do\n+    t[k] = v\n+  end\n+  return t\n+end\n+\n+--- Fold an iterator or table into a single value.\n+---\n+---@generic A\n+---\n+---@param init A Initial value of the accumulator.\n+---@param f function(acc:A, ...):A Accumulation function.\n+---@return A\n+function Iter.fold(self, init, f)\n+  local acc = init\n+\n+  --- Use a closure to handle var args returned from iterator\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      acc = f(acc, ...)\n+      return true\n+    end\n+  end\n+\n+  while fn(self:next()) do\n+  end\n+  return acc\n+end\n+\n+---@private\n+function ListIter.fold(self, init, f)\n+  local acc = init\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._head, self._tail - inc, inc do\n+    acc = f(acc, unpack(self._table[i]))\n+  end\n+  return acc\n+end\n+\n+--- Return the next value from the iterator.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter(string.gmatch('1 2 3', '%d+')):map(tonumber)\n+--- it:next()\n+--- -- 1\n+--- it:next()\n+--- -- 2\n+--- it:next()\n+--- -- 3\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.next(self) -- luacheck: no unused args\n+  -- This function is provided by the source iterator in Iter.new. This definition exists only for\n+  -- the docstring\n+end\n+\n+---@private\n+function ListIter.next(self)\n+  if self._head ~= self._tail then\n+    local v = self._table[self._head]\n+    local inc = self._head < self._tail and 1 or -1\n+    self._head = self._head + inc\n+    return unpack(v)\n+  end\n+end\n+\n+--- Reverse an iterator.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 }):rev()\n+--- it:totable()\n+--- -- { 12, 9, 6, 3 }\n+---\n+--- </pre>\n+---\n+---@return Iter\n+function Iter.rev(self)\n+  error('rev() requires a list-like table')\n+  return self\n+end\n+\n+---@private\n+function ListIter.rev(self)\n+  local inc = self._head < self._tail and 1 or -1\n+  self._head, self._tail = self._tail - inc, self._head - inc\n+  return self\n+end\n+\n+--- Peek at the next value in the iterator without consuming it.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:peek()\n+--- -- 3\n+--- it:peek()\n+--- -- 3\n+--- it:next()\n+--- -- 3\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.peek(self) -- luacheck: no unused args\n+  error('peek() requires a list-like table')\n+end\n+\n+---@private\n+function ListIter.peek(self)\n+  if self._head ~= self._tail then\n+    return self._table[self._head]\n+  end\n+end\n+\n+--- Find the first value in the iterator that satisfies the given predicate.\n+---\n+--- Advances the iterator. Returns nil and drains the iterator if no value is found.\n+---\n+--- Examples:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(12)\n+--- -- 12\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(20)\n+--- -- nil\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(function(v) return v % 4 == 0 end)\n+--- -- 12\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.find(self, f)\n+  if type(f) ~= 'function' then\n+    local val = f\n+    f = function(v)\n+      return v == val\n+    end\n+  end\n+\n+  local result = nil\n+\n+  --- Use a closure to handle var args returned from iterator\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      if f(...) then\n+        result = pack(...)\n+      else\n+        return true\n+      end\n+    end\n+  end\n+\n+  while fn(self:next()) do\n+  end\n+  return unpack(result)\n+end\n+\n+--- Find the first value in the iterator that satisfies the given predicate, starting from the end.\n+---\n+--- Advances the iterator. Returns nil and drains the iterator if no value is found.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Examples:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 1, 2, 3, 2, 1 }):enumerate()\n+--- it:rfind(1)\n+--- -- 5\t1\n+--- it:rfind(1)\n+--- -- 1\t1\n+---\n+--- </pre>\n+---\n+---@see Iter.find\n+---\n+---@return any\n+function Iter.rfind(self, f) -- luacheck: no unused args\n+  error('rfind() requires a list-like table')\n+end\n+\n+---@private\n+function ListIter.rfind(self, f) -- luacheck: no unused args\n+  if type(f) ~= 'function' then\n+    local val = f\n+    f = function(v)\n+      return v == val\n+    end\n+  end\n+\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._tail - inc, self._head, -inc do\n+    local v = self._table[i]\n+    if f(unpack(v)) then\n+      self._tail = i\n+      return unpack(v)\n+    end\n+  end\n+  self._head = self._tail\n+end\n+\n+--- Return the next value from the end of the iterator.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local it = vim.iter({1, 2, 3, 4})\n+--- it:nextback()\n+--- -- 4\n+--- it:nextback()\n+--- -- 3\n+--- </pre>\n+---\n+---@return any\n+function Iter.nextback(self) -- luacheck: no unused args\n+  error('nextback() requires a list-like table')\n+end\n+\n+function ListIter.nextback(self)\n+  if self._head ~= self._tail then\n+    local inc = self._head < self._tail and 1 or -1\n+    self._tail = self._tail - inc\n+    return self._table[self._tail]",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1403247996",
            "id": 1403247996,
            "line": 471,
            "node_id": "PRRC_kwDOAPphoM5To918",
            "original_commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "original_line": 471,
            "original_position": 471,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": 471,
            "pull_request_review_id": 1746241433,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403247996/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-23T11:24:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403247996",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1403256727"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403256727"
                }
            },
            "author_association": "MEMBER",
            "body": "Looks like the difference of this compare to `last()` is that this doesn't drain the iterator? This name seems unintuitive. Would `peeklast()` make sense?",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-11-23T11:33:21Z",
            "diff_hunk": "@@ -0,0 +1,836 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+local Iter = {}\n+Iter.__index = Iter\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on list tables.\n+---@class ListIter : Iter\n+---@field _table table Underlying table data (table iterators only)\n+---@field _head number Index to the front of a table iterator (table iterators only)\n+---@field _tail number Index to the end of a table iterator (table iterators only)\n+local ListIter = {}\n+ListIter.__index = setmetatable(ListIter, Iter)\n+ListIter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on non-list tables.\n+---@class TableIter : Iter\n+local TableIter = {}\n+TableIter.__index = setmetatable(TableIter, Iter)\n+TableIter.__call = function(self)\n+  return self:next()\n+end\n+\n+---@private\n+local function unpack(t)\n+  if type(t) == 'table' then\n+    return _G.unpack(t)\n+  end\n+  return t\n+end\n+\n+---@private\n+local function pack(...)\n+  if select('#', ...) > 1 then\n+    return { ... }\n+  end\n+  return ...\n+end\n+\n+--- Add a filter step to the iterator pipeline.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+--- </pre>\n+---\n+---@param f function(...):bool Takes all values returned from the previous stage in the pipeline and\n+---                            returns false or nil if the current iterator element should be\n+---                            removed.\n+---@return Iter\n+function Iter.filter(self, f)\n+  ---@private\n+  local function fn(...)\n+    local result = nil\n+    if select(1, ...) ~= nil then\n+      if not f(...) then\n+        return true, nil\n+      else\n+        result = pack(...)\n+      end\n+    end\n+    return false, result\n+  end\n+\n+  local next = self.next\n+  self.next = function(this)\n+    local cont, result\n+    repeat\n+      cont, result = fn(next(this))\n+    until not cont\n+    return unpack(result)\n+  end\n+  return self\n+end\n+\n+---@private\n+function ListIter.filter(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  local n = self._head\n+  for i = self._head, self._tail - inc, inc do\n+    local v = self._table[i]\n+    if f(unpack(v)) then\n+      self._table[n] = v\n+      n = n + inc\n+    end\n+  end\n+  self._tail = n\n+  return self\n+end\n+\n+--- Add a map step to the iterator pipeline.\n+---\n+--- If the map function returns nil, the value is filtered from the iterator.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local it = vim.iter({ 1, 2, 3, 4 }):map(function(v)\n+---   if v % 2 == 0 then\n+---     return v * 3\n+---   end\n+--- end)\n+--- it:totable()\n+--- -- { 6, 12 }\n+--- </pre>\n+---\n+---@param f function(...):any Mapping function. Takes all values returned from the previous stage\n+---                            in the pipeline as arguments and returns one or more new values,\n+---                            which are used in the next pipeline stage. Nil return values returned\n+---                            are filtered from the output.\n+---@return Iter\n+function Iter.map(self, f)\n+  ---@private\n+  local function fn(...)\n+    local result = nil\n+    if select(1, ...) ~= nil then\n+      result = pack(f(...))\n+      if result == nil then\n+        return true, nil\n+      end\n+    end\n+    return false, result\n+  end\n+\n+  local next = self.next\n+  self.next = function(this)\n+    local cont, result\n+    repeat\n+      cont, result = fn(next(this))\n+    until not cont\n+    return unpack(result)\n+  end\n+  return self\n+end\n+\n+---@private\n+function ListIter.map(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  local n = self._head\n+  for i = self._head, self._tail - inc, inc do\n+    local v = pack(f(unpack(self._table[i])))\n+    if v ~= nil then\n+      self._table[n] = v\n+      n = n + inc\n+    end\n+  end\n+  self._tail = n\n+  return self\n+end\n+\n+--- Call a function once for each item in the pipeline.\n+---\n+--- This is used for functions which have side effects. To modify the values in the iterator, use\n+--- |Iter:map()|.\n+---\n+--- This function drains the iterator.\n+---\n+---@param f function(...) Function to execute for each item in the pipeline. Takes all of the\n+---                        values returned by the previous stage in the pipeline as arguments.\n+function Iter.each(self, f)\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      f(...)\n+      return true\n+    end\n+  end\n+  while fn(self:next()) do\n+  end\n+end\n+\n+---@private\n+function ListIter.each(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._head, self._tail - inc, inc do\n+    f(unpack(self._table[i]))\n+  end\n+  self._head = self._tail\n+end\n+\n+--- Collect the iterator into a table.\n+---\n+--- The resulting table depends on the initial source in the iterator pipeline. List-like tables\n+--- and function iterators will be collected into a list-like table. If multiple values are returned\n+--- from the final stage in the iterator pipeline, each value will be included in a table. If a\n+--- map-like table was used as the initial source, then a map-like table is returned.\n+---\n+--- Examples:\n+--- <pre>lua\n+--- vim.iter(string.gmatch('100 20 50', '%d+')):map(tonumber):totable()\n+--- -- { 100, 20, 50 }\n+---\n+--- vim.iter({ 1, 2, 3 }):map(function(v) return v, 2 * v end):totable()\n+--- -- { { 1, 2 }, { 2, 4 }, { 3, 6 } }\n+---\n+--- vim.iter({ a = 1, b = 2, c = 3 }):filter(function(k, v) return v % 2 ~= 0 end):totable()\n+--- -- { a = 1, c = 3 }\n+--- </pre>\n+---\n+---@return table\n+function Iter.totable(self)\n+  local t = {}\n+\n+  while true do\n+    local args = pack(self:next())\n+    if args == nil then\n+      break\n+    end\n+    t[#t + 1] = args\n+  end\n+  return t\n+end\n+\n+---@private\n+function ListIter.totable(self)\n+  if self._head == 1 and self._tail == #self._table + 1 and self.next == ListIter.next then\n+    return self._table\n+  end\n+\n+  return Iter.totable(self)\n+end\n+\n+---@private\n+function TableIter.totable(self)\n+  local t = {}\n+  for k, v in self do\n+    t[k] = v\n+  end\n+  return t\n+end\n+\n+--- Fold an iterator or table into a single value.\n+---\n+---@generic A\n+---\n+---@param init A Initial value of the accumulator.\n+---@param f function(acc:A, ...):A Accumulation function.\n+---@return A\n+function Iter.fold(self, init, f)\n+  local acc = init\n+\n+  --- Use a closure to handle var args returned from iterator\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      acc = f(acc, ...)\n+      return true\n+    end\n+  end\n+\n+  while fn(self:next()) do\n+  end\n+  return acc\n+end\n+\n+---@private\n+function ListIter.fold(self, init, f)\n+  local acc = init\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._head, self._tail - inc, inc do\n+    acc = f(acc, unpack(self._table[i]))\n+  end\n+  return acc\n+end\n+\n+--- Return the next value from the iterator.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter(string.gmatch('1 2 3', '%d+')):map(tonumber)\n+--- it:next()\n+--- -- 1\n+--- it:next()\n+--- -- 2\n+--- it:next()\n+--- -- 3\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.next(self) -- luacheck: no unused args\n+  -- This function is provided by the source iterator in Iter.new. This definition exists only for\n+  -- the docstring\n+end\n+\n+---@private\n+function ListIter.next(self)\n+  if self._head ~= self._tail then\n+    local v = self._table[self._head]\n+    local inc = self._head < self._tail and 1 or -1\n+    self._head = self._head + inc\n+    return unpack(v)\n+  end\n+end\n+\n+--- Reverse an iterator.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 }):rev()\n+--- it:totable()\n+--- -- { 12, 9, 6, 3 }\n+---\n+--- </pre>\n+---\n+---@return Iter\n+function Iter.rev(self)\n+  error('rev() requires a list-like table')\n+  return self\n+end\n+\n+---@private\n+function ListIter.rev(self)\n+  local inc = self._head < self._tail and 1 or -1\n+  self._head, self._tail = self._tail - inc, self._head - inc\n+  return self\n+end\n+\n+--- Peek at the next value in the iterator without consuming it.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:peek()\n+--- -- 3\n+--- it:peek()\n+--- -- 3\n+--- it:next()\n+--- -- 3\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.peek(self) -- luacheck: no unused args\n+  error('peek() requires a list-like table')\n+end\n+\n+---@private\n+function ListIter.peek(self)\n+  if self._head ~= self._tail then\n+    return self._table[self._head]\n+  end\n+end\n+\n+--- Find the first value in the iterator that satisfies the given predicate.\n+---\n+--- Advances the iterator. Returns nil and drains the iterator if no value is found.\n+---\n+--- Examples:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(12)\n+--- -- 12\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(20)\n+--- -- nil\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(function(v) return v % 4 == 0 end)\n+--- -- 12\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.find(self, f)\n+  if type(f) ~= 'function' then\n+    local val = f\n+    f = function(v)\n+      return v == val\n+    end\n+  end\n+\n+  local result = nil\n+\n+  --- Use a closure to handle var args returned from iterator\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      if f(...) then\n+        result = pack(...)\n+      else\n+        return true\n+      end\n+    end\n+  end\n+\n+  while fn(self:next()) do\n+  end\n+  return unpack(result)\n+end\n+\n+--- Find the first value in the iterator that satisfies the given predicate, starting from the end.\n+---\n+--- Advances the iterator. Returns nil and drains the iterator if no value is found.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Examples:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 1, 2, 3, 2, 1 }):enumerate()\n+--- it:rfind(1)\n+--- -- 5\t1\n+--- it:rfind(1)\n+--- -- 1\t1\n+---\n+--- </pre>\n+---\n+---@see Iter.find\n+---\n+---@return any\n+function Iter.rfind(self, f) -- luacheck: no unused args\n+  error('rfind() requires a list-like table')\n+end\n+\n+---@private\n+function ListIter.rfind(self, f) -- luacheck: no unused args\n+  if type(f) ~= 'function' then\n+    local val = f\n+    f = function(v)\n+      return v == val\n+    end\n+  end\n+\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._tail - inc, self._head, -inc do\n+    local v = self._table[i]\n+    if f(unpack(v)) then\n+      self._tail = i\n+      return unpack(v)\n+    end\n+  end\n+  self._head = self._tail\n+end\n+\n+--- Return the next value from the end of the iterator.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local it = vim.iter({1, 2, 3, 4})\n+--- it:nextback()\n+--- -- 4\n+--- it:nextback()\n+--- -- 3\n+--- </pre>\n+---\n+---@return any\n+function Iter.nextback(self) -- luacheck: no unused args\n+  error('nextback() requires a list-like table')\n+end\n+\n+function ListIter.nextback(self)\n+  if self._head ~= self._tail then\n+    local inc = self._head < self._tail and 1 or -1\n+    self._tail = self._tail - inc\n+    return self._table[self._tail]\n+  end\n+end\n+\n+--- Return the next value from the end of the iterator without consuming it.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local it = vim.iter({1, 2, 3, 4})\n+--- it:peekback()\n+--- -- 4\n+--- it:peekback()\n+--- -- 4\n+--- it:nextback()\n+--- -- 4\n+--- </pre>\n+---\n+---@return any\n+function Iter.peekback(self) -- luacheck: no unused args\n+  error('peekback() requires a list-like table')\n+end\n+\n+function ListIter.peekback(self)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1403256727",
            "id": 1403256727,
            "line": 495,
            "node_id": "PRRC_kwDOAPphoM5To_-X",
            "original_commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "original_line": 495,
            "original_position": 495,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": 495,
            "pull_request_review_id": 1746254898,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403256727/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-23T11:33:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403256727",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1403454682"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403454682"
                }
            },
            "author_association": "MEMBER",
            "body": "I mentioned in [an earlier comment](https://github.com/neovim/neovim/pull/23029#issuecomment-1513244389) that for the most part I borrowed naming/terminology from Rust's Iterator interface, which also uses `nextback` (and `skipback`, `peekback`, etc.) That choice was mostly arbitrary since it's what I am most familiar with.\r\n\r\n`pop` makes sense too, but imo is best when also paired with `push`. Iterators don't have `push`, but they do have `next`, so `nextback` provides symmetry.",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-11-23T14:25:45Z",
            "diff_hunk": "@@ -0,0 +1,836 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+local Iter = {}\n+Iter.__index = Iter\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on list tables.\n+---@class ListIter : Iter\n+---@field _table table Underlying table data (table iterators only)\n+---@field _head number Index to the front of a table iterator (table iterators only)\n+---@field _tail number Index to the end of a table iterator (table iterators only)\n+local ListIter = {}\n+ListIter.__index = setmetatable(ListIter, Iter)\n+ListIter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on non-list tables.\n+---@class TableIter : Iter\n+local TableIter = {}\n+TableIter.__index = setmetatable(TableIter, Iter)\n+TableIter.__call = function(self)\n+  return self:next()\n+end\n+\n+---@private\n+local function unpack(t)\n+  if type(t) == 'table' then\n+    return _G.unpack(t)\n+  end\n+  return t\n+end\n+\n+---@private\n+local function pack(...)\n+  if select('#', ...) > 1 then\n+    return { ... }\n+  end\n+  return ...\n+end\n+\n+--- Add a filter step to the iterator pipeline.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+--- </pre>\n+---\n+---@param f function(...):bool Takes all values returned from the previous stage in the pipeline and\n+---                            returns false or nil if the current iterator element should be\n+---                            removed.\n+---@return Iter\n+function Iter.filter(self, f)\n+  ---@private\n+  local function fn(...)\n+    local result = nil\n+    if select(1, ...) ~= nil then\n+      if not f(...) then\n+        return true, nil\n+      else\n+        result = pack(...)\n+      end\n+    end\n+    return false, result\n+  end\n+\n+  local next = self.next\n+  self.next = function(this)\n+    local cont, result\n+    repeat\n+      cont, result = fn(next(this))\n+    until not cont\n+    return unpack(result)\n+  end\n+  return self\n+end\n+\n+---@private\n+function ListIter.filter(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  local n = self._head\n+  for i = self._head, self._tail - inc, inc do\n+    local v = self._table[i]\n+    if f(unpack(v)) then\n+      self._table[n] = v\n+      n = n + inc\n+    end\n+  end\n+  self._tail = n\n+  return self\n+end\n+\n+--- Add a map step to the iterator pipeline.\n+---\n+--- If the map function returns nil, the value is filtered from the iterator.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local it = vim.iter({ 1, 2, 3, 4 }):map(function(v)\n+---   if v % 2 == 0 then\n+---     return v * 3\n+---   end\n+--- end)\n+--- it:totable()\n+--- -- { 6, 12 }\n+--- </pre>\n+---\n+---@param f function(...):any Mapping function. Takes all values returned from the previous stage\n+---                            in the pipeline as arguments and returns one or more new values,\n+---                            which are used in the next pipeline stage. Nil return values returned\n+---                            are filtered from the output.\n+---@return Iter\n+function Iter.map(self, f)\n+  ---@private\n+  local function fn(...)\n+    local result = nil\n+    if select(1, ...) ~= nil then\n+      result = pack(f(...))\n+      if result == nil then\n+        return true, nil\n+      end\n+    end\n+    return false, result\n+  end\n+\n+  local next = self.next\n+  self.next = function(this)\n+    local cont, result\n+    repeat\n+      cont, result = fn(next(this))\n+    until not cont\n+    return unpack(result)\n+  end\n+  return self\n+end\n+\n+---@private\n+function ListIter.map(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  local n = self._head\n+  for i = self._head, self._tail - inc, inc do\n+    local v = pack(f(unpack(self._table[i])))\n+    if v ~= nil then\n+      self._table[n] = v\n+      n = n + inc\n+    end\n+  end\n+  self._tail = n\n+  return self\n+end\n+\n+--- Call a function once for each item in the pipeline.\n+---\n+--- This is used for functions which have side effects. To modify the values in the iterator, use\n+--- |Iter:map()|.\n+---\n+--- This function drains the iterator.\n+---\n+---@param f function(...) Function to execute for each item in the pipeline. Takes all of the\n+---                        values returned by the previous stage in the pipeline as arguments.\n+function Iter.each(self, f)\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      f(...)\n+      return true\n+    end\n+  end\n+  while fn(self:next()) do\n+  end\n+end\n+\n+---@private\n+function ListIter.each(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._head, self._tail - inc, inc do\n+    f(unpack(self._table[i]))\n+  end\n+  self._head = self._tail\n+end\n+\n+--- Collect the iterator into a table.\n+---\n+--- The resulting table depends on the initial source in the iterator pipeline. List-like tables\n+--- and function iterators will be collected into a list-like table. If multiple values are returned\n+--- from the final stage in the iterator pipeline, each value will be included in a table. If a\n+--- map-like table was used as the initial source, then a map-like table is returned.\n+---\n+--- Examples:\n+--- <pre>lua\n+--- vim.iter(string.gmatch('100 20 50', '%d+')):map(tonumber):totable()\n+--- -- { 100, 20, 50 }\n+---\n+--- vim.iter({ 1, 2, 3 }):map(function(v) return v, 2 * v end):totable()\n+--- -- { { 1, 2 }, { 2, 4 }, { 3, 6 } }\n+---\n+--- vim.iter({ a = 1, b = 2, c = 3 }):filter(function(k, v) return v % 2 ~= 0 end):totable()\n+--- -- { a = 1, c = 3 }\n+--- </pre>\n+---\n+---@return table\n+function Iter.totable(self)\n+  local t = {}\n+\n+  while true do\n+    local args = pack(self:next())\n+    if args == nil then\n+      break\n+    end\n+    t[#t + 1] = args\n+  end\n+  return t\n+end\n+\n+---@private\n+function ListIter.totable(self)\n+  if self._head == 1 and self._tail == #self._table + 1 and self.next == ListIter.next then\n+    return self._table\n+  end\n+\n+  return Iter.totable(self)\n+end\n+\n+---@private\n+function TableIter.totable(self)\n+  local t = {}\n+  for k, v in self do\n+    t[k] = v\n+  end\n+  return t\n+end\n+\n+--- Fold an iterator or table into a single value.\n+---\n+---@generic A\n+---\n+---@param init A Initial value of the accumulator.\n+---@param f function(acc:A, ...):A Accumulation function.\n+---@return A\n+function Iter.fold(self, init, f)\n+  local acc = init\n+\n+  --- Use a closure to handle var args returned from iterator\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      acc = f(acc, ...)\n+      return true\n+    end\n+  end\n+\n+  while fn(self:next()) do\n+  end\n+  return acc\n+end\n+\n+---@private\n+function ListIter.fold(self, init, f)\n+  local acc = init\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._head, self._tail - inc, inc do\n+    acc = f(acc, unpack(self._table[i]))\n+  end\n+  return acc\n+end\n+\n+--- Return the next value from the iterator.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter(string.gmatch('1 2 3', '%d+')):map(tonumber)\n+--- it:next()\n+--- -- 1\n+--- it:next()\n+--- -- 2\n+--- it:next()\n+--- -- 3\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.next(self) -- luacheck: no unused args\n+  -- This function is provided by the source iterator in Iter.new. This definition exists only for\n+  -- the docstring\n+end\n+\n+---@private\n+function ListIter.next(self)\n+  if self._head ~= self._tail then\n+    local v = self._table[self._head]\n+    local inc = self._head < self._tail and 1 or -1\n+    self._head = self._head + inc\n+    return unpack(v)\n+  end\n+end\n+\n+--- Reverse an iterator.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 }):rev()\n+--- it:totable()\n+--- -- { 12, 9, 6, 3 }\n+---\n+--- </pre>\n+---\n+---@return Iter\n+function Iter.rev(self)\n+  error('rev() requires a list-like table')\n+  return self\n+end\n+\n+---@private\n+function ListIter.rev(self)\n+  local inc = self._head < self._tail and 1 or -1\n+  self._head, self._tail = self._tail - inc, self._head - inc\n+  return self\n+end\n+\n+--- Peek at the next value in the iterator without consuming it.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:peek()\n+--- -- 3\n+--- it:peek()\n+--- -- 3\n+--- it:next()\n+--- -- 3\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.peek(self) -- luacheck: no unused args\n+  error('peek() requires a list-like table')\n+end\n+\n+---@private\n+function ListIter.peek(self)\n+  if self._head ~= self._tail then\n+    return self._table[self._head]\n+  end\n+end\n+\n+--- Find the first value in the iterator that satisfies the given predicate.\n+---\n+--- Advances the iterator. Returns nil and drains the iterator if no value is found.\n+---\n+--- Examples:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(12)\n+--- -- 12\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(20)\n+--- -- nil\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(function(v) return v % 4 == 0 end)\n+--- -- 12\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.find(self, f)\n+  if type(f) ~= 'function' then\n+    local val = f\n+    f = function(v)\n+      return v == val\n+    end\n+  end\n+\n+  local result = nil\n+\n+  --- Use a closure to handle var args returned from iterator\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      if f(...) then\n+        result = pack(...)\n+      else\n+        return true\n+      end\n+    end\n+  end\n+\n+  while fn(self:next()) do\n+  end\n+  return unpack(result)\n+end\n+\n+--- Find the first value in the iterator that satisfies the given predicate, starting from the end.\n+---\n+--- Advances the iterator. Returns nil and drains the iterator if no value is found.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Examples:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 1, 2, 3, 2, 1 }):enumerate()\n+--- it:rfind(1)\n+--- -- 5\t1\n+--- it:rfind(1)\n+--- -- 1\t1\n+---\n+--- </pre>\n+---\n+---@see Iter.find\n+---\n+---@return any\n+function Iter.rfind(self, f) -- luacheck: no unused args\n+  error('rfind() requires a list-like table')\n+end\n+\n+---@private\n+function ListIter.rfind(self, f) -- luacheck: no unused args\n+  if type(f) ~= 'function' then\n+    local val = f\n+    f = function(v)\n+      return v == val\n+    end\n+  end\n+\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._tail - inc, self._head, -inc do\n+    local v = self._table[i]\n+    if f(unpack(v)) then\n+      self._tail = i\n+      return unpack(v)\n+    end\n+  end\n+  self._head = self._tail\n+end\n+\n+--- Return the next value from the end of the iterator.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local it = vim.iter({1, 2, 3, 4})\n+--- it:nextback()\n+--- -- 4\n+--- it:nextback()\n+--- -- 3\n+--- </pre>\n+---\n+---@return any\n+function Iter.nextback(self) -- luacheck: no unused args\n+  error('nextback() requires a list-like table')\n+end\n+\n+function ListIter.nextback(self)\n+  if self._head ~= self._tail then\n+    local inc = self._head < self._tail and 1 or -1\n+    self._tail = self._tail - inc\n+    return self._table[self._tail]",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1403454682",
            "id": 1403454682,
            "in_reply_to_id": 1403247996,
            "line": 471,
            "node_id": "PRRC_kwDOAPphoM5TpwTa",
            "original_commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "original_line": 471,
            "original_position": 471,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": 471,
            "pull_request_review_id": 1746572170,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403454682/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-23T14:26:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403454682",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23029#discussion_r1403455135"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403455135"
                }
            },
            "author_association": "MEMBER",
            "body": "See my [other comment](https://github.com/neovim/neovim/pull/23029#discussion_r1403454682).",
            "commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "created_at": "2023-11-23T14:26:06Z",
            "diff_hunk": "@@ -0,0 +1,836 @@\n+--- Iterator implementation.\n+\n+---@class Iter\n+local Iter = {}\n+Iter.__index = Iter\n+Iter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on list tables.\n+---@class ListIter : Iter\n+---@field _table table Underlying table data (table iterators only)\n+---@field _head number Index to the front of a table iterator (table iterators only)\n+---@field _tail number Index to the end of a table iterator (table iterators only)\n+local ListIter = {}\n+ListIter.__index = setmetatable(ListIter, Iter)\n+ListIter.__call = function(self)\n+  return self:next()\n+end\n+\n+--- Special case implementations for iterators on non-list tables.\n+---@class TableIter : Iter\n+local TableIter = {}\n+TableIter.__index = setmetatable(TableIter, Iter)\n+TableIter.__call = function(self)\n+  return self:next()\n+end\n+\n+---@private\n+local function unpack(t)\n+  if type(t) == 'table' then\n+    return _G.unpack(t)\n+  end\n+  return t\n+end\n+\n+---@private\n+local function pack(...)\n+  if select('#', ...) > 1 then\n+    return { ... }\n+  end\n+  return ...\n+end\n+\n+--- Add a filter step to the iterator pipeline.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local bufs = vim.iter(vim.api.nvim_list_bufs()):filter(vim.api.nvim_buf_is_loaded)\n+--- </pre>\n+---\n+---@param f function(...):bool Takes all values returned from the previous stage in the pipeline and\n+---                            returns false or nil if the current iterator element should be\n+---                            removed.\n+---@return Iter\n+function Iter.filter(self, f)\n+  ---@private\n+  local function fn(...)\n+    local result = nil\n+    if select(1, ...) ~= nil then\n+      if not f(...) then\n+        return true, nil\n+      else\n+        result = pack(...)\n+      end\n+    end\n+    return false, result\n+  end\n+\n+  local next = self.next\n+  self.next = function(this)\n+    local cont, result\n+    repeat\n+      cont, result = fn(next(this))\n+    until not cont\n+    return unpack(result)\n+  end\n+  return self\n+end\n+\n+---@private\n+function ListIter.filter(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  local n = self._head\n+  for i = self._head, self._tail - inc, inc do\n+    local v = self._table[i]\n+    if f(unpack(v)) then\n+      self._table[n] = v\n+      n = n + inc\n+    end\n+  end\n+  self._tail = n\n+  return self\n+end\n+\n+--- Add a map step to the iterator pipeline.\n+---\n+--- If the map function returns nil, the value is filtered from the iterator.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local it = vim.iter({ 1, 2, 3, 4 }):map(function(v)\n+---   if v % 2 == 0 then\n+---     return v * 3\n+---   end\n+--- end)\n+--- it:totable()\n+--- -- { 6, 12 }\n+--- </pre>\n+---\n+---@param f function(...):any Mapping function. Takes all values returned from the previous stage\n+---                            in the pipeline as arguments and returns one or more new values,\n+---                            which are used in the next pipeline stage. Nil return values returned\n+---                            are filtered from the output.\n+---@return Iter\n+function Iter.map(self, f)\n+  ---@private\n+  local function fn(...)\n+    local result = nil\n+    if select(1, ...) ~= nil then\n+      result = pack(f(...))\n+      if result == nil then\n+        return true, nil\n+      end\n+    end\n+    return false, result\n+  end\n+\n+  local next = self.next\n+  self.next = function(this)\n+    local cont, result\n+    repeat\n+      cont, result = fn(next(this))\n+    until not cont\n+    return unpack(result)\n+  end\n+  return self\n+end\n+\n+---@private\n+function ListIter.map(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  local n = self._head\n+  for i = self._head, self._tail - inc, inc do\n+    local v = pack(f(unpack(self._table[i])))\n+    if v ~= nil then\n+      self._table[n] = v\n+      n = n + inc\n+    end\n+  end\n+  self._tail = n\n+  return self\n+end\n+\n+--- Call a function once for each item in the pipeline.\n+---\n+--- This is used for functions which have side effects. To modify the values in the iterator, use\n+--- |Iter:map()|.\n+---\n+--- This function drains the iterator.\n+---\n+---@param f function(...) Function to execute for each item in the pipeline. Takes all of the\n+---                        values returned by the previous stage in the pipeline as arguments.\n+function Iter.each(self, f)\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      f(...)\n+      return true\n+    end\n+  end\n+  while fn(self:next()) do\n+  end\n+end\n+\n+---@private\n+function ListIter.each(self, f)\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._head, self._tail - inc, inc do\n+    f(unpack(self._table[i]))\n+  end\n+  self._head = self._tail\n+end\n+\n+--- Collect the iterator into a table.\n+---\n+--- The resulting table depends on the initial source in the iterator pipeline. List-like tables\n+--- and function iterators will be collected into a list-like table. If multiple values are returned\n+--- from the final stage in the iterator pipeline, each value will be included in a table. If a\n+--- map-like table was used as the initial source, then a map-like table is returned.\n+---\n+--- Examples:\n+--- <pre>lua\n+--- vim.iter(string.gmatch('100 20 50', '%d+')):map(tonumber):totable()\n+--- -- { 100, 20, 50 }\n+---\n+--- vim.iter({ 1, 2, 3 }):map(function(v) return v, 2 * v end):totable()\n+--- -- { { 1, 2 }, { 2, 4 }, { 3, 6 } }\n+---\n+--- vim.iter({ a = 1, b = 2, c = 3 }):filter(function(k, v) return v % 2 ~= 0 end):totable()\n+--- -- { a = 1, c = 3 }\n+--- </pre>\n+---\n+---@return table\n+function Iter.totable(self)\n+  local t = {}\n+\n+  while true do\n+    local args = pack(self:next())\n+    if args == nil then\n+      break\n+    end\n+    t[#t + 1] = args\n+  end\n+  return t\n+end\n+\n+---@private\n+function ListIter.totable(self)\n+  if self._head == 1 and self._tail == #self._table + 1 and self.next == ListIter.next then\n+    return self._table\n+  end\n+\n+  return Iter.totable(self)\n+end\n+\n+---@private\n+function TableIter.totable(self)\n+  local t = {}\n+  for k, v in self do\n+    t[k] = v\n+  end\n+  return t\n+end\n+\n+--- Fold an iterator or table into a single value.\n+---\n+---@generic A\n+---\n+---@param init A Initial value of the accumulator.\n+---@param f function(acc:A, ...):A Accumulation function.\n+---@return A\n+function Iter.fold(self, init, f)\n+  local acc = init\n+\n+  --- Use a closure to handle var args returned from iterator\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      acc = f(acc, ...)\n+      return true\n+    end\n+  end\n+\n+  while fn(self:next()) do\n+  end\n+  return acc\n+end\n+\n+---@private\n+function ListIter.fold(self, init, f)\n+  local acc = init\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._head, self._tail - inc, inc do\n+    acc = f(acc, unpack(self._table[i]))\n+  end\n+  return acc\n+end\n+\n+--- Return the next value from the iterator.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter(string.gmatch('1 2 3', '%d+')):map(tonumber)\n+--- it:next()\n+--- -- 1\n+--- it:next()\n+--- -- 2\n+--- it:next()\n+--- -- 3\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.next(self) -- luacheck: no unused args\n+  -- This function is provided by the source iterator in Iter.new. This definition exists only for\n+  -- the docstring\n+end\n+\n+---@private\n+function ListIter.next(self)\n+  if self._head ~= self._tail then\n+    local v = self._table[self._head]\n+    local inc = self._head < self._tail and 1 or -1\n+    self._head = self._head + inc\n+    return unpack(v)\n+  end\n+end\n+\n+--- Reverse an iterator.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 }):rev()\n+--- it:totable()\n+--- -- { 12, 9, 6, 3 }\n+---\n+--- </pre>\n+---\n+---@return Iter\n+function Iter.rev(self)\n+  error('rev() requires a list-like table')\n+  return self\n+end\n+\n+---@private\n+function ListIter.rev(self)\n+  local inc = self._head < self._tail and 1 or -1\n+  self._head, self._tail = self._tail - inc, self._head - inc\n+  return self\n+end\n+\n+--- Peek at the next value in the iterator without consuming it.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:peek()\n+--- -- 3\n+--- it:peek()\n+--- -- 3\n+--- it:next()\n+--- -- 3\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.peek(self) -- luacheck: no unused args\n+  error('peek() requires a list-like table')\n+end\n+\n+---@private\n+function ListIter.peek(self)\n+  if self._head ~= self._tail then\n+    return self._table[self._head]\n+  end\n+end\n+\n+--- Find the first value in the iterator that satisfies the given predicate.\n+---\n+--- Advances the iterator. Returns nil and drains the iterator if no value is found.\n+---\n+--- Examples:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(12)\n+--- -- 12\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(20)\n+--- -- nil\n+---\n+--- local it = vim.iter({ 3, 6, 9, 12 })\n+--- it:find(function(v) return v % 4 == 0 end)\n+--- -- 12\n+---\n+--- </pre>\n+---\n+---@return any\n+function Iter.find(self, f)\n+  if type(f) ~= 'function' then\n+    local val = f\n+    f = function(v)\n+      return v == val\n+    end\n+  end\n+\n+  local result = nil\n+\n+  --- Use a closure to handle var args returned from iterator\n+  ---@private\n+  local function fn(...)\n+    if select(1, ...) ~= nil then\n+      if f(...) then\n+        result = pack(...)\n+      else\n+        return true\n+      end\n+    end\n+  end\n+\n+  while fn(self:next()) do\n+  end\n+  return unpack(result)\n+end\n+\n+--- Find the first value in the iterator that satisfies the given predicate, starting from the end.\n+---\n+--- Advances the iterator. Returns nil and drains the iterator if no value is found.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Examples:\n+--- <pre>lua\n+---\n+--- local it = vim.iter({ 1, 2, 3, 2, 1 }):enumerate()\n+--- it:rfind(1)\n+--- -- 5\t1\n+--- it:rfind(1)\n+--- -- 1\t1\n+---\n+--- </pre>\n+---\n+---@see Iter.find\n+---\n+---@return any\n+function Iter.rfind(self, f) -- luacheck: no unused args\n+  error('rfind() requires a list-like table')\n+end\n+\n+---@private\n+function ListIter.rfind(self, f) -- luacheck: no unused args\n+  if type(f) ~= 'function' then\n+    local val = f\n+    f = function(v)\n+      return v == val\n+    end\n+  end\n+\n+  local inc = self._head < self._tail and 1 or -1\n+  for i = self._tail - inc, self._head, -inc do\n+    local v = self._table[i]\n+    if f(unpack(v)) then\n+      self._tail = i\n+      return unpack(v)\n+    end\n+  end\n+  self._head = self._tail\n+end\n+\n+--- Return the next value from the end of the iterator.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local it = vim.iter({1, 2, 3, 4})\n+--- it:nextback()\n+--- -- 4\n+--- it:nextback()\n+--- -- 3\n+--- </pre>\n+---\n+---@return any\n+function Iter.nextback(self) -- luacheck: no unused args\n+  error('nextback() requires a list-like table')\n+end\n+\n+function ListIter.nextback(self)\n+  if self._head ~= self._tail then\n+    local inc = self._head < self._tail and 1 or -1\n+    self._tail = self._tail - inc\n+    return self._table[self._tail]\n+  end\n+end\n+\n+--- Return the next value from the end of the iterator without consuming it.\n+---\n+--- Only supported for iterators on list-like tables.\n+---\n+--- Example:\n+--- <pre>lua\n+--- local it = vim.iter({1, 2, 3, 4})\n+--- it:peekback()\n+--- -- 4\n+--- it:peekback()\n+--- -- 4\n+--- it:nextback()\n+--- -- 4\n+--- </pre>\n+---\n+---@return any\n+function Iter.peekback(self) -- luacheck: no unused args\n+  error('peekback() requires a list-like table')\n+end\n+\n+function ListIter.peekback(self)",
            "html_url": "https://github.com/neovim/neovim/pull/23029#discussion_r1403455135",
            "id": 1403455135,
            "in_reply_to_id": 1403256727,
            "line": 495,
            "node_id": "PRRC_kwDOAPphoM5Tpwaf",
            "original_commit_id": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
            "original_line": 495,
            "original_position": 495,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": 495,
            "pull_request_review_id": 1746572833,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403455135/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-23T14:26:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1403455135",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I don't really like that you need have to call `:collect()` as the last step to process everything. If it was processing a range/array instead of iterators it could execute steps in the pipeline immediately, and it would be possible to also add `:reverse()` and `:sort()` methods.",
            "created_at": "2023-04-11T21:34:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1504119551",
            "id": 1504119551,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5Zpwr_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1504119551/reactions"
            },
            "updated_at": "2023-04-11T21:34:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1504119551",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">I don't really like that you need have to call :collect() as the last step to process everything\r\n\r\nYou need something like this to convert from the `Iter` object back into the actual table. Otherwise you wouldn't be able to chain the calls together. If `vim.iter(t):filter()` returns the filtered table, then you cannot do e.g. `vim.iter(f):filter():map()`.",
            "created_at": "2023-04-11T21:55:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1504160848",
            "id": 1504160848,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5Zp6xQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1504160848/reactions"
            },
            "updated_at": "2023-04-11T21:55:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1504160848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "More examples:\r\n\r\n```lua\r\nfor _, v in vim.iter({ 1, 2, 3 }):map(function(_, v) return 3 * v end):rev() do\r\n  print(v)\r\nend\r\n-- 9\r\n-- 6\r\n-- 3\r\n```\r\n\r\n```lua\r\nlocal it = vim.iter(string.gmatch('1,4,lol,17,blah,2,9,3', '%d+')):map(tonumber)\r\nvim.print(it:totable())\r\n-- { 1, 4, 17, 2, 9, 3 }\r\n```",
            "created_at": "2023-04-11T22:42:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1504220078",
            "id": 1504220078,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5ZqJOu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1504220078/reactions"
            },
            "updated_at": "2023-04-16T19:36:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1504220078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'd be interested to know some rough perf comparisons of this. If no one beats me to it I'll add some next week.",
            "created_at": "2023-04-12T08:30:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1504875213",
            "id": 1504875213,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5ZspLN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1504875213/reactions"
            },
            "updated_at": "2023-04-12T08:30:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1504875213",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'd be interested to know some rough perf comparisons of this. If no one beats me to it I'll add some next week.\r\n\r\nInitial benchmarks don't look good, at least for tables.\r\n\r\n<details>\r\n<summary>Script</summary>\r\n\r\n```lua\r\nlocal table_size = 100000\r\nlocal test_cases = 100\r\n\r\nlocal function mean(t)\r\n  assert(#t > 0)\r\n  local sum = 0\r\n  for _, v in ipairs(t) do\r\n    sum = sum + v\r\n  end\r\n  return sum / #t\r\nend\r\n\r\nlocal function median(t)\r\n  local len = #t\r\n  if len % 2 == 0 then\r\n    return t[len/2]\r\n  end\r\n  return t[(len + 1)/2]\r\nend\r\n\r\nlocal function create_table()\r\n  local t = {}\r\n  for i = 1, table_size do\r\n    t[#t + 1] = i\r\n  end\r\n  return t\r\nend\r\n\r\nlocal function test_iter()\r\n  local t = create_table()\r\n\r\n  local stats = {}\r\n  for _ = 1, test_cases do\r\n    local tic = vim.loop.hrtime()\r\n    local i = 0\r\n    vim.iter(t):filter_map(function(v)\r\n      i = i + 1\r\n      if i % 2 == 0 then\r\n        return v * 2\r\n      end\r\n    end):collect()\r\n    local toc = vim.loop.hrtime()\r\n    stats[#stats + 1] = (toc - tic) / 1000000\r\n  end\r\n  table.sort(stats)\r\n  return stats\r\nend\r\n\r\nlocal function test_tables()\r\n  local t = create_table()\r\n  local stats = {}\r\n\r\n  for _ = 1, test_cases do\r\n    local tic = vim.loop.hrtime()\r\n    local filtered = {}\r\n    for i = 1, #t do\r\n      if i % 2 == 0 then\r\n        filtered[#filtered + 1] = t[i]\r\n      end\r\n    end\r\n    local mapped = vim.tbl_map(function(v) return v * 2 end, filtered)\r\n    local skipped = {}\r\n    for i = 1001, #mapped do\r\n      skipped[#skipped + 1] = mapped[i]\r\n    end\r\n    local reversed = {}\r\n    for i = 1, #skipped do\r\n      reversed[i] = skipped[#skipped - i + 1]\r\n    end\r\n    local toc = vim.loop.hrtime()\r\n    stats[#stats + 1] = (toc - tic) / 1000000\r\n  end\r\n  table.sort(stats)\r\n  return stats\r\nend\r\n\r\nlocal stats_iter = test_iter()\r\nlocal stats_tables = test_tables()\r\n\r\nprint(string.format(\"Iter: Min: %0.6f, Max: %0.6f, Median: %0.6f, Mean: %0.6f\", math.min(unpack(stats_iter)), math.max(unpack(stats_iter)), median(stats_iter), mean(stats_iter)))\r\nprint(string.format(\"Tables: Min: %0.6f, Max: %0.6f, Median: %0.6f, Mean: %0.6f\", math.min(unpack(stats_tables)), math.max(unpack(stats_tables)), median(stats_tables), mean(stats_tables)))\r\n```\r\n\r\n</details>\r\n\r\n```\r\nIter: Min: 28.007209, Max: 33.28...edian: 32.790875, Mean: 32.689433\r\nTables: Min: 4.820125, Max: 5.92... Median: 4.924209, Mean: 4.985749\r\n```\r\n\r\nLikely because `vim.iter` iterates through the underlying table using a function, while creating new tables at each step (the `test_tables()` function in the script above) uses plain for loops and table indexes.\r\n\r\nThis suggests that it might be more efficient to convert everything to a table under the hood and mutate the underlying table at each pipeline stage. This would eliminate the \"lazy evaluation\" aspect though, which for iterators is often the point.\r\n\r\nI'll try that approach and get new benchmark numbers.",
            "created_at": "2023-04-12T14:03:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1505335764",
            "id": 1505335764,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5ZuZnU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1505335764/reactions"
            },
            "updated_at": "2023-04-12T19:50:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1505335764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It will make the code a little more complex but I think I can special case iterators over tables to get the best of both worlds (fast performance with tables, lazy evaluation with functional iterators).",
            "created_at": "2023-04-12T14:43:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1505403688",
            "id": 1505403688,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5ZuqMo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1505403688/reactions"
            },
            "updated_at": "2023-04-12T14:43:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1505403688",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Looking better now 😊 \r\n\r\n```\r\nIter: Min: 2.716917, Max: 4.652875, Median: 2.753750, Mean: 2.853817\r\nTables: Min: 3.132167, Max: 3.70... Median: 3.181708, Mean: 3.228901\r\n```\r\n\r\nInterestingly, `enumerate()` seems to slow things down quite a bit.\r\n\r\nEmulating enumerate with a closure:\r\n```lua\r\n    local i = 0\r\n    local t = vim.iter(t):filter_map(function(v)\r\n      i = i + 1\r\n      if i % 2 == 0 then\r\n        return v * 2\r\n      end\r\n    end):skip(1000):rev():collect()\r\n```\r\n\r\nis about 4 times faster than using `enumerate()`:\r\n\r\n```lua\r\n    local t = vim.iter(t):enumerate():filter_map(function(i, v)\r\n      if i % 2 == 0 then\r\n        return v * 2\r\n      end\r\n    end):skip(1000):rev():collect()\r\n\r\n```\r\n\r\n`enumerate()` is just a special case of `filter_map` that converts a table like `{4, 5, 6, 7}` to `{ {1,4}, {2, 5}, {3, 6}, {4, 7} }`. Then in subsequent pipeline stages, each table element is unpacked (note `function(i, v)` in the `enumerate` example vs `function(v)` without `enumerate`).\r\n\r\nI think generally speaking, changing the \"shape\" of the iterator mid pipeline (e.g. returning multiple values in a pipeline stage) is going to be a little slower because we have to create a table to hold all of those multiple return values, for each element in the iterator.\r\n\r\nI think this is probably ok as-is, but we could look into optimizing that more.",
            "created_at": "2023-04-12T15:52:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1505519831",
            "id": 1505519831,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5ZvGjX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1505519831/reactions"
            },
            "updated_at": "2023-04-12T15:54:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1505519831",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> * Will this eventually replace `tbl_map` / `tbl_filter`, or is this an addition?\r\n\r\nI think it could replace it. Unless `tbl_map` and `tbl_filter` offer a substantial benefit over `vim.iter` then it doesn't make sense to have duplicate APIs.\r\n\r\n> * Should it be possible to call these functions on regular Lua iterators, directly, or does it always have to go through `vim.iter` ? E.g. compare to https://luafun.github.io/index.html\r\n\r\nRegular Lua iterators are just functions, so as far as I know it's not possible to do this without first passing through `vim.iter`. But `vim.iter` does support function iterators: e.g. `vim.iter(string.gmatch(\"abcdefg\", \"%w\"))`.\r\n\r\n",
            "created_at": "2023-04-12T16:22:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1505568170",
            "id": 1505568170,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5ZvSWq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1505568170/reactions"
            },
            "updated_at": "2023-04-12T16:22:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1505568170",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There was a suggestion to also provide some easy to use convenience functions like `vim.filter` and `vim.collect` that are small wrappers around `vim.iter`. I've provided `vim.filter`, `vim.filtermap`, and `vim.collect`.",
            "created_at": "2023-04-13T20:36:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1507580512",
            "id": 1507580512,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5Z29pg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1507580512/reactions"
            },
            "updated_at": "2023-04-13T20:36:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1507580512",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "About the table fast path: this only works (correctly) for list-like tables, correct? If so, (how) is this validated? Probably should be _very_ clearly documented otherwise (it's a premier footgun in Lua).\r\n\r\nAlternatively, how much effort/performance price would it cost to support generic tables?",
            "created_at": "2023-04-14T08:35:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1508144338",
            "id": 1508144338,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5Z5HTS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1508144338/reactions"
            },
            "updated_at": "2023-04-14T08:35:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1508144338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> About the table fast path: this only works (correctly) for list-like tables, correct? If so, (how) is this validated? Probably should be _very_ clearly documented otherwise (it's a premier footgun in Lua).\r\n\r\nCorrect. It's not really validated right now, but I will take care of that.\r\n\r\nAs far as documentation, did we ever land on established language on \"list-like\" vs \"map-like\" tables?\r\n\r\n> Alternatively, how much effort/performance price would it cost to support generic tables?\r\n\r\nThe table specific optimizations depend on knowing the length of the table and the table being continuous; that is, it _only_ works for \"list-like\" tables. \"Map-like\" tables can easily share the function iterator interface though (it works as-is without any extra code by using `vim.iter(pairs(t))`, but we can add a quality of life improvement to use `pairs(t)` automatically if `t` is a \"map-like\" table).",
            "created_at": "2023-04-14T12:24:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1508429492",
            "id": 1508429492,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5Z6M60",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1508429492/reactions"
            },
            "updated_at": "2023-04-14T12:25:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1508429492",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > About the table fast path: this only works (correctly) for list-like tables, correct? If so, (how) is this validated? Probably should be _very_ clearly documented otherwise (it's a premier footgun in Lua).\r\n> \r\n> Correct. It's not really validated right now, but I will take care of that.\r\n\r\nWe don't validate this anywhere else, but it might indeed be good to start -- depending on performance cost. (Especially if we end up refactoring other functions on top of this API.)\r\n\r\n> As far as documentation, did we ever land on established language on \"list-like\" vs \"map-like\" tables?\r\n\r\nThere's `:h lua-special-tbl` and the paragraph before it (which should be expanded to introduce the terminology and get its own tag), which suggests:\r\n\r\n* **table** is the generic Lua data structure and makes no further assumption \r\n* **array** is a table purely indexed by integers (which may have gaps); not relevant here\r\n* **list** is a table purely indexed by _consecutive_ integers that start from 1\r\n* **dict** is a table purely indexed by strings\r\n\r\n> The table specific optimizations depend on knowing the length of the table and the table being continuous; that is, it _only_ works for \"list-like\" tables. \"Map-like\" tables can easily share the function iterator interface though (it works as-is without any extra code by using `vim.iter(pairs(t))`, but we can add a quality of life improvement to use `pairs(t)` automatically if `t` is a \"map-like\" table).\r\n\r\nThat makes sense; it's probably worth benchmarking each true(!) `vim.tbl_foo` function to decide whether to keep its current implementation or replace with an iterator.",
            "created_at": "2023-04-14T12:38:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1508444685",
            "id": 1508444685,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5Z6QoN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1508444685/reactions"
            },
            "updated_at": "2023-04-14T12:38:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1508444685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\"Map-like\" tables are supported now too:\r\n\r\n```lua\r\n    it('handles map-like tables', function()\r\n      local t = { a = 1, b = 2, c = 3 }\r\n      local it = vim.iter(t):filtermap(function(k, v)\r\n        if v % 2 ~= 0 then\r\n          return k:upper(), v * 2\r\n        end\r\n      end)\r\n      eq({ A = 2, C = 6 }, it:collect())\r\n    end)\r\n```\r\n\r\nImportant note: For a map-like table `t`, `vim.iter(t)` and `vim.iter(pairs(t))` are _not_ equivalent. This is because `pairs(t)` returns an iterator function, at which point `vim.iter()` cannot tell that the original table `t` is a table: it's just an iterator like anything else. In particular, this affects the output of `:collect()`. For map-like tables we use a specialized implementation of `:collect()` that will also return a map-like table, but for generic iterators, `:collect()` returns a \"list of lists\".\r\n\r\nExample:\r\n\r\n```lua\r\nlocal t = {a = 1, b = 2, c = 3}\r\nvim.iter(t):collect()\r\n-- { a = 1, b = 2, c = 3}\r\n\r\nvim.iter(pairs(t)):collect()\r\n-- { {'a', 1}, {'b', 2}, {'c', 3} }\r\n```",
            "created_at": "2023-04-14T15:18:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1508777513",
            "id": 1508777513,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5Z7h4p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1508777513/reactions"
            },
            "updated_at": "2023-04-14T15:24:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1508777513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Updated benchmark script:\r\n\r\n<details>\r\n<summary><code>benchmark.lua</code></summary>\r\n\r\n```lua\r\nlocal table_size = 100000\r\nlocal test_cases = 100\r\n\r\nlocal function mean(t)\r\n  assert(#t > 0)\r\n  local sum = 0\r\n  for _, v in ipairs(t) do\r\n    sum = sum + v\r\n  end\r\n  return sum / #t\r\nend\r\n\r\nlocal function median(t)\r\n  local len = #t\r\n  if len % 2 == 0 then\r\n    return t[len/2]\r\n  end\r\n  return t[(len + 1)/2]\r\nend\r\n\r\nlocal function benchmark(...)\r\n  local t = {}\r\n  for i = 1, table_size do\r\n    t[#t + 1] = i\r\n  end\r\n\r\n  local last = nil\r\n\r\n  for n = 1, select('#', ...) do\r\n    local f = select(n, ...)\r\n    local stats = {}\r\n    local res\r\n    for i = 1, test_cases do\r\n      local tic = vim.loop.hrtime()\r\n      res = f(t)\r\n      local toc = vim.loop.hrtime()\r\n      if i == 1 then\r\n        vim.print(res)\r\n      end\r\n      stats[#stats + 1] = (toc - tic) / 1000000\r\n    end\r\n    table.sort(stats)\r\n    print(string.format(\"[%d] Min: %0.6f, Max: %0.6f, Median: %0.6f, Mean: %0.6f\", n, math.min(unpack(stats)), math.max(unpack(stats)), median(stats), mean(stats)))\r\n\r\n    if last ~= nil then\r\n      assert(#res == #last)\r\n      for i, v in ipairs(res) do\r\n        assert(last[i] == v)\r\n      end\r\n    end\r\n\r\n    last = res\r\n  end\r\nend\r\n\r\nlocal function test_iter(t)\r\n  local i = 0\r\n  return vim.iter(t):filtermap(function(v)\r\n    i = i + 1\r\n    if i % 2 == 0 then\r\n      return v * 2\r\n    end\r\n  end):skip(1000):rev():totable()\r\nend\r\n\r\nlocal function test_tables(t)\r\n  local a = {}\r\n  local b = {}\r\n  for i=1, #t do\r\n    if i % 2 == 0 then\r\n      a[#a + 1] = 2 * t[i]\r\n    end\r\n  end\r\n  for i=1001, #a do\r\n    b[#b+1] = a[i]\r\n  end\r\n  local c = {}\r\n  for i=1, #b do\r\n    c[#c+1] = b[#b - i + 1]\r\n  end\r\n  return c\r\nend\r\n\r\nbenchmark(test_iter, test_tables)\r\n```\r\n\r\n</details>\r\n\r\nPerformance is pretty good, more or less equal to doing everything \"manually\" (creating new tables using for loops) and is faster in some cases, depending on how many pipeline stages you have.\r\n\r\nOne interesting finding is that when using a list table `t`, `vim.iter(ipairs(t))` is much faster than `vim.iter(t):enumerate()`. `enumerate()` seems to be pretty slow in general, for the reason I mentioned earlier (changing the \"shape\" of the values mid-pipeline has to allocate extra tables when iterating over a list). I added a note to the `enumerate()` docstring mentioning this.",
            "created_at": "2023-04-15T18:36:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1509923909",
            "id": 1509923909,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5Z_5xF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1509923909/reactions"
            },
            "updated_at": "2023-04-15T18:36:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1509923909",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "NONE",
            "body": "I hope it's fine to leave some quick feedback here for later iterations (pun unintended :wink:)/ improvements. The naming seems inconsistent in the sense that there's both `rfind` and various `<...>back`, personally I prefer `r<...>` which is more common (according to my anecdotal evidence) and less characters to type :). \r\n\r\nI think I've furthermore found one limiting factor in the api, or at least for me it is.\r\n\r\nI've got the following code which I wanted to port:\r\n```lua\r\nfor _, path in ipairs(rtpaths) do\r\n  -- Look on runtime path for 'lua/*.lua' files\r\n  local path1 = table.concat({ path, ext, modfile }, sep)\r\n  if vim.fn.filereadable(path1) == 1 then\r\n    return path1\r\n  end\r\n\r\n  -- Look on runtime path for 'lua/*/init.lua' files\r\n  local path2 = table.concat({ path, ext, fname, initfile }, sep)\r\n  if vim.fn.filereadable(path2) == 1 then\r\n    return path2\r\n  end\r\nend\r\n```\r\n\r\nMy first thought was to `:map()` the `rtpaths` to the `path1` and `path2` above and then to use `:find(function(path) vim.fn.readable(path) == 1 end)` like so:\r\n```lua\r\nvim\r\n  .iter(rtpaths)\r\n  :map(\r\n    function(path)\r\n      return table.concat({ path, ext, modfile }, sep),\r\n        table.concat({ path, ext, fname, initfile }, sep)\r\n    end\r\n  )\r\n  :find(function(path) return vim.fn.filereadable(path) == 1 end)\r\n```\r\n\r\nUnfortunately this isn't possible since the `map` has returned a table, i.e. the shape of the iterator is `{{p1, p2}, ...}` while we would like `{p1, p2, ...}`. In this case some `flatten` functionality would be very nice I think so you can do the `filter` without having to `totable` the iterator to flatten it. Other than that what a lovely addition to the API, now I can program in neovim like I do almost anywhere else and the terse functional style fits configuring neovim well I think, thanks!",
            "created_at": "2023-04-18T12:07:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1512973016",
            "id": 1512973016,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5aLiLY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1512973016/reactions"
            },
            "updated_at": "2023-04-18T12:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1512973016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/21057514?v=4",
                "events_url": "https://api.github.com/users/sandersantema/events{/privacy}",
                "followers_url": "https://api.github.com/users/sandersantema/followers",
                "following_url": "https://api.github.com/users/sandersantema/following{/other_user}",
                "gists_url": "https://api.github.com/users/sandersantema/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sandersantema",
                "id": 21057514,
                "login": "sandersantema",
                "node_id": "MDQ6VXNlcjIxMDU3NTE0",
                "organizations_url": "https://api.github.com/users/sandersantema/orgs",
                "received_events_url": "https://api.github.com/users/sandersantema/received_events",
                "repos_url": "https://api.github.com/users/sandersantema/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sandersantema/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sandersantema/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sandersantema"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">The naming seems inconsistent in the sense that there's both rfind and various <...>back, personally I prefer r<...> which is more common (according to my anecdotal evidence) and less characters to type :).\r\n\r\nThe names were mostly borrowed from [Rust](https://doc.rust-lang.org/std/iter/trait.Iterator.html) (which shares some terminology with C++ as well, e.g. `rfind` and `back`). That decision was arbitrary, I chose that simply because it's what I'm familiar with. We can bikeshed over naming into eternity, so unless a clear (and expedient) consensus emerges, I will bias towards leaving the names as-is.\r\n\r\n>Unfortunately this isn't possible since the map has returned a table, i.e. the shape of the iterator is {{p1, p2}, ...} while we would like {p1, p2, ...}. In this case some flatten functionality would be very nice I think so you can do the filter without having to totable the iterator to flatten it. \r\n\r\nThe API is not complete. A `flatten` implementation would indeed be nice to have (another notable missing feature is `zip()`). This PR gets the concept out the door and into users' hands. We can and will continue to refine and extend the API.",
            "created_at": "2023-04-18T14:19:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1513244389",
            "id": 1513244389,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5aMkbl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1513244389/reactions"
            },
            "updated_at": "2023-04-18T14:19:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1513244389",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Great to see this. I did spend a fair bit of time evaluating [luafun](https://github.com/luafun/luafun) for this purpose (which I noticed [plenary also uses](https://github.com/nvim-lua/plenary.nvim/blob/master/lua/plenary/iterators.lua)). \r\n\r\n> * Will this eventually replace `tbl_map` / `tbl_filter`, or is this an addition?\r\n\r\n+1 let's plan to deprecate the tbl_xx stuff eventually. https://github.com/neovim/neovim/issues/24572\r\n\r\n> * Should it be possible to call these functions on regular Lua iterators, directly, or does it always have to go through `vim.iter` ? E.g. compare to https://luafun.github.io/index.html\r\n\r\n💯  I hope we can make this work. ~~Having to wrap everything in iter() isn't ideal, though having the _option_ of a Iter object is fine.~~ _(Edit: after more thought, I don't see a problem with requiring `vim.iter()` to \"marshall\" things out of the Iter.)_\r\n\r\nMuch of what I've seen in luafun's interface looks good. We should strongly consider that as a starting point. luafun has `zip()` too.",
            "created_at": "2023-04-20T01:40:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1515592911",
            "id": 1515592911,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5aVhzP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515592911/reactions"
            },
            "updated_at": "2023-11-23T11:37:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515592911",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > * Should it be possible to call these functions on regular Lua iterators, directly, or does it always have to go through `vim.iter` ? E.g. compare to https://luafun.github.io/index.html\r\n> \r\n> 💯 I hope we can make this work. Having to wrap everything in iter() isn't ideal, though having the _option_ of a Iter object is fine.\r\n\r\nWe could, alternatively, have a bundle of functions like `vim.filter()`, `vim.map()`, `vim.fold()`, etc. that accept an iterator or table. But the issue with that is you pollute the `vim.` namespace with all of those functions. Unless you namespace them separately under `vim.iter.`, but now your code looks much more verbose:\r\n\r\n```lua\r\nvim.iter.filter(vim.iter.map(function(i, s) return s .. \" foo\" end, vim.iter.enumerate(string.gmatch(\"abcd\", \"%w\")))\r\n```\r\n\r\nvs\r\n\r\n```lua\r\nvim.iter(string.gmatch(\"abcd\", \"%w\")):enumerate():map(function(i, s) return s .. \" foo\" end):filter()\r\n```\r\n\r\nThe former approach also reverses the order in which you write the pipeline stages. In this example, the pipeline is `enumerate()` -> `map()` -> `filter()`, but the user must write it in the order `filter()` -> `map()` -> `enumerate()`.\r\n\r\nMaybe I'm misunderstanding your and @mfussenegger's suggestion, in which case please correct me.\r\n\r\n",
            "created_at": "2023-04-20T13:18:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1516314443",
            "id": 1516314443,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5aYR9L",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1516314443/reactions"
            },
            "updated_at": "2023-04-20T13:18:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1516314443",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I love pretty much all the choices in this PR. Well done!\r\n\r\n> Having to wrap everything in iter() isn't ideal, though having the _option_ of a Iter object is fine\r\n\r\nLet me retract that. The converse is probably better, as you showed.\r\n\r\nMain idea is that `vim.iter` should easily work with `for`/`ipairs`/`pairs` and \"iterables\" of any kind (the Lua iter pattern, tables, and `Iter`). It can \"convert\" back and forth, so let's wait until and see if there's a real need for anything else. \r\n\r\n> Unless you namespace them separately under `vim.iter.`, but now your code looks much more verbose:\r\n\r\nThese module-level functions would be to avoid needing to \"convert\" to/from an Iter, but we should wait to see if there's a strong need for this.",
            "created_at": "2023-04-21T02:56:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1517187405",
            "id": 1517187405,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5abnFN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1517187405/reactions"
            },
            "updated_at": "2023-04-21T03:41:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1517187405",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For `Iter:find()`, `Iter:filter()`, (~~do we need `Iter:reduce()` ?~~ Edit: we have `Iter:fold()`), should we also pass the \"previous\" element to the callback function? This allows the callback to compare / reason about observed states.\r\n\r\nCreated an issue: https://github.com/neovim/neovim/issues/23251",
            "created_at": "2023-04-21T15:06:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/23029#issuecomment-1517973126",
            "id": 1517973126,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
            "node_id": "IC_kwDOAPphoM5aem6G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1517973126/reactions"
            },
            "updated_at": "2023-06-24T13:59:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1517973126",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23029/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/23029/commits",
    "created_at": "2023-04-11T20:22:57Z",
    "diff_url": "https://github.com/neovim/neovim/pull/23029.diff",
    "draft": false,
    "head": {
        "label": "gpanders:vim-iter",
        "ref": "vim-iter",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/gpanders/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gpanders/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gpanders/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gpanders/neovim/branches{/branch}",
            "clone_url": "https://github.com/gpanders/neovim.git",
            "collaborators_url": "https://api.github.com/repos/gpanders/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gpanders/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/gpanders/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gpanders/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gpanders/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gpanders/neovim/contributors",
            "created_at": "2021-06-11T03:58:44Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gpanders/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/gpanders/neovim/downloads",
            "events_url": "https://api.github.com/repos/gpanders/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gpanders/neovim/forks",
            "full_name": "gpanders/neovim",
            "git_commits_url": "https://api.github.com/repos/gpanders/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gpanders/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gpanders/neovim/git/tags{/sha}",
            "git_url": "git://github.com/gpanders/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/gpanders/neovim/hooks",
            "html_url": "https://github.com/gpanders/neovim",
            "id": 375899052,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/gpanders/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gpanders/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gpanders/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/gpanders/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gpanders/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/gpanders/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gpanders/neovim/merges",
            "milestones_url": "https://api.github.com/repos/gpanders/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzU4OTkwNTI=",
            "notifications_url": "https://api.github.com/repos/gpanders/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gpanders/neovim/pulls{/number}",
            "pushed_at": "2023-11-17T20:24:51Z",
            "releases_url": "https://api.github.com/repos/gpanders/neovim/releases{/id}",
            "size": 234536,
            "ssh_url": "git@github.com:gpanders/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gpanders/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/gpanders/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gpanders/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/gpanders/neovim/subscription",
            "svn_url": "https://github.com/gpanders/neovim",
            "tags_url": "https://api.github.com/repos/gpanders/neovim/tags",
            "teams_url": "https://api.github.com/repos/gpanders/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/gpanders/neovim/git/trees{/sha}",
            "updated_at": "2022-01-07T19:38:08Z",
            "url": "https://api.github.com/repos/gpanders/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "06d84b17e6accdab6d6c8480e685c71b28411f3c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/23029",
    "id": 1309623533,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23029",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": false,
    "merge_commit_sha": "ab1edecfb7c73c82c2d5886cb8e270b44aca7d01",
    "merged_at": "2023-04-17T18:54:20Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5OD0Tt",
    "number": 23029,
    "patch_url": "https://github.com/neovim/neovim/pull/23029.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/23029/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/06d84b17e6accdab6d6c8480e685c71b28411f3c",
    "title": "feat(lua): add vim.iter",
    "updated_at": "2023-11-23T14:26:07Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/23029",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
        "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gpanders/followers",
        "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gpanders",
        "id": 8965202,
        "login": "gpanders",
        "node_id": "MDQ6VXNlcjg5NjUyMDI=",
        "organizations_url": "https://api.github.com/users/gpanders/orgs",
        "received_events_url": "https://api.github.com/users/gpanders/received_events",
        "repos_url": "https://api.github.com/users/gpanders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gpanders"
    }
}