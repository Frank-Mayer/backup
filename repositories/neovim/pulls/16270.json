{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/16270/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/16270/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/16270"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/16270"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/16270/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ed1463a94caad7653671c6b1b02fbb409a4236df"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4942,
            "forks_count": 4942,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1670,
            "open_issues_count": 1670,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-10-26T22:37:53Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 242910,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 70439,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-10-26T23:49:04Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 70439,
            "watchers_count": 70439,
            "web_commit_signoff_required": false
        },
        "sha": "2f9b94a26836ecb081c717e23913f5b6576cce99",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "#### vim-patch:partial:8.2.3578: manipulating highlighting is complicated\r\n\r\nProblem:    Manipulating highlighting is complicated.\r\nSolution:   Add the hlget() and hlset() functions. (Yegappan Lakshmanan,\r\n            closes vim/vim#9039)\r\nhttps://github.com/vim/vim/commit/d1a8d658e1b16cf8579fc72cf7aa6a29a57ff5ef\r\n\r\nskipped support for highlight-start, highlight-stop, highlight-ctermul, highlight-term, highlight-font\r\n\r\npartial skip src/nvim/syntax.c\r\npartial skip src/nvim/testdir/test_highlight.vim\r\npartial skip runtime/doc/eval.txt",
    "closed_at": "2023-10-25T01:47:53Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752832269"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752832269"
                }
            },
            "author_association": "MEMBER",
            "body": "This fails? Use `v:_null_string`.",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T03:10:13Z",
            "diff_hunk": "@@ -761,4 +761,137 @@ func Test_highlight_default_colorscheme_restores_links()\n   hi clear\n endfunc\n \n+\" Test for the hlget() function\n+func Test_hlget()\n+  call assert_notequal([], filter(hlget(), 'v:val.name == \"Visual\"'))\n+  call assert_equal([], hlget('SomeHLGroup'))\n+  highlight MyHLGroup cterm=reverse ctermfg=10 ctermbg=Black\n+  call assert_equal([{'id': hlID('MyHLGroup'), 'ctermfg': '10', 'name': 'MyHLGroup', 'ctermbg': '0', 'cterm': {'reverse': v:true}}], hlget('MyHLGroup'))\n+  highlight clear MyHLGroup\n+  call assert_equal(v:true, hlget('MyHLGroup')[0].cleared)\n+  highlight link MyHLGroup IncSearch\n+  call assert_equal('IncSearch', hlget('MyHLGroup')[0].linksto)\n+  highlight clear MyHLGroup\n+  \" call assert_equal([], hlget(v:null))",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752832269",
            "id": 752832269,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s308N",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 775,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/testdir/test_highlight.vim",
            "position": null,
            "pull_request_review_id": 810722336,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752832269/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T03:10:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752832269",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752832706"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752832706"
                }
            },
            "author_association": "MEMBER",
            "body": "`v:_null_list`",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T03:11:38Z",
            "diff_hunk": "@@ -761,4 +761,137 @@ func Test_highlight_default_colorscheme_restores_links()\n   hi clear\n endfunc\n \n+\" Test for the hlget() function\n+func Test_hlget()\n+  call assert_notequal([], filter(hlget(), 'v:val.name == \"Visual\"'))\n+  call assert_equal([], hlget('SomeHLGroup'))\n+  highlight MyHLGroup cterm=reverse ctermfg=10 ctermbg=Black\n+  call assert_equal([{'id': hlID('MyHLGroup'), 'ctermfg': '10', 'name': 'MyHLGroup', 'ctermbg': '0', 'cterm': {'reverse': v:true}}], hlget('MyHLGroup'))\n+  highlight clear MyHLGroup\n+  call assert_equal(v:true, hlget('MyHLGroup')[0].cleared)\n+  highlight link MyHLGroup IncSearch\n+  call assert_equal('IncSearch', hlget('MyHLGroup')[0].linksto)\n+  highlight clear MyHLGroup\n+  \" call assert_equal([], hlget(v:null))\n+  call assert_equal([], hlget(\"\"))\n+\n+\" Test for resolving highlight group links\n+  highlight hlgA cterm=bold\n+  let hlgAid = hlID('hlgA')\n+  highlight link hlgB hlgA\n+  let hlgBid = hlID('hlgB')\n+  highlight link hlgC hlgB\n+  let hlgCid = hlID('hlgC')\n+  call assert_equal('hlgA', hlget('hlgB')[0].linksto)\n+  call assert_equal('hlgB', hlget('hlgC')[0].linksto)\n+  call assert_equal([{'id': hlgAid, 'name': 'hlgA',\n+                    \\ 'cterm': {'bold': v:true}}], hlget('hlgA'))\n+  call assert_equal([{'id': hlgBid, 'name': 'hlgB',\n+                    \\ 'linksto': 'hlgA'}], hlget('hlgB'))\n+  call assert_equal([{'id': hlgCid, 'name': 'hlgC',\n+                    \\ 'linksto': 'hlgB'}], hlget('hlgC'))\n+  call assert_equal([{'id': hlgAid, 'name': 'hlgA',\n+                    \\ 'cterm': {'bold': v:true}}], hlget('hlgA', v:false))\n+  call assert_equal([{'id': hlgBid, 'name': 'hlgB',\n+                    \\ 'linksto': 'hlgA'}], hlget('hlgB', 0))\n+  call assert_equal([{'id': hlgCid, 'name': 'hlgC',\n+                    \\ 'linksto': 'hlgB'}], hlget('hlgC', v:false))\n+  call assert_equal([{'id': hlgAid, 'name': 'hlgA',\n+                    \\ 'cterm': {'bold': v:true}}], hlget('hlgA', v:true))\n+  call assert_equal([{'id': hlgBid, 'name': 'hlgB',\n+                    \\ 'cterm': {'bold': v:true}}], hlget('hlgB', 1))\n+  call assert_equal([{'id': hlgCid, 'name': 'hlgC',\n+                    \\ 'cterm': {'bold': v:true}}], hlget('hlgC', v:true))\n+\n+  call assert_fails('call hlget([])', 'E1174:')\n+  call assert_fails('call hlget(\"abc\", \"xyz\")', 'E1212:')\n+endfunc\n+\n+\" Test for the hlset() function\n+func Test_hlset()\n+  \" call assert_equal(0, hlset(v:null))",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752832706",
            "id": 752832706,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s31DC",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 812,
            "original_position": 52,
            "original_start_line": null,
            "path": "src/nvim/testdir/test_highlight.vim",
            "position": null,
            "pull_request_review_id": 810722843,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752832706/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T03:11:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752832706",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752833547"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752833547"
                }
            },
            "author_association": "MEMBER",
            "body": "tv_dict_alloc() does not return NULL.",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T03:14:48Z",
            "diff_hunk": "@@ -8754,6 +8755,391 @@ RgbValue name_to_color(const char *name)\n }\n \n \n-/**************************************\n-*  End of Highlighting stuff          *\n-**************************************/\n+\n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+static dict_T * highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T      *dict;\n+  int         i;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752833547",
            "id": 752833547,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s31QL",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 8768,
            "original_position": 25,
            "original_start_line": null,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 810724414,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752833547/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T03:14:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752833547",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752834228"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752834228"
                }
            },
            "author_association": "MEMBER",
            "body": "See https://github.com/neovim/neovim/pull/16270/files#r752833547",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T03:17:09Z",
            "diff_hunk": "@@ -8754,6 +8755,391 @@ RgbValue name_to_color(const char *name)\n }\n \n \n-/**************************************\n-*  End of Highlighting stuff          *\n-**************************************/\n+\n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+static dict_T * highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T      *dict;\n+  int         i;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return NULL;\n+  }\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+static dict_T * highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T      *dict;\n+  HlGroup     *sgp;\n+  dict_T      *attr_dict;\n+  int         hlgid;\n+\n+  dict = tv_dict_alloc();",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752834228",
            "id": 752834228,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s31a0",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 8793,
            "original_position": 50,
            "original_start_line": null,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 810725224,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752834228/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T03:17:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752834228",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752835455"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752835455"
                }
            },
            "author_association": "MEMBER",
            "body": "Could have ported the equivalent Vim function in eval/typval.c instead of this.",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T03:21:34Z",
            "diff_hunk": "@@ -8754,6 +8755,391 @@ RgbValue name_to_color(const char *name)\n }\n \n \n-/**************************************\n-*  End of Highlighting stuff          *\n-**************************************/\n+\n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+static dict_T * highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T      *dict;\n+  int         i;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return NULL;\n+  }\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+static dict_T * highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T      *dict;\n+  HlGroup     *sgp;\n+  dict_T      *attr_dict;\n+  int         hlgid;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return dict;\n+  }\n+\n+  sgp = &HL_TABLE()[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &HL_TABLE()[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u  *link;\n+    link = HL_TABLE()[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+void f_hlget(typval_T *argvars, typval_T *rettv, FunPtr fptr)\n+{\n+  list_T      *list;\n+  dict_T      *dict;\n+  int         i;\n+  const char  *hlarg = NULL;\n+  bool                resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752835455",
            "id": 752835455,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s31t_",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 8895,
            "original_position": 152,
            "original_start_line": null,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 810726850,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752835455/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T03:21:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752835455",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752840643"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752840643"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yeah it fails with v:null . Didn't know about v:_null_string v:_null_dict . Those will probably fix this . I was wondering how to get a null with string type.",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T03:38:29Z",
            "diff_hunk": "@@ -761,4 +761,137 @@ func Test_highlight_default_colorscheme_restores_links()\n   hi clear\n endfunc\n \n+\" Test for the hlget() function\n+func Test_hlget()\n+  call assert_notequal([], filter(hlget(), 'v:val.name == \"Visual\"'))\n+  call assert_equal([], hlget('SomeHLGroup'))\n+  highlight MyHLGroup cterm=reverse ctermfg=10 ctermbg=Black\n+  call assert_equal([{'id': hlID('MyHLGroup'), 'ctermfg': '10', 'name': 'MyHLGroup', 'ctermbg': '0', 'cterm': {'reverse': v:true}}], hlget('MyHLGroup'))\n+  highlight clear MyHLGroup\n+  call assert_equal(v:true, hlget('MyHLGroup')[0].cleared)\n+  highlight link MyHLGroup IncSearch\n+  call assert_equal('IncSearch', hlget('MyHLGroup')[0].linksto)\n+  highlight clear MyHLGroup\n+  \" call assert_equal([], hlget(v:null))",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752840643",
            "id": 752840643,
            "in_reply_to_id": 752832269,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s32_D",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 775,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/testdir/test_highlight.vim",
            "position": null,
            "pull_request_review_id": 810733167,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752840643/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T03:38:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752840643",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752840715"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752840715"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "right 🤦‍♂️",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T03:38:50Z",
            "diff_hunk": "@@ -8754,6 +8755,391 @@ RgbValue name_to_color(const char *name)\n }\n \n \n-/**************************************\n-*  End of Highlighting stuff          *\n-**************************************/\n+\n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+static dict_T * highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T      *dict;\n+  int         i;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752840715",
            "id": 752840715,
            "in_reply_to_id": 752833547,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s33AL",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 8768,
            "original_position": 25,
            "original_start_line": null,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 810733272,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752840715/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T03:38:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752840715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752841251"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752841251"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Should I put them part of this patch?  In a separate commit? Or as a different vim-patch (Do you know what vim-path I'll need to port. I'm not sure how to find a patch number TBH :| )? ",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T03:40:37Z",
            "diff_hunk": "@@ -8754,6 +8755,391 @@ RgbValue name_to_color(const char *name)\n }\n \n \n-/**************************************\n-*  End of Highlighting stuff          *\n-**************************************/\n+\n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+static dict_T * highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T      *dict;\n+  int         i;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return NULL;\n+  }\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+static dict_T * highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T      *dict;\n+  HlGroup     *sgp;\n+  dict_T      *attr_dict;\n+  int         hlgid;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return dict;\n+  }\n+\n+  sgp = &HL_TABLE()[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &HL_TABLE()[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u  *link;\n+    link = HL_TABLE()[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+void f_hlget(typval_T *argvars, typval_T *rettv, FunPtr fptr)\n+{\n+  list_T      *list;\n+  dict_T      *dict;\n+  int         i;\n+  const char  *hlarg = NULL;\n+  bool                resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752841251",
            "id": 752841251,
            "in_reply_to_id": 752835455,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s33Ij",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 8895,
            "original_position": 152,
            "original_start_line": null,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 810733904,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752841251/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T03:40:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752841251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752844062"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752844062"
                }
            },
            "author_association": "MEMBER",
            "body": "May be <https://github.com/vim/vim/commit/83494b4ac61898f687d6ef9dce4bad5802fb8e51>",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T03:49:58Z",
            "diff_hunk": "@@ -8754,6 +8755,391 @@ RgbValue name_to_color(const char *name)\n }\n \n \n-/**************************************\n-*  End of Highlighting stuff          *\n-**************************************/\n+\n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+static dict_T * highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T      *dict;\n+  int         i;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return NULL;\n+  }\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+static dict_T * highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T      *dict;\n+  HlGroup     *sgp;\n+  dict_T      *attr_dict;\n+  int         hlgid;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return dict;\n+  }\n+\n+  sgp = &HL_TABLE()[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &HL_TABLE()[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u  *link;\n+    link = HL_TABLE()[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+void f_hlget(typval_T *argvars, typval_T *rettv, FunPtr fptr)\n+{\n+  list_T      *list;\n+  dict_T      *dict;\n+  int         i;\n+  const char  *hlarg = NULL;\n+  bool                resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752844062",
            "id": 752844062,
            "in_reply_to_id": 752835455,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s330e",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 8895,
            "original_position": 152,
            "original_start_line": null,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 810737198,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752844062/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T03:49:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752844062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752850652"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752850652"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Thanks @zeertzjq I'll take a look at that patch.",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T04:13:56Z",
            "diff_hunk": "@@ -8754,6 +8755,391 @@ RgbValue name_to_color(const char *name)\n }\n \n \n-/**************************************\n-*  End of Highlighting stuff          *\n-**************************************/\n+\n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+static dict_T * highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T      *dict;\n+  int         i;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return NULL;\n+  }\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+static dict_T * highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T      *dict;\n+  HlGroup     *sgp;\n+  dict_T      *attr_dict;\n+  int         hlgid;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return dict;\n+  }\n+\n+  sgp = &HL_TABLE()[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &HL_TABLE()[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u  *link;\n+    link = HL_TABLE()[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+void f_hlget(typval_T *argvars, typval_T *rettv, FunPtr fptr)\n+{\n+  list_T      *list;\n+  dict_T      *dict;\n+  int         i;\n+  const char  *hlarg = NULL;\n+  bool                resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752850652",
            "id": 752850652,
            "in_reply_to_id": 752835455,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s35bc",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 8895,
            "original_position": 152,
            "original_start_line": null,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 810745558,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752850652/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T04:13:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752850652",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r752859241"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/752859241"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@janlazo @zeertzjq most of the changes related seems to be type checking related to vim9. Aren't those NA? Should I just pick the changes in `src/typeval.c` ?",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-11-19T04:44:56Z",
            "diff_hunk": "@@ -8754,6 +8755,391 @@ RgbValue name_to_color(const char *name)\n }\n \n \n-/**************************************\n-*  End of Highlighting stuff          *\n-**************************************/\n+\n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+static dict_T * highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T      *dict;\n+  int         i;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return NULL;\n+  }\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+static dict_T * highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T      *dict;\n+  HlGroup     *sgp;\n+  dict_T      *attr_dict;\n+  int         hlgid;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return dict;\n+  }\n+\n+  sgp = &HL_TABLE()[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &HL_TABLE()[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u  *link;\n+    link = HL_TABLE()[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+void f_hlget(typval_T *argvars, typval_T *rettv, FunPtr fptr)\n+{\n+  list_T      *list;\n+  dict_T      *dict;\n+  int         i;\n+  const char  *hlarg = NULL;\n+  bool                resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r752859241",
            "id": 752859241,
            "in_reply_to_id": 752835455,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4s37hp",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 8895,
            "original_position": 152,
            "original_start_line": null,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 810756427,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752859241/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-11-19T04:44:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/752859241",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r759808163"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/759808163"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes.",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-12-01T02:32:15Z",
            "diff_hunk": "@@ -8754,6 +8755,391 @@ RgbValue name_to_color(const char *name)\n }\n \n \n-/**************************************\n-*  End of Highlighting stuff          *\n-**************************************/\n+\n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+static dict_T * highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T      *dict;\n+  int         i;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return NULL;\n+  }\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+static dict_T * highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T      *dict;\n+  HlGroup     *sgp;\n+  dict_T      *attr_dict;\n+  int         hlgid;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return dict;\n+  }\n+\n+  sgp = &HL_TABLE()[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &HL_TABLE()[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u  *link;\n+    link = HL_TABLE()[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+void f_hlget(typval_T *argvars, typval_T *rettv, FunPtr fptr)\n+{\n+  list_T      *list;\n+  dict_T      *dict;\n+  int         i;\n+  const char  *hlarg = NULL;\n+  bool                resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r759808163",
            "id": 759808163,
            "in_reply_to_id": 752835455,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4tScCj",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 8895,
            "original_position": 152,
            "original_start_line": null,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 819747372,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/759808163/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-01T02:32:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/759808163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r776324654"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/776324654"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@janlazo is porting the typeval check patches strictly necessary in this pr? Can this be merged without those and those patches ported on a later pr ?",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2021-12-29T13:25:22Z",
            "diff_hunk": "@@ -8754,6 +8755,391 @@ RgbValue name_to_color(const char *name)\n }\n \n \n-/**************************************\n-*  End of Highlighting stuff          *\n-**************************************/\n+\n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+static dict_T * highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T      *dict;\n+  int         i;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return NULL;\n+  }\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+static dict_T * highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T      *dict;\n+  HlGroup     *sgp;\n+  dict_T      *attr_dict;\n+  int         hlgid;\n+\n+  dict = tv_dict_alloc();\n+  if (dict == NULL) {\n+    return dict;\n+  }\n+\n+  sgp = &HL_TABLE()[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &HL_TABLE()[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_name != NULL) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u  *link;\n+    link = HL_TABLE()[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+void f_hlget(typval_T *argvars, typval_T *rettv, FunPtr fptr)\n+{\n+  list_T      *list;\n+  dict_T      *dict;\n+  int         i;\n+  const char  *hlarg = NULL;\n+  bool                resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r776324654",
            "id": 776324654,
            "in_reply_to_id": 752835455,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4uRcYu",
            "original_commit_id": "cb58f7e12918c8e37aca250edc1d6f157e105f49",
            "original_line": 8895,
            "original_position": 152,
            "original_start_line": null,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 841403678,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/776324654/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-29T13:36:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/776324654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002269953"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002269953"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\t\t\t\t\t\\ cterm: #{reverse: 1 , bold: 1}}])\r\n```",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:16:26Z",
            "diff_hunk": "@@ -3977,6 +3979,88 @@ hlexists({name})\t\t\t\t\t*hlexists()*\n \n \t\tCan also be used as a |method|: >\n \t\t\tGetName()->hlexists()\n+<\n+hlget([{name} [, {resolve}]])\t\t\t\t*hlget()*\n+\t\tReturns a List of all the highlight group attributes.  If the\n+\t\toptional {name} is specified, then returns a List with only\n+\t\tthe attributes of the specified highlight group.  Returns an\n+\t\tempty List if the highlight group {name} is not present.\n+\n+\t\tIf the optional {resolve} argument is set to v:true and the\n+\t\thighlight group {name} is linked to another group, then the\n+\t\tlink is resolved recursively and the attributes of the\n+\t\tresolved highlight group are returned.\n+\n+\t\tEach entry in the returned List is a Dictionary with the\n+\t\tfollowing items:\n+\t\t\tcleared\tBoolean flag, set to v:true if the highlight\n+\t\t\t\tgroup attributes are cleared or not yet\n+\t\t\t\tspecified.  See |highlight-clear|.\n+\t\t\tcterm\tcterm attributes. See |highlight-cterm|.\n+\t\t\tctermbg\tcterm background color.\n+\t\t\t\tSee |highlight-ctermbg|.\n+\t\t\tctermfg\tcterm foreground color.\n+\t\t\t\tSee |highlight-ctermfg|.\n+\t\t\tgui\tgui attributes. See |highlight-gui|.\n+\t\t\tguibg\tgui background color.  See |highlight-guibg|.\n+\t\t\tguifg\tgui foreground color.  See |highlight-guifg|.\n+\t\t\tguisp\tgui special color.  See |highlight-guisp|.\n+\t\t\tid\thighlight group ID.\n+\t\t\tlinksto\tlinked highlight group name.\n+\t\t\t\tSee |:highlight-link|.\n+\t\t\tname\thighlight group name. See |group-name|.\n+\n+\t\tThe \"cterm\" and \"gui\" items in the above Dictionary\n+\t\thave a dictionary value with the following optional boolean\n+\t\titems: \"bold\", \"standout\", \"underline\", \"undercurl\", \"italic\",\n+\t\t\"reverse\", \"inverse\" and \"strikethrough\".\n+\n+\t\tExample(s): >\n+\t\t\t:echo hlget()\n+\t\t\t:echo hlget('ModeMsg')\n+\t\t\t:echo hlget('Number', v:true)\n+<\n+\t\tCan also be used as a |method|: >\n+\t\t\tGetName()->hlget()\n+<\n+hlset({list})\t\t\t\t\t\t*hlset()*\n+\t\tCreates or modifies the attributes of a List of highlight\n+\t\tgroups.  Each item in {list} is a dictionary containing the\n+\t\tattributes of a highlight group. See |hlget()| for the list of\n+\t\tsupported items in this dictionary.\n+\n+\t\tThe highlight group is identified using the \"name\" item and\n+\t\tthe \"id\" item (if supplied) is ignored.  If a highlight group\n+\t\twith a specified name doesn't exist, then it is created.\n+\t\tOtherwise the attributes of an existing highlight group are\n+\t\tmodified.\n+\n+\t\tIf an empty dictionary value is used for the \"cterm\"\n+\t\tor \"gui\" entries, then the corresponding attributes are\n+\t\tcleared.  If the \"cleared\" item is set to v:true, then all the\n+\t\tattributes of the highlight group are cleared.\n+\n+\t\tThe \"linksto\" item can be used to link a highlight group to\n+\t\tanother highlight group.  See |:highlight-link|.\n+\n+\t\tReturns zero for success, -1 for failure.\n+\n+\t\tExample(s): >\n+\t\t\t\" add bold attribute to the Visual highlight group\n+\t\t\t:call hlset([#{name: 'Visual',\n+\t\t\t\t\t\\ term: #{reverse: 1 , bold: 1}}])",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002269953",
            "id": 1002269953,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vW0B",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 4051,
            "original_position": 82,
            "original_start_line": null,
            "path": "runtime/doc/builtin.txt",
            "position": null,
            "pull_request_review_id": 1151677349,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002269953/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-10-22T00:16:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002269953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002270448"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270448"
                }
            },
            "author_association": "MEMBER",
            "body": "The two added headers are no longer needed.",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:19:00Z",
            "diff_hunk": "@@ -18,7 +18,9 @@\n #include \"nvim/cursor_shape.h\"\n #include \"nvim/drawscreen.h\"\n #include \"nvim/eval.h\"\n+#include \"nvim/eval/typval.h\"\n #include \"nvim/eval/vars.h\"\n+#include \"nvim/ex_cmds2.h\"",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002270448",
            "id": 1002270448,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vW7w",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 23,
            "original_position": 6,
            "original_start_line": 21,
            "path": "src/nvim/syntax.c",
            "position": null,
            "pull_request_review_id": 1151677887,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270448/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T00:19:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270448",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002270474"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270474"
                }
            },
            "author_association": "MEMBER",
            "body": "This is no longer needed.",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:19:11Z",
            "diff_hunk": "@@ -4,6 +4,7 @@\n #include <stdbool.h>\n \n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/funcs.h\"",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002270474",
            "id": 1002270474,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vW8K",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 7,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/syntax.h",
            "position": null,
            "pull_request_review_id": 1151677920,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270474/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-10-22T00:19:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002270635"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270635"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Convert each of the highlight attribute bits (bold, standout, underline,\r\n/// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\r\n/// the attribute name as the key.\r\n```",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:19:54Z",
            "diff_hunk": "@@ -2901,6 +2901,387 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002270635",
            "id": 1002270635,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vW-r",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 2907,
            "original_position": 7,
            "original_start_line": 2904,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151678076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270635/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T00:28:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002270733"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270733"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Return the attributes of the highlight group at index 'hl_idx' as a\r\n/// Dictionary. If 'resolve_link' is true, then resolves the highlight group\r\n/// links recursively.\r\n```",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:20:38Z",
            "diff_hunk": "@@ -2901,6 +2901,387 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002270733",
            "id": 1002270733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vXAN",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 2928,
            "original_position": 28,
            "original_start_line": 2925,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151678076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270733/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T00:28:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002270733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002271211"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002271211"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// \"hlget([name])\" function\r\n/// Return the attributes of a specific highlight group (if specified) or all\r\n/// the highlight groups.\r\n```",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:23:49Z",
            "diff_hunk": "@@ -2901,6 +2901,387 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002271211",
            "id": 1002271211,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vXHr",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 3026,
            "original_position": 126,
            "original_start_line": 3023,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151678076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002271211/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T00:28:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002271211",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002271518"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002271518"
                }
            },
            "author_association": "MEMBER",
            "body": "Port the `tv_check_for_opt_string_arg()` and `tv_check_for_opt_bool_arg()` to `eval/typval.c`",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:25:11Z",
            "diff_hunk": "@@ -2901,6 +2901,387 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+\n+void f_hlget(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\n+{\n+  list_T *list;\n+  dict_T *dict;\n+  int i;\n+  const char *hlarg = NULL;\n+  bool resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    if (argvars[0].v_type != VAR_STRING) {\n+      emsg(\"E1174: String required for argument 0\");\n+      return;\n+    } else if (argvars[1].v_type != VAR_UNKNOWN\n+               && (argvars[1].v_type != VAR_BOOL\n+                   && !(argvars[1].v_type == VAR_NUMBER\n+                        && (argvars[1].vval.v_number == 0\n+                            || argvars[1].vval.v_number == 1)))) {\n+      emsg(\"E1212: Bool required for argument 1\");\n+      return;\n+    }\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002271518",
            "id": 1002271518,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vXMe",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 3041,
            "original_position": 149,
            "original_start_line": 3037,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151678076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002271518/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T00:28:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002271518",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002272541"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272541"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Returns the string value at 'dict[key]'. Returns NULL, if 'key' is not in\r\n/// 'dict' or the value is not a string type. If the value is not a string type\r\n/// or is NULL, then 'error' is set to true.\r\n```",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:27:46Z",
            "diff_hunk": "@@ -2901,6 +2901,387 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+\n+void f_hlget(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\n+{\n+  list_T *list;\n+  dict_T *dict;\n+  int i;\n+  const char *hlarg = NULL;\n+  bool resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    if (argvars[0].v_type != VAR_STRING) {\n+      emsg(\"E1174: String required for argument 0\");\n+      return;\n+    } else if (argvars[1].v_type != VAR_UNKNOWN\n+               && (argvars[1].v_type != VAR_BOOL\n+                   && !(argvars[1].v_type == VAR_NUMBER\n+                        && (argvars[1].vval.v_number == 0\n+                            || argvars[1].vval.v_number == 1)))) {\n+      emsg(\"E1212: Bool required for argument 1\");\n+      return;\n+    }\n+  }\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    // highlight group name supplied\n+    hlarg = tv_get_string_chk(&argvars[0]);\n+    if (hlarg == NULL) {\n+      return;\n+    }\n+\n+    if (argvars[1].v_type != VAR_UNKNOWN) {\n+      if (argvars[1].v_type == VAR_BOOL) {\n+        resolve_link = argvars[1].vval.v_bool == kBoolVarTrue ? true : false;\n+      } else if (argvars[1].v_type == VAR_NUMBER) {\n+        resolve_link = argvars[1].vval.v_number == 1 ? true : false;\n+      } else {\n+        return;\n+      }\n+    }\n+  }\n+\n+  list = rettv->vval.v_list;\n+  for (i = 0; i < highlight_ga.ga_len && !got_int; i++) {\n+    if (hlarg == NULL || STRICMP(hlarg, hl_table[i].sg_name) == 0) {\n+      dict = highlight_get_info(i, resolve_link);\n+      if (dict != NULL) {\n+        tv_list_append_dict(list, dict);\n+      }\n+    }\n+  }\n+}\n+\n+// Returns the string value at 'dict[key]'. Returns NULL, if 'key' is not in\n+// 'dict' or the value is not a string type. If the value is not a string type\n+// or is NULL, then 'error' is set to true.\n+",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002272541",
            "id": 1002272541,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vXcd",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 3073,
            "original_position": 183,
            "original_start_line": 3080,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151678076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272541/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T00:28:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272541",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002272578"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272578"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Convert the highlight attribute Dictionary at 'dict[key]' into a string\r\n/// value in 'attr_str' of length 'len'. Returns false if 'dict[key]' is not a\r\n/// Dictionary or is NULL.\r\n```",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:28:02Z",
            "diff_hunk": "@@ -2901,6 +2901,387 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+\n+void f_hlget(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\n+{\n+  list_T *list;\n+  dict_T *dict;\n+  int i;\n+  const char *hlarg = NULL;\n+  bool resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    if (argvars[0].v_type != VAR_STRING) {\n+      emsg(\"E1174: String required for argument 0\");\n+      return;\n+    } else if (argvars[1].v_type != VAR_UNKNOWN\n+               && (argvars[1].v_type != VAR_BOOL\n+                   && !(argvars[1].v_type == VAR_NUMBER\n+                        && (argvars[1].vval.v_number == 0\n+                            || argvars[1].vval.v_number == 1)))) {\n+      emsg(\"E1212: Bool required for argument 1\");\n+      return;\n+    }\n+  }\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    // highlight group name supplied\n+    hlarg = tv_get_string_chk(&argvars[0]);\n+    if (hlarg == NULL) {\n+      return;\n+    }\n+\n+    if (argvars[1].v_type != VAR_UNKNOWN) {\n+      if (argvars[1].v_type == VAR_BOOL) {\n+        resolve_link = argvars[1].vval.v_bool == kBoolVarTrue ? true : false;\n+      } else if (argvars[1].v_type == VAR_NUMBER) {\n+        resolve_link = argvars[1].vval.v_number == 1 ? true : false;\n+      } else {\n+        return;\n+      }\n+    }\n+  }\n+\n+  list = rettv->vval.v_list;\n+  for (i = 0; i < highlight_ga.ga_len && !got_int; i++) {\n+    if (hlarg == NULL || STRICMP(hlarg, hl_table[i].sg_name) == 0) {\n+      dict = highlight_get_info(i, resolve_link);\n+      if (dict != NULL) {\n+        tv_list_append_dict(list, dict);\n+      }\n+    }\n+  }\n+}\n+\n+// Returns the string value at 'dict[key]'. Returns NULL, if 'key' is not in\n+// 'dict' or the value is not a string type. If the value is not a string type\n+// or is NULL, then 'error' is set to true.\n+\n+static char_u *hldict_get_string(dict_T *dict, char_u *key, int *error)\n+{\n+  dictitem_T *di;\n+\n+  *error = false;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return NULL;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_STRING || di->di_tv.vval.v_string == NULL) {\n+    emsg(_(e_stringreq));\n+    *error = true;\n+    return NULL;\n+  }\n+\n+  return (char_u *)di->di_tv.vval.v_string;\n+}\n+\n+// Convert the highlight attribute Dictionary at 'dict[key]' into a string\n+// value in 'attr_str' of length 'len'. Returns false if 'dict[key]' is not a\n+// Dictionary or is NULL.\n+",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002272578",
            "id": 1002272578,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vXdC",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 3096,
            "original_position": 206,
            "original_start_line": 3103,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151678076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272578/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T00:28:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002272603"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272603"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Add or update a highlight group using 'dict' items. Returns true if\r\n/// successfully updated the highlight group.\r\n```",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:28:14Z",
            "diff_hunk": "@@ -2901,6 +2901,387 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+\n+void f_hlget(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\n+{\n+  list_T *list;\n+  dict_T *dict;\n+  int i;\n+  const char *hlarg = NULL;\n+  bool resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    if (argvars[0].v_type != VAR_STRING) {\n+      emsg(\"E1174: String required for argument 0\");\n+      return;\n+    } else if (argvars[1].v_type != VAR_UNKNOWN\n+               && (argvars[1].v_type != VAR_BOOL\n+                   && !(argvars[1].v_type == VAR_NUMBER\n+                        && (argvars[1].vval.v_number == 0\n+                            || argvars[1].vval.v_number == 1)))) {\n+      emsg(\"E1212: Bool required for argument 1\");\n+      return;\n+    }\n+  }\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    // highlight group name supplied\n+    hlarg = tv_get_string_chk(&argvars[0]);\n+    if (hlarg == NULL) {\n+      return;\n+    }\n+\n+    if (argvars[1].v_type != VAR_UNKNOWN) {\n+      if (argvars[1].v_type == VAR_BOOL) {\n+        resolve_link = argvars[1].vval.v_bool == kBoolVarTrue ? true : false;\n+      } else if (argvars[1].v_type == VAR_NUMBER) {\n+        resolve_link = argvars[1].vval.v_number == 1 ? true : false;\n+      } else {\n+        return;\n+      }\n+    }\n+  }\n+\n+  list = rettv->vval.v_list;\n+  for (i = 0; i < highlight_ga.ga_len && !got_int; i++) {\n+    if (hlarg == NULL || STRICMP(hlarg, hl_table[i].sg_name) == 0) {\n+      dict = highlight_get_info(i, resolve_link);\n+      if (dict != NULL) {\n+        tv_list_append_dict(list, dict);\n+      }\n+    }\n+  }\n+}\n+\n+// Returns the string value at 'dict[key]'. Returns NULL, if 'key' is not in\n+// 'dict' or the value is not a string type. If the value is not a string type\n+// or is NULL, then 'error' is set to true.\n+\n+static char_u *hldict_get_string(dict_T *dict, char_u *key, int *error)\n+{\n+  dictitem_T *di;\n+\n+  *error = false;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return NULL;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_STRING || di->di_tv.vval.v_string == NULL) {\n+    emsg(_(e_stringreq));\n+    *error = true;\n+    return NULL;\n+  }\n+\n+  return (char_u *)di->di_tv.vval.v_string;\n+}\n+\n+// Convert the highlight attribute Dictionary at 'dict[key]' into a string\n+// value in 'attr_str' of length 'len'. Returns false if 'dict[key]' is not a\n+// Dictionary or is NULL.\n+\n+static int hldict_attr_to_str(dict_T *dict, char_u *key, char_u *attr_str, int len)\n+{\n+  dictitem_T *di;\n+  dict_T *attrdict;\n+  int i;\n+\n+  attr_str[0] = NUL;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return true;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_DICT || di->di_tv.vval.v_dict == NULL) {\n+    emsg(_(e_dictreq));\n+    return false;\n+  }\n+\n+  attrdict = di->di_tv.vval.v_dict;\n+\n+  // If the attribute dict is empty, then return NONE to clear the attributes\n+  if (attrdict->dv_hashtab.ht_used == 0) {\n+    STRCAT(attr_str, (char_u *)\"NONE\");\n+    return true;\n+  }\n+\n+  for (i = 0; i < (int)(sizeof(hl_name_table)/sizeof(hl_name_table[0])); i++) {\n+    if (tv_dict_get_number(attrdict, (const char *)hl_name_table[i]) == 1) {\n+      if (attr_str[0] != NUL) {\n+        STRCAT(attr_str, (char_u *)\",\");\n+      }\n+      STRCAT(attr_str, (char_u *)hl_name_table[i]);\n+    }\n+  }\n+\n+  return true;\n+}\n+\n+// Add or update a highlight group using 'dict' items. Returns true if\n+// successfully updated the highlight group.\n+",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002272603",
            "id": 1002272603,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vXdb",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 3136,
            "original_position": 246,
            "original_start_line": 3144,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151678076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272603/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T00:28:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272603",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002272633"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272633"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// \"hlset([{highlight_attr}])\" function\r\n/// Add or modify highlight groups\r\n```",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:28:27Z",
            "diff_hunk": "@@ -2901,6 +2901,387 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+\n+void f_hlget(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\n+{\n+  list_T *list;\n+  dict_T *dict;\n+  int i;\n+  const char *hlarg = NULL;\n+  bool resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    if (argvars[0].v_type != VAR_STRING) {\n+      emsg(\"E1174: String required for argument 0\");\n+      return;\n+    } else if (argvars[1].v_type != VAR_UNKNOWN\n+               && (argvars[1].v_type != VAR_BOOL\n+                   && !(argvars[1].v_type == VAR_NUMBER\n+                        && (argvars[1].vval.v_number == 0\n+                            || argvars[1].vval.v_number == 1)))) {\n+      emsg(\"E1212: Bool required for argument 1\");\n+      return;\n+    }\n+  }\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    // highlight group name supplied\n+    hlarg = tv_get_string_chk(&argvars[0]);\n+    if (hlarg == NULL) {\n+      return;\n+    }\n+\n+    if (argvars[1].v_type != VAR_UNKNOWN) {\n+      if (argvars[1].v_type == VAR_BOOL) {\n+        resolve_link = argvars[1].vval.v_bool == kBoolVarTrue ? true : false;\n+      } else if (argvars[1].v_type == VAR_NUMBER) {\n+        resolve_link = argvars[1].vval.v_number == 1 ? true : false;\n+      } else {\n+        return;\n+      }\n+    }\n+  }\n+\n+  list = rettv->vval.v_list;\n+  for (i = 0; i < highlight_ga.ga_len && !got_int; i++) {\n+    if (hlarg == NULL || STRICMP(hlarg, hl_table[i].sg_name) == 0) {\n+      dict = highlight_get_info(i, resolve_link);\n+      if (dict != NULL) {\n+        tv_list_append_dict(list, dict);\n+      }\n+    }\n+  }\n+}\n+\n+// Returns the string value at 'dict[key]'. Returns NULL, if 'key' is not in\n+// 'dict' or the value is not a string type. If the value is not a string type\n+// or is NULL, then 'error' is set to true.\n+\n+static char_u *hldict_get_string(dict_T *dict, char_u *key, int *error)\n+{\n+  dictitem_T *di;\n+\n+  *error = false;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return NULL;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_STRING || di->di_tv.vval.v_string == NULL) {\n+    emsg(_(e_stringreq));\n+    *error = true;\n+    return NULL;\n+  }\n+\n+  return (char_u *)di->di_tv.vval.v_string;\n+}\n+\n+// Convert the highlight attribute Dictionary at 'dict[key]' into a string\n+// value in 'attr_str' of length 'len'. Returns false if 'dict[key]' is not a\n+// Dictionary or is NULL.\n+\n+static int hldict_attr_to_str(dict_T *dict, char_u *key, char_u *attr_str, int len)\n+{\n+  dictitem_T *di;\n+  dict_T *attrdict;\n+  int i;\n+\n+  attr_str[0] = NUL;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return true;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_DICT || di->di_tv.vval.v_dict == NULL) {\n+    emsg(_(e_dictreq));\n+    return false;\n+  }\n+\n+  attrdict = di->di_tv.vval.v_dict;\n+\n+  // If the attribute dict is empty, then return NONE to clear the attributes\n+  if (attrdict->dv_hashtab.ht_used == 0) {\n+    STRCAT(attr_str, (char_u *)\"NONE\");\n+    return true;\n+  }\n+\n+  for (i = 0; i < (int)(sizeof(hl_name_table)/sizeof(hl_name_table[0])); i++) {\n+    if (tv_dict_get_number(attrdict, (const char *)hl_name_table[i]) == 1) {\n+      if (attr_str[0] != NUL) {\n+        STRCAT(attr_str, (char_u *)\",\");\n+      }\n+      STRCAT(attr_str, (char_u *)hl_name_table[i]);\n+    }\n+  }\n+\n+  return true;\n+}\n+\n+// Add or update a highlight group using 'dict' items. Returns true if\n+// successfully updated the highlight group.\n+\n+static int hlg_add_or_update(dict_T *dict)\n+{\n+  char_u *name;\n+  int error;\n+  char_u cterm_attr[80];\n+  char_u gui_attr[80];\n+  char_u *ctermfg;\n+  char_u *ctermbg;\n+  char_u *guifg;\n+  char_u *guibg;\n+  char_u *guisp;\n+\n+  name = hldict_get_string(dict, (char_u *)\"name\", &error);\n+  if (name == NULL || error) {\n+    return false;\n+  }\n+\n+  if (tv_dict_find(dict, \"linksto\", -1) != NULL) {\n+    char_u *linksto;\n+\n+    // link highlight groups\n+    linksto = hldict_get_string(dict, (char_u *)\"linksto\", &error);\n+    if (linksto == NULL || error) {\n+      return false;\n+    }\n+\n+    vim_snprintf((char *)IObuff, IOSIZE, \"link %s %s\", name, linksto);\n+    do_highlight((char *)IObuff, false, false);\n+\n+    return true;\n+  }\n+\n+  if (tv_dict_find(dict, \"cleared\", -1) != NULL) {\n+    varnumber_T cleared;\n+\n+    // clear a highlight group\n+    cleared = tv_dict_get_number(dict, (const char *)\"cleared\");\n+    if (cleared == true) {\n+      vim_snprintf((char *)IObuff, IOSIZE, \"clear %s\", name);\n+      do_highlight((char *)IObuff, false, false);\n+    }\n+\n+    return true;\n+  }\n+\n+  if (!hldict_attr_to_str(dict, (char_u *)\"cterm\", cterm_attr,\n+                          sizeof(cterm_attr))) {\n+    return false;\n+  }\n+\n+  ctermfg = hldict_get_string(dict, (char_u *)\"ctermfg\", &error);\n+  if (error) {\n+    return false;\n+  }\n+\n+  ctermbg = hldict_get_string(dict, (char_u *)\"ctermbg\", &error);\n+  if (error) {\n+    return false;\n+  }\n+\n+  if (!hldict_attr_to_str(dict, (char_u *)\"gui\", gui_attr,\n+                          sizeof(gui_attr))) {\n+    return false;\n+  }\n+\n+  guifg = hldict_get_string(dict, (char_u *)\"guifg\", &error);\n+  if (error) {\n+    return false;\n+  }\n+\n+  guibg = hldict_get_string(dict, (char_u *)\"guibg\", &error);\n+  if (error) {\n+    return false;\n+  }\n+\n+  guisp = hldict_get_string(dict, (char_u *)\"guisp\", &error);\n+  if (error) {\n+    return false;\n+  }\n+\n+  // If none of the attributes are specified, then do nothing.\n+  if (cterm_attr[0] == NUL && ctermfg == NULL && ctermbg == NULL\n+      && gui_attr[0] == NUL && guifg == NULL && guibg == NULL && guisp == NULL) {\n+    return true;\n+  }\n+\n+  vim_snprintf((char *)IObuff, IOSIZE,\n+               \"%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s\",\n+               name,\n+               cterm_attr[0] != NUL ? \"cterm=\" : \"\",\n+               cterm_attr[0] != NUL ? cterm_attr : (char_u *)\"\",\n+               ctermfg != NULL ? \"ctermfg=\" : \"\",\n+               ctermfg != NULL ? ctermfg : (char_u *)\"\",\n+               ctermbg != NULL ? \"ctermbg=\" : \"\",\n+               ctermbg != NULL ? ctermbg : (char_u *)\"\",\n+               gui_attr[0] != NUL ? \"gui=\" : \"\",\n+               gui_attr[0] != NUL ? gui_attr : (char_u *)\"\",\n+               guifg != NULL ? \"guifg=\" : \"\",\n+               guifg != NULL ? guifg : (char_u *)\"\",\n+               guibg != NULL ? \"guibg=\" : \"\",\n+               guibg != NULL ? guibg : (char_u *)\"\",\n+               guisp != NULL ? \"guisp=\" : \"\",\n+               guisp != NULL ? guisp : (char_u *)\"\");\n+\n+  do_highlight((char *)IObuff, false, false);\n+\n+  return true;\n+}\n+\n+// \"hlset([{highlight_attr}])\" function\n+// Add or modify highlight groups\n+",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002272633",
            "id": 1002272633,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vXd5",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 3248,
            "original_position": 358,
            "original_start_line": 3256,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151678076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272633/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T00:28:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002272633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002274054"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002274054"
                }
            },
            "author_association": "MEMBER",
            "body": "This is obviously wrong as it treats a number larger than 1 as `false`. Not sure what to do here. Maybe just `#define tv_get_bool_chk tv_get_number_chk`?",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:30:26Z",
            "diff_hunk": "@@ -2901,6 +2901,387 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+\n+void f_hlget(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\n+{\n+  list_T *list;\n+  dict_T *dict;\n+  int i;\n+  const char *hlarg = NULL;\n+  bool resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    if (argvars[0].v_type != VAR_STRING) {\n+      emsg(\"E1174: String required for argument 0\");\n+      return;\n+    } else if (argvars[1].v_type != VAR_UNKNOWN\n+               && (argvars[1].v_type != VAR_BOOL\n+                   && !(argvars[1].v_type == VAR_NUMBER\n+                        && (argvars[1].vval.v_number == 0\n+                            || argvars[1].vval.v_number == 1)))) {\n+      emsg(\"E1212: Bool required for argument 1\");\n+      return;\n+    }\n+  }\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    // highlight group name supplied\n+    hlarg = tv_get_string_chk(&argvars[0]);\n+    if (hlarg == NULL) {\n+      return;\n+    }\n+\n+    if (argvars[1].v_type != VAR_UNKNOWN) {\n+      if (argvars[1].v_type == VAR_BOOL) {\n+        resolve_link = argvars[1].vval.v_bool == kBoolVarTrue ? true : false;\n+      } else if (argvars[1].v_type == VAR_NUMBER) {\n+        resolve_link = argvars[1].vval.v_number == 1 ? true : false;",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002274054",
            "id": 1002274054,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vX0G",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 3062,
            "original_position": 162,
            "original_start_line": 3059,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151683458,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002274054/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T00:32:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002274054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002281098"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002281098"
                }
            },
            "author_association": "MEMBER",
            "body": "This also treats numbers larger than 1 as `false`.",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T00:32:33Z",
            "diff_hunk": "@@ -2901,6 +2901,387 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+// Convert each of the highlight attribute bits (bold, standout, underline,\n+// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+// Return the attributes of the highlight group at index 'hl_idx' as a\n+// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+// \"hlget([name])\" function\n+// Return the attributes of a specific highlight group (if specified) or all\n+// the highlight groups.\n+\n+void f_hlget(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\n+{\n+  list_T *list;\n+  dict_T *dict;\n+  int i;\n+  const char *hlarg = NULL;\n+  bool resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    if (argvars[0].v_type != VAR_STRING) {\n+      emsg(\"E1174: String required for argument 0\");\n+      return;\n+    } else if (argvars[1].v_type != VAR_UNKNOWN\n+               && (argvars[1].v_type != VAR_BOOL\n+                   && !(argvars[1].v_type == VAR_NUMBER\n+                        && (argvars[1].vval.v_number == 0\n+                            || argvars[1].vval.v_number == 1)))) {\n+      emsg(\"E1212: Bool required for argument 1\");\n+      return;\n+    }\n+  }\n+\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    // highlight group name supplied\n+    hlarg = tv_get_string_chk(&argvars[0]);\n+    if (hlarg == NULL) {\n+      return;\n+    }\n+\n+    if (argvars[1].v_type != VAR_UNKNOWN) {\n+      if (argvars[1].v_type == VAR_BOOL) {\n+        resolve_link = argvars[1].vval.v_bool == kBoolVarTrue ? true : false;\n+      } else if (argvars[1].v_type == VAR_NUMBER) {\n+        resolve_link = argvars[1].vval.v_number == 1 ? true : false;\n+      } else {\n+        return;\n+      }\n+    }\n+  }\n+\n+  list = rettv->vval.v_list;\n+  for (i = 0; i < highlight_ga.ga_len && !got_int; i++) {\n+    if (hlarg == NULL || STRICMP(hlarg, hl_table[i].sg_name) == 0) {\n+      dict = highlight_get_info(i, resolve_link);\n+      if (dict != NULL) {\n+        tv_list_append_dict(list, dict);\n+      }\n+    }\n+  }\n+}\n+\n+// Returns the string value at 'dict[key]'. Returns NULL, if 'key' is not in\n+// 'dict' or the value is not a string type. If the value is not a string type\n+// or is NULL, then 'error' is set to true.\n+\n+static char_u *hldict_get_string(dict_T *dict, char_u *key, int *error)\n+{\n+  dictitem_T *di;\n+\n+  *error = false;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return NULL;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_STRING || di->di_tv.vval.v_string == NULL) {\n+    emsg(_(e_stringreq));\n+    *error = true;\n+    return NULL;\n+  }\n+\n+  return (char_u *)di->di_tv.vval.v_string;\n+}\n+\n+// Convert the highlight attribute Dictionary at 'dict[key]' into a string\n+// value in 'attr_str' of length 'len'. Returns false if 'dict[key]' is not a\n+// Dictionary or is NULL.\n+\n+static int hldict_attr_to_str(dict_T *dict, char_u *key, char_u *attr_str, int len)\n+{\n+  dictitem_T *di;\n+  dict_T *attrdict;\n+  int i;\n+\n+  attr_str[0] = NUL;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return true;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_DICT || di->di_tv.vval.v_dict == NULL) {\n+    emsg(_(e_dictreq));\n+    return false;\n+  }\n+\n+  attrdict = di->di_tv.vval.v_dict;\n+\n+  // If the attribute dict is empty, then return NONE to clear the attributes\n+  if (attrdict->dv_hashtab.ht_used == 0) {\n+    STRCAT(attr_str, (char_u *)\"NONE\");\n+    return true;\n+  }\n+\n+  for (i = 0; i < (int)(sizeof(hl_name_table)/sizeof(hl_name_table[0])); i++) {\n+    if (tv_dict_get_number(attrdict, (const char *)hl_name_table[i]) == 1) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002281098",
            "id": 1002281098,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47vZiK",
            "original_commit_id": "ed8d2d78b71a68f77f48129de5a712ad5924c1bc",
            "original_line": 3133,
            "original_position": 233,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151683458,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002281098/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-10-22T00:32:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002281098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002441337"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002441337"
                }
            },
            "author_association": "MEMBER",
            "body": "`tv_dict_len()`",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T10:56:08Z",
            "diff_hunk": "@@ -2901,6 +2901,376 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+/// Convert each of the highlight attribute bits (bold, standout, underline,\n+/// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+/// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+/// Return the attributes of the highlight group at index 'hl_idx' as a\n+/// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+/// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+/// \"hlget([name])\" function\n+/// Return the attributes of a specific highlight group (if specified) or all\n+/// the highlight groups.\n+\n+void f_hlget(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\n+{\n+  list_T *list;\n+  dict_T *dict;\n+  int i;\n+  const char *hlarg = NULL;\n+  bool resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (tv_check_for_opt_string_arg(argvars, 0) == FAIL\n+      || (argvars[0].v_type != VAR_UNKNOWN\n+          && tv_check_for_opt_bool_arg(argvars, 1) == FAIL)) {\n+    return;\n+  }\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    // highlight group name supplied\n+    hlarg = tv_get_string_chk(&argvars[0]);\n+    if (hlarg == NULL) {\n+      return;\n+    }\n+\n+    if (argvars[1].v_type != VAR_UNKNOWN) {\n+      bool error = false;\n+\n+      resolve_link = tv_get_bool_chk(&argvars[1], &error);\n+      if (error) {\n+        return;\n+      }\n+    }\n+  }\n+\n+  list = rettv->vval.v_list;\n+  for (i = 0; i < highlight_ga.ga_len && !got_int; i++) {\n+    if (hlarg == NULL || STRICMP(hlarg, hl_table[i].sg_name) == 0) {\n+      dict = highlight_get_info(i, resolve_link);\n+      if (dict != NULL) {\n+        tv_list_append_dict(list, dict);\n+      }\n+    }\n+  }\n+}\n+\n+/// Returns the string value at 'dict[key]'. Returns NULL, if 'key' is not in\n+/// 'dict' or the value is not a string type. If the value is not a string type\n+/// or is NULL, then 'error' is set to true.\n+\n+static char_u *hldict_get_string(dict_T *dict, char_u *key, int *error)\n+{\n+  dictitem_T *di;\n+\n+  *error = false;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return NULL;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_STRING || di->di_tv.vval.v_string == NULL) {\n+    emsg(_(e_stringreq));\n+    *error = true;\n+    return NULL;\n+  }\n+\n+  return (char_u *)di->di_tv.vval.v_string;\n+}\n+\n+/// Convert the highlight attribute Dictionary at 'dict[key]' into a string\n+/// value in 'attr_str' of length 'len'. Returns false if 'dict[key]' is not a\n+/// Dictionary or is NULL.\n+\n+static int hldict_attr_to_str(dict_T *dict, char_u *key, char_u *attr_str, int len)\n+{\n+  dictitem_T *di;\n+  dict_T *attrdict;\n+  int i;\n+\n+  attr_str[0] = NUL;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return true;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_DICT || di->di_tv.vval.v_dict == NULL) {\n+    emsg(_(e_dictreq));\n+    return false;\n+  }\n+\n+  attrdict = di->di_tv.vval.v_dict;\n+\n+  // If the attribute dict is empty, then return NONE to clear the attributes\n+  if (attrdict->dv_hashtab.ht_used == 0) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002441337",
            "id": 1002441337,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47wAp5",
            "original_commit_id": "ba15a766b3cb5f889331a52c64eefb3ef0977fdd",
            "original_line": 3117,
            "original_position": 217,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151926144,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002441337/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-10-22T10:56:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002441337",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002441525"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002441525"
                }
            },
            "author_association": "MEMBER",
            "body": "Redundant casts",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T10:56:58Z",
            "diff_hunk": "@@ -2901,6 +2901,376 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+/// Convert each of the highlight attribute bits (bold, standout, underline,\n+/// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+/// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+/// Return the attributes of the highlight group at index 'hl_idx' as a\n+/// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+/// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {\n+    // If only 'name' is present, then the highlight group is cleared.\n+    tv_dict_add_bool(dict, S_LEN(\"cleared\"), kBoolVarTrue);\n+  }\n+\n+  return dict;\n+\n+error:\n+  xfree(dict);\n+  return NULL;\n+}\n+\n+/// \"hlget([name])\" function\n+/// Return the attributes of a specific highlight group (if specified) or all\n+/// the highlight groups.\n+\n+void f_hlget(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\n+{\n+  list_T *list;\n+  dict_T *dict;\n+  int i;\n+  const char *hlarg = NULL;\n+  bool resolve_link = false;\n+\n+  tv_list_alloc_ret(rettv, kListLenMayKnow);\n+\n+  if (tv_check_for_opt_string_arg(argvars, 0) == FAIL\n+      || (argvars[0].v_type != VAR_UNKNOWN\n+          && tv_check_for_opt_bool_arg(argvars, 1) == FAIL)) {\n+    return;\n+  }\n+  if (argvars[0].v_type != VAR_UNKNOWN) {\n+    // highlight group name supplied\n+    hlarg = tv_get_string_chk(&argvars[0]);\n+    if (hlarg == NULL) {\n+      return;\n+    }\n+\n+    if (argvars[1].v_type != VAR_UNKNOWN) {\n+      bool error = false;\n+\n+      resolve_link = tv_get_bool_chk(&argvars[1], &error);\n+      if (error) {\n+        return;\n+      }\n+    }\n+  }\n+\n+  list = rettv->vval.v_list;\n+  for (i = 0; i < highlight_ga.ga_len && !got_int; i++) {\n+    if (hlarg == NULL || STRICMP(hlarg, hl_table[i].sg_name) == 0) {\n+      dict = highlight_get_info(i, resolve_link);\n+      if (dict != NULL) {\n+        tv_list_append_dict(list, dict);\n+      }\n+    }\n+  }\n+}\n+\n+/// Returns the string value at 'dict[key]'. Returns NULL, if 'key' is not in\n+/// 'dict' or the value is not a string type. If the value is not a string type\n+/// or is NULL, then 'error' is set to true.\n+\n+static char_u *hldict_get_string(dict_T *dict, char_u *key, int *error)\n+{\n+  dictitem_T *di;\n+\n+  *error = false;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return NULL;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_STRING || di->di_tv.vval.v_string == NULL) {\n+    emsg(_(e_stringreq));\n+    *error = true;\n+    return NULL;\n+  }\n+\n+  return (char_u *)di->di_tv.vval.v_string;\n+}\n+\n+/// Convert the highlight attribute Dictionary at 'dict[key]' into a string\n+/// value in 'attr_str' of length 'len'. Returns false if 'dict[key]' is not a\n+/// Dictionary or is NULL.\n+\n+static int hldict_attr_to_str(dict_T *dict, char_u *key, char_u *attr_str, int len)\n+{\n+  dictitem_T *di;\n+  dict_T *attrdict;\n+  int i;\n+\n+  attr_str[0] = NUL;\n+  di = tv_dict_find(dict, (const char *)key, -1);\n+  if (di == NULL) {\n+    return true;\n+  }\n+\n+  if (di->di_tv.v_type != VAR_DICT || di->di_tv.vval.v_dict == NULL) {\n+    emsg(_(e_dictreq));\n+    return false;\n+  }\n+\n+  attrdict = di->di_tv.vval.v_dict;\n+\n+  // If the attribute dict is empty, then return NONE to clear the attributes\n+  if (attrdict->dv_hashtab.ht_used == 0) {\n+    STRCAT(attr_str, (char_u *)\"NONE\");\n+    return true;\n+  }\n+\n+  for (i = 0; i < (int)(sizeof(hl_name_table)/sizeof(hl_name_table[0])); i++) {\n+    if (tv_dict_get_number(attrdict, (const char *)hl_name_table[i]) > 0) {\n+      if (attr_str[0] != NUL) {\n+        STRCAT(attr_str, (char_u *)\",\");\n+      }\n+      STRCAT(attr_str, (char_u *)hl_name_table[i]);\n+    }\n+  }\n+\n+  return true;\n+}\n+\n+/// Add or update a highlight group using 'dict' items. Returns true if\n+/// successfully updated the highlight group.\n+\n+static int hlg_add_or_update(dict_T *dict)\n+{\n+  char_u *name;\n+  int error;\n+  char_u cterm_attr[80];\n+  char_u gui_attr[80];\n+  char_u *ctermfg;\n+  char_u *ctermbg;\n+  char_u *guifg;\n+  char_u *guibg;\n+  char_u *guisp;\n+\n+  name = hldict_get_string(dict, (char_u *)\"name\", &error);\n+  if (name == NULL || error) {\n+    return false;\n+  }\n+\n+  if (tv_dict_find(dict, \"linksto\", -1) != NULL) {\n+    char_u *linksto;\n+\n+    // link highlight groups\n+    linksto = hldict_get_string(dict, (char_u *)\"linksto\", &error);\n+    if (linksto == NULL || error) {\n+      return false;\n+    }\n+\n+    vim_snprintf((char *)IObuff, IOSIZE, \"link %s %s\", name, linksto);\n+    do_highlight((char *)IObuff, false, false);",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002441525",
            "id": 1002441525,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47wAs1",
            "original_commit_id": "ba15a766b3cb5f889331a52c64eefb3ef0977fdd",
            "original_line": 3164,
            "original_position": 264,
            "original_start_line": 3163,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151926238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002441525/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-10-22T10:56:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002441525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16270#discussion_r1002441673"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16270"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002441673"
                }
            },
            "author_association": "MEMBER",
            "body": "`tv_dict_len()`",
            "commit_id": "ed1463a94caad7653671c6b1b02fbb409a4236df",
            "created_at": "2022-10-22T10:59:15Z",
            "diff_hunk": "@@ -2901,6 +2901,376 @@ RgbValue name_to_color(const char *name, int *idx)\n   return -1;\n }\n \n+/// Convert each of the highlight attribute bits (bold, standout, underline,\n+/// etc.) set in 'hlattr' into a separate boolean item in a Dictionary with\n+/// the attribute name as the key.\n+\n+static dict_T *highlight_get_attr_dict(int hlattr)\n+{\n+  dict_T *dict;\n+  int i;\n+\n+  dict = tv_dict_alloc();\n+\n+  for (i = 0; hl_attr_table[i] != 0; i++) {\n+    if (hlattr & hl_attr_table[i]) {\n+      tv_dict_add_bool(dict, hl_name_table[i], strlen(hl_name_table[i]), kBoolVarTrue);\n+      hlattr &= ~hl_attr_table[i];        // don't want \"inverse\"\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+/// Return the attributes of the highlight group at index 'hl_idx' as a\n+/// Dictionary. If 'resolve_link' is true, then resolves the highlight group\n+/// links recursively.\n+\n+static dict_T *highlight_get_info(int hl_idx, bool resolve_link)\n+{\n+  dict_T *dict;\n+  HlGroup *sgp;\n+  dict_T *attr_dict;\n+  int hlgid;\n+\n+  dict = tv_dict_alloc();\n+\n+  sgp = &hl_table[hl_idx];\n+  // highlight group id is 1-based\n+  hlgid = hl_idx + 1;\n+\n+  if (tv_dict_add_str(dict, S_LEN(\"name\"), (const char *)sgp->sg_name) == FAIL) {\n+    goto error;\n+  }\n+  if (tv_dict_add_nr(dict, S_LEN(\"id\"), hlgid) == FAIL) {\n+    goto error;\n+  }\n+\n+  if (sgp->sg_link && resolve_link) {\n+    // resolve the highlight group link recursively\n+    while (sgp->sg_link) {\n+      hlgid = sgp->sg_link;\n+      sgp = &hl_table[sgp->sg_link - 1];\n+    }\n+  }\n+\n+  if (sgp->sg_cterm != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_cterm);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"cterm\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_cterm_fg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermfg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_cterm_bg != 0) {\n+    if (tv_dict_add_str(dict, S_LEN(\"ctermbg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'c')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_gui != 0) {\n+    attr_dict = highlight_get_attr_dict(sgp->sg_gui);\n+    if (attr_dict != NULL) {\n+      if (tv_dict_add_dict(dict, S_LEN(\"gui\"), attr_dict) == FAIL) {\n+        goto error;\n+      }\n+    }\n+  }\n+  if (sgp->sg_rgb_fg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guifg\"),\n+                        highlight_color(hlgid, (const char *)\"fg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_bg_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guibg\"),\n+                        highlight_color(hlgid, (const char *)\"bg\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_rgb_sp_idx != kColorIdxNone) {\n+    if (tv_dict_add_str(dict, S_LEN(\"guisp\"),\n+                        highlight_color(hlgid, (const char *)\"sp\", 'g')) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (sgp->sg_link) {\n+    char_u *link;\n+\n+    link = hl_table[sgp->sg_link - 1].sg_name;\n+    if (link != NULL && tv_dict_add_str(dict, S_LEN(\"linksto\"), (char *)link) == FAIL) {\n+      goto error;\n+    }\n+  }\n+  if (dict->dv_hashtab.ht_used == 2) {",
            "html_url": "https://github.com/neovim/neovim/pull/16270#discussion_r1002441673",
            "id": 1002441673,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM47wAvJ",
            "original_commit_id": "ba15a766b3cb5f889331a52c64eefb3ef0977fdd",
            "original_line": 3011,
            "original_position": 111,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 1151926388,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002441673/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-10-22T10:59:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1002441673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Doesn't include support for highlight-start, highlight-stop, highlight-ctermul, highlight-term, highlight-font since they aren't available in neovim . Should I mark it as partial port ?\r\n\r\nAlso it seems like docs for highlight-start & stop is included but the features are not 🤷‍♂️",
            "created_at": "2021-11-09T13:31:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-964154573",
            "id": 964154573,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM45d9TN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/964154573/reactions"
            },
            "updated_at": "2021-11-09T13:31:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/964154573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Doesn't include support for highlight-start, highlight-stop, highlight-ctermul, highlight-term, highlight-font since they aren't available in neovim . Should I mark it as partial port ?\r\n\r\niirc `highlight-term` is deprecated and `start`, `stop` and `font` is ignored atm.\r\n\r\n`ctermul` needs [v8.2.0863](https://github.com/vim/vim/commit/e023e88bed3f2e0a7ea4cf10cac2de80bc9c271c) which isn't ported, so this may need to be partial",
            "created_at": "2021-11-09T14:40:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-964213913",
            "id": 964213913,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM45eLyZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/964213913/reactions"
            },
            "updated_at": "2021-11-09T14:40:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/964213913",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> so this may need to be partial'\r\n\r\nOk I've marked it as partial. Do check if this is the right way to do a partial port.\r\n\r\n> ctermul needs v8.2.0863 which isn't ported\r\n\r\nDid janlazo hand over his note book , how do you even figure out what patch is what 😆\r\n\r\nI did manage to locate v8.2.0863 patch for ctermul by blaming ctermul docs in vim repo. But couldn't get anything on start,stop,font,term .\r\n\r\nThese lone [docs](https://github.com/neovim/neovim/blob/8cbe100fcc9c5d34b07f417a82b745803fa3ef19/runtime/doc/syntax.txt#L4880-L4897) only added to the confusion .\r\nShould these docs be removed since the features aren't ported yet ?",
            "created_at": "2021-11-09T15:56:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-964286234",
            "id": 964286234,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM45edca",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/964286234/reactions"
            },
            "updated_at": "2021-11-09T16:37:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/964286234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "vim-patch.sh ignores `vim-patch:partial:` so it's techincally fine.\r\nHowever, it can be confusing because `vim-patch:` should imply full port.",
            "created_at": "2021-11-15T02:38:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-968464468",
            "id": 968464468,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM45uZhU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968464468/reactions"
            },
            "updated_at": "2021-11-15T02:39:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968464468",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Maybe this has something to do with licensing?",
            "created_at": "2021-11-15T02:41:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-968465337",
            "id": 968465337,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM45uZu5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968465337/reactions"
            },
            "updated_at": "2021-11-15T02:41:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968465337",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> However, it can be confusing because vim-patch: should imply full port.\r\n\r\nI don't remember seeing any guide for partial port . I just copied structure from newest partial patch commit on the log. Which at time was https://github.com/neovim/neovim/commit/8cbe100fcc9c5d34b07f417a82b745803fa3ef19\r\n\r\nDo let me know if partial patch is meant to be documented differently. \r\n\r\n> Maybe this has something to do with licensing?\r\n\r\n@zeertzjq sorry I have no clue what you meant. Can you please elaborate?",
            "created_at": "2021-11-15T03:39:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-968508674",
            "id": 968508674,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM45ukUC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968508674/reactions"
            },
            "updated_at": "2021-11-15T03:39:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968508674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "In <https://github.com/neovim/neovim#license>:\r\n> Neovim contributions since b17d96 are licensed under the Apache 2.0 license, except for contributions copied from Vim (identified by the vim-patch token).",
            "created_at": "2021-11-15T03:40:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-968509012",
            "id": 968509012,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM45ukZU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968509012/reactions"
            },
            "updated_at": "2021-11-15T03:43:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968509012",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Neovim contributions since b17d96 are licensed under the Apache 2.0 license, except for contributions copied from Vim (identified by the vim-patch token).\r\n\r\nThat's general case for all patches right? I thought that was the blanket statement that applied to all vim-patches to comply with vim-licence.\r\n",
            "created_at": "2021-11-15T03:41:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-968509354",
            "id": 968509354,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM45ukeq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968509354/reactions"
            },
            "updated_at": "2021-11-15T07:39:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968509354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is this not gonna be picked up?",
            "created_at": "2022-10-16T13:53:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1279974748",
            "id": 1279974748,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5MSt1c",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1279974748/reactions"
            },
            "updated_at": "2022-10-16T13:53:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1279974748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32037751?v=4",
                "events_url": "https://api.github.com/users/3N4N/events{/privacy}",
                "followers_url": "https://api.github.com/users/3N4N/followers",
                "following_url": "https://api.github.com/users/3N4N/following{/other_user}",
                "gists_url": "https://api.github.com/users/3N4N/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/3N4N",
                "id": 32037751,
                "login": "3N4N",
                "node_id": "MDQ6VXNlcjMyMDM3NzUx",
                "organizations_url": "https://api.github.com/users/3N4N/orgs",
                "received_events_url": "https://api.github.com/users/3N4N/received_events",
                "repos_url": "https://api.github.com/users/3N4N/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/3N4N/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/3N4N/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/3N4N"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@shadmansaleh can you please rebase?",
            "created_at": "2022-10-16T15:55:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1279996973",
            "id": 1279996973,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5MSzQt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1279996973/reactions"
            },
            "updated_at": "2022-10-16T15:55:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1279996973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @shadmansaleh can you please rebase?\r\n\r\nI'll try to take another look at it by the weekend.",
            "created_at": "2022-10-16T16:08:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1279999430",
            "id": 1279999430,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5MSz3G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1279999430/reactions"
            },
            "updated_at": "2022-10-16T16:08:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1279999430",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ok rebased on master and tests are passing now.",
            "created_at": "2022-10-21T17:26:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1287244801",
            "id": 1287244801,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5MucwB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1287244801/reactions"
            },
            "updated_at": "2022-10-21T17:26:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1287244801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@zeertzjq  is it ok to pull the type checker functions directly from vim source without the rest of the patches https://github.com/neovim/neovim/pull/16270/commits/f0eb636d59b247b1121c0ad310fbcd1720dde736 ?\r\n\r\nit seems to have been done before.",
            "created_at": "2022-10-22T06:10:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1287642781",
            "id": 1287642781,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5Mv96d",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1287642781/reactions"
            },
            "updated_at": "2022-10-22T06:10:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1287642781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes this has been done before.",
            "created_at": "2022-10-22T06:13:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1287643490",
            "id": 1287643490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5Mv-Fi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1287643490/reactions"
            },
            "updated_at": "2022-10-22T06:13:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1287643490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@zeertzjq Anything more to do here? I think this pull request is ready, Neovim is still missing support for `hlget()`.\r\n\r\n@shadmansaleh It looks like there are some merge conflicts that need to be resolved.",
            "created_at": "2023-08-19T13:23:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1684943009",
            "id": 1684943009,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5kbjCh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684943009/reactions"
            },
            "updated_at": "2023-08-19T13:23:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684943009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/21310755?v=4",
                "events_url": "https://api.github.com/users/vimpostor/events{/privacy}",
                "followers_url": "https://api.github.com/users/vimpostor/followers",
                "following_url": "https://api.github.com/users/vimpostor/following{/other_user}",
                "gists_url": "https://api.github.com/users/vimpostor/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vimpostor",
                "id": 21310755,
                "login": "vimpostor",
                "node_id": "MDQ6VXNlcjIxMzEwNzU1",
                "organizations_url": "https://api.github.com/users/vimpostor/orgs",
                "received_events_url": "https://api.github.com/users/vimpostor/received_events",
                "repos_url": "https://api.github.com/users/vimpostor/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vimpostor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vimpostor/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vimpostor"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "A lot of merge conflicts, not some :)",
            "created_at": "2023-08-19T13:31:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1684944551",
            "id": 1684944551,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5kbjan",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684944551/reactions"
            },
            "updated_at": "2023-08-19T13:31:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684944551",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Currently, I don't have the time or motivation to work on this. If anyone wants, can pick it up from here.",
            "created_at": "2023-08-20T16:49:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1685328437",
            "id": 1685328437,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5kdBI1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685328437/reactions"
            },
            "updated_at": "2023-08-20T16:49:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685328437",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Do we actually need these? If they are addressed by `nvim_get_hl` and `nvim_set_hl` then I propose that we:\r\n\r\n1. mark these patches as N/A\r\n2. add a note in `vim_diff.txt`\r\n\r\nGoing forward, we should avoid adding new Vim functionality if it duplicates features we already have. But it's also important to (1) mark such patches as N/A (so they don't appear in the `vim-patch.sh -l` list), and (2) mention that this is intentional in `vim_diff.txt`.",
            "created_at": "2023-09-24T17:55:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1732631222",
            "id": 1732631222,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5nRdq2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1732631222/reactions"
            },
            "updated_at": "2023-09-24T17:55:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1732631222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Going forward, we should avoid adding new Vim functionality if it duplicates features we already have.\r\n\r\nI think this is a ridiculous example for commenting this opinion, given that vim's `hlget()` existed years before `nvim_get_hl()`. In fact this very PR intending to port that function was submitted a whole 1.5 years **before** neovim even had the [`nvim_get_hl()` replacement](https://github.com/neovim/neovim/pull/22693).\r\n\r\nI would even argue for the polar opposite: If there is no technical reason why vim API wouldn't work with neovim, then there is no harm in porting over the patches so that the same API works in neovim.\r\n\r\nI would go even further and say that there is no reason to recreate equivalent functionality with completely different API like it was done in #22693. This just unnecessarily splits apart the vim communities even more, where there is absolutely no technical reason (`nvim_get_hl()` is written in C, so there was literally not a single reason to create different API for this).\r\n\r\nLet's also not ignore the fact that this PR was stalled for a year despite all review comments having been addressed.\r\n\r\nThat being said, it doesn't matter that much now (although some usecases are a bit more complicated with `nvim_get_hl()`, e.g. resolving both id and name is more involved while you get it for free with vim's `hlget()`)",
            "created_at": "2023-09-24T18:35:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1732640052",
            "id": 1732640052,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5nRf00",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1732640052/reactions"
            },
            "updated_at": "2023-09-24T18:43:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1732640052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/21310755?v=4",
                "events_url": "https://api.github.com/users/vimpostor/events{/privacy}",
                "followers_url": "https://api.github.com/users/vimpostor/followers",
                "following_url": "https://api.github.com/users/vimpostor/following{/other_user}",
                "gists_url": "https://api.github.com/users/vimpostor/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vimpostor",
                "id": 21310755,
                "login": "vimpostor",
                "node_id": "MDQ6VXNlcjIxMzEwNzU1",
                "organizations_url": "https://api.github.com/users/vimpostor/orgs",
                "received_events_url": "https://api.github.com/users/vimpostor/received_events",
                "repos_url": "https://api.github.com/users/vimpostor/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vimpostor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vimpostor/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vimpostor"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I would go even further and say that there is no reason to recreate equivalent functionality with completely different API like it was done in #22693.\r\n\r\nI agree (ignoring the footnote below). \r\n\r\nBut the sequence matters, even if it happened by accident. Somehow or other we got `nvim_set_hl`/`nvim_get_hl`, so now it doesn't make sense to also add redundant things, whatever those redundant things are, and irrespective of the timestamp on the Vim commit.\r\n\r\n> This just unnecessarily splits apart the vim communities even more\r\n\r\nThere is a fork since Vim 8, that was made clear. At this point it only makes sense for us to merge upstream Vim things that reduce _maintenance costs_, there is no goal of trying to match APIs.\r\n\r\nP.S. `nvim_set_hl`/`nvim_get_hl` have \"namespace\" support, so they are not merely a reinvention of `hlget()` and friends. But that's orthogonal to the general point.",
            "created_at": "2023-09-24T19:09:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1732646591",
            "id": 1732646591,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5nRha_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1732646591/reactions"
            },
            "updated_at": "2023-09-24T19:09:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1732646591",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> there is no technical reason why vim API wouldn't work with neovim\r\n\r\nThis is not possible, because Nvim has had highlight namespaces since 2020, so a separate API is needed anyway.",
            "created_at": "2023-09-24T22:27:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1732684360",
            "id": 1732684360,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5nRqpI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1732684360/reactions"
            },
            "updated_at": "2023-09-24T22:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1732684360",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This has been closed since a request for information has not been answered for 30 days. It can be reopened when the requested information is provided.",
            "created_at": "2023-10-25T01:47:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1778347177",
            "id": 1778347177,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5p_2yp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1778347177/reactions"
            },
            "updated_at": "2023-10-25T01:47:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1778347177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
                "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
                "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
                "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
                "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/apps/github-actions",
                "id": 41898282,
                "login": "github-actions[bot]",
                "node_id": "MDM6Qm90NDE4OTgyODI=",
                "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
                "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
                "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
                "type": "Bot",
                "url": "https://api.github.com/users/github-actions%5Bbot%5D"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Duplicating functionality is unnecessary. Neovim already has way too many ways of doing the same thing in many cases. Marking these N/A sounds all right to me.\r\n\r\nIf we want to keep vim compatibility, writing a shim around existing nvim_get_hl and nvim_set_hl makes more sense. It can probably be done in lua too. Don't necessarily need to bring in vims implementation. \r\n",
            "created_at": "2023-10-26T07:52:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/16270#issuecomment-1780596688",
            "id": 1780596688,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
            "node_id": "IC_kwDOAPphoM5qIb_Q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1780596688/reactions"
            },
            "updated_at": "2023-10-26T07:52:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1780596688",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/16270/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/16270/commits",
    "created_at": "2021-11-09T13:27:42Z",
    "diff_url": "https://github.com/neovim/neovim/pull/16270.diff",
    "draft": false,
    "head": {
        "label": "shadmansaleh:vim-8.2.3578",
        "ref": "vim-8.2.3578",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/shadmansaleh/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/shadmansaleh/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/shadmansaleh/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/shadmansaleh/neovim/branches{/branch}",
            "clone_url": "https://github.com/shadmansaleh/neovim.git",
            "collaborators_url": "https://api.github.com/repos/shadmansaleh/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/shadmansaleh/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/shadmansaleh/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/shadmansaleh/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/shadmansaleh/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/shadmansaleh/neovim/contributors",
            "created_at": "2021-03-16T15:07:33Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/shadmansaleh/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/shadmansaleh/neovim/downloads",
            "events_url": "https://api.github.com/repos/shadmansaleh/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/shadmansaleh/neovim/forks",
            "full_name": "shadmansaleh/neovim",
            "git_commits_url": "https://api.github.com/repos/shadmansaleh/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/shadmansaleh/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/shadmansaleh/neovim/git/tags{/sha}",
            "git_url": "git://github.com/shadmansaleh/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/shadmansaleh/neovim/hooks",
            "html_url": "https://github.com/shadmansaleh/neovim",
            "id": 348391941,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/shadmansaleh/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/shadmansaleh/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/shadmansaleh/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/shadmansaleh/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/shadmansaleh/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/shadmansaleh/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/shadmansaleh/neovim/merges",
            "milestones_url": "https://api.github.com/repos/shadmansaleh/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNDgzOTE5NDE=",
            "notifications_url": "https://api.github.com/repos/shadmansaleh/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/shadmansaleh/neovim/pulls{/number}",
            "pushed_at": "2023-02-26T08:47:24Z",
            "releases_url": "https://api.github.com/repos/shadmansaleh/neovim/releases{/id}",
            "size": 232682,
            "ssh_url": "git@github.com:shadmansaleh/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/shadmansaleh/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/shadmansaleh/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/shadmansaleh/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/shadmansaleh/neovim/subscription",
            "svn_url": "https://github.com/shadmansaleh/neovim",
            "tags_url": "https://api.github.com/repos/shadmansaleh/neovim/tags",
            "teams_url": "https://api.github.com/repos/shadmansaleh/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/shadmansaleh/neovim/git/trees{/sha}",
            "updated_at": "2023-02-16T19:35:07Z",
            "url": "https://api.github.com/repos/shadmansaleh/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "ed1463a94caad7653671c6b1b02fbb409a4236df",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
            "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
            "followers_url": "https://api.github.com/users/shadmansaleh/followers",
            "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
            "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/shadmansaleh",
            "id": 13149513,
            "login": "shadmansaleh",
            "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
            "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
            "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
            "repos_url": "https://api.github.com/users/shadmansaleh/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/shadmansaleh"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/16270",
    "id": 776543617,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16270",
    "labels": [
        {
            "color": "e6e6e6",
            "default": false,
            "description": "See https://github.com/neovim/neovim/wiki/Merging-patches-from-upstream-Vim",
            "id": 843184430,
            "name": "vim-patch",
            "node_id": "MDU6TGFiZWw4NDMxODQ0MzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vim-patch"
        }
    ],
    "locked": false,
    "merge_commit_sha": "30f3801fee0126e16b98c17cc7025c727ad1027b",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM4uSR2B",
    "number": 16270,
    "patch_url": "https://github.com/neovim/neovim/pull/16270.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
            "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
            "followers_url": "https://api.github.com/users/seandewar/followers",
            "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
            "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/seandewar",
            "id": 6256228,
            "login": "seandewar",
            "node_id": "MDQ6VXNlcjYyNTYyMjg=",
            "organizations_url": "https://api.github.com/users/seandewar/orgs",
            "received_events_url": "https://api.github.com/users/seandewar/received_events",
            "repos_url": "https://api.github.com/users/seandewar/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/seandewar"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
            "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
            "followers_url": "https://api.github.com/users/zeertzjq/followers",
            "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
            "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/zeertzjq",
            "id": 35768171,
            "login": "zeertzjq",
            "node_id": "MDQ6VXNlcjM1NzY4MTcx",
            "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
            "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
            "repos_url": "https://api.github.com/users/zeertzjq/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/zeertzjq"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/16270/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ed1463a94caad7653671c6b1b02fbb409a4236df",
    "title": "vim-patch:partial:8.2.3578",
    "updated_at": "2023-10-26T07:53:17Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/16270",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
        "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
        "followers_url": "https://api.github.com/users/shadmansaleh/followers",
        "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
        "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/shadmansaleh",
        "id": 13149513,
        "login": "shadmansaleh",
        "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
        "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
        "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
        "repos_url": "https://api.github.com/users/shadmansaleh/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/shadmansaleh"
    }
}