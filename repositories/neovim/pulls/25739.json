{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25739/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25739/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25739"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25739"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25739/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/05fcdb6c866894d676eecdefa994bea26332f286"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4980,
            "forks_count": 4980,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1684,
            "open_issues_count": 1684,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-11-14T01:55:00Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 230575,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 70869,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-11-14T01:48:33Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 70869,
            "watchers_count": 70869,
            "web_commit_signoff_required": false
        },
        "sha": "3a3e0251267a99eec6cfb2a058f9e992d01107fd",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Fixes https://github.com/neovim/neovim/issues/25177\r\n\r\nI initially wanted to split this into a refactor commit to make it more\r\ntestable followed by a fix, but it appears the refactor already accidentally\r\nfixed the issue by normalizing lnum/col to 0-indexing\r\n",
    "closed_at": "2023-10-23T06:26:38Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367827413"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367827413"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: Add a `@private` annotation for LuaLS to emit a warning for external callers.",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T03:09:47Z",
            "diff_hunk": "@@ -124,39 +125,77 @@ local function adjust_start_col(lnum, line, items, encoding)\n   end\n end\n \n+---@param line string line content\n+---@param lnum integer 0-indexed line number\n+---@param client_start_boundary integer 0-indexed word boundary\n+---@param server_start_boundary? integer 0-indexed word boundary, based on textEdit.range.start.character\n+---@param result lsp.CompletionList|lsp.CompletionItem[]\n+---@param encoding string\n+---@return table[] matches\n+---@return integer? server_start_boundary\n+function M._convert_results(",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367827413",
            "id": 1367827413,
            "line": 137,
            "node_id": "PRRC_kwDOAPphoM5Rh2PV",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 137,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 27,
            "pull_request_review_id": 1691360629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367827413/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-22T03:37:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367827413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367827627"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367827627"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit, feel free to dismiss: Given that only `false` and `nil` are falsy in Lua, I _think_ that this repo usually leans towards `not server_start_boundary`.\r\n\r\nAgain: Ignore me if this is too nitpicky.",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T03:12:23Z",
            "diff_hunk": "@@ -124,39 +125,77 @@ local function adjust_start_col(lnum, line, items, encoding)\n   end\n end\n \n+---@param line string line content\n+---@param lnum integer 0-indexed line number\n+---@param client_start_boundary integer 0-indexed word boundary\n+---@param server_start_boundary? integer 0-indexed word boundary, based on textEdit.range.start.character\n+---@param result lsp.CompletionList|lsp.CompletionItem[]\n+---@param encoding string\n+---@return table[] matches\n+---@return integer? server_start_boundary\n+function M._convert_results(\n+  line,\n+  lnum,\n+  client_start_boundary,\n+  server_start_boundary,\n+  result,\n+  encoding\n+)\n+  -- Completion response items may be relative to a position different than `client_start_boundary`.\n+  -- Concrete example, with lua-language-server:\n+  --\n+  -- require('plenary.asy|\n+  --         ▲       ▲   ▲\n+  --         │       │   └── cursor_pos:                     20\n+  --         │       └────── client_start_boundary:          17\n+  --         └────────────── textEdit.range.start.character: 9\n+  --                                 .newText = 'plenary.async'\n+  --                  ^^^\n+  --                  prefix (We'd remove everything not starting with `asy`,\n+  --                  so we'd eliminate the `plenary.async` result\n+  --\n+  -- `adjust_start_col` is used to prefer the language server boundary.\n+  --\n+  local candidates = get_items(result)\n+  local curstartbyte = adjust_start_col(lnum, line, candidates, encoding)\n+  if server_start_boundary == nil then",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367827627",
            "id": 1367827627,
            "line": 162,
            "node_id": "PRRC_kwDOAPphoM5Rh2Sr",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 162,
            "original_position": 51,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 52,
            "pull_request_review_id": 1691360629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367827627/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-22T03:37:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367827627",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367827997"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367827997"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't see why this `assert` is needed from the parameter type (?).",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T03:17:58Z",
            "diff_hunk": "@@ -124,39 +125,77 @@ local function adjust_start_col(lnum, line, items, encoding)\n   end\n end\n \n+---@param line string line content\n+---@param lnum integer 0-indexed line number\n+---@param client_start_boundary integer 0-indexed word boundary\n+---@param server_start_boundary? integer 0-indexed word boundary, based on textEdit.range.start.character\n+---@param result lsp.CompletionList|lsp.CompletionItem[]\n+---@param encoding string\n+---@return table[] matches\n+---@return integer? server_start_boundary\n+function M._convert_results(\n+  line,\n+  lnum,\n+  client_start_boundary,\n+  server_start_boundary,\n+  result,\n+  encoding\n+)\n+  -- Completion response items may be relative to a position different than `client_start_boundary`.\n+  -- Concrete example, with lua-language-server:\n+  --\n+  -- require('plenary.asy|\n+  --         ▲       ▲   ▲\n+  --         │       │   └── cursor_pos:                     20\n+  --         │       └────── client_start_boundary:          17\n+  --         └────────────── textEdit.range.start.character: 9\n+  --                                 .newText = 'plenary.async'\n+  --                  ^^^\n+  --                  prefix (We'd remove everything not starting with `asy`,\n+  --                  so we'd eliminate the `plenary.async` result\n+  --\n+  -- `adjust_start_col` is used to prefer the language server boundary.\n+  --\n+  local candidates = get_items(result)\n+  local curstartbyte = adjust_start_col(lnum, line, candidates, encoding)\n+  if server_start_boundary == nil then\n+    server_start_boundary = curstartbyte\n+  elseif curstartbyte ~= nil and curstartbyte ~= server_start_boundary then\n+    server_start_boundary = client_start_boundary\n+  end\n+  local prefix = line:sub((server_start_boundary or client_start_boundary) + 1)\n+  local matches = M._lsp_to_complete_items(result, prefix)\n+  return matches, server_start_boundary\n+end\n+\n ---@param findstart integer 0 or 1, decides behavior\n ---@param base integer findstart=0, text to match against\n ---@return integer|table Decided by {findstart}:\n --- - findstart=0: column where the completion starts, or -2 or -3\n --- - findstart=1: list of matches (actually just calls |complete()|)\n function M.omnifunc(findstart, base)\n+  assert(base) -- silence luals",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367827997",
            "id": 1367827997,
            "line": 178,
            "node_id": "PRRC_kwDOAPphoM5Rh2Yd",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 178,
            "original_position": 67,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 68,
            "pull_request_review_id": 1691360629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367827997/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-22T03:37:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367827997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367828131"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367828131"
                }
            },
            "author_association": "MEMBER",
            "body": "Every time I see these 3 lines I dream of the day we have something like `cursor_to_lsp_pos`...",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T03:19:24Z",
            "diff_hunk": "@@ -124,39 +125,77 @@ local function adjust_start_col(lnum, line, items, encoding)\n   end\n end\n \n+---@param line string line content\n+---@param lnum integer 0-indexed line number\n+---@param client_start_boundary integer 0-indexed word boundary\n+---@param server_start_boundary? integer 0-indexed word boundary, based on textEdit.range.start.character\n+---@param result lsp.CompletionList|lsp.CompletionItem[]\n+---@param encoding string\n+---@return table[] matches\n+---@return integer? server_start_boundary\n+function M._convert_results(\n+  line,\n+  lnum,\n+  client_start_boundary,\n+  server_start_boundary,\n+  result,\n+  encoding\n+)\n+  -- Completion response items may be relative to a position different than `client_start_boundary`.\n+  -- Concrete example, with lua-language-server:\n+  --\n+  -- require('plenary.asy|\n+  --         ▲       ▲   ▲\n+  --         │       │   └── cursor_pos:                     20\n+  --         │       └────── client_start_boundary:          17\n+  --         └────────────── textEdit.range.start.character: 9\n+  --                                 .newText = 'plenary.async'\n+  --                  ^^^\n+  --                  prefix (We'd remove everything not starting with `asy`,\n+  --                  so we'd eliminate the `plenary.async` result\n+  --\n+  -- `adjust_start_col` is used to prefer the language server boundary.\n+  --\n+  local candidates = get_items(result)\n+  local curstartbyte = adjust_start_col(lnum, line, candidates, encoding)\n+  if server_start_boundary == nil then\n+    server_start_boundary = curstartbyte\n+  elseif curstartbyte ~= nil and curstartbyte ~= server_start_boundary then\n+    server_start_boundary = client_start_boundary\n+  end\n+  local prefix = line:sub((server_start_boundary or client_start_boundary) + 1)\n+  local matches = M._lsp_to_complete_items(result, prefix)\n+  return matches, server_start_boundary\n+end\n+\n ---@param findstart integer 0 or 1, decides behavior\n ---@param base integer findstart=0, text to match against\n ---@return integer|table Decided by {findstart}:\n --- - findstart=0: column where the completion starts, or -2 or -3\n --- - findstart=1: list of matches (actually just calls |complete()|)\n function M.omnifunc(findstart, base)\n+  assert(base) -- silence luals\n   local bufnr = api.nvim_get_current_buf()\n   local clients = lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_completion })\n   local remaining = #clients\n   if remaining == 0 then\n     return findstart == 1 and -1 or {}\n   end\n \n-  local log = require('vim.lsp.log')\n-  -- Then, perform standard completion request\n-  if log.info() then\n-    log.info('base ', base)\n-  end\n-\n   local win = api.nvim_get_current_win()\n-  local pos = api.nvim_win_get_cursor(win)\n+  local cursor = api.nvim_win_get_cursor(win)\n+  local lnum = cursor[1] - 1\n+  local cursor_col = cursor[2]",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367828131",
            "id": 1367828131,
            "line": 189,
            "node_id": "PRRC_kwDOAPphoM5Rh2aj",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 189,
            "original_position": 85,
            "original_start_line": 186,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 86,
            "pull_request_review_id": 1691360629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367828131/reactions"
            },
            "side": "RIGHT",
            "start_line": 187,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-22T03:37:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367828131",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367830351"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367830351"
                }
            },
            "author_association": "MEMBER",
            "body": "Why was this log removed?",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T03:33:45Z",
            "diff_hunk": "@@ -124,39 +125,77 @@ local function adjust_start_col(lnum, line, items, encoding)\n   end\n end\n \n+---@param line string line content\n+---@param lnum integer 0-indexed line number\n+---@param client_start_boundary integer 0-indexed word boundary\n+---@param server_start_boundary? integer 0-indexed word boundary, based on textEdit.range.start.character\n+---@param result lsp.CompletionList|lsp.CompletionItem[]\n+---@param encoding string\n+---@return table[] matches\n+---@return integer? server_start_boundary\n+function M._convert_results(\n+  line,\n+  lnum,\n+  client_start_boundary,\n+  server_start_boundary,\n+  result,\n+  encoding\n+)\n+  -- Completion response items may be relative to a position different than `client_start_boundary`.\n+  -- Concrete example, with lua-language-server:\n+  --\n+  -- require('plenary.asy|\n+  --         ▲       ▲   ▲\n+  --         │       │   └── cursor_pos:                     20\n+  --         │       └────── client_start_boundary:          17\n+  --         └────────────── textEdit.range.start.character: 9\n+  --                                 .newText = 'plenary.async'\n+  --                  ^^^\n+  --                  prefix (We'd remove everything not starting with `asy`,\n+  --                  so we'd eliminate the `plenary.async` result\n+  --\n+  -- `adjust_start_col` is used to prefer the language server boundary.\n+  --\n+  local candidates = get_items(result)\n+  local curstartbyte = adjust_start_col(lnum, line, candidates, encoding)\n+  if server_start_boundary == nil then\n+    server_start_boundary = curstartbyte\n+  elseif curstartbyte ~= nil and curstartbyte ~= server_start_boundary then\n+    server_start_boundary = client_start_boundary\n+  end\n+  local prefix = line:sub((server_start_boundary or client_start_boundary) + 1)\n+  local matches = M._lsp_to_complete_items(result, prefix)\n+  return matches, server_start_boundary\n+end\n+\n ---@param findstart integer 0 or 1, decides behavior\n ---@param base integer findstart=0, text to match against\n ---@return integer|table Decided by {findstart}:\n --- - findstart=0: column where the completion starts, or -2 or -3\n --- - findstart=1: list of matches (actually just calls |complete()|)\n function M.omnifunc(findstart, base)\n+  assert(base) -- silence luals\n   local bufnr = api.nvim_get_current_buf()\n   local clients = lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_completion })\n   local remaining = #clients\n   if remaining == 0 then\n     return findstart == 1 and -1 or {}\n   end\n \n-  local log = require('vim.lsp.log')\n-  -- Then, perform standard completion request\n-  if log.info() then\n-    log.info('base ', base)\n-  end\n-\n   local win = api.nvim_get_current_win()\n-  local pos = api.nvim_win_get_cursor(win)\n+  local cursor = api.nvim_win_get_cursor(win)\n+  local lnum = cursor[1] - 1\n+  local cursor_col = cursor[2]\n   local line = api.nvim_get_current_line()\n-  local line_to_cursor = line:sub(1, pos[2])\n-  log.trace('omnifunc.line', pos, line)",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367830351",
            "id": 1367830351,
            "line": 150,
            "node_id": "PRRC_kwDOAPphoM5Rh29P",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 150,
            "original_position": 88,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 89,
            "pull_request_review_id": 1691360629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367830351/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-22T03:37:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367830351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367830518"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367830518"
                }
            },
            "author_association": "MEMBER",
            "body": "Why do you re-import `log` here?",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T03:36:36Z",
            "diff_hunk": "@@ -165,34 +204,18 @@ function M.omnifunc(findstart, base)\n     local params = util.make_position_params(win, client.offset_encoding)\n     client.request(ms.textDocument_completion, params, function(err, result)\n       if err then\n-        log.warn(err.message)\n+        require('vim.lsp.log').warn(err.message)",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367830518",
            "id": 1367830518,
            "line": 208,
            "node_id": "PRRC_kwDOAPphoM5Rh2_2",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 208,
            "original_position": 110,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 111,
            "pull_request_review_id": 1691360629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367830518/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-22T07:08:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367830518",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367850166"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850166"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes this is too nitpicky :)\r\nThere is nothing wrong being explicit. ",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T07:04:07Z",
            "diff_hunk": "@@ -124,39 +125,77 @@ local function adjust_start_col(lnum, line, items, encoding)\n   end\n end\n \n+---@param line string line content\n+---@param lnum integer 0-indexed line number\n+---@param client_start_boundary integer 0-indexed word boundary\n+---@param server_start_boundary? integer 0-indexed word boundary, based on textEdit.range.start.character\n+---@param result lsp.CompletionList|lsp.CompletionItem[]\n+---@param encoding string\n+---@return table[] matches\n+---@return integer? server_start_boundary\n+function M._convert_results(\n+  line,\n+  lnum,\n+  client_start_boundary,\n+  server_start_boundary,\n+  result,\n+  encoding\n+)\n+  -- Completion response items may be relative to a position different than `client_start_boundary`.\n+  -- Concrete example, with lua-language-server:\n+  --\n+  -- require('plenary.asy|\n+  --         ▲       ▲   ▲\n+  --         │       │   └── cursor_pos:                     20\n+  --         │       └────── client_start_boundary:          17\n+  --         └────────────── textEdit.range.start.character: 9\n+  --                                 .newText = 'plenary.async'\n+  --                  ^^^\n+  --                  prefix (We'd remove everything not starting with `asy`,\n+  --                  so we'd eliminate the `plenary.async` result\n+  --\n+  -- `adjust_start_col` is used to prefer the language server boundary.\n+  --\n+  local candidates = get_items(result)\n+  local curstartbyte = adjust_start_col(lnum, line, candidates, encoding)\n+  if server_start_boundary == nil then",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367850166",
            "id": 1367850166,
            "in_reply_to_id": 1367827627,
            "line": 162,
            "node_id": "PRRC_kwDOAPphoM5Rh7y2",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 162,
            "original_position": 51,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 52,
            "pull_request_review_id": 1691382096,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850166/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-22T07:04:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850166",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367850286"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850286"
                }
            },
            "author_association": "MEMBER",
            "body": "The parameter isn't used otherwise so luals would emit a warning. But removing it or turning it into `_` isn't ideal either due to the docs/omnifunc signature.",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T07:05:09Z",
            "diff_hunk": "@@ -124,39 +125,77 @@ local function adjust_start_col(lnum, line, items, encoding)\n   end\n end\n \n+---@param line string line content\n+---@param lnum integer 0-indexed line number\n+---@param client_start_boundary integer 0-indexed word boundary\n+---@param server_start_boundary? integer 0-indexed word boundary, based on textEdit.range.start.character\n+---@param result lsp.CompletionList|lsp.CompletionItem[]\n+---@param encoding string\n+---@return table[] matches\n+---@return integer? server_start_boundary\n+function M._convert_results(\n+  line,\n+  lnum,\n+  client_start_boundary,\n+  server_start_boundary,\n+  result,\n+  encoding\n+)\n+  -- Completion response items may be relative to a position different than `client_start_boundary`.\n+  -- Concrete example, with lua-language-server:\n+  --\n+  -- require('plenary.asy|\n+  --         ▲       ▲   ▲\n+  --         │       │   └── cursor_pos:                     20\n+  --         │       └────── client_start_boundary:          17\n+  --         └────────────── textEdit.range.start.character: 9\n+  --                                 .newText = 'plenary.async'\n+  --                  ^^^\n+  --                  prefix (We'd remove everything not starting with `asy`,\n+  --                  so we'd eliminate the `plenary.async` result\n+  --\n+  -- `adjust_start_col` is used to prefer the language server boundary.\n+  --\n+  local candidates = get_items(result)\n+  local curstartbyte = adjust_start_col(lnum, line, candidates, encoding)\n+  if server_start_boundary == nil then\n+    server_start_boundary = curstartbyte\n+  elseif curstartbyte ~= nil and curstartbyte ~= server_start_boundary then\n+    server_start_boundary = client_start_boundary\n+  end\n+  local prefix = line:sub((server_start_boundary or client_start_boundary) + 1)\n+  local matches = M._lsp_to_complete_items(result, prefix)\n+  return matches, server_start_boundary\n+end\n+\n ---@param findstart integer 0 or 1, decides behavior\n ---@param base integer findstart=0, text to match against\n ---@return integer|table Decided by {findstart}:\n --- - findstart=0: column where the completion starts, or -2 or -3\n --- - findstart=1: list of matches (actually just calls |complete()|)\n function M.omnifunc(findstart, base)\n+  assert(base) -- silence luals",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367850286",
            "id": 1367850286,
            "in_reply_to_id": 1367827997,
            "line": 178,
            "node_id": "PRRC_kwDOAPphoM5Rh70u",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 178,
            "original_position": 67,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 68,
            "pull_request_review_id": 1691382225,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850286/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-22T07:05:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367850378"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850378"
                }
            },
            "author_association": "MEMBER",
            "body": "I felt like it wasn't really useful. The information was quite limited and in most cases not enough to actually resolve an issue. ",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T07:06:10Z",
            "diff_hunk": "@@ -124,39 +125,77 @@ local function adjust_start_col(lnum, line, items, encoding)\n   end\n end\n \n+---@param line string line content\n+---@param lnum integer 0-indexed line number\n+---@param client_start_boundary integer 0-indexed word boundary\n+---@param server_start_boundary? integer 0-indexed word boundary, based on textEdit.range.start.character\n+---@param result lsp.CompletionList|lsp.CompletionItem[]\n+---@param encoding string\n+---@return table[] matches\n+---@return integer? server_start_boundary\n+function M._convert_results(\n+  line,\n+  lnum,\n+  client_start_boundary,\n+  server_start_boundary,\n+  result,\n+  encoding\n+)\n+  -- Completion response items may be relative to a position different than `client_start_boundary`.\n+  -- Concrete example, with lua-language-server:\n+  --\n+  -- require('plenary.asy|\n+  --         ▲       ▲   ▲\n+  --         │       │   └── cursor_pos:                     20\n+  --         │       └────── client_start_boundary:          17\n+  --         └────────────── textEdit.range.start.character: 9\n+  --                                 .newText = 'plenary.async'\n+  --                  ^^^\n+  --                  prefix (We'd remove everything not starting with `asy`,\n+  --                  so we'd eliminate the `plenary.async` result\n+  --\n+  -- `adjust_start_col` is used to prefer the language server boundary.\n+  --\n+  local candidates = get_items(result)\n+  local curstartbyte = adjust_start_col(lnum, line, candidates, encoding)\n+  if server_start_boundary == nil then\n+    server_start_boundary = curstartbyte\n+  elseif curstartbyte ~= nil and curstartbyte ~= server_start_boundary then\n+    server_start_boundary = client_start_boundary\n+  end\n+  local prefix = line:sub((server_start_boundary or client_start_boundary) + 1)\n+  local matches = M._lsp_to_complete_items(result, prefix)\n+  return matches, server_start_boundary\n+end\n+\n ---@param findstart integer 0 or 1, decides behavior\n ---@param base integer findstart=0, text to match against\n ---@return integer|table Decided by {findstart}:\n --- - findstart=0: column where the completion starts, or -2 or -3\n --- - findstart=1: list of matches (actually just calls |complete()|)\n function M.omnifunc(findstart, base)\n+  assert(base) -- silence luals\n   local bufnr = api.nvim_get_current_buf()\n   local clients = lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_completion })\n   local remaining = #clients\n   if remaining == 0 then\n     return findstart == 1 and -1 or {}\n   end\n \n-  local log = require('vim.lsp.log')\n-  -- Then, perform standard completion request\n-  if log.info() then\n-    log.info('base ', base)\n-  end\n-\n   local win = api.nvim_get_current_win()\n-  local pos = api.nvim_win_get_cursor(win)\n+  local cursor = api.nvim_win_get_cursor(win)\n+  local lnum = cursor[1] - 1\n+  local cursor_col = cursor[2]\n   local line = api.nvim_get_current_line()\n-  local line_to_cursor = line:sub(1, pos[2])\n-  log.trace('omnifunc.line', pos, line)",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367850378",
            "id": 1367850378,
            "in_reply_to_id": 1367830351,
            "line": 150,
            "node_id": "PRRC_kwDOAPphoM5Rh72K",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 150,
            "original_position": 88,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 89,
            "pull_request_review_id": 1691382361,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850378/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-22T07:06:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367850455"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850455"
                }
            },
            "author_association": "MEMBER",
            "body": "Given that this is the only use I removed the other import and placed it here to make it lazy ",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T07:06:58Z",
            "diff_hunk": "@@ -165,34 +204,18 @@ function M.omnifunc(findstart, base)\n     local params = util.make_position_params(win, client.offset_encoding)\n     client.request(ms.textDocument_completion, params, function(err, result)\n       if err then\n-        log.warn(err.message)\n+        require('vim.lsp.log').warn(err.message)",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367850455",
            "id": 1367850455,
            "in_reply_to_id": 1367830518,
            "line": 208,
            "node_id": "PRRC_kwDOAPphoM5Rh73X",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 208,
            "original_position": 110,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 111,
            "pull_request_review_id": 1691382460,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850455/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-22T07:06:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367850455",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1367869730"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367869730"
                }
            },
            "author_association": "MEMBER",
            "body": "Or an abstract Position class that can handle conversion to the different conventions transparently ;)",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-10-22T09:24:26Z",
            "diff_hunk": "@@ -124,39 +125,77 @@ local function adjust_start_col(lnum, line, items, encoding)\n   end\n end\n \n+---@param line string line content\n+---@param lnum integer 0-indexed line number\n+---@param client_start_boundary integer 0-indexed word boundary\n+---@param server_start_boundary? integer 0-indexed word boundary, based on textEdit.range.start.character\n+---@param result lsp.CompletionList|lsp.CompletionItem[]\n+---@param encoding string\n+---@return table[] matches\n+---@return integer? server_start_boundary\n+function M._convert_results(\n+  line,\n+  lnum,\n+  client_start_boundary,\n+  server_start_boundary,\n+  result,\n+  encoding\n+)\n+  -- Completion response items may be relative to a position different than `client_start_boundary`.\n+  -- Concrete example, with lua-language-server:\n+  --\n+  -- require('plenary.asy|\n+  --         ▲       ▲   ▲\n+  --         │       │   └── cursor_pos:                     20\n+  --         │       └────── client_start_boundary:          17\n+  --         └────────────── textEdit.range.start.character: 9\n+  --                                 .newText = 'plenary.async'\n+  --                  ^^^\n+  --                  prefix (We'd remove everything not starting with `asy`,\n+  --                  so we'd eliminate the `plenary.async` result\n+  --\n+  -- `adjust_start_col` is used to prefer the language server boundary.\n+  --\n+  local candidates = get_items(result)\n+  local curstartbyte = adjust_start_col(lnum, line, candidates, encoding)\n+  if server_start_boundary == nil then\n+    server_start_boundary = curstartbyte\n+  elseif curstartbyte ~= nil and curstartbyte ~= server_start_boundary then\n+    server_start_boundary = client_start_boundary\n+  end\n+  local prefix = line:sub((server_start_boundary or client_start_boundary) + 1)\n+  local matches = M._lsp_to_complete_items(result, prefix)\n+  return matches, server_start_boundary\n+end\n+\n ---@param findstart integer 0 or 1, decides behavior\n ---@param base integer findstart=0, text to match against\n ---@return integer|table Decided by {findstart}:\n --- - findstart=0: column where the completion starts, or -2 or -3\n --- - findstart=1: list of matches (actually just calls |complete()|)\n function M.omnifunc(findstart, base)\n+  assert(base) -- silence luals\n   local bufnr = api.nvim_get_current_buf()\n   local clients = lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_completion })\n   local remaining = #clients\n   if remaining == 0 then\n     return findstart == 1 and -1 or {}\n   end\n \n-  local log = require('vim.lsp.log')\n-  -- Then, perform standard completion request\n-  if log.info() then\n-    log.info('base ', base)\n-  end\n-\n   local win = api.nvim_get_current_win()\n-  local pos = api.nvim_win_get_cursor(win)\n+  local cursor = api.nvim_win_get_cursor(win)\n+  local lnum = cursor[1] - 1\n+  local cursor_col = cursor[2]",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1367869730",
            "id": 1367869730,
            "in_reply_to_id": 1367828131,
            "line": 189,
            "node_id": "PRRC_kwDOAPphoM5RiAki",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 189,
            "original_position": 85,
            "original_start_line": 186,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 86,
            "pull_request_review_id": 1691400389,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367869730/reactions"
            },
            "side": "RIGHT",
            "start_line": 187,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-22T09:24:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1367869730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25739#discussion_r1390963413"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25739"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1390963413"
                }
            },
            "author_association": "MEMBER",
            "body": "https://github.com/neovim/neovim/issues/25509",
            "commit_id": "05fcdb6c866894d676eecdefa994bea26332f286",
            "created_at": "2023-11-13T11:04:25Z",
            "diff_hunk": "@@ -124,39 +125,77 @@ local function adjust_start_col(lnum, line, items, encoding)\n   end\n end\n \n+---@param line string line content\n+---@param lnum integer 0-indexed line number\n+---@param client_start_boundary integer 0-indexed word boundary\n+---@param server_start_boundary? integer 0-indexed word boundary, based on textEdit.range.start.character\n+---@param result lsp.CompletionList|lsp.CompletionItem[]\n+---@param encoding string\n+---@return table[] matches\n+---@return integer? server_start_boundary\n+function M._convert_results(\n+  line,\n+  lnum,\n+  client_start_boundary,\n+  server_start_boundary,\n+  result,\n+  encoding\n+)\n+  -- Completion response items may be relative to a position different than `client_start_boundary`.\n+  -- Concrete example, with lua-language-server:\n+  --\n+  -- require('plenary.asy|\n+  --         ▲       ▲   ▲\n+  --         │       │   └── cursor_pos:                     20\n+  --         │       └────── client_start_boundary:          17\n+  --         └────────────── textEdit.range.start.character: 9\n+  --                                 .newText = 'plenary.async'\n+  --                  ^^^\n+  --                  prefix (We'd remove everything not starting with `asy`,\n+  --                  so we'd eliminate the `plenary.async` result\n+  --\n+  -- `adjust_start_col` is used to prefer the language server boundary.\n+  --\n+  local candidates = get_items(result)\n+  local curstartbyte = adjust_start_col(lnum, line, candidates, encoding)\n+  if server_start_boundary == nil then\n+    server_start_boundary = curstartbyte\n+  elseif curstartbyte ~= nil and curstartbyte ~= server_start_boundary then\n+    server_start_boundary = client_start_boundary\n+  end\n+  local prefix = line:sub((server_start_boundary or client_start_boundary) + 1)\n+  local matches = M._lsp_to_complete_items(result, prefix)\n+  return matches, server_start_boundary\n+end\n+\n ---@param findstart integer 0 or 1, decides behavior\n ---@param base integer findstart=0, text to match against\n ---@return integer|table Decided by {findstart}:\n --- - findstart=0: column where the completion starts, or -2 or -3\n --- - findstart=1: list of matches (actually just calls |complete()|)\n function M.omnifunc(findstart, base)\n+  assert(base) -- silence luals\n   local bufnr = api.nvim_get_current_buf()\n   local clients = lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_completion })\n   local remaining = #clients\n   if remaining == 0 then\n     return findstart == 1 and -1 or {}\n   end\n \n-  local log = require('vim.lsp.log')\n-  -- Then, perform standard completion request\n-  if log.info() then\n-    log.info('base ', base)\n-  end\n-\n   local win = api.nvim_get_current_win()\n-  local pos = api.nvim_win_get_cursor(win)\n+  local cursor = api.nvim_win_get_cursor(win)\n+  local lnum = cursor[1] - 1\n+  local cursor_col = cursor[2]",
            "html_url": "https://github.com/neovim/neovim/pull/25739#discussion_r1390963413",
            "id": 1390963413,
            "in_reply_to_id": 1367828131,
            "line": 189,
            "node_id": "PRRC_kwDOAPphoM5S6GrV",
            "original_commit_id": "f1f4ce9755bafa96305a50b66078fea4c571ddda",
            "original_line": 189,
            "original_position": 85,
            "original_start_line": 186,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 86,
            "pull_request_review_id": 1727080838,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1390963413/reactions"
            },
            "side": "RIGHT",
            "start_line": 187,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-11-13T11:04:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1390963413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "@SanchayanMaity @Supreeeme could you give this a try?",
            "created_at": "2023-10-21T12:23:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/25739#issuecomment-1773774176",
            "id": 1773774176,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25739",
            "node_id": "IC_kwDOAPphoM5puaVg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1773774176/reactions"
            },
            "updated_at": "2023-10-21T12:23:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1773774176",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@mfussenegger With this change I'm no longer getting completions in the following case:\r\n1. Open [`mark.c`](https://github.com/neovim/neovim/blob/bc850ba2a090a9a4733a82a7555a5a70264ce1ac/src/nvim/mark.c).\r\n2. Go to line 60.\r\n3. Type `Om<C-x><C-o>`.\r\n4. On `master` I get the list of completions, while on the PR branch there's a \"Pattern not found\" error.\r\n\r\nEDIT: This happens when [this `omnifunc` function](https://github.com/neovim/neovim/blob/bc850ba2a090a9a4733a82a7555a5a70264ce1ac/runtime/ftplugin/c.vim#L31) is used. When `vim.lsp.omnifunc` is used instead, the above doesn't happen. ",
            "created_at": "2023-10-22T17:10:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/25739#issuecomment-1774147934",
            "id": 1774147934,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25739",
            "node_id": "IC_kwDOAPphoM5pv1le",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1774147934/reactions"
            },
            "updated_at": "2023-10-22T19:24:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1774147934",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @SanchayanMaity @Supreeeme could you give this a try?\r\n\r\nFixes things here when testing with tsserver and rust analyzer.",
            "created_at": "2023-10-23T03:50:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/25739#issuecomment-1774388138",
            "id": 1774388138,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25739",
            "node_id": "IC_kwDOAPphoM5pwwOq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1774388138/reactions"
            },
            "updated_at": "2023-10-23T03:50:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1774388138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5573968?v=4",
                "events_url": "https://api.github.com/users/SanchayanMaity/events{/privacy}",
                "followers_url": "https://api.github.com/users/SanchayanMaity/followers",
                "following_url": "https://api.github.com/users/SanchayanMaity/following{/other_user}",
                "gists_url": "https://api.github.com/users/SanchayanMaity/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/SanchayanMaity",
                "id": 5573968,
                "login": "SanchayanMaity",
                "node_id": "MDQ6VXNlcjU1NzM5Njg=",
                "organizations_url": "https://api.github.com/users/SanchayanMaity/orgs",
                "received_events_url": "https://api.github.com/users/SanchayanMaity/received_events",
                "repos_url": "https://api.github.com/users/SanchayanMaity/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/SanchayanMaity/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SanchayanMaity/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/SanchayanMaity"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25739/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25739/commits",
    "created_at": "2023-10-21T11:49:50Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25739.diff",
    "draft": false,
    "head": {
        "label": "mfussenegger:lsp-completion-tests",
        "ref": "lsp-completion-tests",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/mfussenegger/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/mfussenegger/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/mfussenegger/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/mfussenegger/neovim/branches{/branch}",
            "clone_url": "https://github.com/mfussenegger/neovim.git",
            "collaborators_url": "https://api.github.com/repos/mfussenegger/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/mfussenegger/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/mfussenegger/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/mfussenegger/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/mfussenegger/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/mfussenegger/neovim/contributors",
            "created_at": "2020-01-25T15:44:28Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/mfussenegger/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/mfussenegger/neovim/downloads",
            "events_url": "https://api.github.com/repos/mfussenegger/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/mfussenegger/neovim/forks",
            "full_name": "mfussenegger/neovim",
            "git_commits_url": "https://api.github.com/repos/mfussenegger/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/mfussenegger/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/mfussenegger/neovim/git/tags{/sha}",
            "git_url": "git://github.com/mfussenegger/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/mfussenegger/neovim/hooks",
            "html_url": "https://github.com/mfussenegger/neovim",
            "id": 236190222,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/mfussenegger/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/mfussenegger/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/mfussenegger/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/mfussenegger/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/mfussenegger/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/mfussenegger/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/mfussenegger/neovim/merges",
            "milestones_url": "https://api.github.com/repos/mfussenegger/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMzYxOTAyMjI=",
            "notifications_url": "https://api.github.com/repos/mfussenegger/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/mfussenegger/neovim/pulls{/number}",
            "pushed_at": "2023-11-04T07:17:45Z",
            "releases_url": "https://api.github.com/repos/mfussenegger/neovim/releases{/id}",
            "size": 217534,
            "ssh_url": "git@github.com:mfussenegger/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/mfussenegger/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/mfussenegger/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/mfussenegger/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/mfussenegger/neovim/subscription",
            "svn_url": "https://github.com/mfussenegger/neovim",
            "tags_url": "https://api.github.com/repos/mfussenegger/neovim/tags",
            "teams_url": "https://api.github.com/repos/mfussenegger/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/mfussenegger/neovim/git/trees{/sha}",
            "updated_at": "2023-07-25T14:32:22Z",
            "url": "https://api.github.com/repos/mfussenegger/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "05fcdb6c866894d676eecdefa994bea26332f286",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
            "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
            "followers_url": "https://api.github.com/users/mfussenegger/followers",
            "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
            "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mfussenegger",
            "id": 38700,
            "login": "mfussenegger",
            "node_id": "MDQ6VXNlcjM4NzAw",
            "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
            "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
            "repos_url": "https://api.github.com/users/mfussenegger/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mfussenegger"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25739",
    "id": 1567726555,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25739",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "5e5f5174e3faa862a9bc353aa7da41487911140b",
    "merged_at": "2023-10-23T06:26:38Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5dcZvb",
    "number": 25739,
    "patch_url": "https://github.com/neovim/neovim/pull/25739.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25739/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/05fcdb6c866894d676eecdefa994bea26332f286",
    "title": "fix(lsp): fix off-by-one error for omnifunc word boundary",
    "updated_at": "2023-11-13T11:04:25Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25739",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
        "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
        "followers_url": "https://api.github.com/users/mfussenegger/followers",
        "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
        "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mfussenegger",
        "id": 38700,
        "login": "mfussenegger",
        "node_id": "MDQ6VXNlcjM4NzAw",
        "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
        "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
        "repos_url": "https://api.github.com/users/mfussenegger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mfussenegger"
    }
}