{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/21393/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/21393/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/21393"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/21393"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/21393/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ef91146efcece1b6d97152251e7137d301146189"
        }
    },
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4791,
            "forks_count": 4791,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1648,
            "open_issues_count": 1648,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-08-01T12:17:00Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 247672,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 67911,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-08-01T11:58:40Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 67911,
            "watchers_count": 67911,
            "web_commit_signoff_required": false
        },
        "sha": "2d8bbe468e796137ae1b5f504b3d73758a8c391c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "This PR adds `vim.inspect_pos()`, `vim.show_pos()` and `:Inspect` to get/show the items at a given buffer position.\r\n\r\nThis PR includes 2e328ba7d2b6f10fc9f495b836debbc3036507ca `vim.semantic_tokens.get_at_pos`\r\n\r\nRight now, the function uses `nvim_echo`, but I can change it to use a floating window if that would be better suited.\r\n\r\n# Todo\r\n\r\n- [x] add special handling for semantic token types and modifiers. Would be great if #21373 could be re-opened and merged to implement this\r\n- [x] put the `nvim_create_user_command` somewhere. What would be the best place for this? `_editor.lua`? `plugin/inspector.lua`?\r\n- [x] improve the docs on the return values\r\n- [x] add something to `news.txt`\r\n\r\n# Included Items\r\n\r\n- [x] Treesitter captures\r\n- [x] Semantic Tokens\r\n- [x] Syntax Highlight Groups  \r\n- [x] Extmarks \r\n\r\n# Implementation details\r\n\r\n- The implementation resides in `runtime/lua/vim/_inspector.lua`\r\n- The submodule is lazy-loaded inside `_init_packages.lua`, so there's no impact on performance\r\n- If you want to test, make sure to build Neovim so the lazy-loading is included\r\n- any parameter can be `nil`, meaning the position under the cursor\r\n\r\n# User Commands\r\n\r\n- `:Inspect` is the same as `vim.show_pos()`\r\n- `:Inspect!` is the same as `vim.pretty_print(vim.inspect_pos())`\r\n\r\n# `vim.show_pos(bufnr, row, col, filter)`\r\n\r\n![image](https://user-images.githubusercontent.com/292349/207616835-f521069c-2540-4d7e-a9dc-6a6ede9d50bb.png)\r\n\r\n![image](https://user-images.githubusercontent.com/292349/207616918-c21313f5-0eca-43d1-bd1e-1b37685694a7.png)\r\n\r\n# `vim.inspect_pos(bufnr, row, col, filter)`\r\n\r\n```lua\r\n{\r\n  extmarks = { {\r\n      col = 6,\r\n      id = 190,\r\n      ns = \"illuminate.highlight\",\r\n      ns_id = 30,\r\n      opts = {\r\n        end_col = 7,\r\n        end_right_gravity = false,\r\n        end_row = 4,\r\n        hl_eol = false,\r\n        hl_group = \"IlluminatedWordWrite\",\r\n        hl_group_link = \"IlluminatedWordWrite\",\r\n        priority = 1000,\r\n        right_gravity = true\r\n      },\r\n      row = 4\r\n    } },\r\n  semantic_tokens = { {\r\n      client_id = 1,\r\n      end_col = 7,\r\n      extmark_added = true,\r\n      hl_groups = {\r\n        modifiers = { {\r\n            hl_group = \"@declaration\",\r\n            hl_group_link = \"@variable\"\r\n          } },\r\n        type = {\r\n          hl_group = \"@variable\",\r\n          hl_group_link = \"@variable\"\r\n        }\r\n      },\r\n      line = 4,\r\n      modifiers = { \"declaration\" },\r\n      start_col = 6,\r\n      type = \"variable\"\r\n    } },\r\n  syntax = {},\r\n  treesitter = { {\r\n      capture = \"variable\",\r\n      hl_group = \"@variable\",\r\n      hl_group_link = \"@variable\",\r\n      lang = \"lua\",\r\n      metadata = {}\r\n    }, {\r\n      capture = \"constant\",\r\n      hl_group = \"@constant\",\r\n      hl_group_link = \"Constant\",\r\n      lang = \"lua\",\r\n      metadata = {}\r\n    } }\r\n}\r\n```\r\n",
    "closed_at": "2022-12-17T12:43:47Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1046581253"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046581253"
                }
            },
            "author_association": "MEMBER",
            "body": "I've been seeing a lot of new functions that depend on cursor position.  Such functions can trivially take a position, and it's easy for the caller to call getpost() or whatever. So we should pretty much never add functions that depend on cursor position.\r\n\r\nBut interactive _commands_ could use cursor position.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-13T01:46:30Z",
            "diff_hunk": "@@ -151,4 +151,76 @@ function M.on_yank(opts)\n   end, timeout)\n end\n \n+-- Shows the highlights under the cursor from Treesitter, Syntax & Extmarks\n+function M.show()\n+  local buf = vim.api.nvim_get_current_buf()\n+  local cursor = vim.api.nvim_win_get_cursor(0)",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1046581253",
            "id": 1046581253,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-YZAF",
            "original_commit_id": "d6876c76028a78e00ec3b24dd4f23888e01005ab",
            "original_line": 157,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/lua/vim/highlight.lua",
            "position": null,
            "pull_request_review_id": 1214604867,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046581253/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-13T04:38:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046581253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1046583317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046583317"
                }
            },
            "author_association": "MEMBER",
            "body": "Returning a string will allow more flexibility. Users can use `:lua =...`  to pretty print.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-13T01:51:04Z",
            "diff_hunk": "@@ -151,4 +151,76 @@ function M.on_yank(opts)\n   end, timeout)\n end\n \n+-- Shows the highlights under the cursor from Treesitter, Syntax & Extmarks\n+function M.show()\n+  local buf = vim.api.nvim_get_current_buf()\n+  local cursor = vim.api.nvim_win_get_cursor(0)\n+\n+  local highlights = {}\n+\n+  -- treesitter\n+  for _, capture in pairs(vim.treesitter.get_captures_at_pos(buf, cursor[1] - 1, cursor[2])) do\n+    table.insert(highlights, { source = 'treesitter', hl = '@' .. capture.capture })\n+  end\n+\n+  -- syntax\n+  for _, i1 in ipairs(vim.fn.synstack(cursor[1], cursor[2] + 1)) do\n+    table.insert(highlights, { source = 'syntax', hl = vim.fn.synIDattr(i1, 'name') })\n+  end\n+\n+  -- extmarks\n+  for ns, nsid in pairs(vim.api.nvim_get_namespaces()) do\n+    local extmarks = vim.api.nvim_buf_get_extmarks(\n+      buf,\n+      nsid,\n+      { cursor[1] - 1, 0 },\n+      { cursor[1] - 1, -1 },\n+      { details = true }\n+    )\n+    for _, extmark in ipairs(extmarks) do\n+      local details = extmark[4]\n+      local col = extmark[3]\n+      if\n+        details.hl_group\n+        and (\n+          col == cursor[2] or (details.end_col and cursor[2] >= col and cursor[2] < details.end_col)\n+        )\n+      then\n+        table.insert(highlights, { source = 'extmark: ' .. ns, hl = details.hl_group or '' })\n+      end\n+    end\n+  end\n+\n+  -- resolve links\n+  for _, hl in ipairs(highlights) do\n+    local hlid = vim.api.nvim_get_hl_id_by_name(hl.hl)\n+    local name = vim.fn.synIDattr(vim.fn.synIDtrans(hlid), 'name')\n+    if name ~= hl.hl then\n+      hl.link = name\n+    end\n+  end\n+\n+  local width = 0\n+  for _, hl in ipairs(highlights) do\n+    width = math.max(width, vim.fn.strwidth(hl.hl))\n+  end\n+\n+  ---@type {[1]:string, [2]:string}[]\n+  local chunks = {}\n+  for _, hl in ipairs(highlights) do\n+    table.insert(chunks, { hl.hl .. (' '):rep(width - vim.fn.strwidth(hl.hl) + 1), 'Bold' })\n+    table.insert(chunks, { 'xxx', hl.hl })\n+    if hl.link then\n+      table.insert(chunks, { ' links to ', 'MoreMsg' })\n+      table.insert(chunks, { hl.link, 'Bold' })\n+    end\n+    table.insert(chunks, { ' ' .. hl.source, 'Comment' })\n+    table.insert(chunks, { '\\n' })\n+  end\n+  if #chunks == 0 then\n+    chunks = { { 'No highlights found' } }\n+  end\n+  vim.api.nvim_echo(chunks, false, {})",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1046583317",
            "id": 1046583317,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-YZgV",
            "original_commit_id": "d6876c76028a78e00ec3b24dd4f23888e01005ab",
            "original_line": 223,
            "original_position": 73,
            "original_start_line": null,
            "path": "runtime/lua/vim/highlight.lua",
            "position": null,
            "pull_request_review_id": 1214604867,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046583317/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-13T02:01:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046583317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1046585723"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046585723"
                }
            },
            "author_association": "MEMBER",
            "body": "So this is the \"pretty printed\" form, right? And it's a stack?\r\n\r\nBut the `highlights` structure could be useful too. So maybe the code before this should be extracted to `vim.get_at_pos()`--and the `highlights` should perhaps be a dict rather than a list--easier for callers to use.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-13T01:56:36Z",
            "diff_hunk": "@@ -151,4 +151,76 @@ function M.on_yank(opts)\n   end, timeout)\n end\n \n+-- Shows the highlights under the cursor from Treesitter, Syntax & Extmarks\n+function M.show()\n+  local buf = vim.api.nvim_get_current_buf()\n+  local cursor = vim.api.nvim_win_get_cursor(0)\n+\n+  local highlights = {}\n+\n+  -- treesitter\n+  for _, capture in pairs(vim.treesitter.get_captures_at_pos(buf, cursor[1] - 1, cursor[2])) do\n+    table.insert(highlights, { source = 'treesitter', hl = '@' .. capture.capture })\n+  end\n+\n+  -- syntax\n+  for _, i1 in ipairs(vim.fn.synstack(cursor[1], cursor[2] + 1)) do\n+    table.insert(highlights, { source = 'syntax', hl = vim.fn.synIDattr(i1, 'name') })\n+  end\n+\n+  -- extmarks\n+  for ns, nsid in pairs(vim.api.nvim_get_namespaces()) do\n+    local extmarks = vim.api.nvim_buf_get_extmarks(\n+      buf,\n+      nsid,\n+      { cursor[1] - 1, 0 },\n+      { cursor[1] - 1, -1 },\n+      { details = true }\n+    )\n+    for _, extmark in ipairs(extmarks) do\n+      local details = extmark[4]\n+      local col = extmark[3]\n+      if\n+        details.hl_group\n+        and (\n+          col == cursor[2] or (details.end_col and cursor[2] >= col and cursor[2] < details.end_col)\n+        )\n+      then\n+        table.insert(highlights, { source = 'extmark: ' .. ns, hl = details.hl_group or '' })\n+      end\n+    end\n+  end\n+\n+  -- resolve links\n+  for _, hl in ipairs(highlights) do\n+    local hlid = vim.api.nvim_get_hl_id_by_name(hl.hl)\n+    local name = vim.fn.synIDattr(vim.fn.synIDtrans(hlid), 'name')\n+    if name ~= hl.hl then\n+      hl.link = name\n+    end\n+  end\n+\n+  local width = 0\n+  for _, hl in ipairs(highlights) do\n+    width = math.max(width, vim.fn.strwidth(hl.hl))\n+  end\n+\n+  ---@type {[1]:string, [2]:string}[]\n+  local chunks = {}",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1046585723",
            "id": 1046585723,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-YaF7",
            "original_commit_id": "d6876c76028a78e00ec3b24dd4f23888e01005ab",
            "original_line": 209,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/highlight.lua",
            "position": null,
            "pull_request_review_id": 1214604867,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046585723/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-13T04:17:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046585723",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1046705325"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046705325"
                }
            },
            "author_association": "MEMBER",
            "body": "~~Makes sense. But the signature should probably be `(win, row, col)` then? instead of `buf, row, col`~~\r\n\r\nEdit: nevermind. I wasn't fully awake yet this morning",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-13T06:28:29Z",
            "diff_hunk": "@@ -151,4 +151,76 @@ function M.on_yank(opts)\n   end, timeout)\n end\n \n+-- Shows the highlights under the cursor from Treesitter, Syntax & Extmarks\n+function M.show()\n+  local buf = vim.api.nvim_get_current_buf()\n+  local cursor = vim.api.nvim_win_get_cursor(0)",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1046705325",
            "id": 1046705325,
            "in_reply_to_id": 1046581253,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-Y3St",
            "original_commit_id": "d6876c76028a78e00ec3b24dd4f23888e01005ab",
            "original_line": 157,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/lua/vim/highlight.lua",
            "position": null,
            "pull_request_review_id": 1214780011,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046705325/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-13T12:27:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046705325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1046705507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046705507"
                }
            },
            "author_association": "MEMBER",
            "body": "ok! Will make the changes",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-13T06:28:51Z",
            "diff_hunk": "@@ -151,4 +151,76 @@ function M.on_yank(opts)\n   end, timeout)\n end\n \n+-- Shows the highlights under the cursor from Treesitter, Syntax & Extmarks\n+function M.show()\n+  local buf = vim.api.nvim_get_current_buf()\n+  local cursor = vim.api.nvim_win_get_cursor(0)\n+\n+  local highlights = {}\n+\n+  -- treesitter\n+  for _, capture in pairs(vim.treesitter.get_captures_at_pos(buf, cursor[1] - 1, cursor[2])) do\n+    table.insert(highlights, { source = 'treesitter', hl = '@' .. capture.capture })\n+  end\n+\n+  -- syntax\n+  for _, i1 in ipairs(vim.fn.synstack(cursor[1], cursor[2] + 1)) do\n+    table.insert(highlights, { source = 'syntax', hl = vim.fn.synIDattr(i1, 'name') })\n+  end\n+\n+  -- extmarks\n+  for ns, nsid in pairs(vim.api.nvim_get_namespaces()) do\n+    local extmarks = vim.api.nvim_buf_get_extmarks(\n+      buf,\n+      nsid,\n+      { cursor[1] - 1, 0 },\n+      { cursor[1] - 1, -1 },\n+      { details = true }\n+    )\n+    for _, extmark in ipairs(extmarks) do\n+      local details = extmark[4]\n+      local col = extmark[3]\n+      if\n+        details.hl_group\n+        and (\n+          col == cursor[2] or (details.end_col and cursor[2] >= col and cursor[2] < details.end_col)\n+        )\n+      then\n+        table.insert(highlights, { source = 'extmark: ' .. ns, hl = details.hl_group or '' })\n+      end\n+    end\n+  end\n+\n+  -- resolve links\n+  for _, hl in ipairs(highlights) do\n+    local hlid = vim.api.nvim_get_hl_id_by_name(hl.hl)\n+    local name = vim.fn.synIDattr(vim.fn.synIDtrans(hlid), 'name')\n+    if name ~= hl.hl then\n+      hl.link = name\n+    end\n+  end\n+\n+  local width = 0\n+  for _, hl in ipairs(highlights) do\n+    width = math.max(width, vim.fn.strwidth(hl.hl))\n+  end\n+\n+  ---@type {[1]:string, [2]:string}[]\n+  local chunks = {}",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1046705507",
            "id": 1046705507,
            "in_reply_to_id": 1046585723,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-Y3Vj",
            "original_commit_id": "d6876c76028a78e00ec3b24dd4f23888e01005ab",
            "original_line": 209,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/highlight.lua",
            "position": null,
            "pull_request_review_id": 1214780290,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046705507/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-13T06:28:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1046705507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1047829599"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1047829599"
                }
            },
            "author_association": "MEMBER",
            "body": "Nice intuition--\"inspect\" makes sense as the precedent, drawing from `vim.inspect()` and  `vim.treesitter.inspect_language()`.\r\n\r\n- However since this is a \"get all the things\" interface, it can live directly on `vim.inspect_pos()`. Don't need a new \"inspector\" module.\r\n- Another reason that a new module doesn't fit here is, we have various modules lie vim.treesitter, vim.diagnostic, that cover topics, and they have `vim.x.inspect*` and `vim.x.show*` functions.  Whereas it inverts that relationship to put things in a `vim.inspector` module.\r\n\r\n",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-13T22:49:20Z",
            "diff_hunk": "@@ -2392,4 +2392,35 @@ trust({opts})                                             *vim.secure.trust()*\n         • true and full path of target file if operation was successful\n         • false and error message on failure\n \n+\n+==============================================================================\n+Lua module: inspector                                          *lua-inspector*\n+\n+get({bufnr}, {row}, {col}, {filter})                     *vim.inspector.get()*\n+    Get all the items at a given buffer position",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1047829599",
            "id": 1047829599,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-dJxf",
            "original_commit_id": "fbbb847094f716cce1a0da3585d9915714de45a8",
            "original_line": 2400,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1216533126,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1047829599/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-13T23:14:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1047829599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1047830142"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1047830142"
                }
            },
            "author_association": "MEMBER",
            "body": "Since this is a \"show all the things\" interface, it can live directly on vim.show_pos(). Don't need a new \"inspector\" module.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-13T22:50:11Z",
            "diff_hunk": "@@ -2392,4 +2392,35 @@ trust({opts})                                             *vim.secure.trust()*\n         • true and full path of target file if operation was successful\n         • false and error message on failure\n \n+\n+==============================================================================\n+Lua module: inspector                                          *lua-inspector*\n+\n+get({bufnr}, {row}, {col}, {filter})                     *vim.inspector.get()*\n+    Get all the items at a given buffer position\n+\n+    Parameters: ~\n+      • {bufnr}   buffer|nil defaults to the current buffer\n+      • {row}     (number|nil) 0-indexed row. Defaults to the current cursor\n+      • {col}     (number|nil) 0-indexed col. Defaults to the current cursor\n+      • {filter}  (table|nil) a table with key-value pairs to filter the items\n+                  • syntax (boolean): include syntax based highlight groups\n+                    (defaults to true)\n+                  • treesitter (boolean): include treesitter based highlight\n+                    groups (defaults to true)\n+                  • extmarks (boolean): include extmarks (defaults to true)\n+                  • extmarks_with_hl_group (boolean): when false, also include\n+                    extmarks without a hl_group (defaults to true)\n+                  • semantic_tokens (boolean): include semantic tokens\n+                    (defaults to true)\n+\n+show({bufnr}, {row}, {col}, {filter})                   *vim.inspector.show()*\n+    Show all the items at a given buffer position",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1047830142",
            "id": 1047830142,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-dJ5-",
            "original_commit_id": "fbbb847094f716cce1a0da3585d9915714de45a8",
            "original_line": 2418,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1216533850,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1047830142/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-13T22:50:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1047830142",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1047832016"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1047832016"
                }
            },
            "author_association": "MEMBER",
            "body": "~~Should we leave the door open for a future `win` parameter?~~ No, we would probably want `vim.inspect_win`, because the implementation would heavily diverge.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-13T22:53:35Z",
            "diff_hunk": "@@ -0,0 +1,207 @@\n+local M = {}\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean include extmarks (defaults to true)\n+---@field extmarks_with_hl_group boolean when false, also include extmarks without a hl_group (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  extmarks_with_hl_group = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---@param bufnr? buffer defaults to the current buffer\n+---@param row? number 0-indexed row. Defaults to the current cursor\n+---@param col? number 0-indexed col. Defaults to the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean): include extmarks (defaults to true)\n+---               - extmarks_with_hl_group (boolean): when false, also include extmarks without a hl_group (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+function M.get(bufnr, row, col, filter)",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1047832016",
            "id": 1047832016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-dKXQ",
            "original_commit_id": "fbbb847094f716cce1a0da3585d9915714de45a8",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/inspector.lua",
            "position": null,
            "pull_request_review_id": 1216536593,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1047832016/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-13T23:04:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1047832016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048231431"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048231431"
                }
            },
            "author_association": "MEMBER",
            "body": "I would keep it as is. If they want to inspect a certain window, they can just get the current buffer from that window and pass it to the function. No need for a `inspect_win`",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T09:45:46Z",
            "diff_hunk": "@@ -0,0 +1,207 @@\n+local M = {}\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean include extmarks (defaults to true)\n+---@field extmarks_with_hl_group boolean when false, also include extmarks without a hl_group (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  extmarks_with_hl_group = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---@param bufnr? buffer defaults to the current buffer\n+---@param row? number 0-indexed row. Defaults to the current cursor\n+---@param col? number 0-indexed col. Defaults to the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean): include extmarks (defaults to true)\n+---               - extmarks_with_hl_group (boolean): when false, also include extmarks without a hl_group (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+function M.get(bufnr, row, col, filter)",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048231431",
            "id": 1048231431,
            "in_reply_to_id": 1047832016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-er4H",
            "original_commit_id": "fbbb847094f716cce1a0da3585d9915714de45a8",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/inspector.lua",
            "position": null,
            "pull_request_review_id": 1217110628,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048231431/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T09:45:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048231431",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048234365"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048234365"
                }
            },
            "author_association": "MEMBER",
            "body": "A buffer can be displayed in multiple windows.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T09:48:26Z",
            "diff_hunk": "@@ -0,0 +1,207 @@\n+local M = {}\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean include extmarks (defaults to true)\n+---@field extmarks_with_hl_group boolean when false, also include extmarks without a hl_group (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  extmarks_with_hl_group = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---@param bufnr? buffer defaults to the current buffer\n+---@param row? number 0-indexed row. Defaults to the current cursor\n+---@param col? number 0-indexed col. Defaults to the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean): include extmarks (defaults to true)\n+---               - extmarks_with_hl_group (boolean): when false, also include extmarks without a hl_group (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+function M.get(bufnr, row, col, filter)",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048234365",
            "id": 1048234365,
            "in_reply_to_id": 1047832016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-esl9",
            "original_commit_id": "fbbb847094f716cce1a0da3585d9915714de45a8",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/inspector.lua",
            "position": null,
            "pull_request_review_id": 1217114722,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048234365/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T09:48:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048234365",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048237155"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048237155"
                }
            },
            "author_association": "MEMBER",
            "body": "I think the use case is for something like the treesitter playground where a plugin wants to get or show information related to a window it opened itself.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T09:51:02Z",
            "diff_hunk": "@@ -0,0 +1,207 @@\n+local M = {}\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean include extmarks (defaults to true)\n+---@field extmarks_with_hl_group boolean when false, also include extmarks without a hl_group (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  extmarks_with_hl_group = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---@param bufnr? buffer defaults to the current buffer\n+---@param row? number 0-indexed row. Defaults to the current cursor\n+---@param col? number 0-indexed col. Defaults to the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean): include extmarks (defaults to true)\n+---               - extmarks_with_hl_group (boolean): when false, also include extmarks without a hl_group (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+function M.get(bufnr, row, col, filter)",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048237155",
            "id": 1048237155,
            "in_reply_to_id": 1047832016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-etRj",
            "original_commit_id": "fbbb847094f716cce1a0da3585d9915714de45a8",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/inspector.lua",
            "position": null,
            "pull_request_review_id": 1217118704,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048237155/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T09:51:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048237155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048243800"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048243800"
                }
            },
            "author_association": "MEMBER",
            "body": "@zeertzjq that doesn't matter. We only use the window if row/col are not set, so if they pass in a buffer with a correct row/col, it will all work as expected",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T09:57:04Z",
            "diff_hunk": "@@ -0,0 +1,207 @@\n+local M = {}\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean include extmarks (defaults to true)\n+---@field extmarks_with_hl_group boolean when false, also include extmarks without a hl_group (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  extmarks_with_hl_group = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---@param bufnr? buffer defaults to the current buffer\n+---@param row? number 0-indexed row. Defaults to the current cursor\n+---@param col? number 0-indexed col. Defaults to the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean): include extmarks (defaults to true)\n+---               - extmarks_with_hl_group (boolean): when false, also include extmarks without a hl_group (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+function M.get(bufnr, row, col, filter)",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048243800",
            "id": 1048243800,
            "in_reply_to_id": 1047832016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-eu5Y",
            "original_commit_id": "fbbb847094f716cce1a0da3585d9915714de45a8",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/inspector.lua",
            "position": null,
            "pull_request_review_id": 1217128581,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048243800/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T09:57:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048243800",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048245698"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048245698"
                }
            },
            "author_association": "MEMBER",
            "body": "```lua\r\n  local buf = vim.api.nvim_win_get_buf(win)\r\n  local cursor = vim.api.nvim_win_get_cursor(win)\r\n  vim.inspect_pos(buf, cursor[1] - 1, cursor[2])\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T09:58:46Z",
            "diff_hunk": "@@ -0,0 +1,207 @@\n+local M = {}\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean include extmarks (defaults to true)\n+---@field extmarks_with_hl_group boolean when false, also include extmarks without a hl_group (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  extmarks_with_hl_group = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---@param bufnr? buffer defaults to the current buffer\n+---@param row? number 0-indexed row. Defaults to the current cursor\n+---@param col? number 0-indexed col. Defaults to the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean): include extmarks (defaults to true)\n+---               - extmarks_with_hl_group (boolean): when false, also include extmarks without a hl_group (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+function M.get(bufnr, row, col, filter)",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048245698",
            "id": 1048245698,
            "in_reply_to_id": 1047832016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-evXC",
            "original_commit_id": "fbbb847094f716cce1a0da3585d9915714de45a8",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/inspector.lua",
            "position": null,
            "pull_request_review_id": 1217131362,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048245698/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T10:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048245698",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048255861"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048255861"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh, I didn't notice that Justin edited his comment.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T10:08:16Z",
            "diff_hunk": "@@ -0,0 +1,207 @@\n+local M = {}\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean include extmarks (defaults to true)\n+---@field extmarks_with_hl_group boolean when false, also include extmarks without a hl_group (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  extmarks_with_hl_group = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---@param bufnr? buffer defaults to the current buffer\n+---@param row? number 0-indexed row. Defaults to the current cursor\n+---@param col? number 0-indexed col. Defaults to the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean): include extmarks (defaults to true)\n+---               - extmarks_with_hl_group (boolean): when false, also include extmarks without a hl_group (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+function M.get(bufnr, row, col, filter)",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048255861",
            "id": 1048255861,
            "in_reply_to_id": 1047832016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-ex11",
            "original_commit_id": "fbbb847094f716cce1a0da3585d9915714de45a8",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/inspector.lua",
            "position": null,
            "pull_request_review_id": 1217146213,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048255861/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T10:08:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048255861",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048285393"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048285393"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    arguments, returns the token under the cursor.\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T10:29:19Z",
            "diff_hunk": "@@ -1332,6 +1332,19 @@ force_refresh({bufnr})               *vim.lsp.semantic_tokens.force_refresh()*\n     Parameters: ~\n       • {bufnr}  (nil|number) default: current buffer\n \n+                                        *vim.lsp.semantic_tokens.get_at_pos()*\n+get_at_pos({bufnr}, {row}, {col})\n+    Return the semantic token(s) at the given position. If called without\n+    argument, returns the token under the cursor.",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048285393",
            "id": 1048285393,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-e5DR",
            "original_commit_id": "0370e5420aca0e1415025d81ab1b1dbefd44afed",
            "original_line": 1338,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1217190789,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048285393/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T10:41:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048285393",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048287000"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048287000"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        table[]|nil List of tokens at position\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T10:30:47Z",
            "diff_hunk": "@@ -1332,6 +1332,19 @@ force_refresh({bufnr})               *vim.lsp.semantic_tokens.force_refresh()*\n     Parameters: ~\n       • {bufnr}  (nil|number) default: current buffer\n \n+                                        *vim.lsp.semantic_tokens.get_at_pos()*\n+get_at_pos({bufnr}, {row}, {col})\n+    Return the semantic token(s) at the given position. If called without\n+    argument, returns the token under the cursor.\n+\n+    Parameters: ~\n+      • {bufnr}  (number|nil) Buffer number (0 for current buffer, default)\n+      • {row}    (number|nil) Position row (default cursor position)\n+      • {col}    (number|nil) Position column (default cursor position)\n+\n+    Return: ~\n+        table[]|nil tokens Table of tokens at position",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048287000",
            "id": 1048287000,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-e5cY",
            "original_commit_id": "9e0e6bf0c4dd9f4fe8e101486f35aecc7c42d2ed",
            "original_line": 1346,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1217190789,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048287000/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T10:41:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048287000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048288645"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048288645"
                }
            },
            "author_association": "MEMBER",
            "body": "To be more consistent with the wording used in api.txt:\r\n\r\n```suggestion\r\n      • {row}     (number|nil) row to inspect, 0-based. Defaults to row of the current cursor\r\n```\r\n\r\nAnd likewise below.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T10:32:17Z",
            "diff_hunk": "@@ -1504,6 +1504,40 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n         |vim.in_fast_event()|\n \n \n+==============================================================================\n+Lua module: inspector                                          *lua-inspector*\n+\n+inspect_pos({bufnr}, {row}, {col}, {filter})               *vim.inspect_pos()*\n+    Get all the items at a given buffer position Can also be pretty printed\n+    with *:Inspect!*\n+\n+    Parameters: ~\n+      • {bufnr}   buffer|nil defaults to the current buffer\n+      • {row}     (number|nil) 0-indexed row. Defaults to the current cursor",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048288645",
            "id": 1048288645,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-e52F",
            "original_commit_id": "9e0e6bf0c4dd9f4fe8e101486f35aecc7c42d2ed",
            "original_line": 1516,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1217190789,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048288645/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T10:41:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048288645",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048291516"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048291516"
                }
            },
            "author_association": "MEMBER",
            "body": "I would combine these keys and make the option an enum. Something like:\r\n\r\n```suggestion\r\n                  • extmarks (string): include extmarks. One of `all`, `none`, `with_hl`.\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T10:34:50Z",
            "diff_hunk": "@@ -1504,6 +1504,40 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n         |vim.in_fast_event()|\n \n \n+==============================================================================\n+Lua module: inspector                                          *lua-inspector*\n+\n+inspect_pos({bufnr}, {row}, {col}, {filter})               *vim.inspect_pos()*\n+    Get all the items at a given buffer position Can also be pretty printed\n+    with *:Inspect!*\n+\n+    Parameters: ~\n+      • {bufnr}   buffer|nil defaults to the current buffer\n+      • {row}     (number|nil) 0-indexed row. Defaults to the current cursor\n+      • {col}     (number|nil) 0-indexed col. Defaults to the current cursor\n+      • {filter}  (table|nil) a table with key-value pairs to filter the items\n+                  • syntax (boolean): include syntax based highlight groups\n+                    (defaults to true)\n+                  • treesitter (boolean): include treesitter based highlight\n+                    groups (defaults to true)\n+                  • extmarks (boolean): include extmarks (defaults to true)\n+                  • extmarks_with_hl_group (boolean): when false, also include",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048291516",
            "id": 1048291516,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-e6i8",
            "original_commit_id": "9e0e6bf0c4dd9f4fe8e101486f35aecc7c42d2ed",
            "original_line": 1524,
            "original_position": 21,
            "original_start_line": 1523,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1217190789,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048291516/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-12-14T10:41:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048291516",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048292212"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048292212"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  at a given buffer postion. Currently this includes treesitter captures,\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T10:35:28Z",
            "diff_hunk": "@@ -39,6 +39,10 @@ NEW FEATURES                                                    *news-features*\n \n The following new APIs or features were added.\n \n+• |vim.inspect_pos()|, |vim.show_pos()| and |:Inspect| allows a user to get or show items\n+  at a given buffer postion. Currently this inlcudes treesitter captures,",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048292212",
            "id": 1048292212,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-e6t0",
            "original_commit_id": "9e0e6bf0c4dd9f4fe8e101486f35aecc7c42d2ed",
            "original_line": 43,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1217190789,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048292212/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T10:41:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048292212",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048292889"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048292889"
                }
            },
            "author_association": "MEMBER",
            "body": "Doesn't this capture all syntax groups?\r\n\r\n```suggestion\r\n  semantic tokens, syntax groups and extmarks.\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T10:36:06Z",
            "diff_hunk": "@@ -39,6 +39,10 @@ NEW FEATURES                                                    *news-features*\n \n The following new APIs or features were added.\n \n+• |vim.inspect_pos()|, |vim.show_pos()| and |:Inspect| allows a user to get or show items\n+  at a given buffer postion. Currently this inlcudes treesitter captures,\n+  semantic tokens, syntax highlight groups and extmarks.",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048292889",
            "id": 1048292889,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-e64Z",
            "original_commit_id": "9e0e6bf0c4dd9f4fe8e101486f35aecc7c42d2ed",
            "original_line": 44,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1217190789,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048292889/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T10:41:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048292889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048499160"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048499160"
                }
            },
            "author_association": "MEMBER",
            "body": "good idea. Changed to be `true|false|\"all\"`, to keep it more in line with the other options.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T13:55:27Z",
            "diff_hunk": "@@ -1504,6 +1504,40 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n         |vim.in_fast_event()|\n \n \n+==============================================================================\n+Lua module: inspector                                          *lua-inspector*\n+\n+inspect_pos({bufnr}, {row}, {col}, {filter})               *vim.inspect_pos()*\n+    Get all the items at a given buffer position Can also be pretty printed\n+    with *:Inspect!*\n+\n+    Parameters: ~\n+      • {bufnr}   buffer|nil defaults to the current buffer\n+      • {row}     (number|nil) 0-indexed row. Defaults to the current cursor\n+      • {col}     (number|nil) 0-indexed col. Defaults to the current cursor\n+      • {filter}  (table|nil) a table with key-value pairs to filter the items\n+                  • syntax (boolean): include syntax based highlight groups\n+                    (defaults to true)\n+                  • treesitter (boolean): include treesitter based highlight\n+                    groups (defaults to true)\n+                  • extmarks (boolean): include extmarks (defaults to true)\n+                  • extmarks_with_hl_group (boolean): when false, also include",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048499160",
            "id": 1048499160,
            "in_reply_to_id": 1048291516,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-ftPY",
            "original_commit_id": "9e0e6bf0c4dd9f4fe8e101486f35aecc7c42d2ed",
            "original_line": 1524,
            "original_position": 21,
            "original_start_line": 1523,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1217503259,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048499160/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-12-14T13:55:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048499160",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048578195"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048578195"
                }
            },
            "author_association": "MEMBER",
            "body": "Should probably keep this `number` for now. If we add `buffer` it should be added consistently to all other functions.\r\n```suggestion\r\n      • {bufnr}   (number|nil) defaults to the current buffer\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T14:59:12Z",
            "diff_hunk": "@@ -1504,6 +1504,51 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n         |vim.in_fast_event()|\n \n \n+==============================================================================\n+Lua module: inspector                                          *lua-inspector*\n+\n+inspect_pos({bufnr}, {row}, {col}, {filter})               *vim.inspect_pos()*\n+    Get all the items at a given buffer position Can also be pretty printed\n+    with *:Inspect!*\n+\n+    Parameters: ~\n+      • {bufnr}   (buffer|nil) defaults to the current buffer",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048578195",
            "id": 1048578195,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-gAiT",
            "original_commit_id": "341211c53b4d0c47356c15889d08bf5cbceb315e",
            "original_line": 1515,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1217624011,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048578195/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T15:00:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048578195",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048582210"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048582210"
                }
            },
            "author_association": "MEMBER",
            "body": "right, I thought we used buffer, but you're right. Updated!",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T15:02:19Z",
            "diff_hunk": "@@ -1504,6 +1504,51 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n         |vim.in_fast_event()|\n \n \n+==============================================================================\n+Lua module: inspector                                          *lua-inspector*\n+\n+inspect_pos({bufnr}, {row}, {col}, {filter})               *vim.inspect_pos()*\n+    Get all the items at a given buffer position Can also be pretty printed\n+    with *:Inspect!*\n+\n+    Parameters: ~\n+      • {bufnr}   (buffer|nil) defaults to the current buffer",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048582210",
            "id": 1048582210,
            "in_reply_to_id": 1048578195,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-gBhC",
            "original_commit_id": "341211c53b4d0c47356c15889d08bf5cbceb315e",
            "original_line": 1515,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1217629764,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048582210/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T15:02:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048582210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048796367"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048796367"
                }
            },
            "author_association": "MEMBER",
            "body": "is there an ordering guarantee we want to mention here? e.g. are the lists in z-index order?",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T18:04:16Z",
            "diff_hunk": "@@ -0,0 +1,220 @@\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---Can also be pretty printed with *:Inspect!*\n+---@param bufnr? number defaults to the current buffer\n+---@param row? number row to inspect, 0-based. Defaults to the row of the current cursor\n+---@param col? number col to inspect, 0-based. Defaults to the col of the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean|\"all\"): include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+---@return {treesitter:table,syntax:table,extmarks:table,semantic_tokens:table} (table) a table with the following key-value pairs:\n+---               - treesitter: a list of treesitter captures\n+---               - syntax: a list of syntax groups\n+---               - semantic_tokens: a list of semantic tokens\n+---               - extmarks: a list of extmarks",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048796367",
            "id": 1048796367,
            "line": 29,
            "node_id": "PRRC_kwDOAPphoM4-g1zP",
            "original_commit_id": "b501156ecf1da641fc5503d0e517b2453a76769e",
            "original_line": 29,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": 29,
            "pull_request_review_id": 1217981483,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048796367/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T18:04:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048796367",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048797213"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048797213"
                }
            },
            "author_association": "MEMBER",
            "body": "It's a Lua table, so no ordering. See the example output in the PR description",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T18:05:16Z",
            "diff_hunk": "@@ -0,0 +1,220 @@\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---Can also be pretty printed with *:Inspect!*\n+---@param bufnr? number defaults to the current buffer\n+---@param row? number row to inspect, 0-based. Defaults to the row of the current cursor\n+---@param col? number col to inspect, 0-based. Defaults to the col of the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean|\"all\"): include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+---@return {treesitter:table,syntax:table,extmarks:table,semantic_tokens:table} (table) a table with the following key-value pairs:\n+---               - treesitter: a list of treesitter captures\n+---               - syntax: a list of syntax groups\n+---               - semantic_tokens: a list of semantic tokens\n+---               - extmarks: a list of extmarks",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048797213",
            "id": 1048797213,
            "in_reply_to_id": 1048796367,
            "line": 29,
            "node_id": "PRRC_kwDOAPphoM4-g2Ad",
            "original_commit_id": "b501156ecf1da641fc5503d0e517b2453a76769e",
            "original_line": 29,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": 29,
            "pull_request_review_id": 1217982793,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048797213/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T18:05:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048797213",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048797859"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048797859"
                }
            },
            "author_association": "MEMBER",
            "body": "oh sorry, you probably meant ordering of the items 😄 \r\nYes, they are in traversal order. I'll add something to the descriptipn",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T18:05:58Z",
            "diff_hunk": "@@ -0,0 +1,220 @@\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---Can also be pretty printed with *:Inspect!*\n+---@param bufnr? number defaults to the current buffer\n+---@param row? number row to inspect, 0-based. Defaults to the row of the current cursor\n+---@param col? number col to inspect, 0-based. Defaults to the col of the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean|\"all\"): include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+---@return {treesitter:table,syntax:table,extmarks:table,semantic_tokens:table} (table) a table with the following key-value pairs:\n+---               - treesitter: a list of treesitter captures\n+---               - syntax: a list of syntax groups\n+---               - semantic_tokens: a list of semantic tokens\n+---               - extmarks: a list of extmarks",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048797859",
            "id": 1048797859,
            "in_reply_to_id": 1048796367,
            "line": 29,
            "node_id": "PRRC_kwDOAPphoM4-g2Kj",
            "original_commit_id": "b501156ecf1da641fc5503d0e517b2453a76769e",
            "original_line": 29,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": 29,
            "pull_request_review_id": 1217983721,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048797859/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T18:07:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048797859",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048802596"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048802596"
                }
            },
            "author_association": "MEMBER",
            "body": "updated...",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T18:11:07Z",
            "diff_hunk": "@@ -0,0 +1,220 @@\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---Can also be pretty printed with *:Inspect!*\n+---@param bufnr? number defaults to the current buffer\n+---@param row? number row to inspect, 0-based. Defaults to the row of the current cursor\n+---@param col? number col to inspect, 0-based. Defaults to the col of the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean|\"all\"): include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+---@return {treesitter:table,syntax:table,extmarks:table,semantic_tokens:table} (table) a table with the following key-value pairs:\n+---               - treesitter: a list of treesitter captures\n+---               - syntax: a list of syntax groups\n+---               - semantic_tokens: a list of semantic tokens\n+---               - extmarks: a list of extmarks",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048802596",
            "id": 1048802596,
            "in_reply_to_id": 1048796367,
            "line": 29,
            "node_id": "PRRC_kwDOAPphoM4-g3Uk",
            "original_commit_id": "b501156ecf1da641fc5503d0e517b2453a76769e",
            "original_line": 29,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": 29,
            "pull_request_review_id": 1217990604,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048802596/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T18:11:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048802596",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048802618"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048802618"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    chunks = { { 'No items found at position x,y in buffer 42' } }\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T18:11:08Z",
            "diff_hunk": "@@ -0,0 +1,220 @@\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---Can also be pretty printed with *:Inspect!*\n+---@param bufnr? number defaults to the current buffer\n+---@param row? number row to inspect, 0-based. Defaults to the row of the current cursor\n+---@param col? number col to inspect, 0-based. Defaults to the col of the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean|\"all\"): include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+---@return {treesitter:table,syntax:table,extmarks:table,semantic_tokens:table} (table) a table with the following key-value pairs. Items are in \"traversal order\":\n+---               - treesitter: a list of treesitter captures\n+---               - syntax: a list of syntax groups\n+---               - semantic_tokens: a list of semantic tokens\n+---               - extmarks: a list of extmarks\n+function vim.inspect_pos(bufnr, row, col, filter)\n+  filter = vim.tbl_deep_extend('force', defaults, filter or {})\n+\n+  bufnr = bufnr or 0\n+  if row == nil or col == nil then\n+    -- get the row/col from the first window displaying the buffer\n+    local win = bufnr == 0 and vim.api.nvim_get_current_win() or vim.fn.bufwinid(bufnr)\n+    if win == -1 then\n+      error('row/col is required for buffers not visible in a window')\n+    end\n+    local cursor = vim.api.nvim_win_get_cursor(win)\n+    row, col = cursor[1] - 1, cursor[2]\n+  end\n+  bufnr = bufnr == 0 and vim.api.nvim_get_current_buf() or bufnr\n+\n+  local results = {\n+    treesitter = {},\n+    syntax = {},\n+    extmarks = {},\n+    semantic_tokens = {},\n+  }\n+\n+  -- resolve hl links\n+  ---@private\n+  local function resolve_hl(data)\n+    if data.hl_group then\n+      local hlid = vim.api.nvim_get_hl_id_by_name(data.hl_group)\n+      local name = vim.fn.synIDattr(vim.fn.synIDtrans(hlid), 'name')\n+      data.hl_group_link = name\n+    end\n+    return data\n+  end\n+\n+  -- treesitter\n+  if filter.treesitter then\n+    for _, capture in pairs(vim.treesitter.get_captures_at_pos(bufnr, row, col)) do\n+      capture.hl_group = '@' .. capture.capture\n+      table.insert(results.treesitter, resolve_hl(capture))\n+    end\n+  end\n+\n+  -- syntax\n+  if filter.syntax then\n+    for _, i1 in ipairs(vim.fn.synstack(row + 1, col + 1)) do\n+      table.insert(results.syntax, resolve_hl({ hl_group = vim.fn.synIDattr(i1, 'name') }))\n+    end\n+  end\n+\n+  -- semantic tokens\n+  if filter.semantic_tokens then\n+    for _, token in ipairs(vim.lsp.semantic_tokens.get_at_pos(bufnr, row, col) or {}) do\n+      token.hl_groups = {\n+        type = resolve_hl({ hl_group = '@' .. token.type }),\n+        modifiers = vim.tbl_map(function(modifier)\n+          return resolve_hl({ hl_group = '@' .. modifier })\n+        end, token.modifiers or {}),\n+      }\n+      table.insert(results.semantic_tokens, token)\n+    end\n+  end\n+\n+  -- extmarks\n+  if filter.extmarks then\n+    for ns, nsid in pairs(vim.api.nvim_get_namespaces()) do\n+      if ns:find('vim_lsp_semantic_tokens') ~= 1 then\n+        local extmarks = vim.api.nvim_buf_get_extmarks(bufnr, nsid, 0, -1, { details = true })\n+        for _, extmark in ipairs(extmarks) do\n+          extmark = {\n+            ns_id = nsid,\n+            ns = ns,\n+            id = extmark[1],\n+            row = extmark[2],\n+            col = extmark[3],\n+            opts = resolve_hl(extmark[4]),\n+          }\n+          local end_row = extmark.opts.end_row or extmark.row -- inclusive\n+          local end_col = extmark.opts.end_col or (extmark.col + 1) -- exclusive\n+          if\n+            (filter.extmarks == 'all' or extmark.opts.hl_group) -- filter hl_group\n+            and (row >= extmark.row and row <= end_row) -- within the rows of the extmark\n+            and (row > extmark.row or col >= extmark.col) -- either not the first row, or in range of the col\n+            and (row < end_row or col < end_col) -- either not in the last row or in range of the col\n+          then\n+            table.insert(results.extmarks, extmark)\n+          end\n+        end\n+      end\n+    end\n+  end\n+  return results\n+end\n+\n+---Show all the items at a given buffer position\n+---\n+---Can also be shown with *:Inspect*\n+---@param bufnr? number defaults to the current buffer\n+---@param row? number row to inspect, 0-based. Defaults to the row of the current cursor\n+---@param col? number col to inspect, 0-based. Defaults to the col of the current cursor\n+---@param filter? InspectorFilter (table|nil) see |vim.inspect_pos()|\n+function vim.show_pos(bufnr, row, col, filter)\n+  local items = vim.inspect_pos(bufnr, row, col, filter)\n+\n+  local lines = { {} }\n+\n+  ---@private\n+  local function append(str, hl)\n+    table.insert(lines[#lines], { str, hl })\n+  end\n+\n+  ---@private\n+  local function nl()\n+    table.insert(lines, {})\n+  end\n+\n+  ---@private\n+  local function item(data, comment)\n+    append('  - ')\n+    append(data.hl_group, data.hl_group)\n+    append(' ')\n+    if data.hl_group ~= data.hl_group_link then\n+      append('links to ', 'MoreMsg')\n+      append(data.hl_group_link, data.hl_group_link)\n+      append(' ')\n+    end\n+    if comment then\n+      append(comment, 'Comment')\n+    end\n+    nl()\n+  end\n+\n+  -- treesitter\n+  if #items.treesitter > 0 then\n+    append('Treesitter', 'Title')\n+    nl()\n+    for _, capture in ipairs(items.treesitter) do\n+      item(capture, capture.lang)\n+    end\n+    nl()\n+  end\n+\n+  if #items.semantic_tokens > 0 then\n+    append('Semantic Tokens', 'Title')\n+    nl()\n+    for _, token in ipairs(items.semantic_tokens) do\n+      local client = vim.lsp.get_client_by_id(token.client_id)\n+      client = client and (' (' .. client.name .. ')') or ''\n+      item(token.hl_groups.type, 'type' .. client)\n+      for _, modifier in ipairs(token.hl_groups.modifiers) do\n+        item(modifier, 'modifier' .. client)\n+      end\n+    end\n+    nl()\n+  end\n+\n+  -- syntax\n+  if #items.syntax > 0 then\n+    append('Syntax', 'Title')\n+    nl()\n+    for _, syn in ipairs(items.syntax) do\n+      item(syn)\n+    end\n+    nl()\n+  end\n+  -- extmarks\n+  if #items.extmarks > 0 then\n+    append('Extmarks', 'Title')\n+    nl()\n+    for _, extmark in ipairs(items.extmarks) do\n+      if extmark.opts.hl_group then\n+        item(extmark.opts, extmark.ns)\n+      else\n+        append('  - ')\n+        append(extmark.ns, 'Comment')\n+        nl()\n+      end\n+    end\n+    nl()\n+  end\n+\n+  if #lines[#lines] == 0 then\n+    table.remove(lines)\n+  end\n+\n+  local chunks = {}\n+  for _, line in ipairs(lines) do\n+    vim.list_extend(chunks, line)\n+    table.insert(chunks, { '\\n' })\n+  end\n+  if #chunks == 0 then\n+    chunks = { { 'No highlights found' } }",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048802618",
            "id": 1048802618,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-g3U6",
            "original_commit_id": "66234cf811fb7ea8a9e05af23868e4456dbfe438",
            "original_line": 217,
            "original_position": 217,
            "original_start_line": null,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": null,
            "pull_request_review_id": 1217990407,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048802618/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T18:29:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048802618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1048866389"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048866389"
                }
            },
            "author_association": "MEMBER",
            "body": "I've added the new message and some tests",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-14T19:12:25Z",
            "diff_hunk": "@@ -0,0 +1,220 @@\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---Can also be pretty printed with *:Inspect!*\n+---@param bufnr? number defaults to the current buffer\n+---@param row? number row to inspect, 0-based. Defaults to the row of the current cursor\n+---@param col? number col to inspect, 0-based. Defaults to the col of the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean|\"all\"): include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+---@return {treesitter:table,syntax:table,extmarks:table,semantic_tokens:table} (table) a table with the following key-value pairs. Items are in \"traversal order\":\n+---               - treesitter: a list of treesitter captures\n+---               - syntax: a list of syntax groups\n+---               - semantic_tokens: a list of semantic tokens\n+---               - extmarks: a list of extmarks\n+function vim.inspect_pos(bufnr, row, col, filter)\n+  filter = vim.tbl_deep_extend('force', defaults, filter or {})\n+\n+  bufnr = bufnr or 0\n+  if row == nil or col == nil then\n+    -- get the row/col from the first window displaying the buffer\n+    local win = bufnr == 0 and vim.api.nvim_get_current_win() or vim.fn.bufwinid(bufnr)\n+    if win == -1 then\n+      error('row/col is required for buffers not visible in a window')\n+    end\n+    local cursor = vim.api.nvim_win_get_cursor(win)\n+    row, col = cursor[1] - 1, cursor[2]\n+  end\n+  bufnr = bufnr == 0 and vim.api.nvim_get_current_buf() or bufnr\n+\n+  local results = {\n+    treesitter = {},\n+    syntax = {},\n+    extmarks = {},\n+    semantic_tokens = {},\n+  }\n+\n+  -- resolve hl links\n+  ---@private\n+  local function resolve_hl(data)\n+    if data.hl_group then\n+      local hlid = vim.api.nvim_get_hl_id_by_name(data.hl_group)\n+      local name = vim.fn.synIDattr(vim.fn.synIDtrans(hlid), 'name')\n+      data.hl_group_link = name\n+    end\n+    return data\n+  end\n+\n+  -- treesitter\n+  if filter.treesitter then\n+    for _, capture in pairs(vim.treesitter.get_captures_at_pos(bufnr, row, col)) do\n+      capture.hl_group = '@' .. capture.capture\n+      table.insert(results.treesitter, resolve_hl(capture))\n+    end\n+  end\n+\n+  -- syntax\n+  if filter.syntax then\n+    for _, i1 in ipairs(vim.fn.synstack(row + 1, col + 1)) do\n+      table.insert(results.syntax, resolve_hl({ hl_group = vim.fn.synIDattr(i1, 'name') }))\n+    end\n+  end\n+\n+  -- semantic tokens\n+  if filter.semantic_tokens then\n+    for _, token in ipairs(vim.lsp.semantic_tokens.get_at_pos(bufnr, row, col) or {}) do\n+      token.hl_groups = {\n+        type = resolve_hl({ hl_group = '@' .. token.type }),\n+        modifiers = vim.tbl_map(function(modifier)\n+          return resolve_hl({ hl_group = '@' .. modifier })\n+        end, token.modifiers or {}),\n+      }\n+      table.insert(results.semantic_tokens, token)\n+    end\n+  end\n+\n+  -- extmarks\n+  if filter.extmarks then\n+    for ns, nsid in pairs(vim.api.nvim_get_namespaces()) do\n+      if ns:find('vim_lsp_semantic_tokens') ~= 1 then\n+        local extmarks = vim.api.nvim_buf_get_extmarks(bufnr, nsid, 0, -1, { details = true })\n+        for _, extmark in ipairs(extmarks) do\n+          extmark = {\n+            ns_id = nsid,\n+            ns = ns,\n+            id = extmark[1],\n+            row = extmark[2],\n+            col = extmark[3],\n+            opts = resolve_hl(extmark[4]),\n+          }\n+          local end_row = extmark.opts.end_row or extmark.row -- inclusive\n+          local end_col = extmark.opts.end_col or (extmark.col + 1) -- exclusive\n+          if\n+            (filter.extmarks == 'all' or extmark.opts.hl_group) -- filter hl_group\n+            and (row >= extmark.row and row <= end_row) -- within the rows of the extmark\n+            and (row > extmark.row or col >= extmark.col) -- either not the first row, or in range of the col\n+            and (row < end_row or col < end_col) -- either not in the last row or in range of the col\n+          then\n+            table.insert(results.extmarks, extmark)\n+          end\n+        end\n+      end\n+    end\n+  end\n+  return results\n+end\n+\n+---Show all the items at a given buffer position\n+---\n+---Can also be shown with *:Inspect*\n+---@param bufnr? number defaults to the current buffer\n+---@param row? number row to inspect, 0-based. Defaults to the row of the current cursor\n+---@param col? number col to inspect, 0-based. Defaults to the col of the current cursor\n+---@param filter? InspectorFilter (table|nil) see |vim.inspect_pos()|\n+function vim.show_pos(bufnr, row, col, filter)\n+  local items = vim.inspect_pos(bufnr, row, col, filter)\n+\n+  local lines = { {} }\n+\n+  ---@private\n+  local function append(str, hl)\n+    table.insert(lines[#lines], { str, hl })\n+  end\n+\n+  ---@private\n+  local function nl()\n+    table.insert(lines, {})\n+  end\n+\n+  ---@private\n+  local function item(data, comment)\n+    append('  - ')\n+    append(data.hl_group, data.hl_group)\n+    append(' ')\n+    if data.hl_group ~= data.hl_group_link then\n+      append('links to ', 'MoreMsg')\n+      append(data.hl_group_link, data.hl_group_link)\n+      append(' ')\n+    end\n+    if comment then\n+      append(comment, 'Comment')\n+    end\n+    nl()\n+  end\n+\n+  -- treesitter\n+  if #items.treesitter > 0 then\n+    append('Treesitter', 'Title')\n+    nl()\n+    for _, capture in ipairs(items.treesitter) do\n+      item(capture, capture.lang)\n+    end\n+    nl()\n+  end\n+\n+  if #items.semantic_tokens > 0 then\n+    append('Semantic Tokens', 'Title')\n+    nl()\n+    for _, token in ipairs(items.semantic_tokens) do\n+      local client = vim.lsp.get_client_by_id(token.client_id)\n+      client = client and (' (' .. client.name .. ')') or ''\n+      item(token.hl_groups.type, 'type' .. client)\n+      for _, modifier in ipairs(token.hl_groups.modifiers) do\n+        item(modifier, 'modifier' .. client)\n+      end\n+    end\n+    nl()\n+  end\n+\n+  -- syntax\n+  if #items.syntax > 0 then\n+    append('Syntax', 'Title')\n+    nl()\n+    for _, syn in ipairs(items.syntax) do\n+      item(syn)\n+    end\n+    nl()\n+  end\n+  -- extmarks\n+  if #items.extmarks > 0 then\n+    append('Extmarks', 'Title')\n+    nl()\n+    for _, extmark in ipairs(items.extmarks) do\n+      if extmark.opts.hl_group then\n+        item(extmark.opts, extmark.ns)\n+      else\n+        append('  - ')\n+        append(extmark.ns, 'Comment')\n+        nl()\n+      end\n+    end\n+    nl()\n+  end\n+\n+  if #lines[#lines] == 0 then\n+    table.remove(lines)\n+  end\n+\n+  local chunks = {}\n+  for _, line in ipairs(lines) do\n+    vim.list_extend(chunks, line)\n+    table.insert(chunks, { '\\n' })\n+  end\n+  if #chunks == 0 then\n+    chunks = { { 'No highlights found' } }",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1048866389",
            "id": 1048866389,
            "in_reply_to_id": 1048802618,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-hG5V",
            "original_commit_id": "66234cf811fb7ea8a9e05af23868e4456dbfe438",
            "original_line": 217,
            "original_position": 217,
            "original_start_line": null,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": null,
            "pull_request_review_id": 1218082331,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048866389/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-14T19:12:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1048866389",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1051375119"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051375119"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n• |vim.inspect_pos()|, |vim.show_pos()| and |:Inspect| allow a user to get or show items\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-17T09:27:16Z",
            "diff_hunk": "@@ -39,6 +39,10 @@ NEW FEATURES                                                    *news-features*\n \n The following new APIs or features were added.\n \n+• |vim.inspect_pos()|, |vim.show_pos()| and |:Inspect| allows a user to get or show items",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1051375119",
            "id": 1051375119,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-qrYP",
            "original_commit_id": "0af8a7c60ffce82bd0793ac25fa75e7dd7055656",
            "original_line": 42,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1221773954,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051375119/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-17T09:31:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051375119",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1051375181"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051375181"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n---Get all the items at a given buffer position.\r\n---Can also be pretty-printed with *:Inspect!*\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-17T09:27:50Z",
            "diff_hunk": "@@ -0,0 +1,235 @@\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---Can also be pretty printed with *:Inspect!*",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1051375181",
            "id": 1051375181,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-qrZN",
            "original_commit_id": "0af8a7c60ffce82bd0793ac25fa75e7dd7055656",
            "original_line": 14,
            "original_position": 14,
            "original_start_line": 13,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": null,
            "pull_request_review_id": 1221773954,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051375181/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-12-17T09:31:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051375181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1051375414"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051375414"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nend, { desc = 'Inspect highlights and extmarks at the cursor', bang = true })\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-17T09:30:58Z",
            "diff_hunk": "@@ -0,0 +1,7 @@\n+vim.api.nvim_create_user_command('Inspect', function(cmd)\n+  if cmd.bang then\n+    vim.pretty_print(vim.inspect_pos())\n+  else\n+    vim.show_pos()\n+  end\n+end, { desc = 'Show all the items at the cursor', bang = true })",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1051375414",
            "id": 1051375414,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-qrc2",
            "original_commit_id": "0af8a7c60ffce82bd0793ac25fa75e7dd7055656",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/plugin/nvim.lua",
            "position": null,
            "pull_request_review_id": 1221773954,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051375414/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-17T09:33:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051375414",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1051376740"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051376740"
                }
            },
            "author_association": "MEMBER",
            "body": "You missed the period ;)",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-17T09:45:47Z",
            "diff_hunk": "@@ -0,0 +1,235 @@\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position\n+---Can also be pretty printed with *:Inspect!*",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1051376740",
            "id": 1051376740,
            "in_reply_to_id": 1051375181,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-qrxk",
            "original_commit_id": "0af8a7c60ffce82bd0793ac25fa75e7dd7055656",
            "original_line": 14,
            "original_position": 14,
            "original_start_line": 13,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": null,
            "pull_request_review_id": 1221775290,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051376740/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-12-17T09:45:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051376740",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1051389969"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051389969"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```\r\nI think the inline code example is enough.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-17T11:59:52Z",
            "diff_hunk": "@@ -0,0 +1,249 @@\n+--- this i a test\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position.\n+---\n+---Can also be pretty-printed with `:Inspect!` *:Inspect!*\n+---\n+---<pre>vim\n+---  :Inspect!\n+---</pre>",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1051389969",
            "id": 1051389969,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-qvAR",
            "original_commit_id": "120ecd6b34e5cb75ad94fd14dd9a78c42dbc8a2d",
            "original_line": 21,
            "original_position": 21,
            "original_start_line": 18,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": null,
            "pull_request_review_id": 1221787517,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051389969/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-12-17T12:00:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051389969",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1051389995"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051389995"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```\r\nsamesies.",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-17T12:00:11Z",
            "diff_hunk": "@@ -0,0 +1,249 @@\n+--- this i a test\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position.\n+---\n+---Can also be pretty-printed with `:Inspect!` *:Inspect!*\n+---\n+---<pre>vim\n+---  :Inspect!\n+---</pre>\n+---\n+---@param bufnr? number defaults to the current buffer\n+---@param row? number row to inspect, 0-based. Defaults to the row of the current cursor\n+---@param col? number col to inspect, 0-based. Defaults to the col of the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean|\"all\"): include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+---@return {treesitter:table,syntax:table,extmarks:table,semantic_tokens:table,buffer:number,col:number,row:number} (table) a table with the following key-value pairs. Items are in \"traversal order\":\n+---               - treesitter: a list of treesitter captures\n+---               - syntax: a list of syntax groups\n+---               - semantic_tokens: a list of semantic tokens\n+---               - extmarks: a list of extmarks\n+---               - buffer: the buffer used to get the items\n+---               - row: the row used to get the items\n+---               - col: the col used to get the items\n+function vim.inspect_pos(bufnr, row, col, filter)\n+  filter = vim.tbl_deep_extend('force', defaults, filter or {})\n+\n+  bufnr = bufnr or 0\n+  if row == nil or col == nil then\n+    -- get the row/col from the first window displaying the buffer\n+    local win = bufnr == 0 and vim.api.nvim_get_current_win() or vim.fn.bufwinid(bufnr)\n+    if win == -1 then\n+      error('row/col is required for buffers not visible in a window')\n+    end\n+    local cursor = vim.api.nvim_win_get_cursor(win)\n+    row, col = cursor[1] - 1, cursor[2]\n+  end\n+  bufnr = bufnr == 0 and vim.api.nvim_get_current_buf() or bufnr\n+\n+  local results = {\n+    treesitter = {},\n+    syntax = {},\n+    extmarks = {},\n+    semantic_tokens = {},\n+    buffer = bufnr,\n+    row = row,\n+    col = col,\n+  }\n+\n+  -- resolve hl links\n+  ---@private\n+  local function resolve_hl(data)\n+    if data.hl_group then\n+      local hlid = vim.api.nvim_get_hl_id_by_name(data.hl_group)\n+      local name = vim.fn.synIDattr(vim.fn.synIDtrans(hlid), 'name')\n+      data.hl_group_link = name\n+    end\n+    return data\n+  end\n+\n+  -- treesitter\n+  if filter.treesitter then\n+    for _, capture in pairs(vim.treesitter.get_captures_at_pos(bufnr, row, col)) do\n+      capture.hl_group = '@' .. capture.capture\n+      table.insert(results.treesitter, resolve_hl(capture))\n+    end\n+  end\n+\n+  -- syntax\n+  if filter.syntax then\n+    for _, i1 in ipairs(vim.fn.synstack(row + 1, col + 1)) do\n+      table.insert(results.syntax, resolve_hl({ hl_group = vim.fn.synIDattr(i1, 'name') }))\n+    end\n+  end\n+\n+  -- semantic tokens\n+  if filter.semantic_tokens then\n+    for _, token in ipairs(vim.lsp.semantic_tokens.get_at_pos(bufnr, row, col) or {}) do\n+      token.hl_groups = {\n+        type = resolve_hl({ hl_group = '@' .. token.type }),\n+        modifiers = vim.tbl_map(function(modifier)\n+          return resolve_hl({ hl_group = '@' .. modifier })\n+        end, token.modifiers or {}),\n+      }\n+      table.insert(results.semantic_tokens, token)\n+    end\n+  end\n+\n+  -- extmarks\n+  if filter.extmarks then\n+    for ns, nsid in pairs(vim.api.nvim_get_namespaces()) do\n+      if ns:find('vim_lsp_semantic_tokens') ~= 1 then\n+        local extmarks = vim.api.nvim_buf_get_extmarks(bufnr, nsid, 0, -1, { details = true })\n+        for _, extmark in ipairs(extmarks) do\n+          extmark = {\n+            ns_id = nsid,\n+            ns = ns,\n+            id = extmark[1],\n+            row = extmark[2],\n+            col = extmark[3],\n+            opts = resolve_hl(extmark[4]),\n+          }\n+          local end_row = extmark.opts.end_row or extmark.row -- inclusive\n+          local end_col = extmark.opts.end_col or (extmark.col + 1) -- exclusive\n+          if\n+            (filter.extmarks == 'all' or extmark.opts.hl_group) -- filter hl_group\n+            and (row >= extmark.row and row <= end_row) -- within the rows of the extmark\n+            and (row > extmark.row or col >= extmark.col) -- either not the first row, or in range of the col\n+            and (row < end_row or col < end_col) -- either not in the last row or in range of the col\n+          then\n+            table.insert(results.extmarks, extmark)\n+          end\n+        end\n+      end\n+    end\n+  end\n+  return results\n+end\n+\n+---Show all the items at a given buffer position.\n+---\n+---\n+---Can also be shown with `:Inspect` *:Inspect*\n+---\n+---<pre>vim\n+---  :Inspect\n+---</pre>",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1051389995",
            "id": 1051389995,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-qvAr",
            "original_commit_id": "120ecd6b34e5cb75ad94fd14dd9a78c42dbc8a2d",
            "original_line": 141,
            "original_position": 141,
            "original_start_line": 138,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": null,
            "pull_request_review_id": 1221787517,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051389995/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-12-17T12:00:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051389995",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1051390376"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051390376"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-17T12:04:05Z",
            "diff_hunk": "@@ -0,0 +1,240 @@\n+--- this i a test",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1051390376",
            "id": 1051390376,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-qvGo",
            "original_commit_id": "1f9cf5606b18e0d345fd92eff60454330a5a88dd",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": null,
            "pull_request_review_id": 1221788007,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051390376/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-17T12:04:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051390376",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1051390429"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051390429"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n---Can also be pretty-printed with `:Inspect!`. *:Inspect!*\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-17T12:04:15Z",
            "diff_hunk": "@@ -0,0 +1,240 @@\n+--- this i a test\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position.\n+---\n+---Can also be pretty-printed with `:Inspect!` *:Inspect!*",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1051390429",
            "id": 1051390429,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-qvHd",
            "original_commit_id": "1f9cf5606b18e0d345fd92eff60454330a5a88dd",
            "original_line": 17,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": null,
            "pull_request_review_id": 1221788007,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051390429/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-17T12:04:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051390429",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/21393#discussion_r1051390441"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/21393"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051390441"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n---Can also be shown with `:Inspect`. *:Inspect*\r\n```",
            "commit_id": "ef91146efcece1b6d97152251e7137d301146189",
            "created_at": "2022-12-17T12:04:30Z",
            "diff_hunk": "@@ -0,0 +1,240 @@\n+--- this i a test\n+\n+---@class InspectorFilter\n+---@field syntax boolean include syntax based highlight groups (defaults to true)\n+---@field treesitter boolean include treesitter based highlight groups (defaults to true)\n+---@field extmarks boolean|\"all\" include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---@field semantic_tokens boolean include semantic tokens (defaults to true)\n+local defaults = {\n+  syntax = true,\n+  treesitter = true,\n+  extmarks = true,\n+  semantic_tokens = true,\n+}\n+\n+---Get all the items at a given buffer position.\n+---\n+---Can also be pretty-printed with `:Inspect!` *:Inspect!*\n+---\n+---@param bufnr? number defaults to the current buffer\n+---@param row? number row to inspect, 0-based. Defaults to the row of the current cursor\n+---@param col? number col to inspect, 0-based. Defaults to the col of the current cursor\n+---@param filter? InspectorFilter (table|nil) a table with key-value pairs to filter the items\n+---               - syntax (boolean): include syntax based highlight groups (defaults to true)\n+---               - treesitter (boolean): include treesitter based highlight groups (defaults to true)\n+---               - extmarks (boolean|\"all\"): include extmarks. When `all`, then extmarks without a `hl_group` will also be included (defaults to true)\n+---               - semantic_tokens (boolean): include semantic tokens (defaults to true)\n+---@return {treesitter:table,syntax:table,extmarks:table,semantic_tokens:table,buffer:number,col:number,row:number} (table) a table with the following key-value pairs. Items are in \"traversal order\":\n+---               - treesitter: a list of treesitter captures\n+---               - syntax: a list of syntax groups\n+---               - semantic_tokens: a list of semantic tokens\n+---               - extmarks: a list of extmarks\n+---               - buffer: the buffer used to get the items\n+---               - row: the row used to get the items\n+---               - col: the col used to get the items\n+function vim.inspect_pos(bufnr, row, col, filter)\n+  filter = vim.tbl_deep_extend('force', defaults, filter or {})\n+\n+  bufnr = bufnr or 0\n+  if row == nil or col == nil then\n+    -- get the row/col from the first window displaying the buffer\n+    local win = bufnr == 0 and vim.api.nvim_get_current_win() or vim.fn.bufwinid(bufnr)\n+    if win == -1 then\n+      error('row/col is required for buffers not visible in a window')\n+    end\n+    local cursor = vim.api.nvim_win_get_cursor(win)\n+    row, col = cursor[1] - 1, cursor[2]\n+  end\n+  bufnr = bufnr == 0 and vim.api.nvim_get_current_buf() or bufnr\n+\n+  local results = {\n+    treesitter = {},\n+    syntax = {},\n+    extmarks = {},\n+    semantic_tokens = {},\n+    buffer = bufnr,\n+    row = row,\n+    col = col,\n+  }\n+\n+  -- resolve hl links\n+  ---@private\n+  local function resolve_hl(data)\n+    if data.hl_group then\n+      local hlid = vim.api.nvim_get_hl_id_by_name(data.hl_group)\n+      local name = vim.fn.synIDattr(vim.fn.synIDtrans(hlid), 'name')\n+      data.hl_group_link = name\n+    end\n+    return data\n+  end\n+\n+  -- treesitter\n+  if filter.treesitter then\n+    for _, capture in pairs(vim.treesitter.get_captures_at_pos(bufnr, row, col)) do\n+      capture.hl_group = '@' .. capture.capture\n+      table.insert(results.treesitter, resolve_hl(capture))\n+    end\n+  end\n+\n+  -- syntax\n+  if filter.syntax then\n+    for _, i1 in ipairs(vim.fn.synstack(row + 1, col + 1)) do\n+      table.insert(results.syntax, resolve_hl({ hl_group = vim.fn.synIDattr(i1, 'name') }))\n+    end\n+  end\n+\n+  -- semantic tokens\n+  if filter.semantic_tokens then\n+    for _, token in ipairs(vim.lsp.semantic_tokens.get_at_pos(bufnr, row, col) or {}) do\n+      token.hl_groups = {\n+        type = resolve_hl({ hl_group = '@' .. token.type }),\n+        modifiers = vim.tbl_map(function(modifier)\n+          return resolve_hl({ hl_group = '@' .. modifier })\n+        end, token.modifiers or {}),\n+      }\n+      table.insert(results.semantic_tokens, token)\n+    end\n+  end\n+\n+  -- extmarks\n+  if filter.extmarks then\n+    for ns, nsid in pairs(vim.api.nvim_get_namespaces()) do\n+      if ns:find('vim_lsp_semantic_tokens') ~= 1 then\n+        local extmarks = vim.api.nvim_buf_get_extmarks(bufnr, nsid, 0, -1, { details = true })\n+        for _, extmark in ipairs(extmarks) do\n+          extmark = {\n+            ns_id = nsid,\n+            ns = ns,\n+            id = extmark[1],\n+            row = extmark[2],\n+            col = extmark[3],\n+            opts = resolve_hl(extmark[4]),\n+          }\n+          local end_row = extmark.opts.end_row or extmark.row -- inclusive\n+          local end_col = extmark.opts.end_col or (extmark.col + 1) -- exclusive\n+          if\n+            (filter.extmarks == 'all' or extmark.opts.hl_group) -- filter hl_group\n+            and (row >= extmark.row and row <= end_row) -- within the rows of the extmark\n+            and (row > extmark.row or col >= extmark.col) -- either not the first row, or in range of the col\n+            and (row < end_row or col < end_col) -- either not in the last row or in range of the col\n+          then\n+            table.insert(results.extmarks, extmark)\n+          end\n+        end\n+      end\n+    end\n+  end\n+  return results\n+end\n+\n+---Show all the items at a given buffer position.\n+---\n+---Can also be shown with `:Inspect` *:Inspect*",
            "html_url": "https://github.com/neovim/neovim/pull/21393#discussion_r1051390441",
            "id": 1051390441,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4-qvHp",
            "original_commit_id": "1f9cf5606b18e0d345fd92eff60454330a5a88dd",
            "original_line": 132,
            "original_position": 132,
            "original_start_line": null,
            "path": "runtime/lua/vim/_inspector.lua",
            "position": null,
            "pull_request_review_id": 1221788007,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051390441/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-12-17T12:04:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1051390441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Could it display them in ascending order of priority? That would be pretty neat! Could easily visualize which highlights override others. ",
            "created_at": "2022-12-13T00:20:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1347564902",
            "id": 1347564902,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QUjVm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1347564902/reactions"
            },
            "updated_at": "2022-12-13T00:20:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1347564902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/394891?v=4",
                "events_url": "https://api.github.com/users/jdrouhard/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdrouhard/followers",
                "following_url": "https://api.github.com/users/jdrouhard/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdrouhard/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdrouhard",
                "id": 394891,
                "login": "jdrouhard",
                "node_id": "MDQ6VXNlcjM5NDg5MQ==",
                "organizations_url": "https://api.github.com/users/jdrouhard/orgs",
                "received_events_url": "https://api.github.com/users/jdrouhard/received_events",
                "repos_url": "https://api.github.com/users/jdrouhard/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdrouhard/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdrouhard/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdrouhard"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Just a note: It'd be good to distinguish here between LSP semantic token _type_ and token _modifiers_. (The exact source of these highlights is important information.)",
            "created_at": "2022-12-13T05:11:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1347758402",
            "id": 1347758402,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QVSlC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1347758402/reactions"
            },
            "updated_at": "2022-12-13T05:11:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1347758402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For `(2)` it could be useful to also expose the functionality as a function where the caller can specify the `(buf, row, col)` and possible `filter`. The `:Inspect` command would then use the defaults.",
            "created_at": "2022-12-13T06:30:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1347811107",
            "id": 1347811107,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QVfcj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1347811107/reactions"
            },
            "updated_at": "2022-12-13T12:27:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1347811107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Just a note: It'd be good to distinguish here between LSP semantic token _type_ and token _modifiers_. (The exact source of these highlights is important information.)\r\n\r\nyes, for sure! Haven't looked closely yet at the new Semantic Tokens API. Will look into it and add the changes",
            "created_at": "2022-12-13T06:31:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1347811556",
            "id": 1347811556,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QVfjk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1347811556/reactions"
            },
            "updated_at": "2022-12-13T06:31:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1347811556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk where do you propose to add `vim.get_at_pos` and `vim.show_at_pos`? Also the `nvim_create_user_command` for `:Inspect`. I mean code wise. `_editor.lua`, `inspect.lua`, or in a separate file like `inspector.lua`, `debug.lua`?",
            "created_at": "2022-12-13T06:33:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1347813394",
            "id": 1347813394,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QVgAS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1347813394/reactions"
            },
            "updated_at": "2022-12-13T07:41:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1347813394",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "not sure\r\nbut wouldn't it make sense to make the columns 1-indexed?\r\nso it would work with the functions listed under `:h api-indexing` (most notably `nvim_win_get_cursor`)\r\nedit:\r\n\"work with\" in the sense of not having to add a `- 1` all the time",
            "created_at": "2022-12-13T17:19:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349135833",
            "id": 1349135833,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qai3Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349135833/reactions"
            },
            "updated_at": "2022-12-13T17:20:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349135833",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@max397574 wasn't sure what the concensus is right now. Maybe @justinmk can chime in on this?\r\n",
            "created_at": "2022-12-13T17:21:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349146237",
            "id": 1349146237,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QalZ9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349146237/reactions"
            },
            "updated_at": "2022-12-13T17:21:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349146237",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> put the `nvim_create_user_command` somewhere. What would be the best place for this? `_editor.lua`? `plugin/inspector.lua`?\r\n\r\nI suggest `runtime/plugin/nvim.lua` for now.\r\n\r\n> wouldn't it make sense to make the columns 1-indexed? so it would work with the functions listed under :h api-indexing (most notably nvim_win_get_cursor)\r\n\r\nconfused by the question because `:h api-index` mentions that nvim_win_get_cursor uses mark-like indexing (1-indexed row, 0-indexed col). (Not sure _why_ nvim_win_get_cursor does that, because typically editor functions like `getcurpos()` are (1,1)-indexed).",
            "created_at": "2022-12-13T21:55:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349813392",
            "id": 1349813392,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QdISQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349813392/reactions"
            },
            "updated_at": "2022-12-13T21:55:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349813392",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think it's necessary to duplicate the semantic tokens under the  `extmarks` category. Modifiers should also have the leading `@` (since that's the highlight name).",
            "created_at": "2022-12-13T22:08:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349854980",
            "id": 1349854980,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QdScE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349854980/reactions"
            },
            "updated_at": "2022-12-13T22:11:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349854980",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason wasn't sure about the extmarks. Might make sense to include them there too, since they are effectively extmarks, but that's indeed duplication. Treesitter is different since those extmarks are ephemeral, so they are not visible as an extmark. But you're right. Will exclude the semantic token ones.\n\nI still haven't fully looked into the semantic tokens. Can a modifier be used as a hl group on its own? Or is it always in combination with the token type? Like `@variable.declaration`?",
            "created_at": "2022-12-13T22:36:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349923868",
            "id": 1349923868,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QdjQc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349923868/reactions"
            },
            "updated_at": "2022-12-13T22:36:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349923868",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk api indexing is normally 0-0 based, but some functions are indeed 1-0 mark based. Editor vim.fn functions are 1-1 based.\n\nCurrently I used 0-0 api indexing, because i thought that's what all the new things use but i might be wrong.\n\nTreesitter, semantic tokens etc all use api indexing as well, so 0-0 based.\n\n@clason what do you think?",
            "created_at": "2022-12-13T22:39:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349930448",
            "id": 1349930448,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qdk3Q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349930448/reactions"
            },
            "updated_at": "2022-12-13T22:41:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349930448",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @clason what do you think? What indexing do the treesitter and semantic token APIs use?\r\n\r\nSemantic tokens API is 0-0 based",
            "created_at": "2022-12-13T22:41:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349934555",
            "id": 1349934555,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qdl3b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349934555/reactions"
            },
            "updated_at": "2022-12-13T22:41:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349934555",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/394891?v=4",
                "events_url": "https://api.github.com/users/jdrouhard/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdrouhard/followers",
                "following_url": "https://api.github.com/users/jdrouhard/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdrouhard/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdrouhard",
                "id": 394891,
                "login": "jdrouhard",
                "node_id": "MDQ6VXNlcjM5NDg5MQ==",
                "organizations_url": "https://api.github.com/users/jdrouhard/orgs",
                "received_events_url": "https://api.github.com/users/jdrouhard/received_events",
                "repos_url": "https://api.github.com/users/jdrouhard/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdrouhard/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdrouhard/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdrouhard"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I still haven't fully looked into the semantic tokens. Can a modifier be used as a hl group on its own? Or is it always in combination with the token type? Like `@variable.declaration`?\r\n\r\nCurrently they are added as their own highlight group, but eventually we’ll be updating the way they work to somehow allow combinations of types with modifiers (potentially like `@variable.declaration`), but that is not currently part of the functionality. \r\n",
            "created_at": "2022-12-13T22:43:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349939023",
            "id": 1349939023,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qdm9P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349939023/reactions"
            },
            "updated_at": "2022-12-13T22:43:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349939023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/394891?v=4",
                "events_url": "https://api.github.com/users/jdrouhard/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdrouhard/followers",
                "following_url": "https://api.github.com/users/jdrouhard/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdrouhard/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdrouhard",
                "id": 394891,
                "login": "jdrouhard",
                "node_id": "MDQ6VXNlcjM5NDg5MQ==",
                "organizations_url": "https://api.github.com/users/jdrouhard/orgs",
                "received_events_url": "https://api.github.com/users/jdrouhard/received_events",
                "repos_url": "https://api.github.com/users/jdrouhard/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdrouhard/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdrouhard/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdrouhard"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@jdrouhard ah ok, that makes sense. Will update this PR tomorrow to add in the hl groups then!",
            "created_at": "2022-12-13T22:45:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349942732",
            "id": 1349942732,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qdn3M",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349942732/reactions"
            },
            "updated_at": "2022-12-13T22:45:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349942732",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I could actually have seen it worked like that if I'd look closely enough at my own screenshot 😅",
            "created_at": "2022-12-13T22:47:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349946957",
            "id": 1349946957,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qdo5N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349946957/reactions"
            },
            "updated_at": "2022-12-13T23:01:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349946957",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Currently I used 0-0 api indexing, because i thought that's what all the new things use but i might be wrong.\r\n> Treesitter, semantic tokens etc all use api indexing as well, so 0-0 based.\r\n\r\nOk. Consistency is probably most important, especially function-families that work together. If these values are used with API-style functions then 0,0 makes sense.",
            "created_at": "2022-12-13T23:07:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1349992918",
            "id": 1349992918,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qd0HW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349992918/reactions"
            },
            "updated_at": "2022-12-13T23:15:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1349992918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk for performance reaons I'm a bit hesitant to move the code under `_editor.lua`, since that would then always get sourced, which is not ideal.\r\n\r\nInstead I moved it to `_inspector.lua`. This is not available at `vim._inspector`, but will now be lazy-loaded when called from `vim.inspect_pos` and `vim.show_pos`.\r\n\r\nI've also added the `:Inspect` command and removed the semantic tokens from the extmarks section.",
            "created_at": "2022-12-14T09:49:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1350752860",
            "id": 1350752860,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qgtpc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350752860/reactions"
            },
            "updated_at": "2022-12-14T09:50:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350752860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @jdrouhard ah ok, that makes sense. Will update this PR tomorrow to add in the hl groups then!\r\n\r\nIn your first screenshot, the modifier should also include the `@` (`@declaration`), since that's a separate highlight group.\r\n\r\nSince you can have multiple modifiers whose highlight groups can have links, it might be better to format this more generously, e.g.,\r\n```\r\nSemantic Tokens\r\n  - type: @variable links to Identifier\r\n  - modifiers: @declaration links to Foo\r\n               @readonly links to Bar\r\n  - type: ...\r\n```\r\n(Not sure how prevalent multiple tokens -- from multiple attached servers -- are in practice, so it might not make sense to work around that situation.)",
            "created_at": "2022-12-14T09:53:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1350758846",
            "id": 1350758846,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QgvG-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350758846/reactions"
            },
            "updated_at": "2022-12-14T09:57:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350758846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason I haven't updated the screenshots yet, but this is how it currently looks like:\r\n![image](https://user-images.githubusercontent.com/292349/207565296-bdd4c791-d898-4afb-a9db-8f4400521358.png)\r\n",
            "created_at": "2022-12-14T10:00:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1350771011",
            "id": 1350771011,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QgyFD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350771011/reactions"
            },
            "updated_at": "2022-12-14T10:11:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350771011",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @clason I haven't updated the screenshots yet, but this is how it currently looks like:\r\n\r\nGreat, I just wasn't sure! But I still stand by my suggestion to separate type and modifier(s) -- makes it a bit easier to inspect tokens without having to memorize the names (which servers may customize).",
            "created_at": "2022-12-14T10:03:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1350775863",
            "id": 1350775863,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QgzQ3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350775863/reactions"
            },
            "updated_at": "2022-12-14T10:03:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350775863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason this better?\r\n![image](https://user-images.githubusercontent.com/292349/207567265-7a7e4cfc-7b07-4e49-ad69-73cfc9dad7b3.png)\r\n",
            "created_at": "2022-12-14T10:10:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1350787364",
            "id": 1350787364,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qg2Ek",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350787364/reactions"
            },
            "updated_at": "2022-12-14T10:32:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350787364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes :) \r\n\r\nFor extra credit, you could also get the server name (`type (clangd)`) ;)",
            "created_at": "2022-12-14T10:14:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1350793148",
            "id": 1350793148,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qg3e8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350793148/reactions"
            },
            "updated_at": "2022-12-14T10:18:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350793148",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Here you go :) Also added an example with a link\r\n\r\n![image](https://user-images.githubusercontent.com/292349/207570167-0fb872f7-b2a7-4a82-b8a9-9a7b7fbd039c.png)\r\n",
            "created_at": "2022-12-14T10:24:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1350810119",
            "id": 1350810119,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Qg7oH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350810119/reactions"
            },
            "updated_at": "2022-12-14T10:24:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350810119",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Just noticed `@spell` isn't working fully. Not sure if it needs to.",
            "created_at": "2022-12-14T10:48:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1350895408",
            "id": 1350895408,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QhQcw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350895408/reactions"
            },
            "updated_at": "2022-12-14T10:48:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350895408",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Nice :) gonna shut up now :)",
            "created_at": "2022-12-14T10:49:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1350899343",
            "id": 1350899343,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QhRaP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350899343/reactions"
            },
            "updated_at": "2022-12-14T10:49:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1350899343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Just noticed `@spell` isn't working fully. Not sure if it needs to.\n\nIt should show under treesitter. Check in a Lua comment for example. Spelling mistakes are not shown, since I assume those are also added with ephemeral extmarks.\n\nCan you give an example of where it's not working?\n",
            "created_at": "2022-12-14T11:46:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1351130793",
            "id": 1351130793,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QiJ6p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1351130793/reactions"
            },
            "updated_at": "2022-12-14T11:46:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1351130793",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Spelling mistakes are not shown\r\n\r\nThis is what I meant. I guess this isn't super important to show.\r\n\r\nThinking about it, is there scope here to display more properties of extmarks. E.g. here `@spell` is a hl group, but it's essentially unused, what is used is the fact the extmark is set with `spell = true` (though they are ephemeral so won't show anyway). Other attributes like `id`, `hl_mode`, `priority` might also be good to annotate. With that said, these should be displayed with `Inspect!` right?",
            "created_at": "2022-12-14T11:58:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1351176098",
            "id": 1351176098,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QiU-i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1351176098/reactions"
            },
            "updated_at": "2022-12-14T11:58:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1351176098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> With that said, these should be displayed with Inspect! right?\r\n\r\nYep, exactly!",
            "created_at": "2022-12-14T14:07:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1351421251",
            "id": 1351421251,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QjQ1D",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1351421251/reactions"
            },
            "updated_at": "2022-12-14T14:07:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1351421251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "As far as I'm concerned this PR is ready to merge!",
            "created_at": "2022-12-14T14:14:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1351456763",
            "id": 1351456763,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QjZf7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1351456763/reactions"
            },
            "updated_at": "2022-12-14T14:14:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1351456763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Tests added!",
            "created_at": "2022-12-14T19:12:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1352013296",
            "id": 1352013296,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5QlhXw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1352013296/reactions"
            },
            "updated_at": "2022-12-14T19:12:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1352013296",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk any chance we can get this merged?",
            "created_at": "2022-12-17T08:41:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1356122735",
            "id": 1356122735,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Q1Mpv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356122735/reactions"
            },
            "updated_at": "2022-12-17T08:41:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356122735",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason any suggestions on where I could document the `:Inspect` command? Right now I just mention it in the docs for `vim.inspect_pos` and `vim.show_pos`. Is that enough?",
            "created_at": "2022-12-17T09:37:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1356144801",
            "id": 1356144801,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Q1SCh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356144801/reactions"
            },
            "updated_at": "2022-12-17T09:37:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356144801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I wants it, I merges it; \r\n\r\n> @clason any suggestions on where I could document the `:Inspect` command? Right now I just mention it in the docs for `vim.inspect_pos` and `vim.show_pos`. Is that enough?\r\n\r\nGood question, we don't really have precedent for it. My first idea is to put a dedicated manual section at the top of the `Inspector` module documentation; as it's meant to be the default user interface, it'd be nice if it had a separate section. (And same for `:Inspect!` -- having them next to each other makes it easier to grok the difference.)",
            "created_at": "2022-12-17T09:41:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1356147329",
            "id": 1356147329,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Q1SqB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356147329/reactions"
            },
            "updated_at": "2022-12-17T09:44:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356147329",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "How do I do that? Is there any special markup I need to use to have it show up in the docs?",
            "created_at": "2022-12-17T09:46:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1356147856",
            "id": 1356147856,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Q1SyQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356147856/reactions"
            },
            "updated_at": "2022-12-17T09:46:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356147856",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason fixed the tag aligment. It took a while 😄 ",
            "created_at": "2022-12-17T11:11:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1356183907",
            "id": 1356183907,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Q1blj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356183907/reactions"
            },
            "updated_at": "2022-12-17T11:31:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356183907",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason updated!",
            "created_at": "2022-12-17T12:02:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1356226714",
            "id": 1356226714,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Q1mCa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356226714/reactions"
            },
            "updated_at": "2022-12-17T12:02:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356226714",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I wants it, I merges it -- further changes can be made in the follow-up PR.\r\n\r\nNoice job, @folke!",
            "created_at": "2022-12-17T12:42:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1356241717",
            "id": 1356241717,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Q1ps1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 6,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356241717/reactions"
            },
            "updated_at": "2022-12-17T12:42:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356241717",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason awesome, thanks!",
            "created_at": "2022-12-17T13:17:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1356259780",
            "id": 1356259780,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Q1uHE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356259780/reactions"
            },
            "updated_at": "2022-12-17T13:17:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356259780",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "NONE",
            "body": "Neat stuff. But aren't core commands supposed to start with a small letter? `:inspect(!)` instead of `:Inspect(!)`?",
            "created_at": "2022-12-18T14:33:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1356812343",
            "id": 1356812343,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Q31A3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356812343/reactions"
            },
            "updated_at": "2022-12-18T14:33:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356812343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/75364377?v=4",
                "events_url": "https://api.github.com/users/B4mbus/events{/privacy}",
                "followers_url": "https://api.github.com/users/B4mbus/followers",
                "following_url": "https://api.github.com/users/B4mbus/following{/other_user}",
                "gists_url": "https://api.github.com/users/B4mbus/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/B4mbus",
                "id": 75364377,
                "login": "B4mbus",
                "node_id": "MDQ6VXNlcjc1MzY0Mzc3",
                "organizations_url": "https://api.github.com/users/B4mbus/orgs",
                "received_events_url": "https://api.github.com/users/B4mbus/received_events",
                "repos_url": "https://api.github.com/users/B4mbus/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/B4mbus/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/B4mbus/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/B4mbus"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, but this is _not_ a core command. It's provided by a (bundled) runtime plugin, same as `:Man`.",
            "created_at": "2022-12-18T14:39:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1356813500",
            "id": 1356813500,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Q31S8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 8,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356813500/reactions"
            },
            "updated_at": "2022-12-18T14:39:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1356813500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Inspect might be a good addition to the default mouse right-click menu.",
            "created_at": "2023-01-02T00:50:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1368583617",
            "id": 1368583617,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Rku3B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1368583617/reactions"
            },
            "updated_at": "2023-01-02T00:50:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1368583617",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Inspect might be a good addition to the default mouse right-click menu.\r\n\r\n`:Inspect` is created by `runtime/plugin/nvim.lua`, which is loaded after user config, and is not loaded with `nvim -u NONE`. If the menu item is added as a default menu item it may cause errors with `nvim -u NONE`, but if the menu item is also created by `runtime/plugin/nvim.lua` the user cannot remove it in their config like other default menu items.",
            "created_at": "2023-01-03T11:52:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1369681805",
            "id": 1369681805,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5Ro6-N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1369681805/reactions"
            },
            "updated_at": "2023-01-03T11:52:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1369681805",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "NONE",
            "body": "I was curious what happens if I do `set ve=all` and try to `:Inspect` virtual text. Sadly nothing. Wouldn't it be nice addition?",
            "created_at": "2023-01-06T19:37:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1374043967",
            "id": 1374043967,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5R5j8_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1374043967/reactions"
            },
            "updated_at": "2023-01-06T19:37:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1374043967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13090277?v=4",
                "events_url": "https://api.github.com/users/vlada-dudr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vlada-dudr/followers",
                "following_url": "https://api.github.com/users/vlada-dudr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vlada-dudr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vlada-dudr",
                "id": 13090277,
                "login": "vlada-dudr",
                "node_id": "MDQ6VXNlcjEzMDkwMjc3",
                "organizations_url": "https://api.github.com/users/vlada-dudr/orgs",
                "received_events_url": "https://api.github.com/users/vlada-dudr/received_events",
                "repos_url": "https://api.github.com/users/vlada-dudr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vlada-dudr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vlada-dudr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vlada-dudr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk Hi, maybe it is better do not add custom command, because some other plugin use this command too, for example. https://github.com/sheerun/vim-inspect\r\n\r\nadd `vim.show_pos` or `vim.inspect_pos` module is better, and user can create command themself.",
            "created_at": "2023-04-02T14:58:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/21393#issuecomment-1493365413",
            "id": 1493365413,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
            "node_id": "IC_kwDOAPphoM5ZAvKl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1493365413/reactions"
            },
            "updated_at": "2023-04-02T15:00:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1493365413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13142418?v=4",
                "events_url": "https://api.github.com/users/wsdjeg/events{/privacy}",
                "followers_url": "https://api.github.com/users/wsdjeg/followers",
                "following_url": "https://api.github.com/users/wsdjeg/following{/other_user}",
                "gists_url": "https://api.github.com/users/wsdjeg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wsdjeg",
                "id": 13142418,
                "login": "wsdjeg",
                "node_id": "MDQ6VXNlcjEzMTQyNDE4",
                "organizations_url": "https://api.github.com/users/wsdjeg/orgs",
                "received_events_url": "https://api.github.com/users/wsdjeg/received_events",
                "repos_url": "https://api.github.com/users/wsdjeg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wsdjeg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wsdjeg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wsdjeg"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/21393/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/21393/commits",
    "created_at": "2022-12-12T22:56:47Z",
    "diff_url": "https://github.com/neovim/neovim/pull/21393.diff",
    "draft": false,
    "head": {
        "label": "folke:highlight_show",
        "ref": "highlight_show",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/folke/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/folke/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/folke/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/folke/neovim/branches{/branch}",
            "clone_url": "https://github.com/folke/neovim.git",
            "collaborators_url": "https://api.github.com/repos/folke/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/folke/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/folke/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/folke/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/folke/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/folke/neovim/contributors",
            "created_at": "2021-05-20T08:16:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/folke/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/folke/neovim/downloads",
            "events_url": "https://api.github.com/repos/folke/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/folke/neovim/forks",
            "full_name": "folke/neovim",
            "git_commits_url": "https://api.github.com/repos/folke/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/folke/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/folke/neovim/git/tags{/sha}",
            "git_url": "git://github.com/folke/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/folke/neovim/hooks",
            "html_url": "https://github.com/folke/neovim",
            "id": 369133134,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/folke/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/folke/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/folke/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/folke/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/folke/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/folke/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/folke/neovim/merges",
            "milestones_url": "https://api.github.com/repos/folke/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNjkxMzMxMzQ=",
            "notifications_url": "https://api.github.com/repos/folke/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/folke/neovim/pulls{/number}",
            "pushed_at": "2023-08-01T05:25:31Z",
            "releases_url": "https://api.github.com/repos/folke/neovim/releases{/id}",
            "size": 241914,
            "ssh_url": "git@github.com:folke/neovim.git",
            "stargazers_count": 5,
            "stargazers_url": "https://api.github.com/repos/folke/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/folke/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/folke/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/folke/neovim/subscription",
            "svn_url": "https://github.com/folke/neovim",
            "tags_url": "https://api.github.com/repos/folke/neovim/tags",
            "teams_url": "https://api.github.com/repos/folke/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/folke/neovim/git/trees{/sha}",
            "updated_at": "2023-07-25T19:06:38Z",
            "url": "https://api.github.com/repos/folke/neovim",
            "visibility": "public",
            "watchers": 5,
            "watchers_count": 5,
            "web_commit_signoff_required": false
        },
        "sha": "ef91146efcece1b6d97152251e7137d301146189",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
            "events_url": "https://api.github.com/users/folke/events{/privacy}",
            "followers_url": "https://api.github.com/users/folke/followers",
            "following_url": "https://api.github.com/users/folke/following{/other_user}",
            "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/folke",
            "id": 292349,
            "login": "folke",
            "node_id": "MDQ6VXNlcjI5MjM0OQ==",
            "organizations_url": "https://api.github.com/users/folke/orgs",
            "received_events_url": "https://api.github.com/users/folke/received_events",
            "repos_url": "https://api.github.com/users/folke/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/folke"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/21393",
    "id": 1161817364,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21393",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": true,
    "merge_commit_sha": "1c4794944deb734b24b4a424c50b766a96e050dd",
    "merged_at": "2022-12-17T12:43:47Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5FP-0U",
    "number": 21393,
    "patch_url": "https://github.com/neovim/neovim/pull/21393.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/21393/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ef91146efcece1b6d97152251e7137d301146189",
    "title": "feat:  `vim.inspect_pos()`, `vim.show_pos()` and `:Inspect`",
    "updated_at": "2023-08-01T09:49:22Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/21393",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
        "events_url": "https://api.github.com/users/folke/events{/privacy}",
        "followers_url": "https://api.github.com/users/folke/followers",
        "following_url": "https://api.github.com/users/folke/following{/other_user}",
        "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/folke",
        "id": 292349,
        "login": "folke",
        "node_id": "MDQ6VXNlcjI5MjM0OQ==",
        "organizations_url": "https://api.github.com/users/folke/orgs",
        "received_events_url": "https://api.github.com/users/folke/received_events",
        "repos_url": "https://api.github.com/users/folke/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/folke"
    }
}