{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28477/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28477/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/28477"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28477"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28477/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5293,
            "forks_count": 5293,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1717,
            "open_issues_count": 1717,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-04-29T23:44:26Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 268725,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 76625,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-04-30T01:59:13Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 76625,
            "watchers_count": 76625,
            "web_commit_signoff_required": false
        },
        "sha": "a1550dbf0ac252052a7a71780708d3ec05aa3686",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "vim.fs.root() is a function for finding a project root relative to a buffer using one or more \"root markers\". This is useful for LSP and could be useful for other \"projects\" designs, as well as for any plugins which work with a \"projects\" concept.\r\n",
    "closed_at": "2024-04-25T02:43:46Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577207398"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577207398"
                }
            },
            "author_association": "MEMBER",
            "body": "IMO `Directory` makes it sound as if this was returning an object.\r\n\r\n```suggestion\r\n        (`string?`) Directory name containing one of the given markers, or nil if\r\n```",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T03:38:01Z",
            "diff_hunk": "@@ -2937,6 +2930,34 @@ vim.fs.find({names}, {opts})                                   *vim.fs.find()*\n         (`string[]`) Normalized paths |vim.fs.normalize()| of all matching\n         items\n \n+vim.fs.findroot({bufnr}, {marker})                         *vim.fs.findroot()*\n+    Find the first parent directory containing a specific \"marker\", relative\n+    to a buffer's directory.\n+\n+    Example: >lua\n+        -- Find the root of a Python project\n+        vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+\n+        -- Find the root of a git repository\n+        vim.fs.findroot(0, '.git')\n+\n+        -- Find the parent directory containing any file with a .csproj extension\n+        vim.fs.findroot(0, function(name, path)\n+          return name:match('%.csproj$') ~= nil\n+        end)\n+<\n+\n+    Parameters: ~\n+      • {bufnr}   (`integer`) Buffer number, or 0 for current buffer.\n+      • {marker}  (`string|string[]|fun(name: string, path: string): boolean`)\n+                  A marker, or list of markers, to search for. If a function,\n+                  the function is called for each evaluated item and should\n+                  return true if {name} and {path} are a match.\n+\n+    Return: ~\n+        (`string?`) Directory containing one of the given markers, or nil if",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577207398",
            "id": 1577207398,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eAkZm",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 2958,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2018758280,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577207398/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T03:40:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577207398",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577210684"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577210684"
                }
            },
            "author_association": "MEMBER",
            "body": "Given how trivial this function is, is there any gain in having this wrapper around `fs.find`? It's not using anything that's visible only to the editor, and I thought we wanted to stop having this kind of easily-breakable LSP utilities.",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T03:40:12Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.\n+--- @param marker (string|string[]|fun(name: string, path: string): boolean) A marker, or list\n+---               of markers, to search for. If a function, the function is called for each\n+---               evaluated item and should return true if {name} and {path} are a match.\n+--- @return string? # Directory containing one of the given markers, or nil if no directory was\n+--- found.\n+function M.findroot(bufnr, marker)\n+  assert(bufnr, 'missing required argument: bufnr')\n+  assert(marker, 'missing required argument: marker')\n+  local paths = M.find(marker, {\n+    upward = true,\n+    path = vim.fs.dirname(vim.api.nvim_buf_get_name(bufnr)),\n+    stop = vim.uv.os_homedir(),\n+  })\n+\n+  if #paths == 0 then\n+    return nil\n+  end\n+\n+  return vim.fs.dirname(paths[1])",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577210684",
            "id": 1577210684,
            "line": 377,
            "node_id": "PRRC_kwDOAPphoM5eAlM8",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 377,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": 65,
            "pull_request_review_id": 2018758280,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577210684/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T03:40:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577210684",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577308493"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577308493"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Maybe \"Name of directory containing ...\" would make more sense?",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T05:55:30Z",
            "diff_hunk": "@@ -2937,6 +2930,34 @@ vim.fs.find({names}, {opts})                                   *vim.fs.find()*\n         (`string[]`) Normalized paths |vim.fs.normalize()| of all matching\n         items\n \n+vim.fs.findroot({bufnr}, {marker})                         *vim.fs.findroot()*\n+    Find the first parent directory containing a specific \"marker\", relative\n+    to a buffer's directory.\n+\n+    Example: >lua\n+        -- Find the root of a Python project\n+        vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+\n+        -- Find the root of a git repository\n+        vim.fs.findroot(0, '.git')\n+\n+        -- Find the parent directory containing any file with a .csproj extension\n+        vim.fs.findroot(0, function(name, path)\n+          return name:match('%.csproj$') ~= nil\n+        end)\n+<\n+\n+    Parameters: ~\n+      • {bufnr}   (`integer`) Buffer number, or 0 for current buffer.\n+      • {marker}  (`string|string[]|fun(name: string, path: string): boolean`)\n+                  A marker, or list of markers, to search for. If a function,\n+                  the function is called for each evaluated item and should\n+                  return true if {name} and {path} are a match.\n+\n+    Return: ~\n+        (`string?`) Directory containing one of the given markers, or nil if",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577308493",
            "id": 1577308493,
            "in_reply_to_id": 1577207398,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eA9FN",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 2958,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2018910297,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577308493/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T05:55:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577308493",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577312515"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577312515"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I have a function like this in my config and I suspect many others do as well, so imo it would be useful to have.",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T06:00:48Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.\n+--- @param marker (string|string[]|fun(name: string, path: string): boolean) A marker, or list\n+---               of markers, to search for. If a function, the function is called for each\n+---               evaluated item and should return true if {name} and {path} are a match.\n+--- @return string? # Directory containing one of the given markers, or nil if no directory was\n+--- found.\n+function M.findroot(bufnr, marker)\n+  assert(bufnr, 'missing required argument: bufnr')\n+  assert(marker, 'missing required argument: marker')\n+  local paths = M.find(marker, {\n+    upward = true,\n+    path = vim.fs.dirname(vim.api.nvim_buf_get_name(bufnr)),\n+    stop = vim.uv.os_homedir(),\n+  })\n+\n+  if #paths == 0 then\n+    return nil\n+  end\n+\n+  return vim.fs.dirname(paths[1])",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577312515",
            "id": 1577312515,
            "in_reply_to_id": 1577210684,
            "line": 377,
            "node_id": "PRRC_kwDOAPphoM5eA-ED",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 377,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": 65,
            "pull_request_review_id": 2018916612,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577312515/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T06:00:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577312515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577394055"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577394055"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd tend to use the cwd as ceiling. No strong opinion on it, but maybe an indicator that this should be an optional parameter as well?",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T07:12:42Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.\n+--- @param marker (string|string[]|fun(name: string, path: string): boolean) A marker, or list\n+---               of markers, to search for. If a function, the function is called for each\n+---               evaluated item and should return true if {name} and {path} are a match.\n+--- @return string? # Directory containing one of the given markers, or nil if no directory was\n+--- found.\n+function M.findroot(bufnr, marker)\n+  assert(bufnr, 'missing required argument: bufnr')\n+  assert(marker, 'missing required argument: marker')\n+  local paths = M.find(marker, {\n+    upward = true,\n+    path = vim.fs.dirname(vim.api.nvim_buf_get_name(bufnr)),\n+    stop = vim.uv.os_homedir(),",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577394055",
            "id": 1577394055,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eBR-H",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 360,
            "original_position": 48,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019052057,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577394055/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T07:12:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577394055",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577408506"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577408506"
                }
            },
            "author_association": "MEMBER",
            "body": "> Given how trivial this function is, is there any gain in having this wrapper around `fs.find`? It's not using anything that's visible only to the editor, and I thought we wanted to stop having this kind of easily-breakable LSP utilities.\r\n\r\nIt's trivial if you know what it does (and should do), but the details (direction, termination, relative to an `args.buf`) are not obvious to non-experts -- this is one of the many paper cuts that make people complain about LSP being hard to set up in Neovim.\r\n\r\nAlso, this is not particularly LSP specific; any plugin that tracks \"projects\" by directory structure and is triggered by an autocommand can profit from it.",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T07:24:06Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.\n+--- @param marker (string|string[]|fun(name: string, path: string): boolean) A marker, or list\n+---               of markers, to search for. If a function, the function is called for each\n+---               evaluated item and should return true if {name} and {path} are a match.\n+--- @return string? # Directory containing one of the given markers, or nil if no directory was\n+--- found.\n+function M.findroot(bufnr, marker)\n+  assert(bufnr, 'missing required argument: bufnr')\n+  assert(marker, 'missing required argument: marker')\n+  local paths = M.find(marker, {\n+    upward = true,\n+    path = vim.fs.dirname(vim.api.nvim_buf_get_name(bufnr)),\n+    stop = vim.uv.os_homedir(),\n+  })\n+\n+  if #paths == 0 then\n+    return nil\n+  end\n+\n+  return vim.fs.dirname(paths[1])",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577408506",
            "id": 1577408506,
            "in_reply_to_id": 1577210684,
            "line": 377,
            "node_id": "PRRC_kwDOAPphoM5eBVf6",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 377,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": 65,
            "pull_request_review_id": 2019074829,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577408506/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T08:08:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577408506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577413087"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577413087"
                }
            },
            "author_association": "MEMBER",
            "body": "Just to make sure: this name doesn't have to be modified somehow (e.g., because of symlinks)?\r\n\r\nI use\r\n```lua\r\npath = vim.fn.fnamemodify(args.file, ':p:h')\r\n```\r\nin my personal snippet, and came by it the hard way (but forgot why exactly).",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T07:27:49Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.\n+--- @param marker (string|string[]|fun(name: string, path: string): boolean) A marker, or list\n+---               of markers, to search for. If a function, the function is called for each\n+---               evaluated item and should return true if {name} and {path} are a match.\n+--- @return string? # Directory containing one of the given markers, or nil if no directory was\n+--- found.\n+function M.findroot(bufnr, marker)\n+  assert(bufnr, 'missing required argument: bufnr')\n+  assert(marker, 'missing required argument: marker')\n+  local paths = M.find(marker, {\n+    upward = true,\n+    path = vim.fs.dirname(vim.api.nvim_buf_get_name(bufnr)),",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577413087",
            "id": 1577413087,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eBWnf",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 359,
            "original_position": 47,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019082442,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577413087/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T08:12:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577413087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577473313"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577473313"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think `cwd` is a good idea here (by default), as you may be starting from a subdirectory of the project. I think exposing this as an option makes sense; saves people from reimplementing it just because they have an unusual setup (e.g., projects living on a remote drive instead of under home directory).",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T08:11:54Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.\n+--- @param marker (string|string[]|fun(name: string, path: string): boolean) A marker, or list\n+---               of markers, to search for. If a function, the function is called for each\n+---               evaluated item and should return true if {name} and {path} are a match.\n+--- @return string? # Directory containing one of the given markers, or nil if no directory was\n+--- found.\n+function M.findroot(bufnr, marker)\n+  assert(bufnr, 'missing required argument: bufnr')\n+  assert(marker, 'missing required argument: marker')\n+  local paths = M.find(marker, {\n+    upward = true,\n+    path = vim.fs.dirname(vim.api.nvim_buf_get_name(bufnr)),\n+    stop = vim.uv.os_homedir(),",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577473313",
            "id": 1577473313,
            "in_reply_to_id": 1577394055,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eBlUh",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 360,
            "original_position": 48,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019191875,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577473313/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T08:11:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577473313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577636884"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577636884"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think `$HOME` is also good to stop at. At work most of our files go into NFS mounts (including XDG_CONFIG/DATA/RUNTIME etc). We should just stop at `/` IMO.",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T10:07:32Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.\n+--- @param marker (string|string[]|fun(name: string, path: string): boolean) A marker, or list\n+---               of markers, to search for. If a function, the function is called for each\n+---               evaluated item and should return true if {name} and {path} are a match.\n+--- @return string? # Directory containing one of the given markers, or nil if no directory was\n+--- found.\n+function M.findroot(bufnr, marker)\n+  assert(bufnr, 'missing required argument: bufnr')\n+  assert(marker, 'missing required argument: marker')\n+  local paths = M.find(marker, {\n+    upward = true,\n+    path = vim.fs.dirname(vim.api.nvim_buf_get_name(bufnr)),\n+    stop = vim.uv.os_homedir(),",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577636884",
            "id": 1577636884,
            "in_reply_to_id": 1577394055,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eCNQU",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 360,
            "original_position": 48,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019452547,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577636884/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T10:07:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577636884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577650540"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577650540"
                }
            },
            "author_association": "MEMBER",
            "body": "Should we name it just root()? That aligns with `vim.fs.dir`, `vim.fs.parents`, etc.\r\n\r\n```suggestion\r\nvim.fs.root({bufnr}, {marker})                         *vim.fs.findroot()*\r\n```",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T10:18:10Z",
            "diff_hunk": "@@ -2937,6 +2930,34 @@ vim.fs.find({names}, {opts})                                   *vim.fs.find()*\n         (`string[]`) Normalized paths |vim.fs.normalize()| of all matching\n         items\n \n+vim.fs.findroot({bufnr}, {marker})                         *vim.fs.findroot()*",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577650540",
            "id": 1577650540,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eCQls",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 2933,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2019473689,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577650540/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T10:18:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577650540",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577661426"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577661426"
                }
            },
            "author_association": "MEMBER",
            "body": "nvim_buf_get_name appears to (and is documented to) return the absolute path, which avoids the need for `:p:h`.",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T10:27:11Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.\n+--- @param marker (string|string[]|fun(name: string, path: string): boolean) A marker, or list\n+---               of markers, to search for. If a function, the function is called for each\n+---               evaluated item and should return true if {name} and {path} are a match.\n+--- @return string? # Directory containing one of the given markers, or nil if no directory was\n+--- found.\n+function M.findroot(bufnr, marker)\n+  assert(bufnr, 'missing required argument: bufnr')\n+  assert(marker, 'missing required argument: marker')\n+  local paths = M.find(marker, {\n+    upward = true,\n+    path = vim.fs.dirname(vim.api.nvim_buf_get_name(bufnr)),",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577661426",
            "id": 1577661426,
            "in_reply_to_id": 1577413087,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eCTPy",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 359,
            "original_position": 47,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019491078,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577661426/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T10:27:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577661426",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577669334"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577669334"
                }
            },
            "author_association": "MEMBER",
            "body": "So far `fs.lua` has been completely agnostic to vim buffers, and only operates on strings paths. Do we really want to break that pattern now?\r\n\r\nAnd either way, this function should accept a string path argument to make it more general.",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T10:34:02Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577669334",
            "id": 1577669334,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eCVLW",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 348,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019503861,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577669334/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T10:34:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577669334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577672277"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577672277"
                }
            },
            "author_association": "MEMBER",
            "body": "Would work for the lsp use case just as well (with `args.file` -- but see above re: expanding). Given the choice, I too would prefer filename over buffer name (which might not exist yet...)",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T10:36:32Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577672277",
            "id": 1577672277,
            "in_reply_to_id": 1577669334,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eCV5V",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 348,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019508416,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577672277/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T10:36:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577672277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577678693"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577678693"
                }
            },
            "author_association": "MEMBER",
            "body": "True, but `vim.fs` intentionally also has \"path\" concepts to avoid too much dogma (whereas most platforms separate filesystem vs path). After all, this is still a text editor, so the modules are intended to be \"useful\" rather than 100% pure.\r\n\r\n> this function should accept a string path argument to make it more general.\r\n\r\nI thought about that too, it's not a one-way door though?",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T10:42:16Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577678693",
            "id": 1577678693,
            "in_reply_to_id": 1577669334,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eCXdl",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 348,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019518596,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577678693/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T10:42:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577678693",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577716494"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577716494"
                }
            },
            "author_association": "MEMBER",
            "body": "Sure. Just wanted to mention because currently we can't access buffers in luv threads so we wouldn't be able to expose this. Edge-case yes, but worth keeping in mind, and a strong reason to prefer keeping functions pure when reasonably possible.",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T11:17:37Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577716494",
            "id": 1577716494,
            "in_reply_to_id": 1577669334,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eCgsO",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 348,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019582795,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577716494/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T11:17:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577716494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577856696"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577856696"
                }
            },
            "author_association": "MEMBER",
            "body": "> So far `fs.lua` has been completely agnostic to vim buffers, and only operates on strings paths. Do we really want to break that pattern now?\r\n\r\nI had the same realization. There's not a better place to put it (for now) though. If we already had `vim.projects` or similar this would be a good fit for that, but since we don't, `vim.fs` is the next best spot.\r\n\r\n> And either way, this function should accept a string path argument to make it more general.\r\n\r\nI'll gladly make it a string _or_ buffer number, but don't want to make it just a string, since the entire _raison d'être_ of this function is to eliminate boilerplate, and `vim.fs.findroot(vim.api.nvim_buf_get_name(0), ...` does not serve that objective.\r\n\r\n",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:09:10Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577856696",
            "id": 1577856696,
            "in_reply_to_id": 1577669334,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDC64",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 348,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019815373,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577856696/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:09:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577856696",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577861882"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577861882"
                }
            },
            "author_association": "MEMBER",
            "body": "But you can do the same thing with file names, can't you? Here's what I use\r\n```lua\r\nlocal find_root = function(markers, file)\r\n  return vim.fs.dirname(vim.fs.find(markers, { upward = true, path = vim.fn.fnamemodify(file, ':p:h') })[1])\r\nend\r\n```\r\nand then `find_root({ '.latexmkrc' }, args.file),` in a `FileType` autocommand. Is there any current situation that is not covered by this? Where is a named buffer (rather than a file) strictly needed? (Honestly asking.)",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:12:30Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577861882",
            "id": 1577861882,
            "in_reply_to_id": 1577669334,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDEL6",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 348,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019823789,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577861882/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:12:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577861882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577869323"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577869323"
                }
            },
            "author_association": "MEMBER",
            "body": "d917f67c30d77c2c88848c81d8e964aa57b5521b",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:16:58Z",
            "diff_hunk": "@@ -2937,6 +2930,34 @@ vim.fs.find({names}, {opts})                                   *vim.fs.find()*\n         (`string[]`) Normalized paths |vim.fs.normalize()| of all matching\n         items\n \n+vim.fs.findroot({bufnr}, {marker})                         *vim.fs.findroot()*\n+    Find the first parent directory containing a specific \"marker\", relative\n+    to a buffer's directory.\n+\n+    Example: >lua\n+        -- Find the root of a Python project\n+        vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+\n+        -- Find the root of a git repository\n+        vim.fs.findroot(0, '.git')\n+\n+        -- Find the parent directory containing any file with a .csproj extension\n+        vim.fs.findroot(0, function(name, path)\n+          return name:match('%.csproj$') ~= nil\n+        end)\n+<\n+\n+    Parameters: ~\n+      • {bufnr}   (`integer`) Buffer number, or 0 for current buffer.\n+      • {marker}  (`string|string[]|fun(name: string, path: string): boolean`)\n+                  A marker, or list of markers, to search for. If a function,\n+                  the function is called for each evaluated item and should\n+                  return true if {name} and {path} are a match.\n+\n+    Return: ~\n+        (`string?`) Directory containing one of the given markers, or nil if",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577869323",
            "id": 1577869323,
            "in_reply_to_id": 1577207398,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDGAL",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 2958,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2019835905,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577869323/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:16:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577869323",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577869542"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577869542"
                }
            },
            "author_association": "MEMBER",
            "body": "8dca2167f5f6fe578a15211aa6cf4fb76b1c8d32",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:17:08Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577869542",
            "id": 1577869542,
            "in_reply_to_id": 1577669334,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDGDm",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 348,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019836316,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577869542/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:17:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577869542",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577869844"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577869844"
                }
            },
            "author_association": "MEMBER",
            "body": "Removed `stop`, we'll just go to the root directory. 8dca2167f5f6fe578a15211aa6cf4fb76b1c8d32",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:17:19Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.\n+--- @param marker (string|string[]|fun(name: string, path: string): boolean) A marker, or list\n+---               of markers, to search for. If a function, the function is called for each\n+---               evaluated item and should return true if {name} and {path} are a match.\n+--- @return string? # Directory containing one of the given markers, or nil if no directory was\n+--- found.\n+function M.findroot(bufnr, marker)\n+  assert(bufnr, 'missing required argument: bufnr')\n+  assert(marker, 'missing required argument: marker')\n+  local paths = M.find(marker, {\n+    upward = true,\n+    path = vim.fs.dirname(vim.api.nvim_buf_get_name(bufnr)),\n+    stop = vim.uv.os_homedir(),",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577869844",
            "id": 1577869844,
            "in_reply_to_id": 1577394055,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDGIU",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 360,
            "original_position": 48,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019836822,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577869844/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:17:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577869844",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577871017"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577871017"
                }
            },
            "author_association": "MEMBER",
            "body": ">Where is a named buffer (rather than a file) strictly needed?\r\n\r\nftplugin",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:18:08Z",
            "diff_hunk": "@@ -334,6 +327,46 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Find the first parent directory containing a specific \"marker\", relative to a buffer's\n+--- directory.\n+---\n+--- Example:\n+---\n+--- ```lua\n+--- -- Find the root of a Python project\n+--- vim.fs.findroot(0, {'pyproject.toml', 'setup.py' })\n+---\n+--- -- Find the root of a git repository\n+--- vim.fs.findroot(0, '.git')\n+---\n+--- -- Find the parent directory containing any file with a .csproj extension\n+--- vim.fs.findroot(0, function(name, path)\n+---   return name:match('%.csproj$') ~= nil\n+--- end)\n+--- ```\n+---\n+--- @param bufnr integer Buffer number, or 0 for current buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577871017",
            "id": 1577871017,
            "in_reply_to_id": 1577669334,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDGap",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 348,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2019838830,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577871017/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:18:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577871017",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577874827"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577874827"
                }
            },
            "author_association": "MEMBER",
            "body": "f7721be5b8178f4f40c633da9c61e4cdf9489a97",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:20:29Z",
            "diff_hunk": "@@ -2937,6 +2930,34 @@ vim.fs.find({names}, {opts})                                   *vim.fs.find()*\n         (`string[]`) Normalized paths |vim.fs.normalize()| of all matching\n         items\n \n+vim.fs.findroot({bufnr}, {marker})                         *vim.fs.findroot()*",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577874827",
            "id": 1577874827,
            "in_reply_to_id": 1577650540,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDHWL",
            "original_commit_id": "06053520b48dcd7c5e211a0d50c04053c5becf80",
            "original_line": 2933,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2019845223,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577874827/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:20:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577874827",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577885241"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577885241"
                }
            },
            "author_association": "MEMBER",
            "body": "is this misleading, i.e. should we be hinting at `getcwd()` insted of $PWD? also seems good to mention joinpath()\r\n\r\n```suggestion\r\n        vim.fs.root(vim.fs.joinpath(vim.env.PWD, 'main.py'), {'pyproject.toml', 'setup.py' })\r\n```",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:23:49Z",
            "diff_hunk": "@@ -3013,6 +3006,35 @@ vim.fs.parents({start})                                     *vim.fs.parents()*\n         (`nil`)\n         (`string?`)\n \n+vim.fs.root({source}, {marker})                                *vim.fs.root()*\n+    Find the first parent directory containing a specific \"marker\", relative\n+    to a buffer's directory.\n+\n+    Example: >lua\n+        -- Find the root of a Python project, starting from file 'main.py'\n+        vim.fs.root(vim.env.PWD .. 'main.py', {'pyproject.toml', 'setup.py' })",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577885241",
            "id": 1577885241,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDJ45",
            "original_commit_id": "9dfeb48b451e1718846132f7675aa9d87d590d15",
            "original_line": 3015,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2019862744,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577885241/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:23:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577885241",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577892987"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577892987"
                }
            },
            "author_association": "MEMBER",
            "body": "this might be a nit, but i've seen this proliferate in other projects. why use join() on literals?\r\n```suggestion\r\n      eq(vim.fs.joinpath(test_source_path, 'test/functional/fixtures'), result)\r\n```",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:28:46Z",
            "diff_hunk": "@@ -278,6 +280,36 @@ describe('vim.fs', function()\n     end)\n   end)\n \n+  describe('root()', function()\n+    before_each(function()\n+      command(\n+        string.format('edit %s', vim.fs.joinpath('test', 'functional', 'fixtures', 'tty-test.c'))\n+      )\n+    end)\n+\n+    it('works with a single marker', function()\n+      eq(test_source_path, exec_lua([[return vim.fs.root(0, '.git')]]))\n+    end)\n+\n+    it('works with multiple markers', function()\n+      local bufnr = api.nvim_get_current_buf()\n+      eq(\n+        vim.fs.joinpath(test_source_path, 'test', 'functional', 'fixtures'),\n+        exec_lua([[return vim.fs.root(..., {'CMakeLists.txt', '.git'})]], bufnr)\n+      )\n+    end)\n+\n+    it('works with a function', function()\n+      ---@type string\n+      local result = exec_lua([[\n+        return vim.fs.root(0, function(name, path)\n+          return name:match('%.txt$')\n+        end)\n+      ]])\n+      eq(vim.fs.joinpath(test_source_path, 'test', 'functional', 'fixtures'), result)",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577892987",
            "id": 1577892987,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDLx7",
            "original_commit_id": "9dfeb48b451e1718846132f7675aa9d87d590d15",
            "original_line": 309,
            "original_position": 39,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 2019875616,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577892987/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:28:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577892987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577897666"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577897666"
                }
            },
            "author_association": "MEMBER",
            "body": "Just habit honestly.",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:31:40Z",
            "diff_hunk": "@@ -278,6 +280,36 @@ describe('vim.fs', function()\n     end)\n   end)\n \n+  describe('root()', function()\n+    before_each(function()\n+      command(\n+        string.format('edit %s', vim.fs.joinpath('test', 'functional', 'fixtures', 'tty-test.c'))\n+      )\n+    end)\n+\n+    it('works with a single marker', function()\n+      eq(test_source_path, exec_lua([[return vim.fs.root(0, '.git')]]))\n+    end)\n+\n+    it('works with multiple markers', function()\n+      local bufnr = api.nvim_get_current_buf()\n+      eq(\n+        vim.fs.joinpath(test_source_path, 'test', 'functional', 'fixtures'),\n+        exec_lua([[return vim.fs.root(..., {'CMakeLists.txt', '.git'})]], bufnr)\n+      )\n+    end)\n+\n+    it('works with a function', function()\n+      ---@type string\n+      local result = exec_lua([[\n+        return vim.fs.root(0, function(name, path)\n+          return name:match('%.txt$')\n+        end)\n+      ]])\n+      eq(vim.fs.joinpath(test_source_path, 'test', 'functional', 'fixtures'), result)",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577897666",
            "id": 1577897666,
            "in_reply_to_id": 1577892987,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDM7C",
            "original_commit_id": "9dfeb48b451e1718846132f7675aa9d87d590d15",
            "original_line": 309,
            "original_position": 39,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 2019883460,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577897666/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:31:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577897666",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577902373"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577902373"
                }
            },
            "author_association": "MEMBER",
            "body": "ffc16b6b5ddb5f1ee59566b2069db953462f06dc",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:34:41Z",
            "diff_hunk": "@@ -3013,6 +3006,35 @@ vim.fs.parents({start})                                     *vim.fs.parents()*\n         (`nil`)\n         (`string?`)\n \n+vim.fs.root({source}, {marker})                                *vim.fs.root()*\n+    Find the first parent directory containing a specific \"marker\", relative\n+    to a buffer's directory.\n+\n+    Example: >lua\n+        -- Find the root of a Python project, starting from file 'main.py'\n+        vim.fs.root(vim.env.PWD .. 'main.py', {'pyproject.toml', 'setup.py' })",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577902373",
            "id": 1577902373,
            "in_reply_to_id": 1577885241,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDOEl",
            "original_commit_id": "9dfeb48b451e1718846132f7675aa9d87d590d15",
            "original_line": 3015,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2019891910,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577902373/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:34:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577902373",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1577902444"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577902444"
                }
            },
            "author_association": "MEMBER",
            "body": "ffc16b6b5ddb5f1ee59566b2069db953462f06dc",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T13:34:44Z",
            "diff_hunk": "@@ -278,6 +280,36 @@ describe('vim.fs', function()\n     end)\n   end)\n \n+  describe('root()', function()\n+    before_each(function()\n+      command(\n+        string.format('edit %s', vim.fs.joinpath('test', 'functional', 'fixtures', 'tty-test.c'))\n+      )\n+    end)\n+\n+    it('works with a single marker', function()\n+      eq(test_source_path, exec_lua([[return vim.fs.root(0, '.git')]]))\n+    end)\n+\n+    it('works with multiple markers', function()\n+      local bufnr = api.nvim_get_current_buf()\n+      eq(\n+        vim.fs.joinpath(test_source_path, 'test', 'functional', 'fixtures'),\n+        exec_lua([[return vim.fs.root(..., {'CMakeLists.txt', '.git'})]], bufnr)\n+      )\n+    end)\n+\n+    it('works with a function', function()\n+      ---@type string\n+      local result = exec_lua([[\n+        return vim.fs.root(0, function(name, path)\n+          return name:match('%.txt$')\n+        end)\n+      ]])\n+      eq(vim.fs.joinpath(test_source_path, 'test', 'functional', 'fixtures'), result)",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1577902444",
            "id": 1577902444,
            "in_reply_to_id": 1577892987,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDOFs",
            "original_commit_id": "9dfeb48b451e1718846132f7675aa9d87d590d15",
            "original_line": 309,
            "original_position": 39,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 2019892037,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577902444/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T13:34:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1577902444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1578050308"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578050308"
                }
            },
            "author_association": "MEMBER",
            "body": "typo in first arg?",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T15:03:38Z",
            "diff_hunk": "@@ -3013,6 +3006,35 @@ vim.fs.parents({start})                                     *vim.fs.parents()*\n         (`nil`)\n         (`string?`)\n \n+vim.fs.root({source}, {marker})                                *vim.fs.root()*\n+    Find the first parent directory containing a specific \"marker\", relative\n+    to a buffer's directory.\n+\n+    Example: >lua\n+        -- Find the root of a Python project, starting from file 'main.py'\n+        vim.fs.root(vim.fs.joinpath(vim.env.PWD, 'main.py'), {'pyproject.toml', 'setup.py' })\n+\n+        -- Find the root of a git repository\n+        vim.fs.root(0, '.git')\n+\n+        -- Find the parent directory containing any file with a .csproj extension\n+        vim.fs.root(', function(name, path)",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1578050308",
            "id": 1578050308,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDyME",
            "original_commit_id": "ffc16b6b5ddb5f1ee59566b2069db953462f06dc",
            "original_line": 3021,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2020143388,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578050308/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T15:03:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578050308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1578051701"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578051701"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        (`string?`) Directory path containing one of the given markers, or nil\r\n```",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T15:04:34Z",
            "diff_hunk": "@@ -3013,6 +3006,35 @@ vim.fs.parents({start})                                     *vim.fs.parents()*\n         (`nil`)\n         (`string?`)\n \n+vim.fs.root({source}, {marker})                                *vim.fs.root()*\n+    Find the first parent directory containing a specific \"marker\", relative\n+    to a buffer's directory.\n+\n+    Example: >lua\n+        -- Find the root of a Python project, starting from file 'main.py'\n+        vim.fs.root(vim.fs.joinpath(vim.env.PWD, 'main.py'), {'pyproject.toml', 'setup.py' })\n+\n+        -- Find the root of a git repository\n+        vim.fs.root(0, '.git')\n+\n+        -- Find the parent directory containing any file with a .csproj extension\n+        vim.fs.root(', function(name, path)\n+          return name:match('%.csproj$') ~= nil\n+        end)\n+<\n+\n+    Parameters: ~\n+      • {source}  (`integer|string`) Buffer number (0 for current buffer) or\n+                  file path to begin the search from.\n+      • {marker}  (`string|string[]|fun(name: string, path: string): boolean`)\n+                  A marker, or list of markers, to search for. If a function,\n+                  the function is called for each evaluated item and should\n+                  return true if {name} and {path} are a match.\n+\n+    Return: ~\n+        (`string?`) Directory name containing one of the given markers, or nil",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1578051701",
            "id": 1578051701,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eDyh1",
            "original_commit_id": "ffc16b6b5ddb5f1ee59566b2069db953462f06dc",
            "original_line": 3035,
            "original_position": 44,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2020145665,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578051701/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T15:04:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578051701",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1578069523"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578069523"
                }
            },
            "author_association": "MEMBER",
            "body": "e98e7009581dbd9682c00a4dc406fe04dd13a35d",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T15:15:26Z",
            "diff_hunk": "@@ -3013,6 +3006,35 @@ vim.fs.parents({start})                                     *vim.fs.parents()*\n         (`nil`)\n         (`string?`)\n \n+vim.fs.root({source}, {marker})                                *vim.fs.root()*\n+    Find the first parent directory containing a specific \"marker\", relative\n+    to a buffer's directory.\n+\n+    Example: >lua\n+        -- Find the root of a Python project, starting from file 'main.py'\n+        vim.fs.root(vim.fs.joinpath(vim.env.PWD, 'main.py'), {'pyproject.toml', 'setup.py' })\n+\n+        -- Find the root of a git repository\n+        vim.fs.root(0, '.git')\n+\n+        -- Find the parent directory containing any file with a .csproj extension\n+        vim.fs.root(', function(name, path)\n+          return name:match('%.csproj$') ~= nil\n+        end)\n+<\n+\n+    Parameters: ~\n+      • {source}  (`integer|string`) Buffer number (0 for current buffer) or\n+                  file path to begin the search from.\n+      • {marker}  (`string|string[]|fun(name: string, path: string): boolean`)\n+                  A marker, or list of markers, to search for. If a function,\n+                  the function is called for each evaluated item and should\n+                  return true if {name} and {path} are a match.\n+\n+    Return: ~\n+        (`string?`) Directory name containing one of the given markers, or nil",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1578069523",
            "id": 1578069523,
            "in_reply_to_id": 1578051701,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eD24T",
            "original_commit_id": "ffc16b6b5ddb5f1ee59566b2069db953462f06dc",
            "original_line": 3035,
            "original_position": 44,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2020175044,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578069523/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T15:15:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578069523",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28477#discussion_r1578069766"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28477"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578069766"
                }
            },
            "author_association": "MEMBER",
            "body": "Not sure what happened there, fixed e98e7009581dbd9682c00a4dc406fe04dd13a35d",
            "commit_id": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
            "created_at": "2024-04-24T15:15:35Z",
            "diff_hunk": "@@ -3013,6 +3006,35 @@ vim.fs.parents({start})                                     *vim.fs.parents()*\n         (`nil`)\n         (`string?`)\n \n+vim.fs.root({source}, {marker})                                *vim.fs.root()*\n+    Find the first parent directory containing a specific \"marker\", relative\n+    to a buffer's directory.\n+\n+    Example: >lua\n+        -- Find the root of a Python project, starting from file 'main.py'\n+        vim.fs.root(vim.fs.joinpath(vim.env.PWD, 'main.py'), {'pyproject.toml', 'setup.py' })\n+\n+        -- Find the root of a git repository\n+        vim.fs.root(0, '.git')\n+\n+        -- Find the parent directory containing any file with a .csproj extension\n+        vim.fs.root(', function(name, path)",
            "html_url": "https://github.com/neovim/neovim/pull/28477#discussion_r1578069766",
            "id": 1578069766,
            "in_reply_to_id": 1578050308,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5eD28G",
            "original_commit_id": "ffc16b6b5ddb5f1ee59566b2069db953462f06dc",
            "original_line": 3021,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2020175405,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578069766/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-24T15:15:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1578069766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28477/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/28477/commits",
    "created_at": "2024-04-24T01:01:14Z",
    "diff_url": "https://github.com/neovim/neovim/pull/28477.diff",
    "draft": false,
    "head": {
        "label": "gpanders:findroot",
        "ref": "findroot",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/gpanders/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gpanders/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gpanders/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gpanders/neovim/branches{/branch}",
            "clone_url": "https://github.com/gpanders/neovim.git",
            "collaborators_url": "https://api.github.com/repos/gpanders/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gpanders/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/gpanders/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gpanders/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gpanders/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gpanders/neovim/contributors",
            "created_at": "2021-06-11T03:58:44Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gpanders/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/gpanders/neovim/downloads",
            "events_url": "https://api.github.com/repos/gpanders/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gpanders/neovim/forks",
            "full_name": "gpanders/neovim",
            "git_commits_url": "https://api.github.com/repos/gpanders/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gpanders/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gpanders/neovim/git/tags{/sha}",
            "git_url": "git://github.com/gpanders/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/gpanders/neovim/hooks",
            "html_url": "https://github.com/gpanders/neovim",
            "id": 375899052,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/gpanders/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gpanders/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gpanders/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/gpanders/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gpanders/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/gpanders/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gpanders/neovim/merges",
            "milestones_url": "https://api.github.com/repos/gpanders/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzU4OTkwNTI=",
            "notifications_url": "https://api.github.com/repos/gpanders/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gpanders/neovim/pulls{/number}",
            "pushed_at": "2024-04-28T15:23:01Z",
            "releases_url": "https://api.github.com/repos/gpanders/neovim/releases{/id}",
            "size": 262186,
            "ssh_url": "git@github.com:gpanders/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gpanders/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/gpanders/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gpanders/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/gpanders/neovim/subscription",
            "svn_url": "https://github.com/gpanders/neovim",
            "tags_url": "https://api.github.com/repos/gpanders/neovim/tags",
            "teams_url": "https://api.github.com/repos/gpanders/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/gpanders/neovim/git/trees{/sha}",
            "updated_at": "2022-01-07T19:38:08Z",
            "url": "https://api.github.com/repos/gpanders/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/28477",
    "id": 1837728940,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28477",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "38b9c322c97b63f53caef7a651211fc9312d055e",
    "merged_at": "2024-04-25T02:43:46Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5tiYSs",
    "number": 28477,
    "patch_url": "https://github.com/neovim/neovim/pull/28477.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/28477/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/7adeeb624fcf52ab57bc05c4d3e3cc1cfcd4cacb",
    "title": "feat(fs): add vim.fs.root",
    "updated_at": "2024-04-25T02:45:24Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/28477",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
        "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gpanders/followers",
        "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gpanders",
        "id": 8965202,
        "login": "gpanders",
        "node_id": "MDQ6VXNlcjg5NjUyMDI=",
        "organizations_url": "https://api.github.com/users/gpanders/orgs",
        "received_events_url": "https://api.github.com/users/gpanders/received_events",
        "repos_url": "https://api.github.com/users/gpanders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gpanders"
    }
}