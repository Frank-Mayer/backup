{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25073/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25073/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25073"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25073"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25073/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/d42b652e621514c8c763fbbf7a69b3569be4fc96"
        }
    },
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5383,
            "forks_count": 5383,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1728,
            "open_issues_count": 1728,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-05-20T23:45:59Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 270386,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 77935,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-05-21T02:01:06Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 77935,
            "watchers_count": 77935,
            "web_commit_signoff_required": false
        },
        "sha": "6405fa4b117263b92f87b17150abd2d1c6ab5881",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Closes #20857, #20246 (?)\r\n\r\nThis PR includes the following changes:\r\n- A new private function `_normalize_markdown` has been added, which transforms the input contents as follows:\r\n  1. Trim out empty lines before and after the content. For simplicity I'm also removing the `pad_top` and `pad_bottom` options (open to discussion about this).\r\n  2. Remove carriage returns.\r\n  3. Consecutive blank lines are collapsed into a single one.\r\n  4. Separator Markdown lines (e.g. `---`) will be replaced by a horizontal divider spanning the entire floating window and blank lines before and after the separator are removed.\r\n\r\nNote that this means that this function won't be performing any additional highlighting or configure the buffer.\r\n- `open_floating_preview` will now display the input content as is OR use Treesitter for displaying a Markdown buffer if the response received by the LSP request indicated that the content had a `'markdown'` `MarkupKind`. If the server indicates that the `MarkupKind` is `'plaintext'`, we'll respect that and display the contents as is.\r\n\r\n- `convert_input_to_markdown_lines` will now simply return the unprocessed input when it is `MarkupContent` with kind '`plaintext`' (previously it would wrap it around `<text>` tags and display it as Markdown).\r\n\r\n- `trim_empty_lines` is now deprecated since its functionality can be replaced by `vim.split(..., { trimempty = true })`",
    "closed_at": "2023-09-19T13:47:38Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321083512"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321083512"
                }
            },
            "author_association": "MEMBER",
            "body": "You shouldn't need to cache the queries since they are already cached via a weak table in `vim.treesitter.query`.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-11T07:06:41Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321083512",
            "id": 1321083512,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5OviJ4",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1375,
            "original_position": 98,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1619265415,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321083512/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T07:06:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321083512",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321085225"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321085225"
                }
            },
            "author_association": "MEMBER",
            "body": "This will be ok since the buffer is small and only rendered once.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-11T07:08:31Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?\n+  local LanguageTree = require('vim.treesitter.languagetree')\n+  local parser = LanguageTree.new(bufnr, lang, { injections = { php = '', html = '' } })\n+\n+  ---@diagnostic disable-next-line: invisible\n+  parser:set_included_regions({ { range } })\n+  parser:parse(true)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321085225",
            "id": 1321085225,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ovikp",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1387,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1619268182,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321085225/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T07:10:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321085225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321456004"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321456004"
                }
            },
            "author_association": "MEMBER",
            "body": "Should we be extra defensive and catch errors? Will it render the \"plain text\" version if markdown parsing fails?",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-11T12:12:01Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?\n+  local LanguageTree = require('vim.treesitter.languagetree')\n+  local parser = LanguageTree.new(bufnr, lang, { injections = { php = '', html = '' } })\n+\n+  ---@diagnostic disable-next-line: invisible\n+  parser:set_included_regions({ { range } })\n+  parser:parse(true)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321456004",
            "id": 1321456004,
            "in_reply_to_id": 1321085225,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ow9GE",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1387,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1619844921,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321456004/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T12:12:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321456004",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321458966"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321458966"
                }
            },
            "author_association": "MEMBER",
            "body": "Treesitter parsing never fails. It'll just create a lot of error nodes.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-11T12:14:50Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?\n+  local LanguageTree = require('vim.treesitter.languagetree')\n+  local parser = LanguageTree.new(bufnr, lang, { injections = { php = '', html = '' } })\n+\n+  ---@diagnostic disable-next-line: invisible\n+  parser:set_included_regions({ { range } })\n+  parser:parse(true)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321458966",
            "id": 1321458966,
            "in_reply_to_id": 1321085225,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ow90W",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1387,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1619849730,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321458966/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T12:14:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321458966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321532680"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321532680"
                }
            },
            "author_association": "MEMBER",
            "body": "pretty sure it's just for creating a new parser to manager the state of this buffer",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-11T13:13:45Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321532680",
            "id": 1321532680,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5OxP0I",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1381,
            "original_position": 114,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1619966213,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321532680/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T13:13:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321532680",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321543497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321543497"
                }
            },
            "author_association": "MEMBER",
            "body": "It probably means do not use the parser in vim.treesitter.highlighter.\r\n\r\nI don't think we should use `LanguageTree.new` for this. Instead we should use `vim.treesitter.get_parser()`.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-11T13:22:09Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321543497",
            "id": 1321543497,
            "in_reply_to_id": 1321532680,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5OxSdJ",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1381,
            "original_position": 114,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1619984067,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321543497/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T13:22:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321543497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321606162"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321606162"
                }
            },
            "author_association": "NONE",
            "body": "Is it possible to fix this: https://github.com/folke/noice.nvim/issues/424?\r\n\r\nI have been using the diff from my comment: https://github.com/folke/noice.nvim/issues/424#issuecomment-1510268975 ever since I posted the comment, and can't remember having any issues.\r\n\r\nI am not sure if that is the best way to fix it, and some others probably know this better than I do, but for me it has worked perfectly.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-11T14:01:21Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321606162",
            "id": 1321606162,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5OxhwS",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1302,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1620091947,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321606162/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T14:01:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321606162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblj/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblj/followers",
                "following_url": "https://api.github.com/users/seblj/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblj",
                "id": 5160701,
                "login": "seblj",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblj/orgs",
                "received_events_url": "https://api.github.com/users/seblj/received_events",
                "repos_url": "https://api.github.com/users/seblj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321742666"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321742666"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Do we exactly need to disable php/html injections for these nodes. If php and html are to be disabled, the question is: why not other parsers as well",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-11T15:40:08Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?\n+  local LanguageTree = require('vim.treesitter.languagetree')\n+  local parser = LanguageTree.new(bufnr, lang, { injections = { php = '', html = '' } })",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321742666",
            "id": 1321742666,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5OyDFK",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1383,
            "original_position": 116,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1620306896,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321742666/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T15:40:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321742666",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1322538829"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322538829"
                }
            },
            "author_association": "MEMBER",
            "body": "It seems that `noice` used to disable all injections, but that was changed in https://github.com/folke/noice.nvim/commit/0e1bf11d46054b8ab04eb62b53c5ac81b44f14df. When @folke maybe he'll tell us more about why this was needed.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-12T06:59:25Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?\n+  local LanguageTree = require('vim.treesitter.languagetree')\n+  local parser = LanguageTree.new(bufnr, lang, { injections = { php = '', html = '' } })",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1322538829",
            "id": 1322538829,
            "in_reply_to_id": 1321742666,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O1FdN",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1383,
            "original_position": 116,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1621461513,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322538829/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-12T06:59:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322538829",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1322579553"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322579553"
                }
            },
            "author_association": "MEMBER",
            "body": "Use `vim.filetype.get_option` instead since that caches the values for each filetype.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-12T07:36:28Z",
            "diff_hunk": "@@ -1720,8 +1779,10 @@ function M.open_floating_preview(contents, syntax, opts)\n   local float_option = M.make_floating_popup_options(width, height, opts)\n   local floating_winnr = api.nvim_open_win(floating_bufnr, false, float_option)\n   if do_stylize then\n-    vim.wo[floating_winnr].conceallevel = 2\n-    vim.wo[floating_winnr].concealcursor = 'n'\n+    vim.wo[floating_winnr].conceallevel =\n+      api.nvim_get_option_value('conceallevel', { filetype = 'markdown' })",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1322579553",
            "id": 1322579553,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O1PZh",
            "original_commit_id": "9e6887e84ac8ea757e470a72388e1e0cc47c0703",
            "original_line": 1783,
            "original_position": 454,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1621525122,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322579553/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-12T07:36:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322579553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1323807835"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323807835"
                }
            },
            "author_association": "MEMBER",
            "body": "You can use a table with `string.gsub`:\r\n\r\n```suggestion\r\n  local entities =\r\n    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\r\n  text = test:gsub('&([^ ;]+);', entities)\r\n```\r\n\r\nThis actually exists on master today: https://github.com/neovim/neovim/blob/1f551e068f728ff38bd7fdcfa3a6daf362bab9da/runtime/lua/vim/lsp/util.lua#L1398-L1410",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T01:08:32Z",
            "diff_hunk": "@@ -1290,18 +1290,159 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1323807835",
            "id": 1323807835,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O57Rb",
            "original_commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "original_line": 1262,
            "original_position": 32,
            "original_start_line": 1305,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1623470074,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323807835/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-13T01:46:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323807835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1323808921"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323808921"
                }
            },
            "author_association": "MEMBER",
            "body": "Suggestion: instead of using this function for side effects, pass in current line and return modified line:\r\n\r\n```suggestion\r\n  local function eat_nl(l)\r\n    while is_empty(lines[l + 1]) do\r\n      l = l + 1\r\n    end\r\n    return l\r\n  end\r\n```\r\n\r\nThen at the call site you'd use:\r\n\r\n```lua\r\nl = eat_nl(l)\r\n```",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T01:11:11Z",
            "diff_hunk": "@@ -1290,18 +1290,159 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1323808921",
            "id": 1323808921,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O57iZ",
            "original_commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "original_line": 1279,
            "original_position": 46,
            "original_start_line": 1319,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1623470074,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323808921/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-13T01:46:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323808921",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1323856138"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323856138"
                }
            },
            "author_association": "MEMBER",
            "body": "Oops, this was one of the bits I accidentally replaced when porting the bits from `noice`...",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T02:17:29Z",
            "diff_hunk": "@@ -1290,18 +1290,159 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1323856138",
            "id": 1323856138,
            "in_reply_to_id": 1323807835,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O6HEK",
            "original_commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "original_line": 1262,
            "original_position": 32,
            "original_start_line": 1305,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1623526904,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323856138/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-13T02:17:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323856138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1323862320"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323862320"
                }
            },
            "author_association": "MEMBER",
            "body": "Just curious: Why don't you like the closure modifying the outer variable?",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T02:30:49Z",
            "diff_hunk": "@@ -1290,18 +1290,159 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1323862320",
            "id": 1323862320,
            "in_reply_to_id": 1323808921,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O6Ikw",
            "original_commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "original_line": 1279,
            "original_position": 46,
            "original_start_line": 1319,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1623535138,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323862320/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-13T02:30:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323862320",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1323878310"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323878310"
                }
            },
            "author_association": "MEMBER",
            "body": "Looking at a naked function call like:\r\n\r\n```lua\r\neat_nl()\r\n```\r\n\r\nit is not obvious what side effects it has. It certainly is not clear that it modifies the local `l` variable without looking at the implementation. Someone reading this code should be able to follow the modifications to the variables as they go. This makes it easier to reason about and debug.\r\n\r\nGenerally speaking, \"pure\" functions (whose outputs only depend on their inputs, with no side effects) should be preferred, where possible and reasonable to do so.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T03:05:32Z",
            "diff_hunk": "@@ -1290,18 +1290,159 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1323878310",
            "id": 1323878310,
            "in_reply_to_id": 1323808921,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O6Mem",
            "original_commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "original_line": 1279,
            "original_position": 46,
            "original_start_line": 1319,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1623556608,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323878310/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-13T03:05:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323878310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324855859"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324855859"
                }
            },
            "author_association": "MEMBER",
            "body": "do we also want to replace `<code>`/`</code>` (_if_ we keep the `<pre>` replacement)?",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T17:37:32Z",
            "diff_hunk": "@@ -1308,180 +1260,23 @@ function M.stylize_markdown(bufnr, contents, opts)\n   })\n   opts = opts or {}\n \n-  -- table of fence types to {ft, begin, end}\n-  -- when ft is nil, we get the ft from the regex match\n-  local matchers = {\n-    block = { nil, '```+%s*([a-zA-Z0-9_]*)', '```+' },\n-    pre = { nil, '<pre>([a-z0-9]*)', '</pre>' },\n-    code = { '', '<code>', '</code>' },\n-    text = { 'text', '<text>', '</text>' },\n-  }\n-\n-  local match_begin = function(line)\n-    for type, pattern in pairs(matchers) do\n-      local ret = line:match(string.format('^%%s*%s%%s*$', pattern[2]))\n-      if ret then\n-        return {\n-          type = type,\n-          ft = pattern[1] or ret,\n-        }\n-      end\n-    end\n-  end\n-\n-  local match_end = function(line, match)\n-    local pattern = matchers[match.type]\n-    return line:match(string.format('^%%s*%s%%s*$', pattern[3]))\n-  end\n-\n   -- Clean up\n-  contents = M._trim(contents, opts)\n-\n-  local stripped = {}\n-  local highlights = {}\n-  -- keep track of lnums that contain markdown\n-  local markdown_lines = {}\n-  do\n-    local i = 1\n-    while i <= #contents do\n-      local line = contents[i]\n-      local match = match_begin(line)\n-      if match then\n-        local start = #stripped\n-        i = i + 1\n-        while i <= #contents do\n-          line = contents[i]\n-          if match_end(line, match) then\n-            i = i + 1\n-            break\n-          end\n-          table.insert(stripped, line)\n-          i = i + 1\n-        end\n-        table.insert(highlights, {\n-          ft = match.ft,\n-          start = start + 1,\n-          finish = #stripped,\n-        })\n-        -- add a separator, but not on the last line\n-        if opts.separator and i < #contents then\n-          table.insert(stripped, '---')\n-          markdown_lines[#stripped] = true\n-        end\n-      else\n-        -- strip any empty lines or separators prior to this separator in actual markdown\n-        if line:match('^---+$') then\n-          while\n-            markdown_lines[#stripped]\n-            and (stripped[#stripped]:match('^%s*$') or stripped[#stripped]:match('^---+$'))\n-          do\n-            markdown_lines[#stripped] = false\n-            table.remove(stripped, #stripped)\n-          end\n-        end\n-        -- add the line if its not an empty line following a separator\n-        if\n-          not (\n-            line:match('^%s*$')\n-            and markdown_lines[#stripped]\n-            and stripped[#stripped]:match('^---+$')\n-          )\n-        then\n-          table.insert(stripped, line)\n-          markdown_lines[#stripped] = true\n-        end\n-        i = i + 1\n-      end\n-    end\n-  end\n-\n-  -- Handle some common html escape sequences\n-  stripped = vim.tbl_map(function(line)\n-    local escapes = {\n-      ['&gt;'] = '>',\n-      ['&lt;'] = '<',\n-      ['&quot;'] = '\"',\n-      ['&apos;'] = \"'\",\n-      ['&ensp;'] = ' ',\n-      ['&emsp;'] = ' ',\n-      ['&amp;'] = '&',\n-    }\n-    return (string.gsub(line, '&[^ ;]+;', escapes))\n-  end, stripped)\n+  contents = M.trim_empty_lines(contents)\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('</?pre>', '```'):gsub('\\r', ''), '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324855859",
            "id": 1324855859,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O97Iz",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1265,
            "original_position": 184,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625094089,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324855859/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T17:57:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324855859",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324860471"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324860471"
                }
            },
            "author_association": "MEMBER",
            "body": "Is the `pre` replacement still needed?",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T17:42:15Z",
            "diff_hunk": "@@ -1308,180 +1260,23 @@ function M.stylize_markdown(bufnr, contents, opts)\n   })\n   opts = opts or {}\n \n-  -- table of fence types to {ft, begin, end}\n-  -- when ft is nil, we get the ft from the regex match\n-  local matchers = {\n-    block = { nil, '```+%s*([a-zA-Z0-9_]*)', '```+' },\n-    pre = { nil, '<pre>([a-z0-9]*)', '</pre>' },\n-    code = { '', '<code>', '</code>' },\n-    text = { 'text', '<text>', '</text>' },\n-  }\n-\n-  local match_begin = function(line)\n-    for type, pattern in pairs(matchers) do\n-      local ret = line:match(string.format('^%%s*%s%%s*$', pattern[2]))\n-      if ret then\n-        return {\n-          type = type,\n-          ft = pattern[1] or ret,\n-        }\n-      end\n-    end\n-  end\n-\n-  local match_end = function(line, match)\n-    local pattern = matchers[match.type]\n-    return line:match(string.format('^%%s*%s%%s*$', pattern[3]))\n-  end\n-\n   -- Clean up\n-  contents = M._trim(contents, opts)\n-\n-  local stripped = {}\n-  local highlights = {}\n-  -- keep track of lnums that contain markdown\n-  local markdown_lines = {}\n-  do\n-    local i = 1\n-    while i <= #contents do\n-      local line = contents[i]\n-      local match = match_begin(line)\n-      if match then\n-        local start = #stripped\n-        i = i + 1\n-        while i <= #contents do\n-          line = contents[i]\n-          if match_end(line, match) then\n-            i = i + 1\n-            break\n-          end\n-          table.insert(stripped, line)\n-          i = i + 1\n-        end\n-        table.insert(highlights, {\n-          ft = match.ft,\n-          start = start + 1,\n-          finish = #stripped,\n-        })\n-        -- add a separator, but not on the last line\n-        if opts.separator and i < #contents then\n-          table.insert(stripped, '---')\n-          markdown_lines[#stripped] = true\n-        end\n-      else\n-        -- strip any empty lines or separators prior to this separator in actual markdown\n-        if line:match('^---+$') then\n-          while\n-            markdown_lines[#stripped]\n-            and (stripped[#stripped]:match('^%s*$') or stripped[#stripped]:match('^---+$'))\n-          do\n-            markdown_lines[#stripped] = false\n-            table.remove(stripped, #stripped)\n-          end\n-        end\n-        -- add the line if its not an empty line following a separator\n-        if\n-          not (\n-            line:match('^%s*$')\n-            and markdown_lines[#stripped]\n-            and stripped[#stripped]:match('^---+$')\n-          )\n-        then\n-          table.insert(stripped, line)\n-          markdown_lines[#stripped] = true\n-        end\n-        i = i + 1\n-      end\n-    end\n-  end\n-\n-  -- Handle some common html escape sequences\n-  stripped = vim.tbl_map(function(line)\n-    local escapes = {\n-      ['&gt;'] = '>',\n-      ['&lt;'] = '<',\n-      ['&quot;'] = '\"',\n-      ['&apos;'] = \"'\",\n-      ['&ensp;'] = ' ',\n-      ['&emsp;'] = ' ',\n-      ['&amp;'] = '&',\n-    }\n-    return (string.gsub(line, '&[^ ;]+;', escapes))\n-  end, stripped)\n+  contents = M.trim_empty_lines(contents)\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('</?pre>', '```'):gsub('\\r', ''), '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324860471",
            "id": 1324860471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O98Q3",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1265,
            "original_position": 184,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625101175,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324860471/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T17:49:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324860471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324864164"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324864164"
                }
            },
            "author_association": "MEMBER",
            "body": "Does this also need a `vim.treesitter.start(...)` call in case users haven't set it up?",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T17:46:01Z",
            "diff_hunk": "@@ -1699,7 +1494,7 @@ function M.open_floating_preview(contents, syntax, opts)\n   local floating_winnr = api.nvim_open_win(floating_bufnr, false, float_option)\n   if do_stylize then\n     vim.wo[floating_winnr].conceallevel = 2\n-    vim.wo[floating_winnr].concealcursor = 'n'\n+    vim.bo[floating_bufnr].filetype = 'markdown'",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324864164",
            "id": 1324864164,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O99Kk",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1497,
            "original_position": 291,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625101175,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324864164/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T17:49:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324864164",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324874299"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324874299"
                }
            },
            "author_association": "MEMBER",
            "body": "I... think so? @clason is also suggesting we replace `<code>` tags [here](https://github.com/neovim/neovim/pull/25073#discussion_r1324855859).",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T17:54:51Z",
            "diff_hunk": "@@ -1308,180 +1260,23 @@ function M.stylize_markdown(bufnr, contents, opts)\n   })\n   opts = opts or {}\n \n-  -- table of fence types to {ft, begin, end}\n-  -- when ft is nil, we get the ft from the regex match\n-  local matchers = {\n-    block = { nil, '```+%s*([a-zA-Z0-9_]*)', '```+' },\n-    pre = { nil, '<pre>([a-z0-9]*)', '</pre>' },\n-    code = { '', '<code>', '</code>' },\n-    text = { 'text', '<text>', '</text>' },\n-  }\n-\n-  local match_begin = function(line)\n-    for type, pattern in pairs(matchers) do\n-      local ret = line:match(string.format('^%%s*%s%%s*$', pattern[2]))\n-      if ret then\n-        return {\n-          type = type,\n-          ft = pattern[1] or ret,\n-        }\n-      end\n-    end\n-  end\n-\n-  local match_end = function(line, match)\n-    local pattern = matchers[match.type]\n-    return line:match(string.format('^%%s*%s%%s*$', pattern[3]))\n-  end\n-\n   -- Clean up\n-  contents = M._trim(contents, opts)\n-\n-  local stripped = {}\n-  local highlights = {}\n-  -- keep track of lnums that contain markdown\n-  local markdown_lines = {}\n-  do\n-    local i = 1\n-    while i <= #contents do\n-      local line = contents[i]\n-      local match = match_begin(line)\n-      if match then\n-        local start = #stripped\n-        i = i + 1\n-        while i <= #contents do\n-          line = contents[i]\n-          if match_end(line, match) then\n-            i = i + 1\n-            break\n-          end\n-          table.insert(stripped, line)\n-          i = i + 1\n-        end\n-        table.insert(highlights, {\n-          ft = match.ft,\n-          start = start + 1,\n-          finish = #stripped,\n-        })\n-        -- add a separator, but not on the last line\n-        if opts.separator and i < #contents then\n-          table.insert(stripped, '---')\n-          markdown_lines[#stripped] = true\n-        end\n-      else\n-        -- strip any empty lines or separators prior to this separator in actual markdown\n-        if line:match('^---+$') then\n-          while\n-            markdown_lines[#stripped]\n-            and (stripped[#stripped]:match('^%s*$') or stripped[#stripped]:match('^---+$'))\n-          do\n-            markdown_lines[#stripped] = false\n-            table.remove(stripped, #stripped)\n-          end\n-        end\n-        -- add the line if its not an empty line following a separator\n-        if\n-          not (\n-            line:match('^%s*$')\n-            and markdown_lines[#stripped]\n-            and stripped[#stripped]:match('^---+$')\n-          )\n-        then\n-          table.insert(stripped, line)\n-          markdown_lines[#stripped] = true\n-        end\n-        i = i + 1\n-      end\n-    end\n-  end\n-\n-  -- Handle some common html escape sequences\n-  stripped = vim.tbl_map(function(line)\n-    local escapes = {\n-      ['&gt;'] = '>',\n-      ['&lt;'] = '<',\n-      ['&quot;'] = '\"',\n-      ['&apos;'] = \"'\",\n-      ['&ensp;'] = ' ',\n-      ['&emsp;'] = ' ',\n-      ['&amp;'] = '&',\n-    }\n-    return (string.gsub(line, '&[^ ;]+;', escapes))\n-  end, stripped)\n+  contents = M.trim_empty_lines(contents)\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('</?pre>', '```'):gsub('\\r', ''), '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324874299",
            "id": 1324874299,
            "in_reply_to_id": 1324860471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O9_o7",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1265,
            "original_position": 184,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625123765,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324874299/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T17:54:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324874299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324876597"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324876597"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this was overfitting to Neovim's own docstrings, which used `<pre>` instead of traditional ```` ``` ```` code blocks. Though that will soon be rectified 😈",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T17:56:05Z",
            "diff_hunk": "@@ -1308,180 +1260,23 @@ function M.stylize_markdown(bufnr, contents, opts)\n   })\n   opts = opts or {}\n \n-  -- table of fence types to {ft, begin, end}\n-  -- when ft is nil, we get the ft from the regex match\n-  local matchers = {\n-    block = { nil, '```+%s*([a-zA-Z0-9_]*)', '```+' },\n-    pre = { nil, '<pre>([a-z0-9]*)', '</pre>' },\n-    code = { '', '<code>', '</code>' },\n-    text = { 'text', '<text>', '</text>' },\n-  }\n-\n-  local match_begin = function(line)\n-    for type, pattern in pairs(matchers) do\n-      local ret = line:match(string.format('^%%s*%s%%s*$', pattern[2]))\n-      if ret then\n-        return {\n-          type = type,\n-          ft = pattern[1] or ret,\n-        }\n-      end\n-    end\n-  end\n-\n-  local match_end = function(line, match)\n-    local pattern = matchers[match.type]\n-    return line:match(string.format('^%%s*%s%%s*$', pattern[3]))\n-  end\n-\n   -- Clean up\n-  contents = M._trim(contents, opts)\n-\n-  local stripped = {}\n-  local highlights = {}\n-  -- keep track of lnums that contain markdown\n-  local markdown_lines = {}\n-  do\n-    local i = 1\n-    while i <= #contents do\n-      local line = contents[i]\n-      local match = match_begin(line)\n-      if match then\n-        local start = #stripped\n-        i = i + 1\n-        while i <= #contents do\n-          line = contents[i]\n-          if match_end(line, match) then\n-            i = i + 1\n-            break\n-          end\n-          table.insert(stripped, line)\n-          i = i + 1\n-        end\n-        table.insert(highlights, {\n-          ft = match.ft,\n-          start = start + 1,\n-          finish = #stripped,\n-        })\n-        -- add a separator, but not on the last line\n-        if opts.separator and i < #contents then\n-          table.insert(stripped, '---')\n-          markdown_lines[#stripped] = true\n-        end\n-      else\n-        -- strip any empty lines or separators prior to this separator in actual markdown\n-        if line:match('^---+$') then\n-          while\n-            markdown_lines[#stripped]\n-            and (stripped[#stripped]:match('^%s*$') or stripped[#stripped]:match('^---+$'))\n-          do\n-            markdown_lines[#stripped] = false\n-            table.remove(stripped, #stripped)\n-          end\n-        end\n-        -- add the line if its not an empty line following a separator\n-        if\n-          not (\n-            line:match('^%s*$')\n-            and markdown_lines[#stripped]\n-            and stripped[#stripped]:match('^---+$')\n-          )\n-        then\n-          table.insert(stripped, line)\n-          markdown_lines[#stripped] = true\n-        end\n-        i = i + 1\n-      end\n-    end\n-  end\n-\n-  -- Handle some common html escape sequences\n-  stripped = vim.tbl_map(function(line)\n-    local escapes = {\n-      ['&gt;'] = '>',\n-      ['&lt;'] = '<',\n-      ['&quot;'] = '\"',\n-      ['&apos;'] = \"'\",\n-      ['&ensp;'] = ' ',\n-      ['&emsp;'] = ' ',\n-      ['&amp;'] = '&',\n-    }\n-    return (string.gsub(line, '&[^ ;]+;', escapes))\n-  end, stripped)\n+  contents = M.trim_empty_lines(contents)\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('</?pre>', '```'):gsub('\\r', ''), '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324876597",
            "id": 1324876597,
            "in_reply_to_id": 1324860471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O-AM1",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1265,
            "original_position": 184,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625128190,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324876597/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T17:56:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324876597",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324878424"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324878424"
                }
            },
            "author_association": "MEMBER",
            "body": "If we know that servers wouldn't return that, 🔥 ",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T17:56:56Z",
            "diff_hunk": "@@ -1308,180 +1260,23 @@ function M.stylize_markdown(bufnr, contents, opts)\n   })\n   opts = opts or {}\n \n-  -- table of fence types to {ft, begin, end}\n-  -- when ft is nil, we get the ft from the regex match\n-  local matchers = {\n-    block = { nil, '```+%s*([a-zA-Z0-9_]*)', '```+' },\n-    pre = { nil, '<pre>([a-z0-9]*)', '</pre>' },\n-    code = { '', '<code>', '</code>' },\n-    text = { 'text', '<text>', '</text>' },\n-  }\n-\n-  local match_begin = function(line)\n-    for type, pattern in pairs(matchers) do\n-      local ret = line:match(string.format('^%%s*%s%%s*$', pattern[2]))\n-      if ret then\n-        return {\n-          type = type,\n-          ft = pattern[1] or ret,\n-        }\n-      end\n-    end\n-  end\n-\n-  local match_end = function(line, match)\n-    local pattern = matchers[match.type]\n-    return line:match(string.format('^%%s*%s%%s*$', pattern[3]))\n-  end\n-\n   -- Clean up\n-  contents = M._trim(contents, opts)\n-\n-  local stripped = {}\n-  local highlights = {}\n-  -- keep track of lnums that contain markdown\n-  local markdown_lines = {}\n-  do\n-    local i = 1\n-    while i <= #contents do\n-      local line = contents[i]\n-      local match = match_begin(line)\n-      if match then\n-        local start = #stripped\n-        i = i + 1\n-        while i <= #contents do\n-          line = contents[i]\n-          if match_end(line, match) then\n-            i = i + 1\n-            break\n-          end\n-          table.insert(stripped, line)\n-          i = i + 1\n-        end\n-        table.insert(highlights, {\n-          ft = match.ft,\n-          start = start + 1,\n-          finish = #stripped,\n-        })\n-        -- add a separator, but not on the last line\n-        if opts.separator and i < #contents then\n-          table.insert(stripped, '---')\n-          markdown_lines[#stripped] = true\n-        end\n-      else\n-        -- strip any empty lines or separators prior to this separator in actual markdown\n-        if line:match('^---+$') then\n-          while\n-            markdown_lines[#stripped]\n-            and (stripped[#stripped]:match('^%s*$') or stripped[#stripped]:match('^---+$'))\n-          do\n-            markdown_lines[#stripped] = false\n-            table.remove(stripped, #stripped)\n-          end\n-        end\n-        -- add the line if its not an empty line following a separator\n-        if\n-          not (\n-            line:match('^%s*$')\n-            and markdown_lines[#stripped]\n-            and stripped[#stripped]:match('^---+$')\n-          )\n-        then\n-          table.insert(stripped, line)\n-          markdown_lines[#stripped] = true\n-        end\n-        i = i + 1\n-      end\n-    end\n-  end\n-\n-  -- Handle some common html escape sequences\n-  stripped = vim.tbl_map(function(line)\n-    local escapes = {\n-      ['&gt;'] = '>',\n-      ['&lt;'] = '<',\n-      ['&quot;'] = '\"',\n-      ['&apos;'] = \"'\",\n-      ['&ensp;'] = ' ',\n-      ['&emsp;'] = ' ',\n-      ['&amp;'] = '&',\n-    }\n-    return (string.gsub(line, '&[^ ;]+;', escapes))\n-  end, stripped)\n+  contents = M.trim_empty_lines(contents)\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('</?pre>', '```'):gsub('\\r', ''), '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324878424",
            "id": 1324878424,
            "in_reply_to_id": 1324860471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O-ApY",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1265,
            "original_position": 184,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625131368,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324878424/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T17:56:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324878424",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324878841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324878841"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, it does ;)",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T17:57:06Z",
            "diff_hunk": "@@ -1699,7 +1494,7 @@ function M.open_floating_preview(contents, syntax, opts)\n   local floating_winnr = api.nvim_open_win(floating_bufnr, false, float_option)\n   if do_stylize then\n     vim.wo[floating_winnr].conceallevel = 2\n-    vim.wo[floating_winnr].concealcursor = 'n'\n+    vim.bo[floating_bufnr].filetype = 'markdown'",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324878841",
            "id": 1324878841,
            "in_reply_to_id": 1324864164,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O-Av5",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1497,
            "original_position": 291,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625132182,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324878841/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T17:57:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324878841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324885738"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324885738"
                }
            },
            "author_association": "MEMBER",
            "body": "If it doesn't break any tests I'd say leave it out. If servers return it I'm sure we'll get complaints very quickly and can re-add it,  including tests and comments mentioning the servers using the tags",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T18:03:58Z",
            "diff_hunk": "@@ -1308,180 +1260,23 @@ function M.stylize_markdown(bufnr, contents, opts)\n   })\n   opts = opts or {}\n \n-  -- table of fence types to {ft, begin, end}\n-  -- when ft is nil, we get the ft from the regex match\n-  local matchers = {\n-    block = { nil, '```+%s*([a-zA-Z0-9_]*)', '```+' },\n-    pre = { nil, '<pre>([a-z0-9]*)', '</pre>' },\n-    code = { '', '<code>', '</code>' },\n-    text = { 'text', '<text>', '</text>' },\n-  }\n-\n-  local match_begin = function(line)\n-    for type, pattern in pairs(matchers) do\n-      local ret = line:match(string.format('^%%s*%s%%s*$', pattern[2]))\n-      if ret then\n-        return {\n-          type = type,\n-          ft = pattern[1] or ret,\n-        }\n-      end\n-    end\n-  end\n-\n-  local match_end = function(line, match)\n-    local pattern = matchers[match.type]\n-    return line:match(string.format('^%%s*%s%%s*$', pattern[3]))\n-  end\n-\n   -- Clean up\n-  contents = M._trim(contents, opts)\n-\n-  local stripped = {}\n-  local highlights = {}\n-  -- keep track of lnums that contain markdown\n-  local markdown_lines = {}\n-  do\n-    local i = 1\n-    while i <= #contents do\n-      local line = contents[i]\n-      local match = match_begin(line)\n-      if match then\n-        local start = #stripped\n-        i = i + 1\n-        while i <= #contents do\n-          line = contents[i]\n-          if match_end(line, match) then\n-            i = i + 1\n-            break\n-          end\n-          table.insert(stripped, line)\n-          i = i + 1\n-        end\n-        table.insert(highlights, {\n-          ft = match.ft,\n-          start = start + 1,\n-          finish = #stripped,\n-        })\n-        -- add a separator, but not on the last line\n-        if opts.separator and i < #contents then\n-          table.insert(stripped, '---')\n-          markdown_lines[#stripped] = true\n-        end\n-      else\n-        -- strip any empty lines or separators prior to this separator in actual markdown\n-        if line:match('^---+$') then\n-          while\n-            markdown_lines[#stripped]\n-            and (stripped[#stripped]:match('^%s*$') or stripped[#stripped]:match('^---+$'))\n-          do\n-            markdown_lines[#stripped] = false\n-            table.remove(stripped, #stripped)\n-          end\n-        end\n-        -- add the line if its not an empty line following a separator\n-        if\n-          not (\n-            line:match('^%s*$')\n-            and markdown_lines[#stripped]\n-            and stripped[#stripped]:match('^---+$')\n-          )\n-        then\n-          table.insert(stripped, line)\n-          markdown_lines[#stripped] = true\n-        end\n-        i = i + 1\n-      end\n-    end\n-  end\n-\n-  -- Handle some common html escape sequences\n-  stripped = vim.tbl_map(function(line)\n-    local escapes = {\n-      ['&gt;'] = '>',\n-      ['&lt;'] = '<',\n-      ['&quot;'] = '\"',\n-      ['&apos;'] = \"'\",\n-      ['&ensp;'] = ' ',\n-      ['&emsp;'] = ' ',\n-      ['&amp;'] = '&',\n-    }\n-    return (string.gsub(line, '&[^ ;]+;', escapes))\n-  end, stripped)\n+  contents = M.trim_empty_lines(contents)\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('</?pre>', '```'):gsub('\\r', ''), '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324885738",
            "id": 1324885738,
            "in_reply_to_id": 1324860471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O-Cbq",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1265,
            "original_position": 184,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625142886,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324885738/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T18:03:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324885738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324886203"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324886203"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think so since you can have something like:\r\n```\r\n<pre><code>\r\n  foo\r\n</code></pre>\r\n```\r\nAnd so the wrong \"closing\" tag will be used.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T18:04:24Z",
            "diff_hunk": "@@ -1308,180 +1260,23 @@ function M.stylize_markdown(bufnr, contents, opts)\n   })\n   opts = opts or {}\n \n-  -- table of fence types to {ft, begin, end}\n-  -- when ft is nil, we get the ft from the regex match\n-  local matchers = {\n-    block = { nil, '```+%s*([a-zA-Z0-9_]*)', '```+' },\n-    pre = { nil, '<pre>([a-z0-9]*)', '</pre>' },\n-    code = { '', '<code>', '</code>' },\n-    text = { 'text', '<text>', '</text>' },\n-  }\n-\n-  local match_begin = function(line)\n-    for type, pattern in pairs(matchers) do\n-      local ret = line:match(string.format('^%%s*%s%%s*$', pattern[2]))\n-      if ret then\n-        return {\n-          type = type,\n-          ft = pattern[1] or ret,\n-        }\n-      end\n-    end\n-  end\n-\n-  local match_end = function(line, match)\n-    local pattern = matchers[match.type]\n-    return line:match(string.format('^%%s*%s%%s*$', pattern[3]))\n-  end\n-\n   -- Clean up\n-  contents = M._trim(contents, opts)\n-\n-  local stripped = {}\n-  local highlights = {}\n-  -- keep track of lnums that contain markdown\n-  local markdown_lines = {}\n-  do\n-    local i = 1\n-    while i <= #contents do\n-      local line = contents[i]\n-      local match = match_begin(line)\n-      if match then\n-        local start = #stripped\n-        i = i + 1\n-        while i <= #contents do\n-          line = contents[i]\n-          if match_end(line, match) then\n-            i = i + 1\n-            break\n-          end\n-          table.insert(stripped, line)\n-          i = i + 1\n-        end\n-        table.insert(highlights, {\n-          ft = match.ft,\n-          start = start + 1,\n-          finish = #stripped,\n-        })\n-        -- add a separator, but not on the last line\n-        if opts.separator and i < #contents then\n-          table.insert(stripped, '---')\n-          markdown_lines[#stripped] = true\n-        end\n-      else\n-        -- strip any empty lines or separators prior to this separator in actual markdown\n-        if line:match('^---+$') then\n-          while\n-            markdown_lines[#stripped]\n-            and (stripped[#stripped]:match('^%s*$') or stripped[#stripped]:match('^---+$'))\n-          do\n-            markdown_lines[#stripped] = false\n-            table.remove(stripped, #stripped)\n-          end\n-        end\n-        -- add the line if its not an empty line following a separator\n-        if\n-          not (\n-            line:match('^%s*$')\n-            and markdown_lines[#stripped]\n-            and stripped[#stripped]:match('^---+$')\n-          )\n-        then\n-          table.insert(stripped, line)\n-          markdown_lines[#stripped] = true\n-        end\n-        i = i + 1\n-      end\n-    end\n-  end\n-\n-  -- Handle some common html escape sequences\n-  stripped = vim.tbl_map(function(line)\n-    local escapes = {\n-      ['&gt;'] = '>',\n-      ['&lt;'] = '<',\n-      ['&quot;'] = '\"',\n-      ['&apos;'] = \"'\",\n-      ['&ensp;'] = ' ',\n-      ['&emsp;'] = ' ',\n-      ['&amp;'] = '&',\n-    }\n-    return (string.gsub(line, '&[^ ;]+;', escapes))\n-  end, stripped)\n+  contents = M.trim_empty_lines(contents)\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('</?pre>', '```'):gsub('\\r', ''), '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324886203",
            "id": 1324886203,
            "in_reply_to_id": 1324855859,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O-Ci7",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1265,
            "original_position": 184,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625143576,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324886203/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T18:04:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324886203",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324887945"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324887945"
                }
            },
            "author_association": "MEMBER",
            "body": "In general, I would recommend starting with the minimum of transformation and add them back later (only) if someone complains.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T18:06:23Z",
            "diff_hunk": "@@ -1308,180 +1260,23 @@ function M.stylize_markdown(bufnr, contents, opts)\n   })\n   opts = opts or {}\n \n-  -- table of fence types to {ft, begin, end}\n-  -- when ft is nil, we get the ft from the regex match\n-  local matchers = {\n-    block = { nil, '```+%s*([a-zA-Z0-9_]*)', '```+' },\n-    pre = { nil, '<pre>([a-z0-9]*)', '</pre>' },\n-    code = { '', '<code>', '</code>' },\n-    text = { 'text', '<text>', '</text>' },\n-  }\n-\n-  local match_begin = function(line)\n-    for type, pattern in pairs(matchers) do\n-      local ret = line:match(string.format('^%%s*%s%%s*$', pattern[2]))\n-      if ret then\n-        return {\n-          type = type,\n-          ft = pattern[1] or ret,\n-        }\n-      end\n-    end\n-  end\n-\n-  local match_end = function(line, match)\n-    local pattern = matchers[match.type]\n-    return line:match(string.format('^%%s*%s%%s*$', pattern[3]))\n-  end\n-\n   -- Clean up\n-  contents = M._trim(contents, opts)\n-\n-  local stripped = {}\n-  local highlights = {}\n-  -- keep track of lnums that contain markdown\n-  local markdown_lines = {}\n-  do\n-    local i = 1\n-    while i <= #contents do\n-      local line = contents[i]\n-      local match = match_begin(line)\n-      if match then\n-        local start = #stripped\n-        i = i + 1\n-        while i <= #contents do\n-          line = contents[i]\n-          if match_end(line, match) then\n-            i = i + 1\n-            break\n-          end\n-          table.insert(stripped, line)\n-          i = i + 1\n-        end\n-        table.insert(highlights, {\n-          ft = match.ft,\n-          start = start + 1,\n-          finish = #stripped,\n-        })\n-        -- add a separator, but not on the last line\n-        if opts.separator and i < #contents then\n-          table.insert(stripped, '---')\n-          markdown_lines[#stripped] = true\n-        end\n-      else\n-        -- strip any empty lines or separators prior to this separator in actual markdown\n-        if line:match('^---+$') then\n-          while\n-            markdown_lines[#stripped]\n-            and (stripped[#stripped]:match('^%s*$') or stripped[#stripped]:match('^---+$'))\n-          do\n-            markdown_lines[#stripped] = false\n-            table.remove(stripped, #stripped)\n-          end\n-        end\n-        -- add the line if its not an empty line following a separator\n-        if\n-          not (\n-            line:match('^%s*$')\n-            and markdown_lines[#stripped]\n-            and stripped[#stripped]:match('^---+$')\n-          )\n-        then\n-          table.insert(stripped, line)\n-          markdown_lines[#stripped] = true\n-        end\n-        i = i + 1\n-      end\n-    end\n-  end\n-\n-  -- Handle some common html escape sequences\n-  stripped = vim.tbl_map(function(line)\n-    local escapes = {\n-      ['&gt;'] = '>',\n-      ['&lt;'] = '<',\n-      ['&quot;'] = '\"',\n-      ['&apos;'] = \"'\",\n-      ['&ensp;'] = ' ',\n-      ['&emsp;'] = ' ',\n-      ['&amp;'] = '&',\n-    }\n-    return (string.gsub(line, '&[^ ;]+;', escapes))\n-  end, stripped)\n+  contents = M.trim_empty_lines(contents)\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('</?pre>', '```'):gsub('\\r', ''), '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324887945",
            "id": 1324887945,
            "in_reply_to_id": 1324860471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O-C-J",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1265,
            "original_position": 184,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625146381,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324887945/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T18:06:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324887945",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324888628"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324888628"
                }
            },
            "author_association": "MEMBER",
            "body": "True; this could be literal content for some servers. Another argument to just drop _all_ these transformations...",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T18:07:08Z",
            "diff_hunk": "@@ -1308,180 +1260,23 @@ function M.stylize_markdown(bufnr, contents, opts)\n   })\n   opts = opts or {}\n \n-  -- table of fence types to {ft, begin, end}\n-  -- when ft is nil, we get the ft from the regex match\n-  local matchers = {\n-    block = { nil, '```+%s*([a-zA-Z0-9_]*)', '```+' },\n-    pre = { nil, '<pre>([a-z0-9]*)', '</pre>' },\n-    code = { '', '<code>', '</code>' },\n-    text = { 'text', '<text>', '</text>' },\n-  }\n-\n-  local match_begin = function(line)\n-    for type, pattern in pairs(matchers) do\n-      local ret = line:match(string.format('^%%s*%s%%s*$', pattern[2]))\n-      if ret then\n-        return {\n-          type = type,\n-          ft = pattern[1] or ret,\n-        }\n-      end\n-    end\n-  end\n-\n-  local match_end = function(line, match)\n-    local pattern = matchers[match.type]\n-    return line:match(string.format('^%%s*%s%%s*$', pattern[3]))\n-  end\n-\n   -- Clean up\n-  contents = M._trim(contents, opts)\n-\n-  local stripped = {}\n-  local highlights = {}\n-  -- keep track of lnums that contain markdown\n-  local markdown_lines = {}\n-  do\n-    local i = 1\n-    while i <= #contents do\n-      local line = contents[i]\n-      local match = match_begin(line)\n-      if match then\n-        local start = #stripped\n-        i = i + 1\n-        while i <= #contents do\n-          line = contents[i]\n-          if match_end(line, match) then\n-            i = i + 1\n-            break\n-          end\n-          table.insert(stripped, line)\n-          i = i + 1\n-        end\n-        table.insert(highlights, {\n-          ft = match.ft,\n-          start = start + 1,\n-          finish = #stripped,\n-        })\n-        -- add a separator, but not on the last line\n-        if opts.separator and i < #contents then\n-          table.insert(stripped, '---')\n-          markdown_lines[#stripped] = true\n-        end\n-      else\n-        -- strip any empty lines or separators prior to this separator in actual markdown\n-        if line:match('^---+$') then\n-          while\n-            markdown_lines[#stripped]\n-            and (stripped[#stripped]:match('^%s*$') or stripped[#stripped]:match('^---+$'))\n-          do\n-            markdown_lines[#stripped] = false\n-            table.remove(stripped, #stripped)\n-          end\n-        end\n-        -- add the line if its not an empty line following a separator\n-        if\n-          not (\n-            line:match('^%s*$')\n-            and markdown_lines[#stripped]\n-            and stripped[#stripped]:match('^---+$')\n-          )\n-        then\n-          table.insert(stripped, line)\n-          markdown_lines[#stripped] = true\n-        end\n-        i = i + 1\n-      end\n-    end\n-  end\n-\n-  -- Handle some common html escape sequences\n-  stripped = vim.tbl_map(function(line)\n-    local escapes = {\n-      ['&gt;'] = '>',\n-      ['&lt;'] = '<',\n-      ['&quot;'] = '\"',\n-      ['&apos;'] = \"'\",\n-      ['&ensp;'] = ' ',\n-      ['&emsp;'] = ' ',\n-      ['&amp;'] = '&',\n-    }\n-    return (string.gsub(line, '&[^ ;]+;', escapes))\n-  end, stripped)\n+  contents = M.trim_empty_lines(contents)\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('</?pre>', '```'):gsub('\\r', ''), '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324888628",
            "id": 1324888628,
            "in_reply_to_id": 1324855859,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O-DI0",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1265,
            "original_position": 184,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625147552,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324888628/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T18:07:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324888628",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1324914418"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324914418"
                }
            },
            "author_association": "MEMBER",
            "body": "Fair, I'll remove the `<pre>` transformation.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-13T18:29:52Z",
            "diff_hunk": "@@ -1308,180 +1260,23 @@ function M.stylize_markdown(bufnr, contents, opts)\n   })\n   opts = opts or {}\n \n-  -- table of fence types to {ft, begin, end}\n-  -- when ft is nil, we get the ft from the regex match\n-  local matchers = {\n-    block = { nil, '```+%s*([a-zA-Z0-9_]*)', '```+' },\n-    pre = { nil, '<pre>([a-z0-9]*)', '</pre>' },\n-    code = { '', '<code>', '</code>' },\n-    text = { 'text', '<text>', '</text>' },\n-  }\n-\n-  local match_begin = function(line)\n-    for type, pattern in pairs(matchers) do\n-      local ret = line:match(string.format('^%%s*%s%%s*$', pattern[2]))\n-      if ret then\n-        return {\n-          type = type,\n-          ft = pattern[1] or ret,\n-        }\n-      end\n-    end\n-  end\n-\n-  local match_end = function(line, match)\n-    local pattern = matchers[match.type]\n-    return line:match(string.format('^%%s*%s%%s*$', pattern[3]))\n-  end\n-\n   -- Clean up\n-  contents = M._trim(contents, opts)\n-\n-  local stripped = {}\n-  local highlights = {}\n-  -- keep track of lnums that contain markdown\n-  local markdown_lines = {}\n-  do\n-    local i = 1\n-    while i <= #contents do\n-      local line = contents[i]\n-      local match = match_begin(line)\n-      if match then\n-        local start = #stripped\n-        i = i + 1\n-        while i <= #contents do\n-          line = contents[i]\n-          if match_end(line, match) then\n-            i = i + 1\n-            break\n-          end\n-          table.insert(stripped, line)\n-          i = i + 1\n-        end\n-        table.insert(highlights, {\n-          ft = match.ft,\n-          start = start + 1,\n-          finish = #stripped,\n-        })\n-        -- add a separator, but not on the last line\n-        if opts.separator and i < #contents then\n-          table.insert(stripped, '---')\n-          markdown_lines[#stripped] = true\n-        end\n-      else\n-        -- strip any empty lines or separators prior to this separator in actual markdown\n-        if line:match('^---+$') then\n-          while\n-            markdown_lines[#stripped]\n-            and (stripped[#stripped]:match('^%s*$') or stripped[#stripped]:match('^---+$'))\n-          do\n-            markdown_lines[#stripped] = false\n-            table.remove(stripped, #stripped)\n-          end\n-        end\n-        -- add the line if its not an empty line following a separator\n-        if\n-          not (\n-            line:match('^%s*$')\n-            and markdown_lines[#stripped]\n-            and stripped[#stripped]:match('^---+$')\n-          )\n-        then\n-          table.insert(stripped, line)\n-          markdown_lines[#stripped] = true\n-        end\n-        i = i + 1\n-      end\n-    end\n-  end\n-\n-  -- Handle some common html escape sequences\n-  stripped = vim.tbl_map(function(line)\n-    local escapes = {\n-      ['&gt;'] = '>',\n-      ['&lt;'] = '<',\n-      ['&quot;'] = '\"',\n-      ['&apos;'] = \"'\",\n-      ['&ensp;'] = ' ',\n-      ['&emsp;'] = ' ',\n-      ['&amp;'] = '&',\n-    }\n-    return (string.gsub(line, '&[^ ;]+;', escapes))\n-  end, stripped)\n+  contents = M.trim_empty_lines(contents)\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('</?pre>', '```'):gsub('\\r', ''), '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1324914418",
            "id": 1324914418,
            "in_reply_to_id": 1324860471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O-Jby",
            "original_commit_id": "0d01ba479455fcb5c9e3015201adceba68517cb4",
            "original_line": 1265,
            "original_position": 184,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1625187203,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324914418/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T18:29:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324914418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1325212084"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325212084"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we should not do any pre processing if `result.contents.kind` is `plaintext`. If that's the case then skip `util.convert_input_to_markdown_lines` and just use `result.contents.value` directly.\r\n\r\nThis also means we don't need to rename `util.convert_input_to_markdown_lines`.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-14T00:49:05Z",
            "diff_hunk": "@@ -369,15 +369,16 @@ function M.hover(_, result, ctx, config)\n     end\n     return\n   end\n-  local markdown_lines = util.convert_input_to_markdown_lines(result.contents)\n-  markdown_lines = util.trim_empty_lines(markdown_lines)\n-  if vim.tbl_isempty(markdown_lines) then\n+  local contents, format = util.convert_input_to_render_content(result.contents)\n+  contents = util.trim_empty_lines(contents)\n+  if vim.tbl_isempty(contents) then",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1325212084",
            "id": 1325212084,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O_SG0",
            "original_commit_id": "df1e91982c451b34882ec5d7d35b329b3f9e63e0",
            "original_line": 380,
            "original_position": 9,
            "original_start_line": 372,
            "path": "runtime/lua/vim/lsp/handlers.lua",
            "position": null,
            "pull_request_review_id": 1625640559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325212084/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-14T00:50:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325212084",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1325221393"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325221393"
                }
            },
            "author_association": "MEMBER",
            "body": "I think you're right. Although if the input to `convert_input_to_markdown_lines` is `plaintext` `MarkupContent` then it will just return the unprocessed value. I'll update the docs to specify that.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-14T01:09:44Z",
            "diff_hunk": "@@ -369,15 +369,16 @@ function M.hover(_, result, ctx, config)\n     end\n     return\n   end\n-  local markdown_lines = util.convert_input_to_markdown_lines(result.contents)\n-  markdown_lines = util.trim_empty_lines(markdown_lines)\n-  if vim.tbl_isempty(markdown_lines) then\n+  local contents, format = util.convert_input_to_render_content(result.contents)\n+  contents = util.trim_empty_lines(contents)\n+  if vim.tbl_isempty(contents) then",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1325221393",
            "id": 1325221393,
            "in_reply_to_id": 1325212084,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O_UYR",
            "original_commit_id": "df1e91982c451b34882ec5d7d35b329b3f9e63e0",
            "original_line": 380,
            "original_position": 9,
            "original_start_line": 372,
            "path": "runtime/lua/vim/lsp/handlers.lua",
            "position": null,
            "pull_request_review_id": 1625653090,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325221393/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-14T01:09:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325221393",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1325502871"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325502871"
                }
            },
            "author_association": "MEMBER",
            "body": "Still, control flow is easier to reason about when the function is only applied to content that _should_ be normalized.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-14T07:37:48Z",
            "diff_hunk": "@@ -369,15 +369,16 @@ function M.hover(_, result, ctx, config)\n     end\n     return\n   end\n-  local markdown_lines = util.convert_input_to_markdown_lines(result.contents)\n-  markdown_lines = util.trim_empty_lines(markdown_lines)\n-  if vim.tbl_isempty(markdown_lines) then\n+  local contents, format = util.convert_input_to_render_content(result.contents)\n+  contents = util.trim_empty_lines(contents)\n+  if vim.tbl_isempty(contents) then",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1325502871",
            "id": 1325502871,
            "in_reply_to_id": 1325212084,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PAZGX",
            "original_commit_id": "df1e91982c451b34882ec5d7d35b329b3f9e63e0",
            "original_line": 380,
            "original_position": 9,
            "original_start_line": 372,
            "path": "runtime/lua/vim/lsp/handlers.lua",
            "position": null,
            "pull_request_review_id": 1626199814,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325502871/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-14T07:37:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325502871",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1325523775"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325523775"
                }
            },
            "author_association": "MEMBER",
            "body": "@clason I don't disagree with that. I'm just thinking of how this function is part of the public API and we're now changing its contract. Internally (inside this repo) I do agree we should just use it for true Markdown input.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-14T07:49:49Z",
            "diff_hunk": "@@ -369,15 +369,16 @@ function M.hover(_, result, ctx, config)\n     end\n     return\n   end\n-  local markdown_lines = util.convert_input_to_markdown_lines(result.contents)\n-  markdown_lines = util.trim_empty_lines(markdown_lines)\n-  if vim.tbl_isempty(markdown_lines) then\n+  local contents, format = util.convert_input_to_render_content(result.contents)\n+  contents = util.trim_empty_lines(contents)\n+  if vim.tbl_isempty(contents) then",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1325523775",
            "id": 1325523775,
            "in_reply_to_id": 1325212084,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PAeM_",
            "original_commit_id": "df1e91982c451b34882ec5d7d35b329b3f9e63e0",
            "original_line": 380,
            "original_position": 9,
            "original_start_line": 372,
            "path": "runtime/lua/vim/lsp/handlers.lua",
            "position": null,
            "pull_request_review_id": 1626232435,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325523775/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-14T07:49:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325523775",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1325531852"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325531852"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, the question of refactoring/deprecating the _external_ API is different (and I'd leave it to @gpanders to take a sledgehammer to it ;))\r\n\r\nIn the context of this PR, I am _only_ concerned about the internal codepath for showing LSP content (hover, signature, preview).",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-14T07:55:56Z",
            "diff_hunk": "@@ -369,15 +369,16 @@ function M.hover(_, result, ctx, config)\n     end\n     return\n   end\n-  local markdown_lines = util.convert_input_to_markdown_lines(result.contents)\n-  markdown_lines = util.trim_empty_lines(markdown_lines)\n-  if vim.tbl_isempty(markdown_lines) then\n+  local contents, format = util.convert_input_to_render_content(result.contents)\n+  contents = util.trim_empty_lines(contents)\n+  if vim.tbl_isempty(contents) then",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1325531852",
            "id": 1325531852,
            "in_reply_to_id": 1325212084,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PAgLM",
            "original_commit_id": "df1e91982c451b34882ec5d7d35b329b3f9e63e0",
            "original_line": 380,
            "original_position": 9,
            "original_start_line": 372,
            "path": "runtime/lua/vim/lsp/handlers.lua",
            "position": null,
            "pull_request_review_id": 1626244185,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325531852/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-14T07:55:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325531852",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1325763614"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325763614"
                }
            },
            "author_association": "MEMBER",
            "body": "Will the plaintext be rendered as markdown? Ideally it should be treated as `filetype=text`. https://github.com/neovim/neovim/commit/20c331915f4e317c615c7cfea469a9baedd2e4f7",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-14T10:45:45Z",
            "diff_hunk": "@@ -877,37 +877,26 @@ end\n --- window for `textDocument/hover`, for parsing the result of\n --- `textDocument/signatureHelp`, and potentially others.\n ---\n+--- Note that if the input is of type `MarkupContent` and its kind is 'plaintext',\n+--- then the corresponding value is returned without further modifications.",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1325763614",
            "id": 1325763614,
            "line": 881,
            "node_id": "PRRC_kwDOAPphoM5PBYwe",
            "original_commit_id": "1673588da9fbca6a97506656aeffa406b82d5621",
            "original_line": 881,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 14,
            "pull_request_review_id": 1626595486,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325763614/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-14T10:45:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325763614",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1325766292"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325766292"
                }
            },
            "author_association": "MEMBER",
            "body": "No; the plan is for plaintext to be shown verbatim, without going through any styling (except possibly trimming empty lines).\r\n\r\nThat code is still a bit in flux due to the fact that these helper functions are part of the public API (stemming from the original goal for LSP to be a \"build your own\" Lego set).",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-14T10:48:22Z",
            "diff_hunk": "@@ -877,37 +877,26 @@ end\n --- window for `textDocument/hover`, for parsing the result of\n --- `textDocument/signatureHelp`, and potentially others.\n ---\n+--- Note that if the input is of type `MarkupContent` and its kind is 'plaintext',\n+--- then the corresponding value is returned without further modifications.",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1325766292",
            "id": 1325766292,
            "in_reply_to_id": 1325763614,
            "line": 881,
            "node_id": "PRRC_kwDOAPphoM5PBZaU",
            "original_commit_id": "1673588da9fbca6a97506656aeffa406b82d5621",
            "original_line": 881,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 14,
            "pull_request_review_id": 1626599561,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325766292/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-14T10:49:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1325766292",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327719664"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327719664"
                }
            },
            "author_association": "MEMBER",
            "body": "A bit pedantic, but separators can be made up of `-`, `_`, or `*` (https://github.github.com/gfm/#thematic-breaks). And there can be up to 3 spaces before and any amount of whitespace after.\r\n\r\nAlso `-` characters have to be escaped in a match (isn't Lua fun? 🙃)\r\n\r\n```suggestion\r\n    if line then\r\n      line = line:gsub('^ ? ? ?', ''):gsub('%s*$', '')\r\n      return line:match('^%-%-%-+$') or line:match('^%*%*%*+$') or line:match('^___+$')\r\n    end\r\n    return nil\r\n```",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T19:49:21Z",
            "diff_hunk": "@@ -1240,45 +1230,40 @@ local function find_window_by_var(name, value)\n   end\n end\n \n---- Trims empty lines from input and pad top and bottom with empty lines\n----\n----@param contents table of lines to trim and pad\n----@param opts table with optional fields\n----             - pad_top    number of lines to pad contents at top (default 0)\n----             - pad_bottom number of lines to pad contents at bottom (default 0)\n----@return table table of trimmed and padded lines\n-function M._trim(contents, opts)\n-  validate({\n-    contents = { contents, 't' },\n-    opts = { opts, 't', true },\n-  })\n-  opts = opts or {}\n-  contents = M.trim_empty_lines(contents)\n-  if opts.pad_top then\n-    for _ = 1, opts.pad_top do\n-      table.insert(contents, 1, '')\n-    end\n+---Replaces separator lines by the given divider and removing surrounding blank lines.\n+---@param contents string[]\n+---@param divider string\n+---@return string[]\n+local function replace_separators(contents, divider)\n+  ---@param line string\n+  local function is_blank_line(line)\n+    return line and line:match('^%s*$')\n   end\n-  if opts.pad_bottom then\n-    for _ = 1, opts.pad_bottom do\n-      table.insert(contents, '')\n-    end\n+\n+  ---@param line string\n+  local function is_separator_line(line)\n+    return line and line:match('^---+$')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327719664",
            "id": 1327719664,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PI2Tw",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1245,
            "original_position": 98,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629617287,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327719664/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T19:49:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327719664",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327720582"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327720582"
                }
            },
            "author_association": "MEMBER",
            "body": "Or use `vim.pesc`.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T19:50:34Z",
            "diff_hunk": "@@ -1240,45 +1230,40 @@ local function find_window_by_var(name, value)\n   end\n end\n \n---- Trims empty lines from input and pad top and bottom with empty lines\n----\n----@param contents table of lines to trim and pad\n----@param opts table with optional fields\n----             - pad_top    number of lines to pad contents at top (default 0)\n----             - pad_bottom number of lines to pad contents at bottom (default 0)\n----@return table table of trimmed and padded lines\n-function M._trim(contents, opts)\n-  validate({\n-    contents = { contents, 't' },\n-    opts = { opts, 't', true },\n-  })\n-  opts = opts or {}\n-  contents = M.trim_empty_lines(contents)\n-  if opts.pad_top then\n-    for _ = 1, opts.pad_top do\n-      table.insert(contents, 1, '')\n-    end\n+---Replaces separator lines by the given divider and removing surrounding blank lines.\n+---@param contents string[]\n+---@param divider string\n+---@return string[]\n+local function replace_separators(contents, divider)\n+  ---@param line string\n+  local function is_blank_line(line)\n+    return line and line:match('^%s*$')\n   end\n-  if opts.pad_bottom then\n-    for _ = 1, opts.pad_bottom do\n-      table.insert(contents, '')\n-    end\n+\n+  ---@param line string\n+  local function is_separator_line(line)\n+    return line and line:match('^---+$')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327720582",
            "id": 1327720582,
            "in_reply_to_id": 1327719664,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PI2iG",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1245,
            "original_position": 98,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629620398,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327720582/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T19:50:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327720582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327727186"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327727186"
                }
            },
            "author_association": "MEMBER",
            "body": "I would move `is_blank_line()`, `is_separator_line()` and `get_markdown_fences()` out from being closures.\n\nIf you want to reduce scope of certain functions/state, then better put all the markdown stuff into a separate module.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T19:59:05Z",
            "diff_hunk": "@@ -1240,45 +1230,40 @@ local function find_window_by_var(name, value)\n   end\n end\n \n---- Trims empty lines from input and pad top and bottom with empty lines\n----\n----@param contents table of lines to trim and pad\n----@param opts table with optional fields\n----             - pad_top    number of lines to pad contents at top (default 0)\n----             - pad_bottom number of lines to pad contents at bottom (default 0)\n----@return table table of trimmed and padded lines\n-function M._trim(contents, opts)\n-  validate({\n-    contents = { contents, 't' },\n-    opts = { opts, 't', true },\n-  })\n-  opts = opts or {}\n-  contents = M.trim_empty_lines(contents)\n-  if opts.pad_top then\n-    for _ = 1, opts.pad_top do\n-      table.insert(contents, 1, '')\n-    end\n+---Replaces separator lines by the given divider and removing surrounding blank lines.\n+---@param contents string[]\n+---@param divider string\n+---@return string[]\n+local function replace_separators(contents, divider)\n+  ---@param line string\n+  local function is_blank_line(line)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327727186",
            "id": 1327727186,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PI4JS",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1239,
            "original_position": 88,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629641858,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327727186/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T19:59:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327727186",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327727970"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327727970"
                }
            },
            "author_association": "MEMBER",
            "body": "This function should not have any side effects, it should be a simple \"Markdown goes in, Markdown comes out\" function.\r\n\r\n```suggestion\r\n--- Normalizes Markdown input to a canonical form.\r\n---\r\n--- The returned Markdown adheres to the GitHub Flavored Markdown (GFM)\r\n--- specification.\r\n---\r\n--- The following transformations are made:\r\n---\r\n---   1. Empty lines at the beginning or end of the content are removed\r\n---   2. Carriage returns ('\\r') are removed\r\n---   3. Successive empty lines are collapsed into a single empty line\r\n---   4. Thematic breaks are expanded to the given width\r\n---\r\n---@param contents string[] Table of lines containing valid Markdown\r\n---@param opts table Optional arguments:\r\n---  - width (integer): Thematic breaks are expanded to this size. Defaults to 80.\r\n---@return string[] Table of lines containing normalized Markdown\r\n---@see https://github.github.com/gfm\r\nfunction M.normalize_markdown(contents, opts)\r\n  validate({\r\n    contents = { contents, 't' },\r\n    opts = { opts, 't', true },\r\n  })\r\n\r\n  opts = opts or {}\r\n\r\n  -- 1. Empty lines at the beginning or end of the content are removed\r\n  contents = M.trim_empty_lines(contents)\r\n\r\n  -- 2. Carriage returns are removed\r\n  contents = vim.split(table.concat(contents, '\\n'):gsub('\\r', ''), '\\n')\r\n\r\n  -- 3. Successive empty lines are collapsed into a single empty line\r\n  -- TODO?\r\n\r\n  -- 4. Thematic breaks are expanded to the given width\r\n  local divider = string.rep('─', math.min(opts.width or 80))\r\n  contents = replace_separators(contents, divider)\r\n\r\n  return contents\r\nend\r\n\r\n```",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T19:59:49Z",
            "diff_hunk": "@@ -1484,6 +1479,44 @@ function M.stylize_markdown(bufnr, contents, opts)\n   return stripped\n end\n \n+--- Removes surrounding empty lines in the given markdown content, replaces\n+--- separators by horizontal dividers spanning the entire window, and configures\n+--- the given buffer.\n+---\n+---@param contents string[] of lines to show in window\n+---@param opts table with optional fields\n+---  - height    of floating window\n+---  - width     of floating window\n+---  - wrap_at   character to wrap at for computing height\n+---  - max_width  maximal width of floating window\n+---  - max_height maximal height of floating window\n+--- @return string[] contents with the processed lines\n+function M.normalize_markdown(bufnr, contents, opts)\n+  validate({\n+    contents = { contents, 't' },\n+    opts = { opts, 't', true },\n+  })\n+  opts = opts or {}\n+\n+  -- Clean up\n+  contents = M.trim_empty_lines(contents)\n+\n+  -- Remove carriage returns\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('\\r', ''), '\\n')\n+\n+  -- Compute size of float needed to show (wrapped) lines\n+  opts.wrap_at = opts.wrap_at or (vim.wo['wrap'] and api.nvim_win_get_width(0))\n+  local width = M._make_floating_popup_size(contents, opts)\n+\n+  -- Replace separators\n+  local divider = string.rep('─', math.min(width, opts.wrap_at or width))\n+  contents = replace_separators(contents, divider)\n+\n+  api.nvim_buf_set_lines(bufnr, 0, -1, false, contents)\n+\n+  return contents\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327727970",
            "id": 1327727970,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PI4Vi",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1540,
            "original_position": 208,
            "original_start_line": 1482,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629642959,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327727970/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-15T19:59:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327727970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327728863"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327728863"
                }
            },
            "author_association": "MEMBER",
            "body": "If it gets this feature out the door sooner then we can leave this as-is for now, but this change should be made in a follow up then.\r\n\r\nThis function will be moved out of `vim.lsp.util` and when it does, it's important that it is a simple transformation function.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T20:00:38Z",
            "diff_hunk": "@@ -1484,6 +1479,44 @@ function M.stylize_markdown(bufnr, contents, opts)\n   return stripped\n end\n \n+--- Removes surrounding empty lines in the given markdown content, replaces\n+--- separators by horizontal dividers spanning the entire window, and configures\n+--- the given buffer.\n+---\n+---@param contents string[] of lines to show in window\n+---@param opts table with optional fields\n+---  - height    of floating window\n+---  - width     of floating window\n+---  - wrap_at   character to wrap at for computing height\n+---  - max_width  maximal width of floating window\n+---  - max_height maximal height of floating window\n+--- @return string[] contents with the processed lines\n+function M.normalize_markdown(bufnr, contents, opts)\n+  validate({\n+    contents = { contents, 't' },\n+    opts = { opts, 't', true },\n+  })\n+  opts = opts or {}\n+\n+  -- Clean up\n+  contents = M.trim_empty_lines(contents)\n+\n+  -- Remove carriage returns\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('\\r', ''), '\\n')\n+\n+  -- Compute size of float needed to show (wrapped) lines\n+  opts.wrap_at = opts.wrap_at or (vim.wo['wrap'] and api.nvim_win_get_width(0))\n+  local width = M._make_floating_popup_size(contents, opts)\n+\n+  -- Replace separators\n+  local divider = string.rep('─', math.min(width, opts.wrap_at or width))\n+  contents = replace_separators(contents, divider)\n+\n+  api.nvim_buf_set_lines(bufnr, 0, -1, false, contents)\n+\n+  return contents\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327728863",
            "id": 1327728863,
            "in_reply_to_id": 1327727970,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PI4jf",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1540,
            "original_position": 208,
            "original_start_line": 1482,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629643809,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327728863/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-15T20:00:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327728863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327730396"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327730396"
                }
            },
            "author_association": "MEMBER",
            "body": "Remember, start simple, and extend when someone shows us a server that actually uses an unhandled variant.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T20:02:03Z",
            "diff_hunk": "@@ -1240,45 +1230,40 @@ local function find_window_by_var(name, value)\n   end\n end\n \n---- Trims empty lines from input and pad top and bottom with empty lines\n----\n----@param contents table of lines to trim and pad\n----@param opts table with optional fields\n----             - pad_top    number of lines to pad contents at top (default 0)\n----             - pad_bottom number of lines to pad contents at bottom (default 0)\n----@return table table of trimmed and padded lines\n-function M._trim(contents, opts)\n-  validate({\n-    contents = { contents, 't' },\n-    opts = { opts, 't', true },\n-  })\n-  opts = opts or {}\n-  contents = M.trim_empty_lines(contents)\n-  if opts.pad_top then\n-    for _ = 1, opts.pad_top do\n-      table.insert(contents, 1, '')\n-    end\n+---Replaces separator lines by the given divider and removing surrounding blank lines.\n+---@param contents string[]\n+---@param divider string\n+---@return string[]\n+local function replace_separators(contents, divider)\n+  ---@param line string\n+  local function is_blank_line(line)\n+    return line and line:match('^%s*$')\n   end\n-  if opts.pad_bottom then\n-    for _ = 1, opts.pad_bottom do\n-      table.insert(contents, '')\n-    end\n+\n+  ---@param line string\n+  local function is_separator_line(line)\n+    return line and line:match('^---+$')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327730396",
            "id": 1327730396,
            "in_reply_to_id": 1327719664,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PI47c",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1245,
            "original_position": 98,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629645357,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327730396/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T20:02:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327730396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327732155"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327732155"
                }
            },
            "author_association": "MEMBER",
            "body": "Follow up PR.\r\n\r\nI don't mind closures or separate functions, as long as they are local and not exported. \r\n\r\nHaving them as closures makes it much easier to move to a different module later, though.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T20:04:11Z",
            "diff_hunk": "@@ -1240,45 +1230,40 @@ local function find_window_by_var(name, value)\n   end\n end\n \n---- Trims empty lines from input and pad top and bottom with empty lines\n----\n----@param contents table of lines to trim and pad\n----@param opts table with optional fields\n----             - pad_top    number of lines to pad contents at top (default 0)\n----             - pad_bottom number of lines to pad contents at bottom (default 0)\n----@return table table of trimmed and padded lines\n-function M._trim(contents, opts)\n-  validate({\n-    contents = { contents, 't' },\n-    opts = { opts, 't', true },\n-  })\n-  opts = opts or {}\n-  contents = M.trim_empty_lines(contents)\n-  if opts.pad_top then\n-    for _ = 1, opts.pad_top do\n-      table.insert(contents, 1, '')\n-    end\n+---Replaces separator lines by the given divider and removing surrounding blank lines.\n+---@param contents string[]\n+---@param divider string\n+---@return string[]\n+local function replace_separators(contents, divider)\n+  ---@param line string\n+  local function is_blank_line(line)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327732155",
            "id": 1327732155,
            "in_reply_to_id": 1327727186,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PI5W7",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1239,
            "original_position": 88,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629647546,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327732155/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T20:04:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327732155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327741301"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327741301"
                }
            },
            "author_association": "MEMBER",
            "body": "What I've seen happen (many times), is people will write small little helper closures with no state. Move on. Then other contributors start chiming in with _features_ that exploit the fact these are closures and begin adding upvals. Now you can't easily refactor. This is sort of what's already happened in this file.\n\nI've already spent some time unwinding a lot of this kind of stuff in nvim-lspconfig which has full on closure classes. (https://github.com/neovim/nvim-lspconfig/pull/2776).\n\nBy making a proactive step to fix a structure a little bit now will mitigate against these risks by enforcing a stronger functional style.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T20:15:11Z",
            "diff_hunk": "@@ -1240,45 +1230,40 @@ local function find_window_by_var(name, value)\n   end\n end\n \n---- Trims empty lines from input and pad top and bottom with empty lines\n----\n----@param contents table of lines to trim and pad\n----@param opts table with optional fields\n----             - pad_top    number of lines to pad contents at top (default 0)\n----             - pad_bottom number of lines to pad contents at bottom (default 0)\n----@return table table of trimmed and padded lines\n-function M._trim(contents, opts)\n-  validate({\n-    contents = { contents, 't' },\n-    opts = { opts, 't', true },\n-  })\n-  opts = opts or {}\n-  contents = M.trim_empty_lines(contents)\n-  if opts.pad_top then\n-    for _ = 1, opts.pad_top do\n-      table.insert(contents, 1, '')\n-    end\n+---Replaces separator lines by the given divider and removing surrounding blank lines.\n+---@param contents string[]\n+---@param divider string\n+---@return string[]\n+local function replace_separators(contents, divider)\n+  ---@param line string\n+  local function is_blank_line(line)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327741301",
            "id": 1327741301,
            "in_reply_to_id": 1327727186,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PI7l1",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1239,
            "original_position": 88,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629661884,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327741301/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T20:16:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327741301",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327742232"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327742232"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think this violates \"start simple\", but at the very least we should handle leading and trailing whitespace:\r\n\r\n```lua\r\nreturn line and line:match('^ ? ? ?%-%-%-+%s*$')\r\n```",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T20:16:33Z",
            "diff_hunk": "@@ -1240,45 +1230,40 @@ local function find_window_by_var(name, value)\n   end\n end\n \n---- Trims empty lines from input and pad top and bottom with empty lines\n----\n----@param contents table of lines to trim and pad\n----@param opts table with optional fields\n----             - pad_top    number of lines to pad contents at top (default 0)\n----             - pad_bottom number of lines to pad contents at bottom (default 0)\n----@return table table of trimmed and padded lines\n-function M._trim(contents, opts)\n-  validate({\n-    contents = { contents, 't' },\n-    opts = { opts, 't', true },\n-  })\n-  opts = opts or {}\n-  contents = M.trim_empty_lines(contents)\n-  if opts.pad_top then\n-    for _ = 1, opts.pad_top do\n-      table.insert(contents, 1, '')\n-    end\n+---Replaces separator lines by the given divider and removing surrounding blank lines.\n+---@param contents string[]\n+---@param divider string\n+---@return string[]\n+local function replace_separators(contents, divider)\n+  ---@param line string\n+  local function is_blank_line(line)\n+    return line and line:match('^%s*$')\n   end\n-  if opts.pad_bottom then\n-    for _ = 1, opts.pad_bottom do\n-      table.insert(contents, '')\n-    end\n+\n+  ---@param line string\n+  local function is_separator_line(line)\n+    return line and line:match('^---+$')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327742232",
            "id": 1327742232,
            "in_reply_to_id": 1327719664,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PI70Y",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1245,
            "original_position": 98,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629663359,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327742232/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T20:16:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327742232",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327768565"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327768565"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry, but that is abstract worry blocking concrete improvements. And again, this function is slated to be moved, so portability is a boon.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T20:38:40Z",
            "diff_hunk": "@@ -1240,45 +1230,40 @@ local function find_window_by_var(name, value)\n   end\n end\n \n---- Trims empty lines from input and pad top and bottom with empty lines\n----\n----@param contents table of lines to trim and pad\n----@param opts table with optional fields\n----             - pad_top    number of lines to pad contents at top (default 0)\n----             - pad_bottom number of lines to pad contents at bottom (default 0)\n----@return table table of trimmed and padded lines\n-function M._trim(contents, opts)\n-  validate({\n-    contents = { contents, 't' },\n-    opts = { opts, 't', true },\n-  })\n-  opts = opts or {}\n-  contents = M.trim_empty_lines(contents)\n-  if opts.pad_top then\n-    for _ = 1, opts.pad_top do\n-      table.insert(contents, 1, '')\n-    end\n+---Replaces separator lines by the given divider and removing surrounding blank lines.\n+---@param contents string[]\n+---@param divider string\n+---@return string[]\n+local function replace_separators(contents, divider)\n+  ---@param line string\n+  local function is_blank_line(line)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327768565",
            "id": 1327768565,
            "in_reply_to_id": 1327727186,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PJCP1",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1239,
            "original_position": 88,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629698259,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327768565/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T20:38:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327768565",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327772154"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327772154"
                }
            },
            "author_association": "MEMBER",
            "body": "@gpanders I will apply your suggestions and update the call sites to set the lines in the buffer. I won't be moving the function to a new module yet though since I believe we haven't even agreed on where to put it yet.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T20:43:22Z",
            "diff_hunk": "@@ -1484,6 +1479,44 @@ function M.stylize_markdown(bufnr, contents, opts)\n   return stripped\n end\n \n+--- Removes surrounding empty lines in the given markdown content, replaces\n+--- separators by horizontal dividers spanning the entire window, and configures\n+--- the given buffer.\n+---\n+---@param contents string[] of lines to show in window\n+---@param opts table with optional fields\n+---  - height    of floating window\n+---  - width     of floating window\n+---  - wrap_at   character to wrap at for computing height\n+---  - max_width  maximal width of floating window\n+---  - max_height maximal height of floating window\n+--- @return string[] contents with the processed lines\n+function M.normalize_markdown(bufnr, contents, opts)\n+  validate({\n+    contents = { contents, 't' },\n+    opts = { opts, 't', true },\n+  })\n+  opts = opts or {}\n+\n+  -- Clean up\n+  contents = M.trim_empty_lines(contents)\n+\n+  -- Remove carriage returns\n+  contents = vim.split(table.concat(contents, '\\n'):gsub('\\r', ''), '\\n')\n+\n+  -- Compute size of float needed to show (wrapped) lines\n+  opts.wrap_at = opts.wrap_at or (vim.wo['wrap'] and api.nvim_win_get_width(0))\n+  local width = M._make_floating_popup_size(contents, opts)\n+\n+  -- Replace separators\n+  local divider = string.rep('─', math.min(width, opts.wrap_at or width))\n+  contents = replace_separators(contents, divider)\n+\n+  api.nvim_buf_set_lines(bufnr, 0, -1, false, contents)\n+\n+  return contents\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327772154",
            "id": 1327772154,
            "in_reply_to_id": 1327727970,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PJDH6",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1540,
            "original_position": 208,
            "original_start_line": 1482,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629703196,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327772154/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-15T20:43:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327772154",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327832790"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327832790"
                }
            },
            "author_association": "MEMBER",
            "body": "I moved the closures anyway. I don't want to ruin @lewis6991's weekend.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-15T22:13:31Z",
            "diff_hunk": "@@ -1240,45 +1230,40 @@ local function find_window_by_var(name, value)\n   end\n end\n \n---- Trims empty lines from input and pad top and bottom with empty lines\n----\n----@param contents table of lines to trim and pad\n----@param opts table with optional fields\n----             - pad_top    number of lines to pad contents at top (default 0)\n----             - pad_bottom number of lines to pad contents at bottom (default 0)\n----@return table table of trimmed and padded lines\n-function M._trim(contents, opts)\n-  validate({\n-    contents = { contents, 't' },\n-    opts = { opts, 't', true },\n-  })\n-  opts = opts or {}\n-  contents = M.trim_empty_lines(contents)\n-  if opts.pad_top then\n-    for _ = 1, opts.pad_top do\n-      table.insert(contents, 1, '')\n-    end\n+---Replaces separator lines by the given divider and removing surrounding blank lines.\n+---@param contents string[]\n+---@param divider string\n+---@return string[]\n+local function replace_separators(contents, divider)\n+  ---@param line string\n+  local function is_blank_line(line)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327832790",
            "id": 1327832790,
            "in_reply_to_id": 1327727186,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PJR7W",
            "original_commit_id": "cbea4beb07af75f451554bf7ac93b7a6c1114da1",
            "original_line": 1239,
            "original_position": 88,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1629785580,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327832790/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-15T22:13:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327832790",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327997343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327997343"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry to do this to you, but I think *for now* this function should be marked `@private` and prefixed with a `_` (to indicate that it’s an internal-use only function).\r\n\r\nAs we’ve discussed, this function will not stay here, it will be moved out of lsp.util at some point (hopefully soon).  In the meantime, we *do not* want people depending on it, and if they do it should be very clear that it’s unstable.  We *certainly* don’t want it to make it into a release while it is public. The `@private` annotation and `_` prefix buy us some time.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-16T18:55:22Z",
            "diff_hunk": "@@ -1484,6 +1502,48 @@ function M.stylize_markdown(bufnr, contents, opts)\n   return stripped\n end\n \n+--- @class lsp.util.NormalizeMarkdownOptions\n+--- @field width integer Thematic breaks are expanded to this size. Defaults to 80.\n+\n+--- Normalizes Markdown input to a canonical form.\n+---\n+--- The returned Markdown adheres to the GitHub Flavored Markdown (GFM)\n+--- specification.\n+---\n+--- The following transformations are made:\n+---\n+---   1. Empty lines at the beginning or end of the content are removed\n+---   2. Carriage returns ('\\r') are removed\n+---   3. Successive empty lines are collapsed into a single empty line\n+---   4. Thematic breaks are expanded to the given width\n+---\n+---@param contents string[]\n+---@param opts? lsp.util.NormalizeMarkdownOptions\n+---@return string[] table of lines containing normalized Markdown\n+---@see https://github.github.com/gfm\n+function M.normalize_markdown(contents, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327997343",
            "id": 1327997343,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PJ6Gf",
            "original_commit_id": "a33651cc83a2bc69092a0ea8af01e3f30b771f25",
            "original_line": 1524,
            "original_position": 194,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1630003178,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327997343/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-16T18:55:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327997343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1327998289"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327998289"
                }
            },
            "author_association": "MEMBER",
            "body": "I understand, but I also don't like us deprecating `stylize_markdown` without providing a public alternative.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-16T19:04:20Z",
            "diff_hunk": "@@ -1484,6 +1502,48 @@ function M.stylize_markdown(bufnr, contents, opts)\n   return stripped\n end\n \n+--- @class lsp.util.NormalizeMarkdownOptions\n+--- @field width integer Thematic breaks are expanded to this size. Defaults to 80.\n+\n+--- Normalizes Markdown input to a canonical form.\n+---\n+--- The returned Markdown adheres to the GitHub Flavored Markdown (GFM)\n+--- specification.\n+---\n+--- The following transformations are made:\n+---\n+---   1. Empty lines at the beginning or end of the content are removed\n+---   2. Carriage returns ('\\r') are removed\n+---   3. Successive empty lines are collapsed into a single empty line\n+---   4. Thematic breaks are expanded to the given width\n+---\n+---@param contents string[]\n+---@param opts? lsp.util.NormalizeMarkdownOptions\n+---@return string[] table of lines containing normalized Markdown\n+---@see https://github.github.com/gfm\n+function M.normalize_markdown(contents, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1327998289",
            "id": 1327998289,
            "in_reply_to_id": 1327997343,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PJ6VR",
            "original_commit_id": "a33651cc83a2bc69092a0ea8af01e3f30b771f25",
            "original_line": 1524,
            "original_position": 194,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1630003983,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327998289/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-16T19:04:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1327998289",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1328006145"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1328006145"
                }
            },
            "author_association": "MEMBER",
            "body": "We can hold off on deprecating `stylize_markdown` for now.",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-16T20:29:37Z",
            "diff_hunk": "@@ -1484,6 +1502,48 @@ function M.stylize_markdown(bufnr, contents, opts)\n   return stripped\n end\n \n+--- @class lsp.util.NormalizeMarkdownOptions\n+--- @field width integer Thematic breaks are expanded to this size. Defaults to 80.\n+\n+--- Normalizes Markdown input to a canonical form.\n+---\n+--- The returned Markdown adheres to the GitHub Flavored Markdown (GFM)\n+--- specification.\n+---\n+--- The following transformations are made:\n+---\n+---   1. Empty lines at the beginning or end of the content are removed\n+---   2. Carriage returns ('\\r') are removed\n+---   3. Successive empty lines are collapsed into a single empty line\n+---   4. Thematic breaks are expanded to the given width\n+---\n+---@param contents string[]\n+---@param opts? lsp.util.NormalizeMarkdownOptions\n+---@return string[] table of lines containing normalized Markdown\n+---@see https://github.github.com/gfm\n+function M.normalize_markdown(contents, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1328006145",
            "id": 1328006145,
            "in_reply_to_id": 1327997343,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5PJ8QB",
            "original_commit_id": "a33651cc83a2bc69092a0ea8af01e3f30b771f25",
            "original_line": 1524,
            "original_position": 194,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1630010524,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1328006145/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-16T20:29:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1328006145",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1329148592"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1329148592"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  - |vim.lsp.util.trim_empty_lines()|\t\tUse |vim.split()| with `trimempty` instead.\r\n```",
            "commit_id": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
            "created_at": "2023-09-18T18:47:22Z",
            "diff_hunk": "@@ -265,6 +270,7 @@ release.\n   - |vim.lsp.util.get_progress_messages()|\tUse |vim.lsp.status()| instead.\n   - |vim.lsp.get_active_clients()|\t\tUse |vim.lsp.get_clients()| instead.\n   - |vim.lsp.for_each_buffer_client()|\t\tUse |vim.lsp.get_clients()| instead.\n+  - |vim.lsp.util.trim_empty_lines()|\t\tUse `vim.split(..., { trimempty = true })` instead.",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1329148592",
            "id": 1329148592,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5POTKw",
            "original_commit_id": "90bfda5a9811f34e3cddade7df0cc81917335248",
            "original_line": 273,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1631761967,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1329148592/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-18T18:47:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1329148592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "also cheeky preview of how this looks ;)\r\n\r\n**_Before_**:\r\n<img width=\"1062\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/62502207/880c94c5-27c8-4966-aeef-188da8083040\">\r\n<img width=\"593\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/62502207/74d3b0c4-f1a5-41e3-ac2e-c4d83ecd6a13\">\r\n\r\n\r\n**_After_**:\r\n<img width=\"1165\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/62502207/b8f0ae5f-0fd6-47e1-9ef4-4aa3e089a612\">\r\n<img width=\"782\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/62502207/4e9cde12-5260-4393-b6ca-ff97f4091eb8\">\r\n\r\n",
            "created_at": "2023-09-11T05:36:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1713198423",
            "id": 1713198423,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mHVVX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 20,
                "total_count": 20,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713198423/reactions"
            },
            "updated_at": "2023-09-11T22:30:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713198423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We probably still want to display url's in `[text](url)` nodes so TUI users to click on the links.",
            "created_at": "2023-09-11T13:23:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1713876461",
            "id": 1713876461,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mJ63t",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713876461/reactions"
            },
            "updated_at": "2023-09-11T13:23:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713876461",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We probably still want to display url's in `[text](url)` nodes so TUI users to click on the links.\r\n\r\nEw 😆 . Let's make `gx` (and mouse-click) smarter instead of just suffering. Can assign that to me to avoid blocking this PR.",
            "created_at": "2023-09-11T13:28:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1713884902",
            "id": 1713884902,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mJ87m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 10,
                "total_count": 10,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713884902/reactions"
            },
            "updated_at": "2023-09-11T13:28:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713884902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I have my terminal setup to open links with `<shift><left-click>` which works with everything, I don't want another thing I need to remember.\r\n\r\nIf we must not have the links shown then we would need to rely on some terminal extension to do this for us.\r\n\r\n> suffering\r\n\r\n🤨 ",
            "created_at": "2023-09-11T13:35:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1713897847",
            "id": 1713897847,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKAF3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713897847/reactions"
            },
            "updated_at": "2023-09-11T13:37:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713897847",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If we must not have the links shown then we would need to rely on some terminal extension to do this for us.\r\n\r\nThere is such a thing: https://github.com/neovim/neovim/issues/11871",
            "created_at": "2023-09-11T13:38:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1713903066",
            "id": 1713903066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKBXa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 3,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713903066/reactions"
            },
            "updated_at": "2023-09-11T13:38:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713903066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We probably still want to display url's in `[text](url)` nodes so TUI users to click on the links.\r\n\r\nYes please. I don't want links concealed by default either. But we can use `conceal` for this, just like the Markdown filetype plugin does already, so that users can make that choice for themselves.",
            "created_at": "2023-09-11T14:50:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714046895",
            "id": 1714046895,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKkev",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714046895/reactions"
            },
            "updated_at": "2023-09-11T14:50:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714046895",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "NONE",
            "body": "> We probably still want to display url's in `[text](url)` nodes so TUI users to click on the links.\n\nYes, it is also very handy with terminal URL hinting",
            "created_at": "2023-09-11T14:55:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714056978",
            "id": 1714056978,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKm8S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714056978/reactions"
            },
            "updated_at": "2023-09-11T14:55:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714056978",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55179750?v=4",
                "events_url": "https://api.github.com/users/fitrh/events{/privacy}",
                "followers_url": "https://api.github.com/users/fitrh/followers",
                "following_url": "https://api.github.com/users/fitrh/following{/other_user}",
                "gists_url": "https://api.github.com/users/fitrh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fitrh",
                "id": 55179750,
                "login": "fitrh",
                "node_id": "MDQ6VXNlcjU1MTc5NzUw",
                "organizations_url": "https://api.github.com/users/fitrh/orgs",
                "received_events_url": "https://api.github.com/users/fitrh/received_events",
                "repos_url": "https://api.github.com/users/fitrh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fitrh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fitrh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fitrh"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Regarding the `[text](url)` thing:\r\n\r\nKeep in mind that `url` is not limited to `http(s)`, but it can contain `file:///` or any other scheme as well. It's used by language servers to refer to classes or functions either in the same project, or in a dependency. If we hide the url, it would be good to have a way to follow those (also in the editor)\r\n",
            "created_at": "2023-09-11T14:55:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714057084",
            "id": 1714057084,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKm98",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714057084/reactions"
            },
            "updated_at": "2023-09-11T14:55:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714057084",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  just like the Markdown filetype plugin does already\r\n\r\nOr the treesitter queries for Markdown. We do not have to use the bundled ones as-is and can make our own choices about `conceal`.",
            "created_at": "2023-09-11T14:59:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714063760",
            "id": 1714063760,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKomQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714063760/reactions"
            },
            "updated_at": "2023-09-11T14:59:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714063760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "About concealing: Shouldn't [these settings](https://github.com/neovim/neovim/blob/65738202f8be3ca63b75197d48f2c7a9324c035b/runtime/lua/vim/lsp/util.lua#L1701-L1702) result in links always being concealed?",
            "created_at": "2023-09-11T22:21:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714663375",
            "id": 1714663375,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mM6_P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714663375/reactions"
            },
            "updated_at": "2023-09-11T22:21:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714663375",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> About concealing: Shouldn't [these settings](https://github.com/neovim/neovim/blob/65738202f8be3ca63b75197d48f2c7a9324c035b/runtime/lua/vim/lsp/util.lua#L1701-L1702) result in links always being concealed?\r\n\r\nYes they should, though I don't think those settings should be set unconditionally. `nvim_get_option_value` now supports getting an option for a filetype, so we should get the values for `'conceallevel'` and `'concealcursor'` for Markdown filetypes and use those values.",
            "created_at": "2023-09-12T00:46:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714802580",
            "id": 1714802580,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mNc-U",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714802580/reactions"
            },
            "updated_at": "2023-09-12T00:46:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714802580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Yes they should, though I don't think those settings should be set unconditionally. nvim_get_option_value now supports getting an option for a filetype, so we should get the values for 'conceallevel' and 'concealcursor' for Markdown filetypes and use those values.\r\n\r\n@gpanders Sounds good. I've modified them to use `nvim_get_option_value`.",
            "created_at": "2023-09-12T05:24:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714992747",
            "id": 1714992747,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mOLZr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714992747/reactions"
            },
            "updated_at": "2023-09-12T05:24:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714992747",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I need some help: I've noticed that there's a small \"flash\" between the lines being set on the buffer and before the highlights are applied (it would help if interested parties try out this branch to understand what I mean). Although it's hardly noticeable, how could I prevent that?",
            "created_at": "2023-09-12T23:33:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1716679220",
            "id": 1716679220,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mUnI0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716679220/reactions"
            },
            "updated_at": "2023-09-12T23:36:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716679220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I need some help: I've noticed that there's a small \"flash\" between the lines being set on the buffer and before the highlights are applied (it would help if interested parties try out this branch to understand what I mean). Although it's hardly noticeable, how could I prevent that?\r\n\r\nI haven't been able to reproduce this, but I did see something else when testing.\r\n\r\nWith `clangd` in a C source file, I'm seeing new `<text>` tags that aren't there on master:\r\n\r\n**master**:\r\n\r\n<img width=\"295\" alt=\"Hover window on master\" src=\"https://github.com/neovim/neovim/assets/8965202/a69b7605-ea14-4869-baea-b208086572a4\">\r\n\r\n**PR**:\r\n\r\n<img width=\"302\" alt=\"Hover window with this PR\" src=\"https://github.com/neovim/neovim/assets/8965202/33d86ce2-9b86-4a5e-ae7d-67bcd06f341c\">\r\n\r\nNeither case has any highlighting. Not sure why.",
            "created_at": "2023-09-13T00:56:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1716779279",
            "id": 1716779279,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mU_kP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716779279/reactions"
            },
            "updated_at": "2023-09-13T00:56:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716779279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I haven't been able to reproduce this, but I did see something else when testing.\r\n\r\nYeah, it's hardly noticeable and you have to really squint to notice it.\r\n\r\n> With clangd in a C source file, I'm seeing new <text> tags that aren't there on master:\r\n\r\n@gpanders It seems like this is related to https://github.com/neovim/neovim/pull/25073#discussion_r1321606162. I'll investigate this.\r\n\r\n@gpanders Hmmm I'm not able to reproduce this:\r\n<img width=\"512\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/62502207/d638fc23-346e-4f29-94d3-efb7af2c0d2d\">\r\n\r\nWhat do you have set for `conceallevel`? And which C Treesitter parser are you using? The one bundled in Neovim, or the one from `nvim-treesitter`?",
            "created_at": "2023-09-13T01:01:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1716782143",
            "id": 1716782143,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mVAQ_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716782143/reactions"
            },
            "updated_at": "2023-09-13T01:05:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716782143",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > We probably still want to display url's in `[text](url)` nodes so TUI users to click on the links.\r\n> \r\n> Yes please. I don't want links concealed by default either. But we can use `conceal` for this, just like the Markdown filetype plugin does already, so that users can make that choice for themselves.\r\n\r\nI have not changed my stance on URL's specifically, but for other tokens I've come around to enabling conceal by default for the hover window specifically. I typically do not enable conceal on Markdown files at all because I want to see the _exact_ text I'm editing, the presentation of the text is secondary. However, in the hover window the situation is reversed: the text is not being edited, the presentation is the primary focus, so concealing syntax tokens (e.g. `*`, `_`, `` ` ``, etc.) makes more sense.\r\n\r\nUnfortunately I don't know of a way to conceal these tokens without also concealing URLs, not without modifications to the Markdown parser (which I am not advocating). But unsetting `'concealcursor'` at least would show the URLs when the cursor is over them.",
            "created_at": "2023-09-13T01:49:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1716812814",
            "id": 1716812814,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mVHwO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716812814/reactions"
            },
            "updated_at": "2023-09-13T01:49:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716812814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We already bundle a Markdown tree-sitter parser, which already supports language injections. \r\n\r\nYes, that was the whole point of this exercise. We do **not** need/want custom code paths for handling syntax highlighting for languages where a parser is not available -- just install the parser if you want it (you don't have to enable highlighting for it).\r\n\r\n> Unfortunately I don't know of a way to conceal these tokens without also concealing URLs, not without modifications to the Markdown parser (which I am not advocating). \r\n\r\nYou don't need to modify the parser; you just have to modify (or override/extend) the queries. That is a much more straightforward step (which I am in fact advocating, if you don't want the same conceals as for highlighting buffers).",
            "created_at": "2023-09-13T07:08:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1717067364",
            "id": 1717067364,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mWF5k",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717067364/reactions"
            },
            "updated_at": "2023-09-13T17:58:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717067364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Alright, I'm sorry for the confusing `git` changes but I'm starting over using @gpanders idea. I still need to conceal the backticks from code blocks.",
            "created_at": "2023-09-13T07:15:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1717075317",
            "id": 1717075317,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mWH11",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717075317/reactions"
            },
            "updated_at": "2023-09-13T17:59:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717075317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Unfortunately I don't know of a way to conceal these tokens without also concealing URLs, not without modifications to the Markdown parser (which I am not advocating)\r\n\r\nThat's a solvable problem though. Although concealing URLs might be painful for some use-cases at first, we can use it to drive necessary changes such as [OSC-8](https://github.com/neovim/neovim/issues/11871), `gx`/`gf` improvements, and mouse handling. \r\n\r\nThe current display of URLs in our hover docs looks janky and primitive.",
            "created_at": "2023-09-13T10:36:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1717376992",
            "id": 1717376992,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mXRfg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 1,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717376992/reactions"
            },
            "updated_at": "2023-09-13T11:01:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717376992",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I have tested to hide links that are not `https` in `[foo](link)` with the query below\r\n```\r\n(inline_link\r\n  [\r\n    \"[\"\r\n    \"]\"\r\n    \"(\"\r\n    ((link_destination) @_https\r\n      (#not-lua-match? @_https \"^https?://\"))\r\n    \")\"\r\n  ] @conceal\r\n  (#set! conceal \"\"))\r\n```\r\nWith this query, it's not reliable enough (yet) to hide all tokens wanted (may work once #24738 is in). One way to work around is to separate them into multiple queries, like below\r\n\r\n```\r\n(inline_link\r\n  [\r\n    \"[\"\r\n    \"]\"\r\n    \"(\"\r\n  ] @conceal \r\n  (link_destination) @_https\r\n    (#not-lua-match? @_https \"^https?://\"))\r\n  (#set! conceal \"\"))\r\n\r\n(inline_link\r\n   (link_destination) @_https\r\n    (#not-lua-match? @_https \"^https?://\")\r\n  [\r\n    \")\"\r\n  ] @conceal\r\n  (#set! conceal \"\"))\r\n```\r\n\r\nAs the link will always be `link_destination` node for the example above, `gx` may work by iterating queries then targeting that capture\r\nIf there's a way to extend markdown queries for only lsp floating windows (edit: Another ft like `markdown_lsp`, maybe?), then the query above may be enough to hide links + have `gx` work",
            "created_at": "2023-09-13T10:48:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1717393719",
            "id": 1717393719,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mXVk3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717393719/reactions"
            },
            "updated_at": "2023-09-13T11:28:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717393719",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Looking good so far! Here's my vision of the code path:\r\n* `open_floating_preview` has an `opts` key that sets content type: `plaintext` (default)  or `markdown` (no more `stylize` option -- either something is markdown, then it gets rendered, or it's not)\r\n* if `markdown`, call a `{transform,render}_markdown` function that does _some_ transformations according to Github Flavored Markdown specs (in separate blocks, with comments):\r\n  - collapse/strip blank lines\r\n  - strip/replace HTML tags and entities\r\n  - render the separator line\r\n* ...then set the \"markdown\" filetype and conceal, and start a treesitter parser via `vim.treesitter.start()` (not done yet?)\r\n* if we want to be fancier in our treesitter queries (e.g., use conceal for HTML entities or non-default conceal for URLs), use `vim.treesitter.highlighter.new(parser, { 'highlights' = ... })` instead.",
            "created_at": "2023-09-13T17:48:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1718061499",
            "id": 1718061499,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mZ4m7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1718061499/reactions"
            },
            "updated_at": "2023-09-13T17:49:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1718061499",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Looking good so far! Here's my vision of the code path:\r\n> \r\n>     * `open_floating_preview` has an `opts` key that sets content type: `plaintext` (default)  or `markdown` (no more `stylize` option -- either something is markdown, then it gets rendered, or it's not)\r\n> \r\n>     * if `markdown`, call a `{transform,render}_markdown` function that does _some_ transformations according to Github Flavored Markdown specs (in separate blocks, with comments):\r\n>       \r\n>       * collapse/strip blank lines\r\n>       * strip/replace HTML tags and entities\r\n>       * render the separator line\r\n> \r\n>     * ...then set the \"markdown\" filetype and conceal, and start a treesitter parser via `vim.treesitter.start()` (not done yet?)\r\n> \r\n>     * if we want to be fancier in our treesitter queries (e.g., use conceal for HTML entities or non-default conceal for URLs), use `vim.treesitter.highlighter.new(parser, { 'highlights' = ... })` instead.\r\n\r\nI agree with this direction, with only a few comments:\r\n\r\n* My recommendation would be `canonicalize_markdown` or `normalize_markdown`. It's not really being transformed or rendered, the output is _still_ Markdown, but it's in a canonical/normal form.\r\n* There may be other use cases for having \"presentation ready\" Markdown outside of just LSP, so I would advise against putting this function under the LSP umbrella. ",
            "created_at": "2023-09-13T18:07:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1718090407",
            "id": 1718090407,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mZ_qn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1718090407/reactions"
            },
            "updated_at": "2023-09-13T18:07:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1718090407",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> open_floating_preview has an opts key that sets content type: plaintext (default) or markdown (no more stylize option -- either something is markdown, then it gets rendered, or it's not)\r\n\r\nI said this on Matrix, but for the record: Given that `open_floating_preview` is also used by `preview_location` and we don't want to `stylize` in that case even if the content is Markdown, I'm keeping the `stylize_markdown` option to only apply these transformation for hover and signature help.",
            "created_at": "2023-09-13T18:28:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1718118741",
            "id": 1718118741,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5maGlV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1718118741/reactions"
            },
            "updated_at": "2023-09-13T18:28:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1718118741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Okay I have my first approval. Before I update the docs and tests, I would like to make sure everyone's fine with the current implementation.",
            "created_at": "2023-09-14T19:52:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1720052752",
            "id": 1720052752,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mhewQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1720052752/reactions"
            },
            "updated_at": "2023-09-14T19:52:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1720052752",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'll just chime in here and say that I tested this earlier today, and IMO the concealing of triple backticks should ideally remove the entire line with the starting and closing backticks. For example for a hover with code that is a single line. That will now take 3 lines where the first and last line is just whitespace after concealing the backticks. It will then block an unnecessary amount of the code while it is open.\n\nI would also want the code-tags to be replaced, as otherwise it will be the same issue as I commented earlier (and the same issue that still exists in noice today).\n\nI am not sure why that was resolved in this PR without any comments on it, as it is relevant to this, and also that other editors like helix and vscode conceal them like expected.",
            "created_at": "2023-09-14T20:05:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1720068959",
            "id": 1720068959,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mhitf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1720068959/reactions"
            },
            "updated_at": "2023-09-14T20:05:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1720068959",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblj/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblj/followers",
                "following_url": "https://api.github.com/users/seblj/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblj",
                "id": 5160701,
                "login": "seblj",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblj/orgs",
                "received_events_url": "https://api.github.com/users/seblj/received_events",
                "repos_url": "https://api.github.com/users/seblj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> IMO the concealing of triple backticks should ideally remove the entire line with the starting and closing backticks. \r\n\r\nYes, and I want a pony. Alas, conceal cannot do that yet.\r\n\r\nYour are also misunderstanding the point of this PR, which is to _massively_ simplify the house of cards that is this code path, pretty much at any price. We can talk about adding features if and when they become feasible with the tools we have (i.e., tree-sitter).",
            "created_at": "2023-09-14T20:10:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1720075313",
            "id": 1720075313,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mhkQx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1720075313/reactions"
            },
            "updated_at": "2023-09-14T20:10:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1720075313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Not crucial before the PR is _done_ done, but we should add a news.txt entry for this (\"changed features: LSP hover and signature help use treesitter for markdown styling; syntax highlighting of code examples requires a matching parser and may be affected by custom queries\" or somesuch).",
            "created_at": "2023-09-16T17:28:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1722277098",
            "id": 1722277098,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mp9zq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722277098/reactions"
            },
            "updated_at": "2023-09-16T17:28:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722277098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Not crucial before the PR is _done_ done, but we should add a news.txt entry for this (\"changed features: LSP hover and signature help use treesitter for markdown styling; syntax highlighting of code examples requires a matching parser and may be affected by custom queries\" or somesuch).\r\n\r\nThat's actually what I'm doing right now :D",
            "created_at": "2023-09-16T17:29:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1722277433",
            "id": 1722277433,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mp945",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 3,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722277433/reactions"
            },
            "updated_at": "2023-09-16T17:29:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722277433",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Alright, this PR should be finally ready.",
            "created_at": "2023-09-18T14:56:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1723615473",
            "id": 1723615473,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mvEjx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1723615473/reactions"
            },
            "updated_at": "2023-09-18T14:56:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1723615473",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Looks good, thanks @MariaSolOs for your dedication and patience through all of this.\r\n\r\nThanks to all of you for the valuable input :)",
            "created_at": "2023-09-18T20:59:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1724407476",
            "id": 1724407476,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5myF60",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 10,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 10,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1724407476/reactions"
            },
            "updated_at": "2023-09-18T20:59:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1724407476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thank you @MariaSolOs for doing this and bearing with us! ",
            "created_at": "2023-09-19T13:54:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1725629178",
            "id": 1725629178,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5m2wL6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 3,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1725629178/reactions"
            },
            "updated_at": "2023-09-19T13:54:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1725629178",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "An appreciation comment to @MariaSolOs for providing this PR. Very handy. ",
            "created_at": "2023-09-20T05:30:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1726997442",
            "id": 1726997442,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5m7-PC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1726997442/reactions"
            },
            "updated_at": "2023-09-20T05:30:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1726997442",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/72922139?v=4",
                "events_url": "https://api.github.com/users/50-Course/events{/privacy}",
                "followers_url": "https://api.github.com/users/50-Course/followers",
                "following_url": "https://api.github.com/users/50-Course/following{/other_user}",
                "gists_url": "https://api.github.com/users/50-Course/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/50-Course",
                "id": 72922139,
                "login": "50-Course",
                "node_id": "MDQ6VXNlcjcyOTIyMTM5",
                "organizations_url": "https://api.github.com/users/50-Course/orgs",
                "received_events_url": "https://api.github.com/users/50-Course/received_events",
                "repos_url": "https://api.github.com/users/50-Course/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/50-Course/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/50-Course/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/50-Course"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@50-Course that's very sweet! However please thank all the other heroes of this PR, the reviewers! They guided me through this and made this happen <3",
            "created_at": "2023-09-20T16:50:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1728106582",
            "id": 1728106582,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5nANBW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1728106582/reactions"
            },
            "updated_at": "2023-09-20T16:50:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1728106582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "NONE",
            "body": "@MariaSolOs Thanks for your work! However I wonder if there there is a way to opt-out, e.g. use vim regex syntax instead of treesitter to highlight the hovering window because it adds large padding (caused by markdown code fences) around the code which is not desired.\r\n\r\nAfter this commit (large padding around the signature because of the markdown code fences):\r\n\r\n![Screenshot_20231018_150443](https://github.com/neovim/neovim/assets/76579810/730c8352-aad2-4d56-9f94-7e822773bab4)\r\n\r\nOriginal appearance of the hover window before this patch:\r\n\r\n![Screenshot_20231018_150506](https://github.com/neovim/neovim/assets/76579810/65f2af60-05ce-4b4f-9de3-9f8b84a0cbfe)\r\n\r\n",
            "created_at": "2023-10-18T07:11:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1767810374",
            "id": 1767810374,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5pXqVG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1767810374/reactions"
            },
            "updated_at": "2023-10-18T07:11:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1767810374",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/76579810?v=4",
                "events_url": "https://api.github.com/users/Bekaboo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bekaboo/followers",
                "following_url": "https://api.github.com/users/Bekaboo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bekaboo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bekaboo",
                "id": 76579810,
                "login": "Bekaboo",
                "node_id": "MDQ6VXNlcjc2NTc5ODEw",
                "organizations_url": "https://api.github.com/users/Bekaboo/orgs",
                "received_events_url": "https://api.github.com/users/Bekaboo/received_events",
                "repos_url": "https://api.github.com/users/Bekaboo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bekaboo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bekaboo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bekaboo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No, that's not planned. The plan is to add functionality to completely conceal lines, so the blank lines will be gone. That will take a while, though. In the meantime, stick to stable releases if you prefer the old way.",
            "created_at": "2023-10-18T07:12:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1767812020",
            "id": 1767812020,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5pXqu0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1767812020/reactions"
            },
            "updated_at": "2023-10-18T07:12:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1767812020",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25073/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25073/commits",
    "created_at": "2023-09-09T22:25:35Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25073.diff",
    "draft": false,
    "head": {
        "label": "MariaSolOs:pretty-md",
        "ref": "pretty-md",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/MariaSolOs/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/MariaSolOs/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/MariaSolOs/neovim/branches{/branch}",
            "clone_url": "https://github.com/MariaSolOs/neovim.git",
            "collaborators_url": "https://api.github.com/repos/MariaSolOs/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/MariaSolOs/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/MariaSolOs/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/MariaSolOs/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/MariaSolOs/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/MariaSolOs/neovim/contributors",
            "created_at": "2023-08-05T17:10:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/MariaSolOs/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/MariaSolOs/neovim/downloads",
            "events_url": "https://api.github.com/repos/MariaSolOs/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/MariaSolOs/neovim/forks",
            "full_name": "MariaSolOs/neovim",
            "git_commits_url": "https://api.github.com/repos/MariaSolOs/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/MariaSolOs/neovim/git/tags{/sha}",
            "git_url": "git://github.com/MariaSolOs/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/MariaSolOs/neovim/hooks",
            "html_url": "https://github.com/MariaSolOs/neovim",
            "id": 675070403,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/MariaSolOs/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/MariaSolOs/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/MariaSolOs/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/MariaSolOs/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/MariaSolOs/neovim/merges",
            "milestones_url": "https://api.github.com/repos/MariaSolOs/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOKDzBww",
            "notifications_url": "https://api.github.com/repos/MariaSolOs/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/MariaSolOs/neovim/pulls{/number}",
            "pushed_at": "2024-05-14T17:23:44Z",
            "releases_url": "https://api.github.com/repos/MariaSolOs/neovim/releases{/id}",
            "size": 262644,
            "ssh_url": "git@github.com:MariaSolOs/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/MariaSolOs/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/MariaSolOs/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/MariaSolOs/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/MariaSolOs/neovim/subscription",
            "svn_url": "https://github.com/MariaSolOs/neovim",
            "tags_url": "https://api.github.com/repos/MariaSolOs/neovim/tags",
            "teams_url": "https://api.github.com/repos/MariaSolOs/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/MariaSolOs/neovim/git/trees{/sha}",
            "updated_at": "2024-05-09T21:31:49Z",
            "url": "https://api.github.com/repos/MariaSolOs/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "d42b652e621514c8c763fbbf7a69b3569be4fc96",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25073",
    "id": 1508947390,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": true,
    "merge_commit_sha": "5a363ccac8ff5889332bafbf68e7e8d20bca316c",
    "merged_at": "2023-09-19T13:47:38Z",
    "milestone": {
        "closed_at": "2024-05-16T14:11:42Z",
        "closed_issues": 432,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": "2024-05-12T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 0,
        "state": "closed",
        "title": "0.10",
        "updated_at": "2024-05-17T04:23:33Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "PR_kwDOAPphoM5Z8LW-",
    "number": 25073,
    "patch_url": "https://github.com/neovim/neovim/pull/25073.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25073/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/d42b652e621514c8c763fbbf7a69b3569be4fc96",
    "title": "feat(lsp): use treesitter for markdown floating windows",
    "updated_at": "2024-05-17T04:23:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
        "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
        "followers_url": "https://api.github.com/users/MariaSolOs/followers",
        "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
        "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MariaSolOs",
        "id": 62502207,
        "login": "MariaSolOs",
        "node_id": "MDQ6VXNlcjYyNTAyMjA3",
        "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
        "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
        "repos_url": "https://api.github.com/users/MariaSolOs/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MariaSolOs"
    }
}