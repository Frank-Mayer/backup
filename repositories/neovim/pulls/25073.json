{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25073/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25073/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25073"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25073"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25073/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/7e0bc9f015a2db5941bf12b5474e1f5cf27ee156"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4861,
            "forks_count": 4861,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1675,
            "open_issues_count": 1675,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-09-13T01:16:05Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 240992,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 69307,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-09-12T23:39:31Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 69307,
            "watchers_count": 69307,
            "web_commit_signoff_required": false
        },
        "sha": "1f551e068f728ff38bd7fdcfa3a6daf362bab9da",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Closes #20857, #20246 (?)\r\n\r\n<s>Not fully ready, but I'm publishing it early because I want to start getting some reviews.</s> Should be ready now!\r\n\r\nMissing things/questions:\r\n- [x] <s>Make sure `K` and `gx` work (refer to [this implementation](https://github.com/folke/noice.nvim/blob/74c2902146b080035beb19944baf6f014a954720/lua/noice/text/markdown.lua#L212)).</s> See the concealing debate below.\r\n- [x] <s>Not long ago I made [this change](https://github.com/folke/noice.nvim/pull/571) in `noice` to always parse injections. @lewis6991 what do you think about that? Is there a better way to do this here?</s> It's okay since these buffers are small.\r\n- [x] <s>Not sure what [this comment](https://github.com/neovim/neovim/blob/d21f82feb56a1661a63b3f552d5302bdf6bdc280/runtime/lua/vim/lsp/util.lua#L1452-L1453) means/if we should care about it. @folke we would appreciate your wisdom here.</s> Seems like using `vim.treesitter.get_parser()` is fine.\r\n- [ ] Fix small \"flashing\" between the lines being set on the buffer and the highlights being applied.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321083512"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321083512"
                }
            },
            "author_association": "MEMBER",
            "body": "You shouldn't need to cache the queries since they are already cached via a weak table in `vim.treesitter.query`.",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-11T07:06:41Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321083512",
            "id": 1321083512,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5OviJ4",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1375,
            "original_position": 98,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1619265415,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321083512/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T07:06:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321083512",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321085225"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321085225"
                }
            },
            "author_association": "MEMBER",
            "body": "This will be ok since the buffer is small and only rendered once.",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-11T07:08:31Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?\n+  local LanguageTree = require('vim.treesitter.languagetree')\n+  local parser = LanguageTree.new(bufnr, lang, { injections = { php = '', html = '' } })\n+\n+  ---@diagnostic disable-next-line: invisible\n+  parser:set_included_regions({ { range } })\n+  parser:parse(true)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321085225",
            "id": 1321085225,
            "line": 1387,
            "node_id": "PRRC_kwDOAPphoM5Ovikp",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1387,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 110,
            "pull_request_review_id": 1619268182,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321085225/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T07:10:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321085225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321456004"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321456004"
                }
            },
            "author_association": "MEMBER",
            "body": "Should we be extra defensive and catch errors? Will it render the \"plain text\" version if markdown parsing fails?",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-11T12:12:01Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?\n+  local LanguageTree = require('vim.treesitter.languagetree')\n+  local parser = LanguageTree.new(bufnr, lang, { injections = { php = '', html = '' } })\n+\n+  ---@diagnostic disable-next-line: invisible\n+  parser:set_included_regions({ { range } })\n+  parser:parse(true)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321456004",
            "id": 1321456004,
            "in_reply_to_id": 1321085225,
            "line": 1387,
            "node_id": "PRRC_kwDOAPphoM5Ow9GE",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1387,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 110,
            "pull_request_review_id": 1619844921,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321456004/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T12:12:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321456004",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321458966"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321458966"
                }
            },
            "author_association": "MEMBER",
            "body": "Treesitter parsing never fails. It'll just create a lot of error nodes.",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-11T12:14:50Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?\n+  local LanguageTree = require('vim.treesitter.languagetree')\n+  local parser = LanguageTree.new(bufnr, lang, { injections = { php = '', html = '' } })\n+\n+  ---@diagnostic disable-next-line: invisible\n+  parser:set_included_regions({ { range } })\n+  parser:parse(true)",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321458966",
            "id": 1321458966,
            "in_reply_to_id": 1321085225,
            "line": 1387,
            "node_id": "PRRC_kwDOAPphoM5Ow90W",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1387,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 110,
            "pull_request_review_id": 1619849730,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321458966/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T12:14:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321458966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321532680"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321532680"
                }
            },
            "author_association": "MEMBER",
            "body": "pretty sure it's just for creating a new parser to manager the state of this buffer",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-11T13:13:45Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321532680",
            "id": 1321532680,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5OxP0I",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1381,
            "original_position": 114,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1619966213,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321532680/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T13:13:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321532680",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321543497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321543497"
                }
            },
            "author_association": "MEMBER",
            "body": "It probably means do not use the parser in vim.treesitter.highlighter.\r\n\r\nI don't think we should use `LanguageTree.new` for this. Instead we should use `vim.treesitter.get_parser()`.",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-11T13:22:09Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321543497",
            "id": 1321543497,
            "in_reply_to_id": 1321532680,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5OxSdJ",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1381,
            "original_position": 114,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1619984067,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321543497/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T13:22:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321543497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321606162"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321606162"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Is it possible to fix this: https://github.com/folke/noice.nvim/issues/424?\r\n\r\nI have been using the diff from my comment: https://github.com/folke/noice.nvim/issues/424#issuecomment-1510268975 ever since I posted the comment, and can't remember having any issues.\r\n\r\nI am not sure if that is the best way to fix it, and some others probably know this better than I do, but for me it has worked perfectly.",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-11T14:01:21Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321606162",
            "id": 1321606162,
            "line": 1302,
            "node_id": "PRRC_kwDOAPphoM5OxhwS",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1302,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 25,
            "pull_request_review_id": 1620091947,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321606162/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T14:01:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321606162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblj/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblj/followers",
                "following_url": "https://api.github.com/users/seblj/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblj",
                "id": 5160701,
                "login": "seblj",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblj/orgs",
                "received_events_url": "https://api.github.com/users/seblj/received_events",
                "repos_url": "https://api.github.com/users/seblj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1321742666"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321742666"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Do we exactly need to disable php/html injections for these nodes. If php and html are to be disabled, the question is: why not other parsers as well",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-11T15:40:08Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?\n+  local LanguageTree = require('vim.treesitter.languagetree')\n+  local parser = LanguageTree.new(bufnr, lang, { injections = { php = '', html = '' } })",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1321742666",
            "id": 1321742666,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5OyDFK",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1383,
            "original_position": 116,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1620306896,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321742666/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T15:40:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321742666",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1322538829"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322538829"
                }
            },
            "author_association": "MEMBER",
            "body": "It seems that `noice` used to disable all injections, but that was changed in https://github.com/folke/noice.nvim/commit/0e1bf11d46054b8ab04eb62b53c5ac81b44f14df. When @folke maybe he'll tell us more about why this was needed.",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-12T06:59:25Z",
            "diff_hunk": "@@ -1290,18 +1290,169 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end\n+\n+  local function is_rule(line)\n+    return line and line:find('^%s*[%*%-_][%*%-_][%*%-_]+%s*$')\n+  end\n+\n+  local function is_code_block(line)\n+    return line and line:find('^%s*```')\n+  end\n+\n+  while l <= #lines do\n+    local line = lines[l]\n+    if is_empty(line) then\n+      local is_start = l == 1\n+      eat_nl()\n+      local is_end = l == #lines\n+      if not (is_code_block(lines[l + 1]) or is_rule(lines[l + 1]) or is_start or is_end) then\n+        table.insert(ret, { line = '' })\n+      end\n+    elseif is_code_block(line) then\n+      local lang = line:match('```%s*(%S+)') or opts.ft or 'text'\n+      local block = { lang = lang, code = {} }\n+      while lines[l + 1] and not is_code_block(lines[l + 1]) do\n+        table.insert(block.code, lines[l + 1])\n+        l = l + 1\n+      end\n+\n+      local prev = ret[#ret]\n+      if prev and not is_rule(prev.line) then\n+        table.insert(ret, { line = '' })\n+      end\n+\n+      table.insert(ret, block)\n+      l = l + 1\n+      eat_nl()\n+    elseif is_rule(line) then\n+      table.insert(ret, { line = '---' })\n+      eat_nl()\n+    else\n+      local prev = ret[#ret]\n+      if prev and prev.code then\n+        table.insert(ret, { line = '' })\n+      end\n+      table.insert(ret, { line = line })\n+    end\n+    l = l + 1\n+  end\n+\n+  return ret\n+end\n+\n+---@type table<string, Query?>\n+local ts_queries = {}\n+---@param lang string\n+local function get_ts_query(lang)\n+  if not ts_queries[lang] then\n+    ts_queries[lang] = vim.treesitter.query.get(lang, 'highlights')\n+  end\n+  return ts_queries[lang]\n+end\n+\n+local md_namespace = api.nvim_create_namespace('vim_lsp_markdown')\n+\n+---@param bufnr integer\n+---@param lang string\n+---@param range Range4\n+local function treesitter_highlight(bufnr, lang, range)\n+  -- We can't use a cached parser here since that could interfer with the existing parser of the buffer.\n+  -- TODO: ^^^ Comment from noice, what do you mean folke?\n+  local LanguageTree = require('vim.treesitter.languagetree')\n+  local parser = LanguageTree.new(bufnr, lang, { injections = { php = '', html = '' } })",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1322538829",
            "id": 1322538829,
            "in_reply_to_id": 1321742666,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O1FdN",
            "original_commit_id": "edd94bbf04803d7b65ff6eede8e34b6e89578e09",
            "original_line": 1383,
            "original_position": 116,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1621461513,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322538829/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-12T06:59:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322538829",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1322579553"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322579553"
                }
            },
            "author_association": "MEMBER",
            "body": "Use `vim.filetype.get_option` instead since that caches the values for each filetype.",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-12T07:36:28Z",
            "diff_hunk": "@@ -1720,8 +1779,10 @@ function M.open_floating_preview(contents, syntax, opts)\n   local float_option = M.make_floating_popup_options(width, height, opts)\n   local floating_winnr = api.nvim_open_win(floating_bufnr, false, float_option)\n   if do_stylize then\n-    vim.wo[floating_winnr].conceallevel = 2\n-    vim.wo[floating_winnr].concealcursor = 'n'\n+    vim.wo[floating_winnr].conceallevel =\n+      api.nvim_get_option_value('conceallevel', { filetype = 'markdown' })",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1322579553",
            "id": 1322579553,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O1PZh",
            "original_commit_id": "9e6887e84ac8ea757e470a72388e1e0cc47c0703",
            "original_line": 1783,
            "original_position": 454,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1621525122,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322579553/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-12T07:36:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322579553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1323807835"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323807835"
                }
            },
            "author_association": "MEMBER",
            "body": "You can use a table with `string.gsub`:\r\n\r\n```suggestion\r\n  local entities =\r\n    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\r\n  text = test:gsub('&([^ ;]+);', entities)\r\n```\r\n\r\nThis actually exists on master today: https://github.com/neovim/neovim/blob/1f551e068f728ff38bd7fdcfa3a6daf362bab9da/runtime/lua/vim/lsp/util.lua#L1398-L1410",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-13T01:08:32Z",
            "diff_hunk": "@@ -1290,18 +1290,159 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1323807835",
            "id": 1323807835,
            "line": 1309,
            "node_id": "PRRC_kwDOAPphoM5O57Rb",
            "original_commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "original_line": 1309,
            "original_position": 32,
            "original_start_line": 1305,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 32,
            "pull_request_review_id": 1623470074,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323807835/reactions"
            },
            "side": "RIGHT",
            "start_line": 1305,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-13T01:46:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323807835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25073#discussion_r1323808921"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25073"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323808921"
                }
            },
            "author_association": "MEMBER",
            "body": "Suggestion: instead of using this function for side effects, pass in current line and return modified line:\r\n\r\n```suggestion\r\n  local function eat_nl(l)\r\n    while is_empty(lines[l + 1]) do\r\n      l = l + 1\r\n    end\r\n    return l\r\n  end\r\n```\r\n\r\nThen at the call site you'd use:\r\n\r\n```lua\r\nl = eat_nl(l)\r\n```",
            "commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "created_at": "2023-09-13T01:11:11Z",
            "diff_hunk": "@@ -1290,18 +1290,159 @@ function M._trim(contents, opts)\n   return contents\n end\n \n---- Generates a table mapping markdown code block lang to vim syntax,\n---- based on g:markdown_fenced_languages\n----@return table table of lang -> syntax mappings\n-local function get_markdown_fences()\n-  local fences = {}\n-  for _, fence in pairs(vim.g.markdown_fenced_languages or {}) do\n-    local lang, syntax = fence:match('^(.*)=(.*)$')\n-    if lang then\n-      fences[lang] = syntax\n-    end\n-  end\n-  return fences\n+---@alias MarkdownBlock {line:string}\n+---@alias MarkdownCodeBlock {code:string[], lang:string}\n+---@alias Markdown (MarkdownBlock|MarkdownCodeBlock)[]\n+\n+---@param text string\n+---@param opts? {ft?: string}\n+---@return Markdown\n+local function parse_markdown(text, opts)\n+  opts = opts or {}\n+  text = text:gsub('</?pre>', '```'):gsub('\\r', '')\n+\n+  -- Replace common HTML entities.\n+  local entities =\n+    { nbsp = '', lt = '<', gt = '>', amp = '&', quot = '\"', apos = \"'\", ensp = ' ', emsp = ' ' }\n+  for entity, char in pairs(entities) do\n+    text = text:gsub('&' .. entity .. ';', char)\n+  end\n+\n+  local ret = {} ---@type Markdown\n+  local lines = vim.split(text, '\\n')\n+  local l = 1\n+\n+  local function is_empty(line)\n+    return line and line:find('^%s*$')\n+  end\n+\n+  local function eat_nl()\n+    while is_empty(lines[l + 1]) do\n+      l = l + 1\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/25073#discussion_r1323808921",
            "id": 1323808921,
            "line": 1323,
            "node_id": "PRRC_kwDOAPphoM5O57iZ",
            "original_commit_id": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
            "original_line": 1323,
            "original_position": 46,
            "original_start_line": 1319,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 46,
            "pull_request_review_id": 1623470074,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323808921/reactions"
            },
            "side": "RIGHT",
            "start_line": 1319,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-13T01:46:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1323808921",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "also cheeky preview of how this looks ;)\r\n\r\n**_Before_**:\r\n<img width=\"1062\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/62502207/880c94c5-27c8-4966-aeef-188da8083040\">\r\n<img width=\"593\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/62502207/74d3b0c4-f1a5-41e3-ac2e-c4d83ecd6a13\">\r\n\r\n\r\n**_After_**:\r\n<img width=\"1165\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/62502207/b8f0ae5f-0fd6-47e1-9ef4-4aa3e089a612\">\r\n<img width=\"782\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/62502207/4e9cde12-5260-4393-b6ca-ff97f4091eb8\">\r\n\r\n",
            "created_at": "2023-09-11T05:36:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1713198423",
            "id": 1713198423,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mHVVX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 8,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713198423/reactions"
            },
            "updated_at": "2023-09-11T22:30:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713198423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We probably still want to display url's in `[text](url)` nodes so TUI users to click on the links.",
            "created_at": "2023-09-11T13:23:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1713876461",
            "id": 1713876461,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mJ63t",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713876461/reactions"
            },
            "updated_at": "2023-09-11T13:23:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713876461",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We probably still want to display url's in `[text](url)` nodes so TUI users to click on the links.\r\n\r\nEw 😆 . Let's make `gx` (and mouse-click) smarter instead of just suffering. Can assign that to me to avoid blocking this PR.",
            "created_at": "2023-09-11T13:28:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1713884902",
            "id": 1713884902,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mJ87m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713884902/reactions"
            },
            "updated_at": "2023-09-11T13:28:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713884902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I have my terminal setup to open links with `<shift><left-click>` which works with everything, I don't want another thing I need to remember.\r\n\r\nIf we must not have the links shown then we would need to rely on some terminal extension to do this for us.\r\n\r\n> suffering\r\n\r\n🤨 ",
            "created_at": "2023-09-11T13:35:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1713897847",
            "id": 1713897847,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKAF3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713897847/reactions"
            },
            "updated_at": "2023-09-11T13:37:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713897847",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If we must not have the links shown then we would need to rely on some terminal extension to do this for us.\r\n\r\nThere is such a thing: https://github.com/neovim/neovim/issues/11871",
            "created_at": "2023-09-11T13:38:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1713903066",
            "id": 1713903066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKBXa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 2,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713903066/reactions"
            },
            "updated_at": "2023-09-11T13:38:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713903066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We probably still want to display url's in `[text](url)` nodes so TUI users to click on the links.\r\n\r\nYes please. I don't want links concealed by default either. But we can use `conceal` for this, just like the Markdown filetype plugin does already, so that users can make that choice for themselves.",
            "created_at": "2023-09-11T14:50:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714046895",
            "id": 1714046895,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKkev",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714046895/reactions"
            },
            "updated_at": "2023-09-11T14:50:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714046895",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "NONE",
            "body": "> We probably still want to display url's in `[text](url)` nodes so TUI users to click on the links.\n\nYes, it is also very handy with terminal URL hinting",
            "created_at": "2023-09-11T14:55:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714056978",
            "id": 1714056978,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKm8S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714056978/reactions"
            },
            "updated_at": "2023-09-11T14:55:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714056978",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55179750?v=4",
                "events_url": "https://api.github.com/users/fitrh/events{/privacy}",
                "followers_url": "https://api.github.com/users/fitrh/followers",
                "following_url": "https://api.github.com/users/fitrh/following{/other_user}",
                "gists_url": "https://api.github.com/users/fitrh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fitrh",
                "id": 55179750,
                "login": "fitrh",
                "node_id": "MDQ6VXNlcjU1MTc5NzUw",
                "organizations_url": "https://api.github.com/users/fitrh/orgs",
                "received_events_url": "https://api.github.com/users/fitrh/received_events",
                "repos_url": "https://api.github.com/users/fitrh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fitrh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fitrh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fitrh"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Regarding the `[text](url)` thing:\r\n\r\nKeep in mind that `url` is not limited to `http(s)`, but it can contain `file:///` or any other scheme as well. It's used by language servers to refer to classes or functions either in the same project, or in a dependency. If we hide the url, it would be good to have a way to follow those (also in the editor)\r\n",
            "created_at": "2023-09-11T14:55:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714057084",
            "id": 1714057084,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKm98",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714057084/reactions"
            },
            "updated_at": "2023-09-11T14:55:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714057084",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  just like the Markdown filetype plugin does already\r\n\r\nOr the treesitter queries for Markdown. We do not have to use the bundled ones as-is and can make our own choices about `conceal`.",
            "created_at": "2023-09-11T14:59:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714063760",
            "id": 1714063760,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mKomQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714063760/reactions"
            },
            "updated_at": "2023-09-11T14:59:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714063760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "About concealing: Shouldn't [these settings](https://github.com/neovim/neovim/blob/65738202f8be3ca63b75197d48f2c7a9324c035b/runtime/lua/vim/lsp/util.lua#L1701-L1702) result in links always being concealed?",
            "created_at": "2023-09-11T22:21:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714663375",
            "id": 1714663375,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mM6_P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714663375/reactions"
            },
            "updated_at": "2023-09-11T22:21:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714663375",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> About concealing: Shouldn't [these settings](https://github.com/neovim/neovim/blob/65738202f8be3ca63b75197d48f2c7a9324c035b/runtime/lua/vim/lsp/util.lua#L1701-L1702) result in links always being concealed?\r\n\r\nYes they should, though I don't think those settings should be set unconditionally. `nvim_get_option_value` now supports getting an option for a filetype, so we should get the values for `'conceallevel'` and `'concealcursor'` for Markdown filetypes and use those values.",
            "created_at": "2023-09-12T00:46:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714802580",
            "id": 1714802580,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mNc-U",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714802580/reactions"
            },
            "updated_at": "2023-09-12T00:46:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714802580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Yes they should, though I don't think those settings should be set unconditionally. nvim_get_option_value now supports getting an option for a filetype, so we should get the values for 'conceallevel' and 'concealcursor' for Markdown filetypes and use those values.\r\n\r\n@gpanders Sounds good. I've modified them to use `nvim_get_option_value`.",
            "created_at": "2023-09-12T05:24:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1714992747",
            "id": 1714992747,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mOLZr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714992747/reactions"
            },
            "updated_at": "2023-09-12T05:24:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714992747",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I need some help: I've noticed that there's a small \"flash\" between the lines being set on the buffer and before the highlights are applied (it would help if interested parties try out this branch to understand what I mean). Although it's hardly noticeable, how could I prevent that?",
            "created_at": "2023-09-12T23:33:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1716679220",
            "id": 1716679220,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mUnI0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716679220/reactions"
            },
            "updated_at": "2023-09-12T23:36:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716679220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I need some help: I've noticed that there's a small \"flash\" between the lines being set on the buffer and before the highlights are applied (it would help if interested parties try out this branch to understand what I mean). Although it's hardly noticeable, how could I prevent that?\r\n\r\nI haven't been able to reproduce this, but I did see something else when testing.\r\n\r\nWith `clangd` in a C source file, I'm seeing new `<text>` tags that aren't there on master:\r\n\r\n**master**:\r\n\r\n<img width=\"295\" alt=\"Hover window on master\" src=\"https://github.com/neovim/neovim/assets/8965202/a69b7605-ea14-4869-baea-b208086572a4\">\r\n\r\n**PR**:\r\n\r\n<img width=\"302\" alt=\"Hover window with this PR\" src=\"https://github.com/neovim/neovim/assets/8965202/33d86ce2-9b86-4a5e-ae7d-67bcd06f341c\">\r\n\r\nNeither case has any highlighting. Not sure why.",
            "created_at": "2023-09-13T00:56:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1716779279",
            "id": 1716779279,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mU_kP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716779279/reactions"
            },
            "updated_at": "2023-09-13T00:56:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716779279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I haven't been able to reproduce this, but I did see something else when testing.\r\n\r\nYeah, it's hardly noticeable and you have to really squint to notice it.\r\n\r\n> With clangd in a C source file, I'm seeing new <text> tags that aren't there on master:\r\n\r\n@gpanders It seems like this is related to https://github.com/neovim/neovim/pull/25073#discussion_r1321606162. I'll investigate this.\r\n\r\n@gpanders Hmmm I'm not able to reproduce this:\r\n<img width=\"512\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/62502207/d638fc23-346e-4f29-94d3-efb7af2c0d2d\">\r\n\r\nWhat do you have set for `conceallevel`? And which C Treesitter parser are you using? The one bundled in Neovim, or the one from `nvim-treesitter`?",
            "created_at": "2023-09-13T01:01:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1716782143",
            "id": 1716782143,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mVAQ_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716782143/reactions"
            },
            "updated_at": "2023-09-13T01:05:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716782143",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > We probably still want to display url's in `[text](url)` nodes so TUI users to click on the links.\r\n> \r\n> Yes please. I don't want links concealed by default either. But we can use `conceal` for this, just like the Markdown filetype plugin does already, so that users can make that choice for themselves.\r\n\r\nI have not changed my stance on URL's specifically, but for other tokens I've come around to enabling conceal by default for the hover window specifically. I typically do not enable conceal on Markdown files at all because I want to see the _exact_ text I'm editing, the presentation of the text is secondary. However, in the hover window the situation is reversed: the text is not being edited, the presentation is the primary focus, so concealing syntax tokens (e.g. `*`, `_`, `` ` ``, etc.) makes more sense.\r\n\r\nUnfortunately I don't know of a way to conceal these tokens without also concealing URLs, not without modifications to the Markdown parser (which I am not advocating). But unsetting `'concealcursor'` at least would show the URLs when the cursor is over them.",
            "created_at": "2023-09-13T01:49:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/25073#issuecomment-1716812814",
            "id": 1716812814,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
            "node_id": "IC_kwDOAPphoM5mVHwO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716812814/reactions"
            },
            "updated_at": "2023-09-13T01:49:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1716812814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25073/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25073/commits",
    "created_at": "2023-09-09T22:25:35Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25073.diff",
    "draft": false,
    "head": {
        "label": "MariaSolOs:pretty-md",
        "ref": "pretty-md",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/MariaSolOs/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/MariaSolOs/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/MariaSolOs/neovim/branches{/branch}",
            "clone_url": "https://github.com/MariaSolOs/neovim.git",
            "collaborators_url": "https://api.github.com/repos/MariaSolOs/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/MariaSolOs/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/MariaSolOs/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/MariaSolOs/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/MariaSolOs/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/MariaSolOs/neovim/contributors",
            "created_at": "2023-08-05T17:10:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/MariaSolOs/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/MariaSolOs/neovim/downloads",
            "events_url": "https://api.github.com/repos/MariaSolOs/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/MariaSolOs/neovim/forks",
            "full_name": "MariaSolOs/neovim",
            "git_commits_url": "https://api.github.com/repos/MariaSolOs/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/MariaSolOs/neovim/git/tags{/sha}",
            "git_url": "git://github.com/MariaSolOs/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/MariaSolOs/neovim/hooks",
            "html_url": "https://github.com/MariaSolOs/neovim",
            "id": 675070403,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/MariaSolOs/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/MariaSolOs/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/MariaSolOs/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/MariaSolOs/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/MariaSolOs/neovim/merges",
            "milestones_url": "https://api.github.com/repos/MariaSolOs/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOKDzBww",
            "notifications_url": "https://api.github.com/repos/MariaSolOs/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/MariaSolOs/neovim/pulls{/number}",
            "pushed_at": "2023-09-13T01:16:00Z",
            "releases_url": "https://api.github.com/repos/MariaSolOs/neovim/releases{/id}",
            "size": 235739,
            "ssh_url": "git@github.com:MariaSolOs/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/MariaSolOs/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/MariaSolOs/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/MariaSolOs/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/MariaSolOs/neovim/subscription",
            "svn_url": "https://github.com/MariaSolOs/neovim",
            "tags_url": "https://api.github.com/repos/MariaSolOs/neovim/tags",
            "teams_url": "https://api.github.com/repos/MariaSolOs/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/MariaSolOs/neovim/git/trees{/sha}",
            "updated_at": "2023-08-09T04:34:06Z",
            "url": "https://api.github.com/repos/MariaSolOs/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25073",
    "id": 1508947390,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25073",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "b2a54e2a6f871c6d932d755b7a786610941afc1d",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5Z8LW-",
    "number": 25073,
    "patch_url": "https://github.com/neovim/neovim/pull/25073.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
            "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
            "followers_url": "https://api.github.com/users/mfussenegger/followers",
            "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
            "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mfussenegger",
            "id": 38700,
            "login": "mfussenegger",
            "node_id": "MDQ6VXNlcjM4NzAw",
            "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
            "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
            "repos_url": "https://api.github.com/users/mfussenegger/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mfussenegger"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
            "events_url": "https://api.github.com/users/folke/events{/privacy}",
            "followers_url": "https://api.github.com/users/folke/followers",
            "following_url": "https://api.github.com/users/folke/following{/other_user}",
            "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/folke",
            "id": 292349,
            "login": "folke",
            "node_id": "MDQ6VXNlcjI5MjM0OQ==",
            "organizations_url": "https://api.github.com/users/folke/orgs",
            "received_events_url": "https://api.github.com/users/folke/received_events",
            "repos_url": "https://api.github.com/users/folke/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/folke"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
            "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
            "followers_url": "https://api.github.com/users/glepnir/followers",
            "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
            "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/glepnir",
            "id": 41671631,
            "login": "glepnir",
            "node_id": "MDQ6VXNlcjQxNjcxNjMx",
            "organizations_url": "https://api.github.com/users/glepnir/orgs",
            "received_events_url": "https://api.github.com/users/glepnir/received_events",
            "repos_url": "https://api.github.com/users/glepnir/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/glepnir"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25073/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/7e0bc9f015a2db5941bf12b5474e1f5cf27ee156",
    "title": "feat(lsp): use treesitter for stylize_markdown",
    "updated_at": "2023-09-13T01:49:26Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25073",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
        "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
        "followers_url": "https://api.github.com/users/MariaSolOs/followers",
        "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
        "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MariaSolOs",
        "id": 62502207,
        "login": "MariaSolOs",
        "node_id": "MDQ6VXNlcjYyNTAyMjA3",
        "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
        "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
        "repos_url": "https://api.github.com/users/MariaSolOs/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MariaSolOs"
    }
}