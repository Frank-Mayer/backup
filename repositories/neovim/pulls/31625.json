{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31625/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31625/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31625"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31625"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31625/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/bbd1373e1209b3b221527e35e6466e58ed2fd0a1"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5766,
            "forks_count": 5766,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1818,
            "open_issues_count": 1818,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-12-23T21:39:36Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 300480,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 84495,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-12-24T02:11:47Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 84495,
            "watchers_count": 84495,
            "web_commit_signoff_required": false
        },
        "sha": "725d3e25a32f68c30402e0dbd373a93a294ffed6",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Currently `iter_captures()` caches predicate and directives results separately. For each of the 2 lookups, it has to call into C to get the match id. Additionally, both `match_preds()` and `apply_directives()` call to `match:captures()`, which creates a new table each time.\r\n\r\nI updated `iter_captures()` to only have 1 cache with the final metadata. This is possible because if predicates match, the directives are always applied; and if predicates don't match, the query match is removed and no future captures from it will be returned.\r\n\r\n`match:captures()` and `match:info()` (which call to C) are now called only once.\r\n\r\nAlso split predicates and directives into 2 lists.\r\n\r\nTheoretically, this should also make `iter_matches()` faster.\r\n\r\n### Results\r\n\r\nMedian, in ms:\r\n\r\n|before|after|\r\n|-|-|\r\n|42.5|25.6|",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1892301181"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892301181"
                }
            },
            "author_association": "MEMBER",
            "body": "is there a brief docstring that can give a hint about what this does",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T14:29:04Z",
            "diff_hunk": "@@ -4,6 +4,56 @@ local memoize = vim.func._memoize\n \n local M = {}\n \n+local function is_directive(name)\n+  return string.sub(name, -1) == '!'\n+end\n+\n+---@alias Pattern (integer|string)[]\n+\n+---@nodoc\n+---@class ProcessedPredicate\n+---@field [1] string predicate name\n+---@field [2] boolean should match\n+---@field [3] Pattern\n+\n+---@alias ProcessedDirective Pattern\n+\n+---@private\n+---@param patterns table<integer, Pattern[]>\n+---@return table<integer, { preds: ProcessedPredicate[], directives: ProcessedDirective[] }>\n+local function process_patterns(patterns)",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1892301181",
            "id": 1892301181,
            "line": 27,
            "node_id": "PRRC_kwDOAPphoM5wyjl9",
            "original_commit_id": "81a1b3a462df0eb0becc8f128b04224cffd8434e",
            "original_line": 27,
            "original_position": 21,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 24,
            "pull_request_review_id": 2514961930,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892301181/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T14:29:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892301181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893061346"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893061346"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      -- Note: tree-sitter strips the leading # from predicates for us.\r\n```\r\n",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T19:57:45Z",
            "diff_hunk": "@@ -4,6 +4,57 @@ local memoize = vim.func._memoize\n \n local M = {}\n \n+local function is_directive(name)\n+  return string.sub(name, -1) == '!'\n+end\n+\n+---@alias Pattern (integer|string)[]\n+\n+---@nodoc\n+---@class ProcessedPredicate\n+---@field [1] string predicate name\n+---@field [2] boolean should match\n+---@field [3] Pattern\n+\n+---@alias ProcessedDirective Pattern\n+---@alias ProcessedPattern { preds: ProcessedPredicate[], directives: ProcessedDirective[] }\n+\n+--- Splits the query patterns into predicates and directives.\n+---@param patterns table<integer, Pattern[]>\n+---@return table<integer, ProcessedPattern>\n+local function process_patterns(patterns)\n+  ---@type table<integer, ProcessedPattern>\n+  local processed_patterns = {}\n+\n+  for k, pattern_list in pairs(patterns) do\n+    ---@type ProcessedPredicate[]\n+    local predicates = {}\n+    ---@type ProcessedDirective[]\n+    local directives = {}\n+\n+    for _, pattern in ipairs(pattern_list) do\n+      -- Note: ree-sitter strips the leading # from predicates for us.",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893061346",
            "id": 1893061346,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w1dLi",
            "original_commit_id": "fe116dae3831c3ea2079ed67fa736908befd454a",
            "original_line": 36,
            "original_position": 33,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2516054921,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893061346/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T20:07:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893061346",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893065182"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893065182"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a way to make this work without keeping track of the highest seen match id? Maybe by just checking if `match_cache[match_id]` exists? Just wondering",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T20:01:57Z",
            "diff_hunk": "@@ -899,16 +915,35 @@ function Query:iter_captures(node, source, start, stop)\n       return\n     end\n \n-    if not match_preds(self, match, source) then\n-      local match_id = match:info()\n-      cursor:remove_match(match_id)\n-      if end_line and captured_node:range() > end_line then\n-        return nil, captured_node, nil, nil\n-      end\n-      return iter(end_line) -- tail call: try next match\n+    local match_id, pattern = match:info()\n+\n+    --- @type vim.treesitter.query.TSMetadata\n+    local metadata\n+    if match_id <= highest_cached_match_id then\n+      metadata = match_cache[match_id]\n     end\n \n-    local metadata = apply_directives(self, match, source)\n+    if not metadata then\n+      local patterns = self.processed_patterns[pattern]\n+      if patterns then\n+        local captures = match:captures()\n+\n+        if not self:match_preds(patterns.preds, pattern, captures, source) then\n+          cursor:remove_match(match_id)\n+          if end_line and captured_node:range() > end_line then\n+            return nil, captured_node, nil, nil\n+          end\n+          return iter(end_line) -- tail call: try next match\n+        end\n+\n+        metadata = self:apply_directives(patterns.directives, pattern, captures, source)\n+      else\n+        metadata = {}\n+      end\n+\n+      highest_cached_match_id = math.max(highest_cached_match_id, match_id)",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893065182",
            "id": 1893065182,
            "line": 947,
            "node_id": "PRRC_kwDOAPphoM5w1eHe",
            "original_commit_id": "fe116dae3831c3ea2079ed67fa736908befd454a",
            "original_line": 947,
            "original_position": 245,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 256,
            "pull_request_review_id": 2516054921,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893065182/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T20:07:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893065182",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893065393"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893065393"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a way to make this work without keeping track of the highest seen match id? Maybe by just checking if `match_cache[match_id]` exists? Just wondering",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T20:02:09Z",
            "diff_hunk": "@@ -899,16 +915,35 @@ function Query:iter_captures(node, source, start, stop)\n       return\n     end\n \n-    if not match_preds(self, match, source) then\n-      local match_id = match:info()\n-      cursor:remove_match(match_id)\n-      if end_line and captured_node:range() > end_line then\n-        return nil, captured_node, nil, nil\n-      end\n-      return iter(end_line) -- tail call: try next match\n+    local match_id, pattern = match:info()\n+\n+    --- @type vim.treesitter.query.TSMetadata\n+    local metadata\n+    if match_id <= highest_cached_match_id then\n+      metadata = match_cache[match_id]\n     end\n \n-    local metadata = apply_directives(self, match, source)\n+    if not metadata then\n+      local patterns = self.processed_patterns[pattern]\n+      if patterns then\n+        local captures = match:captures()\n+\n+        if not self:match_preds(patterns.preds, pattern, captures, source) then\n+          cursor:remove_match(match_id)\n+          if end_line and captured_node:range() > end_line then\n+            return nil, captured_node, nil, nil\n+          end\n+          return iter(end_line) -- tail call: try next match\n+        end\n+\n+        metadata = self:apply_directives(patterns.directives, pattern, captures, source)\n+      else\n+        metadata = {}\n+      end\n+\n+      highest_cached_match_id = math.max(highest_cached_match_id, match_id)",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893065393",
            "id": 1893065393,
            "line": 947,
            "node_id": "PRRC_kwDOAPphoM5w1eKx",
            "original_commit_id": "fe116dae3831c3ea2079ed67fa736908befd454a",
            "original_line": 947,
            "original_position": 245,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 256,
            "pull_request_review_id": 2516054921,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893065393/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T20:07:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893065393",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893066731"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893066731"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe\r\n```suggestion\r\n    local metadata = {}\r\n    if patterns then\r\n      if not self:match_preds(patterns.preds, pattern, captures, source) then\r\n        cursor:remove_match(match_id)\r\n        return iter() -- tail call: try next match\r\n      end\r\n      metadata = self:apply_directives(patterns.directives, pattern, captures, source)\r\n```",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T20:03:18Z",
            "diff_hunk": "@@ -972,16 +1007,21 @@ function Query:iter_matches(node, source, start, stop, opts)\n     end\n \n     local match_id, pattern = match:info()\n+    local patterns = self.processed_patterns[pattern]\n+    local captures = match:captures()\n \n-    if not self:match_preds(match, source) then\n-      cursor:remove_match(match_id)\n-      return iter() -- tail call: try next match\n+    --- @type vim.treesitter.query.TSMetadata\n+    local metadata\n+    if patterns then\n+      if not self:match_preds(patterns.preds, pattern, captures, source) then\n+        cursor:remove_match(match_id)\n+        return iter() -- tail call: try next match\n+      end\n+      metadata = self:apply_directives(patterns.directives, pattern, captures, source)\n+    else\n+      metadata = {}",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893066731",
            "id": 1893066731,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w1efr",
            "original_commit_id": "fe116dae3831c3ea2079ed67fa736908befd454a",
            "original_line": 1022,
            "original_position": 270,
            "original_start_line": 1014,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2516054921,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893066731/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-19T20:07:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893066731",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893067878"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893067878"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: maybe it would be clearer to call this `processed_pattern` instead of `patterns`? Same with below",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T20:04:13Z",
            "diff_hunk": "@@ -899,16 +915,35 @@ function Query:iter_captures(node, source, start, stop)\n       return\n     end\n \n-    if not match_preds(self, match, source) then\n-      local match_id = match:info()\n-      cursor:remove_match(match_id)\n-      if end_line and captured_node:range() > end_line then\n-        return nil, captured_node, nil, nil\n-      end\n-      return iter(end_line) -- tail call: try next match\n+    local match_id, pattern = match:info()\n+\n+    --- @type vim.treesitter.query.TSMetadata\n+    local metadata\n+    if match_id <= highest_cached_match_id then\n+      metadata = match_cache[match_id]\n     end\n \n-    local metadata = apply_directives(self, match, source)\n+    if not metadata then\n+      local patterns = self.processed_patterns[pattern]\n+      if patterns then",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893067878",
            "id": 1893067878,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w1exm",
            "original_commit_id": "fe116dae3831c3ea2079ed67fa736908befd454a",
            "original_line": 928,
            "original_position": 229,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2516054921,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893067878/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T20:07:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893067878",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893071023"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893071023"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe can just change this to\r\n```suggestion\r\n    local pred_name = pred[3][1]\r\n```\r\nand then use no handler for `pred_name` below? Since this is the only place `pattern` is used currently. Then maybe we can also change the parameter name from `pattern_i` to `pattern` which seems clearer to me",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T20:07:49Z",
            "diff_hunk": "@@ -740,84 +793,52 @@ function M.list_predicates()\n   return vim.tbl_keys(predicate_handlers)\n end\n \n-local function xor(x, y)\n-  return (x or y) and not (x and y)\n-end\n-\n-local function is_directive(name)\n-  return string.sub(name, -1) == '!'\n-end\n-\n ---@private\n+---@param preds ProcessedPredicate[]\n ---@param match TSQueryMatch\n ---@param source integer|string\n-function Query:match_preds(match, source)\n-  local _, pattern = match:info()\n-  local preds = self.info.patterns[pattern]\n-\n-  if not preds then\n-    return true\n-  end\n-\n-  local captures = match:captures()\n-\n-  for _, pred in pairs(preds) do\n+function Query:match_preds(preds, pattern_i, captures, source)\n+  for _, pred in ipairs(preds) do\n     -- Here we only want to return if a predicate DOES NOT match, and\n     -- continue on the other case. This way unknown predicates will not be considered,\n     -- which allows some testing and easier user extensibility (#12173).\n-    -- Also, tree-sitter strips the leading # from predicates for us.\n-    local is_not = false\n-\n-    -- Skip over directives... they will get processed after all the predicates.\n-    if not is_directive(pred[1]) then\n-      local pred_name = pred[1]\n-      if pred_name:match('^not%-') then\n-        pred_name = pred_name:sub(5)\n-        is_not = true\n-      end\n \n-      local handler = predicate_handlers[pred_name]\n+    local processed_name = pred[1]\n+    local should_match = pred[2]\n+    local pattern = pred[3]",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893071023",
            "id": 1893071023,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w1fiv",
            "original_commit_id": "fe116dae3831c3ea2079ed67fa736908befd454a",
            "original_line": 808,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2516054921,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893071023/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T20:07:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893071023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893085146"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893085146"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, it can be removed. Works correctly either way. \r\n\r\nI added this check since the cache might become a hash map at some point, and indexing it would become more expensive.\r\n\r\n Most of the time, captures returned by `next_capture()` are new and have match id higher than anything in the cache, so this check is cheaper.\r\n\r\nIt's about 4ms faster.\r\n\r\nAdded a comment explaining the purpose of the variable.",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T20:20:47Z",
            "diff_hunk": "@@ -899,16 +915,35 @@ function Query:iter_captures(node, source, start, stop)\n       return\n     end\n \n-    if not match_preds(self, match, source) then\n-      local match_id = match:info()\n-      cursor:remove_match(match_id)\n-      if end_line and captured_node:range() > end_line then\n-        return nil, captured_node, nil, nil\n-      end\n-      return iter(end_line) -- tail call: try next match\n+    local match_id, pattern = match:info()\n+\n+    --- @type vim.treesitter.query.TSMetadata\n+    local metadata\n+    if match_id <= highest_cached_match_id then\n+      metadata = match_cache[match_id]\n     end\n \n-    local metadata = apply_directives(self, match, source)\n+    if not metadata then\n+      local patterns = self.processed_patterns[pattern]\n+      if patterns then\n+        local captures = match:captures()\n+\n+        if not self:match_preds(patterns.preds, pattern, captures, source) then\n+          cursor:remove_match(match_id)\n+          if end_line and captured_node:range() > end_line then\n+            return nil, captured_node, nil, nil\n+          end\n+          return iter(end_line) -- tail call: try next match\n+        end\n+\n+        metadata = self:apply_directives(patterns.directives, pattern, captures, source)\n+      else\n+        metadata = {}\n+      end\n+\n+      highest_cached_match_id = math.max(highest_cached_match_id, match_id)",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893085146",
            "id": 1893085146,
            "in_reply_to_id": 1893065182,
            "line": 947,
            "node_id": "PRRC_kwDOAPphoM5w1i_a",
            "original_commit_id": "fe116dae3831c3ea2079ed67fa736908befd454a",
            "original_line": 947,
            "original_position": 245,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 256,
            "pull_request_review_id": 2516095276,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893085146/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T03:08:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893085146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893107070"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893107070"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "also passed to the handler as the last argument.\r\n\r\nRegarding the rename, `pattern_i` is clearer to me since it's not the actual pattern, but its index. ",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T20:32:27Z",
            "diff_hunk": "@@ -740,84 +793,52 @@ function M.list_predicates()\n   return vim.tbl_keys(predicate_handlers)\n end\n \n-local function xor(x, y)\n-  return (x or y) and not (x and y)\n-end\n-\n-local function is_directive(name)\n-  return string.sub(name, -1) == '!'\n-end\n-\n ---@private\n+---@param preds ProcessedPredicate[]\n ---@param match TSQueryMatch\n ---@param source integer|string\n-function Query:match_preds(match, source)\n-  local _, pattern = match:info()\n-  local preds = self.info.patterns[pattern]\n-\n-  if not preds then\n-    return true\n-  end\n-\n-  local captures = match:captures()\n-\n-  for _, pred in pairs(preds) do\n+function Query:match_preds(preds, pattern_i, captures, source)\n+  for _, pred in ipairs(preds) do\n     -- Here we only want to return if a predicate DOES NOT match, and\n     -- continue on the other case. This way unknown predicates will not be considered,\n     -- which allows some testing and easier user extensibility (#12173).\n-    -- Also, tree-sitter strips the leading # from predicates for us.\n-    local is_not = false\n-\n-    -- Skip over directives... they will get processed after all the predicates.\n-    if not is_directive(pred[1]) then\n-      local pred_name = pred[1]\n-      if pred_name:match('^not%-') then\n-        pred_name = pred_name:sub(5)\n-        is_not = true\n-      end\n \n-      local handler = predicate_handlers[pred_name]\n+    local processed_name = pred[1]\n+    local should_match = pred[2]\n+    local pattern = pred[3]",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893107070",
            "id": 1893107070,
            "in_reply_to_id": 1893071023,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w1oV-",
            "original_commit_id": "fe116dae3831c3ea2079ed67fa736908befd454a",
            "original_line": 808,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2516128474,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893107070/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T20:32:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893107070",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893116211"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893116211"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah thanks, that makes sense. nevermind then",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T20:42:46Z",
            "diff_hunk": "@@ -740,84 +793,52 @@ function M.list_predicates()\n   return vim.tbl_keys(predicate_handlers)\n end\n \n-local function xor(x, y)\n-  return (x or y) and not (x and y)\n-end\n-\n-local function is_directive(name)\n-  return string.sub(name, -1) == '!'\n-end\n-\n ---@private\n+---@param preds ProcessedPredicate[]\n ---@param match TSQueryMatch\n ---@param source integer|string\n-function Query:match_preds(match, source)\n-  local _, pattern = match:info()\n-  local preds = self.info.patterns[pattern]\n-\n-  if not preds then\n-    return true\n-  end\n-\n-  local captures = match:captures()\n-\n-  for _, pred in pairs(preds) do\n+function Query:match_preds(preds, pattern_i, captures, source)\n+  for _, pred in ipairs(preds) do\n     -- Here we only want to return if a predicate DOES NOT match, and\n     -- continue on the other case. This way unknown predicates will not be considered,\n     -- which allows some testing and easier user extensibility (#12173).\n-    -- Also, tree-sitter strips the leading # from predicates for us.\n-    local is_not = false\n-\n-    -- Skip over directives... they will get processed after all the predicates.\n-    if not is_directive(pred[1]) then\n-      local pred_name = pred[1]\n-      if pred_name:match('^not%-') then\n-        pred_name = pred_name:sub(5)\n-        is_not = true\n-      end\n \n-      local handler = predicate_handlers[pred_name]\n+    local processed_name = pred[1]\n+    local should_match = pred[2]\n+    local pattern = pred[3]",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893116211",
            "id": 1893116211,
            "in_reply_to_id": 1893071023,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w1qkz",
            "original_commit_id": "fe116dae3831c3ea2079ed67fa736908befd454a",
            "original_line": 808,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2516147200,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893116211/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T20:42:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893116211",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893201938"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893201938"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Also removed this comment, as unknown predicates throw an error since https://github.com/neovim/neovim/pull/12826",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T22:09:14Z",
            "diff_hunk": "@@ -737,87 +790,50 @@ end\n --- Lists the currently available predicates to use in queries.\n ---@return string[] : Supported predicates.\n function M.list_predicates()\n-  return vim.tbl_keys(predicate_handlers)\n-end\n-\n-local function xor(x, y)\n-  return (x or y) and not (x and y)\n-end\n-\n-local function is_directive(name)\n-  return string.sub(name, -1) == '!'\n+  return vim.tbl_keys(guard_handlers)\n end\n \n ---@private\n+---@param pattern_i integer\n+---@param guards ProcessedGuard[]\n ---@param match TSQueryMatch\n ---@param source integer|string\n-function Query:match_preds(match, source)\n-  local _, pattern = match:info()\n-  local preds = self.info.patterns[pattern]\n-\n-  if not preds then\n-    return true\n-  end\n-\n-  local captures = match:captures()\n-\n-  for _, pred in pairs(preds) do\n-    -- Here we only want to return if a predicate DOES NOT match, and",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893201938",
            "id": 1893201938,
            "line": 765,
            "node_id": "PRRC_kwDOAPphoM5w1_gS",
            "original_commit_id": "59e9fd86e3ad5fa9a440291fc1d774384ddecfcb",
            "original_line": 765,
            "original_position": 180,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 105,
            "pull_request_review_id": 2516318668,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893201938/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T22:09:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893201938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893203174"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893203174"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Range selection seems to be broken. This is the second time I selected one range and it displays as a different range. Actual range is 765-767",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-19T22:10:51Z",
            "diff_hunk": "@@ -737,87 +790,50 @@ end\n --- Lists the currently available predicates to use in queries.\n ---@return string[] : Supported predicates.\n function M.list_predicates()\n-  return vim.tbl_keys(predicate_handlers)\n-end\n-\n-local function xor(x, y)\n-  return (x or y) and not (x and y)\n-end\n-\n-local function is_directive(name)\n-  return string.sub(name, -1) == '!'\n+  return vim.tbl_keys(guard_handlers)\n end\n \n ---@private\n+---@param pattern_i integer\n+---@param guards ProcessedGuard[]\n ---@param match TSQueryMatch\n ---@param source integer|string\n-function Query:match_preds(match, source)\n-  local _, pattern = match:info()\n-  local preds = self.info.patterns[pattern]\n-\n-  if not preds then\n-    return true\n-  end\n-\n-  local captures = match:captures()\n-\n-  for _, pred in pairs(preds) do\n-    -- Here we only want to return if a predicate DOES NOT match, and",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893203174",
            "id": 1893203174,
            "in_reply_to_id": 1893201938,
            "line": 765,
            "node_id": "PRRC_kwDOAPphoM5w1_zm",
            "original_commit_id": "59e9fd86e3ad5fa9a440291fc1d774384ddecfcb",
            "original_line": 765,
            "original_position": 180,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 105,
            "pull_request_review_id": 2516320597,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893203174/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T22:13:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893203174",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893700614"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893700614"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n---@class vim.treesitter.query.ProcessedGuard\r\n```",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-20T09:36:30Z",
            "diff_hunk": "@@ -4,14 +4,69 @@ local memoize = vim.func._memoize\n \n local M = {}\n \n+local function is_directive(name)\n+  return string.sub(name, -1) == '!'\n+end\n+\n+---A predicate is a list of (integer|string); integer represents `capture_id`, and\n+---string represents (literal) arguments to predicate. A predicate is either a guard\n+---or a directive. See |treesitter-predicates| and |treesitter-directives| for more details.\n+---@alias Predicate (integer|string)[]\n+\n+---@nodoc\n+---@class ProcessedGuard",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893700614",
            "id": 1893700614,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w35QG",
            "original_commit_id": "59e9fd86e3ad5fa9a440291fc1d774384ddecfcb",
            "original_line": 17,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2517142874,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893700614/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T09:36:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893700614",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893702309"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893702309"
                }
            },
            "author_association": "MEMBER",
            "body": "How do we know this is safe? Is the type definition correct?",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-20T09:38:06Z",
            "diff_hunk": "@@ -4,14 +4,69 @@ local memoize = vim.func._memoize\n \n local M = {}\n \n+local function is_directive(name)\n+  return string.sub(name, -1) == '!'\n+end\n+\n+---A predicate is a list of (integer|string); integer represents `capture_id`, and\n+---string represents (literal) arguments to predicate. A predicate is either a guard\n+---or a directive. See |treesitter-predicates| and |treesitter-directives| for more details.\n+---@alias Predicate (integer|string)[]\n+\n+---@nodoc\n+---@class ProcessedGuard\n+---@field [1] string handler name\n+---@field [2] boolean whether it should match\n+---@field [3] Predicate\n+\n+---@alias ProcessedDirective Predicate\n+---@alias ProcessedPattern { guards: ProcessedGuard[], directives: ProcessedDirective[] }\n+\n+--- Splits the predicates in query patterns into guards and directives.\n+---@param patterns table<integer, Predicate[]>\n+---@return table<integer, ProcessedPattern>\n+local function process_patterns(patterns)\n+  ---@type table<integer, ProcessedPattern>\n+  local processed_patterns = {}\n+\n+  for k, pattern in pairs(patterns) do\n+    ---@type ProcessedGuard[]\n+    local guards = {}\n+    ---@type ProcessedDirective[]\n+    local directives = {}\n+\n+    for _, pred in ipairs(pattern) do\n+      -- Note: tree-sitter strips the leading # from predicates for us.\n+      local pred_name = pred[1]\n+      ---@cast pred_name string",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893702309",
            "id": 1893702309,
            "line": 40,
            "node_id": "PRRC_kwDOAPphoM5w35ql",
            "original_commit_id": "59e9fd86e3ad5fa9a440291fc1d774384ddecfcb",
            "original_line": 40,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 37,
            "pull_request_review_id": 2517145850,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893702309/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T09:38:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893702309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893820194"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893820194"
                }
            },
            "author_association": "MEMBER",
            "body": "Even if `@private` , still need `_` prefix, especially if it's on a public interface.\r\n```suggestion\r\nfunction Query:_match_guards(pattern_i, guards, captures, source)\r\n```",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-20T11:21:57Z",
            "diff_hunk": "@@ -737,87 +790,50 @@ end\n --- Lists the currently available predicates to use in queries.\n ---@return string[] : Supported predicates.\n function M.list_predicates()\n-  return vim.tbl_keys(predicate_handlers)\n-end\n-\n-local function xor(x, y)\n-  return (x or y) and not (x and y)\n-end\n-\n-local function is_directive(name)\n-  return string.sub(name, -1) == '!'\n+  return vim.tbl_keys(guard_handlers)\n end\n \n ---@private\n+---@param pattern_i integer\n+---@param guards ProcessedGuard[]\n ---@param match TSQueryMatch\n ---@param source integer|string\n-function Query:match_preds(match, source)\n-  local _, pattern = match:info()\n-  local preds = self.info.patterns[pattern]\n-\n-  if not preds then\n-    return true\n-  end\n-\n-  local captures = match:captures()\n-\n-  for _, pred in pairs(preds) do\n-    -- Here we only want to return if a predicate DOES NOT match, and\n-    -- continue on the other case. This way unknown predicates will not be considered,\n-    -- which allows some testing and easier user extensibility (#12173).\n-    -- Also, tree-sitter strips the leading # from predicates for us.\n-    local is_not = false\n-\n-    -- Skip over directives... they will get processed after all the predicates.\n-    if not is_directive(pred[1]) then\n-      local pred_name = pred[1]\n-      if pred_name:match('^not%-') then\n-        pred_name = pred_name:sub(5)\n-        is_not = true\n-      end\n-\n-      local handler = predicate_handlers[pred_name]\n-\n-      if not handler then\n-        error(string.format('No handler for %s', pred[1]))\n-        return false\n-      end\n-\n-      local pred_matches = handler(captures, pattern, source, pred)\n+function Query:match_guards(pattern_i, guards, captures, source)",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893820194",
            "id": 1893820194,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w4Wci",
            "original_commit_id": "59e9fd86e3ad5fa9a440291fc1d774384ddecfcb",
            "original_line": 801,
            "original_position": 202,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2517347110,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893820194/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T11:21:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893820194",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1893820705"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893820705"
                }
            },
            "author_association": "MEMBER",
            "body": "No, I think that refers (or should refer) specifically to `:h treesitter-predicates`, in parallel to `treesitter-directives`. I don't think \"guards\" is helpful here.",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-20T11:22:30Z",
            "diff_hunk": "@@ -1285,7 +1285,7 @@ lint({buf}, {opts})                              *vim.treesitter.query.lint()*\n     Use |treesitter-parsers| in runtimepath to check the query file in {buf}\n     for errors:\n     • verify that used nodes are valid identifiers in the grammar.\n-    • verify that predicates and directives are valid.\n+    • verify that guards and directives are valid.",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1893820705",
            "id": 1893820705,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w4Wkh",
            "original_commit_id": "59e9fd86e3ad5fa9a440291fc1d774384ddecfcb",
            "original_line": 1288,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 2517348039,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893820705/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T11:22:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893820705",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1894221106"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894221106"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is what the original code did. And it also expected string.\r\n\r\nhttps://github.com/neovim/neovim/blob/e1c2179dd93ed2cd787b1cd016606b1901a1acfe/runtime/lua/vim/treesitter/query.lua#L772-L777",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-20T17:46:54Z",
            "diff_hunk": "@@ -4,14 +4,69 @@ local memoize = vim.func._memoize\n \n local M = {}\n \n+local function is_directive(name)\n+  return string.sub(name, -1) == '!'\n+end\n+\n+---A predicate is a list of (integer|string); integer represents `capture_id`, and\n+---string represents (literal) arguments to predicate. A predicate is either a guard\n+---or a directive. See |treesitter-predicates| and |treesitter-directives| for more details.\n+---@alias Predicate (integer|string)[]\n+\n+---@nodoc\n+---@class ProcessedGuard\n+---@field [1] string handler name\n+---@field [2] boolean whether it should match\n+---@field [3] Predicate\n+\n+---@alias ProcessedDirective Predicate\n+---@alias ProcessedPattern { guards: ProcessedGuard[], directives: ProcessedDirective[] }\n+\n+--- Splits the predicates in query patterns into guards and directives.\n+---@param patterns table<integer, Predicate[]>\n+---@return table<integer, ProcessedPattern>\n+local function process_patterns(patterns)\n+  ---@type table<integer, ProcessedPattern>\n+  local processed_patterns = {}\n+\n+  for k, pattern in pairs(patterns) do\n+    ---@type ProcessedGuard[]\n+    local guards = {}\n+    ---@type ProcessedDirective[]\n+    local directives = {}\n+\n+    for _, pred in ipairs(pattern) do\n+      -- Note: tree-sitter strips the leading # from predicates for us.\n+      local pred_name = pred[1]\n+      ---@cast pred_name string",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1894221106",
            "id": 1894221106,
            "in_reply_to_id": 1893702309,
            "line": 40,
            "node_id": "PRRC_kwDOAPphoM5w54Uy",
            "original_commit_id": "59e9fd86e3ad5fa9a440291fc1d774384ddecfcb",
            "original_line": 40,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 37,
            "pull_request_review_id": 2518046766,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894221106/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T17:46:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894221106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1894257304"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894257304"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "renamed `apply_directives()` as well.",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-20T18:24:07Z",
            "diff_hunk": "@@ -737,87 +790,50 @@ end\n --- Lists the currently available predicates to use in queries.\n ---@return string[] : Supported predicates.\n function M.list_predicates()\n-  return vim.tbl_keys(predicate_handlers)\n-end\n-\n-local function xor(x, y)\n-  return (x or y) and not (x and y)\n-end\n-\n-local function is_directive(name)\n-  return string.sub(name, -1) == '!'\n+  return vim.tbl_keys(guard_handlers)\n end\n \n ---@private\n+---@param pattern_i integer\n+---@param guards ProcessedGuard[]\n ---@param match TSQueryMatch\n ---@param source integer|string\n-function Query:match_preds(match, source)\n-  local _, pattern = match:info()\n-  local preds = self.info.patterns[pattern]\n-\n-  if not preds then\n-    return true\n-  end\n-\n-  local captures = match:captures()\n-\n-  for _, pred in pairs(preds) do\n-    -- Here we only want to return if a predicate DOES NOT match, and\n-    -- continue on the other case. This way unknown predicates will not be considered,\n-    -- which allows some testing and easier user extensibility (#12173).\n-    -- Also, tree-sitter strips the leading # from predicates for us.\n-    local is_not = false\n-\n-    -- Skip over directives... they will get processed after all the predicates.\n-    if not is_directive(pred[1]) then\n-      local pred_name = pred[1]\n-      if pred_name:match('^not%-') then\n-        pred_name = pred_name:sub(5)\n-        is_not = true\n-      end\n-\n-      local handler = predicate_handlers[pred_name]\n-\n-      if not handler then\n-        error(string.format('No handler for %s', pred[1]))\n-        return false\n-      end\n-\n-      local pred_matches = handler(captures, pattern, source, pred)\n+function Query:match_guards(pattern_i, guards, captures, source)",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1894257304",
            "id": 1894257304,
            "in_reply_to_id": 1893820194,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w6BKY",
            "original_commit_id": "59e9fd86e3ad5fa9a440291fc1d774384ddecfcb",
            "original_line": 801,
            "original_position": 202,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2518107338,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894257304/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T18:24:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894257304",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1894479177"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894479177"
                }
            },
            "author_association": "MEMBER",
            "body": "'predicate' is a standard term in treesitter, so I suggest we use `Predicate` everywhere in place of `Pred`. `pred`, `preds`, etc. as a shorthand name for local variables for `predicate`, `predicates`, etc. may arguably be okay, though I think using `predicates` instead of `preds`, etc. explicitly would not hurt and therefore should be encouraged.",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-20T22:50:06Z",
            "diff_hunk": "@@ -4,6 +4,59 @@ local memoize = vim.func._memoize\n \n local M = {}\n \n+local function is_directive(name)\n+  return string.sub(name, -1) == '!'\n+end\n+\n+---@nodoc\n+---@class vim.treesitter.query.ProcessedPred",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1894479177",
            "id": 1894479177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w63VJ",
            "original_commit_id": "6c69b0ba7976e8767c0f2d07ac4fb8a15eea4625",
            "original_line": 12,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2518472026,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894479177/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T23:03:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894479177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1894482232"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894482232"
                }
            },
            "author_association": "MEMBER",
            "body": "I believe this field should be private, as how we treat \"processed\" predicates and directives may change (e.g. `vim.treesitter.query.ProcessedDirective` is currently not a table but simply an alias).",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-20T22:57:38Z",
            "diff_hunk": "@@ -12,6 +65,7 @@ local M = {}\n ---@field captures string[] list of (unique) capture names defined in query\n ---@field info vim.treesitter.QueryInfo contains information used in the query (e.g. captures, predicates, directives)\n ---@field query TSQuery userdata query object\n+---@field processed_patterns table<integer, vim.treesitter.query.ProcessedPattern>",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1894482232",
            "id": 1894482232,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w64E4",
            "original_commit_id": "6c69b0ba7976e8767c0f2d07ac4fb8a15eea4625",
            "original_line": 68,
            "original_position": 64,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2518472026,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894482232/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T23:01:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894482232",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1894506686"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894506686"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "UPD: renamed 808 in this particular case to `orig_predicate`. Renamed the type to `ProcessedPredicate`\r\n\r\nThis is a problem because we need to refer to a neovim \"predicate\" and tree-sitter \"predicate\" (neovim predicate + neovim directive) in the same place, and both have to be called predicate (both are referred to as a \"predicate\" in neovim, e.g. in docs of `add_predicate()` vs `directive_handlers`). What should the names be then? Here's an example of this:\r\n\r\nhttps://github.com/neovim/neovim/blob/6c69b0ba7976e8767c0f2d07ac4fb8a15eea4625/runtime/lua/vim/treesitter/query.lua#L805-L808\r\n\r\n805 refers to this processed neovim predicate, while 808 refers to a treesitter predicate.",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-20T23:51:22Z",
            "diff_hunk": "@@ -4,6 +4,59 @@ local memoize = vim.func._memoize\n \n local M = {}\n \n+local function is_directive(name)\n+  return string.sub(name, -1) == '!'\n+end\n+\n+---@nodoc\n+---@class vim.treesitter.query.ProcessedPred",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1894506686",
            "id": 1894506686,
            "in_reply_to_id": 1894479177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w6-C-",
            "original_commit_id": "6c69b0ba7976e8767c0f2d07ac4fb8a15eea4625",
            "original_line": 12,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2518517196,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894506686/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T14:19:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894506686",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1894605283"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894605283"
                }
            },
            "author_association": "MEMBER",
            "body": "We are indeed not 100% consistent (esp. in metadata and optional fields), but this is out of scope here. (We _do_ have `add_directive()` though!)\r\n\r\nSo here's my suggested convention for now:\r\n1. Keep the distinction between directives (`#foo!`) and predicates (`#bar?`) wherever it exists.\r\n2. If there is a need for a term covering both, use \"predicate\". (I know that's not ideal, but it's not a regression, and that is all I care about in the context of this PR.)\r\n3. In code, `pred` is fine as a shorthand for both -- only exposed API and docs are critical.\r\n\r\n(Treesitter docs are still a bit of a mess and require a general cleanup once we're happier with the general shape of things and have a clearer view of what we _want_ to document, and how.)",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-21T11:20:30Z",
            "diff_hunk": "@@ -4,6 +4,59 @@ local memoize = vim.func._memoize\n \n local M = {}\n \n+local function is_directive(name)\n+  return string.sub(name, -1) == '!'\n+end\n+\n+---@nodoc\n+---@class vim.treesitter.query.ProcessedPred",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1894605283",
            "id": 1894605283,
            "in_reply_to_id": 1894479177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7WHj",
            "original_commit_id": "6c69b0ba7976e8767c0f2d07ac4fb8a15eea4625",
            "original_line": 12,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2518631618,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894605283/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T11:20:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894605283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1894636524"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894636524"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> (We do have add_directive() though!).\r\n\r\nI did a poor job explaining what I was referring to. I meant that docs for `add_predicate()` refer to neovim predicates and docs for `directive_handlers` refer to treesitter predicates. Updated my comment.\r\n\r\nAs for the convention, i think the PR adheres to all three points.",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-21T14:18:51Z",
            "diff_hunk": "@@ -4,6 +4,59 @@ local memoize = vim.func._memoize\n \n local M = {}\n \n+local function is_directive(name)\n+  return string.sub(name, -1) == '!'\n+end\n+\n+---@nodoc\n+---@class vim.treesitter.query.ProcessedPred",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1894636524",
            "id": 1894636524,
            "in_reply_to_id": 1894479177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7dvs",
            "original_commit_id": "6c69b0ba7976e8767c0f2d07ac4fb8a15eea4625",
            "original_line": 12,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2518668348,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894636524/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T14:18:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894636524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31625#discussion_r1894636910"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31625"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894636910"
                }
            },
            "author_association": "MEMBER",
            "body": "Yep, just noting down for reference; no objections to your PR.",
            "commit_id": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
            "created_at": "2024-12-21T14:22:12Z",
            "diff_hunk": "@@ -4,6 +4,59 @@ local memoize = vim.func._memoize\n \n local M = {}\n \n+local function is_directive(name)\n+  return string.sub(name, -1) == '!'\n+end\n+\n+---@nodoc\n+---@class vim.treesitter.query.ProcessedPred",
            "html_url": "https://github.com/neovim/neovim/pull/31625#discussion_r1894636910",
            "id": 1894636910,
            "in_reply_to_id": 1894479177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7d1u",
            "original_commit_id": "6c69b0ba7976e8767c0f2d07ac4fb8a15eea4625",
            "original_line": 12,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 2518668767,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894636910/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T14:22:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894636910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "cc @ribru17 @lewis6991 ",
            "created_at": "2024-12-19T14:32:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/31625#issuecomment-2554321531",
            "id": 2554321531,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31625",
            "node_id": "IC_kwDOAPphoM6YP9p7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554321531/reactions"
            },
            "updated_at": "2024-12-19T14:32:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554321531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Currently, the term \"predicate\" is used to refer to both tree-sitter predicates and a specific type of predicate that tests a condition.\r\n\r\nUpdated query.lua to refer to the second meaning as \"guard\". Let me know if you think the name should be different. I can also remove this change if it's unnecessary.",
            "created_at": "2024-12-19T22:02:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/31625#issuecomment-2555849241",
            "id": 2555849241,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31625",
            "node_id": "IC_kwDOAPphoM6YVyoZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555849241/reactions"
            },
            "updated_at": "2024-12-19T22:02:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555849241",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "What happened to macos clang unittest?\r\n\r\n<details>\r\n\r\n<summary>part of the log</summary>\r\n\r\n```console\r\nCMake Error at /Users/runner/work/neovim/neovim/cmake/RunTests.cmake:103 (message):\r\n  unit tests failed with error: 1\r\n\r\n\r\n-- Tests exited non-zero: 1\r\n-- Output to stderr:\r\nIn file included from tmp_pseudoheader.h:6859:\r\nIn file included from ././src/nvim/eval/typval.h:10:\r\n/Users/runner/work/neovim/neovim/src/nvim/gettext_defs.h:4:11: fatal error: 'libintl.h' file not found\r\n    4 | # include <libintl.h>  // IWYU pragma: export\r\n      |           ^~~~~~~~~~~\r\n1 error generated.\r\nIn file included from tmp_pseudoheader.h:6859:\r\nIn file included from ././src/nvim/eval/typval.h:10:\r\n/Users/runner/work/neovim/neovim/src/nvim/gettext_defs.h:4:11: fatal error: 'libintl.h' file not found\r\n    4 | # include <libintl.h>  // IWYU pragma: export\r\n      |           ^~~~~~~~~~~\r\n1 error generated.\r\ntmp_pseudoheader.h:3880:10: fatal error: './src/nvim/api/private/t.h' file not found\r\n 3880 | #include \"./src/nvim/api/private/t.h\"\r\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n1 error generated.\r\ntmp_pseudoheader.h:3880:10: fatal error: './src/nvim/api/private/t.h' file not found\r\n 3880 | #include \"./src/nvim/api/private/t.h\"\r\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n1 error generated.\r\nIn file included from tmp_pseudoheader.h:4:\r\nIn file included from ././src/nvim/buffer.h:8:\r\n/Users/runner/work/neovim/neovim/src/nvim/gettext_defs.h:4:11: fatal error: 'libintl.h' file not found\r\n    4 | # include <libintl.h>  // IWYU pragma: export\r\n      |           ^~~~~~~~~~~\r\n1 error generated.\r\nIn file included from tmp_pseudoheader.h:4:\r\nIn file included from ././src/nvim/buffer.h:8:\r\n/Users/runner/work/neovim/neovim/src/nvim/gettext_defs.h:4:11: fatal error: 'libintl.h' file not found\r\n    4 | # include <libintl.h>  // IWYU pragma: export\r\n      |           ^~~~~~~~~~~\r\n1 error generated.\r\nE94: No matching buffer for _test_\r\nE94: No matching buffer for _test_\r\nE94: No matching buffer for _test_E94: No matching buffer for testIn file included from tmp_pseudoheader.h:1950:\r\nIn file included from ././src/nvim/eval/typval.h:10:\r\n/Users/runner/work/neovim/neovim/src/nvim/gettext_defs.h:4:11: fatal error: 'libintl.h' file not found\r\n    4 | # include <libintl.h>  // IWYU pragma: export\r\n      |           ^~~~~~~~~~~\r\n1 error generated.\r\nIn file included from tmp_pseudoheader.h:1950:\r\nIn file included from ././src/nvim/eval/typval.h:10:\r\n/Users/runner/work/neovim/neovim/src/nvim/gettext_defs.h:4:11: fatal error: 'libintl.h' file not found\r\n    4 | # include <libintl.h>  // IWYU pragma: export\r\n      |           ^~~~~~~~~~~\r\n1 error generated.\r\nE474: No container to close: ]\r\nE474: Closing list with curly bracket: }\r\nE474: Closing dictionary with square bracket: ]\r\nE474: Trailing comma: ]\r\nE474: Expected value after colon: }\r\nE474: Expected value: }\r\nE474: Comma not inside container: ,\r\nE474: Duplicate comma: ,1]\r\nE474: Comma after colon: ,}\r\nE474: Using comma in place of colon: ,}\r\nE474: Leading comma: ,}\r\nE474: Leading comma: ,]\r\nE474: Colon not inside container: :\r\nE474: Using colon not in dictionary: :]\r\nE474: Unexpected colon: :}\r\nE474: Duplicate colon: :1}\r\nE474: Expected null: n\r\nE474: Expected true: t\r\nE474: Expected false: f\r\nE474: Unfinished escape sequence: \"\\\r\nE474: Unfinished unicode escape sequence: \"\\u\"\r\nE474: Expected four hex digits after \\u: \\uXXXX\"\r\nE474: Unknown escape sequence: \\?\"\r\nE474: ASCII control characters cannot be present inside string: ^I\"\r\nE474: Only UTF-8 strings allowed: <c2>\"\r\nE474: Only UTF-8 code points up to U+10FFFF are allowed to appear unescaped: ������\"\r\nE474: Expected string end: \"\r\nE474: Missing number after minus sign: -\r\nE474: Missing number after decimal dot: -1.\r\nE474: Missing exponent: -1.0e\r\nE474: Unidentified byte: ?\r\nE474: Trailing characters: ?\r\n```\r\n\r\n</details>",
            "created_at": "2024-12-19T22:05:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/31625#issuecomment-2555853607",
            "id": 2555853607,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31625",
            "node_id": "IC_kwDOAPphoM6YVzsn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555853607/reactions"
            },
            "updated_at": "2024-12-19T22:05:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555853607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What happened to macos clang unittest?\r\n\r\nNothing; it's always been flaky.",
            "created_at": "2024-12-19T22:10:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/31625#issuecomment-2555859207",
            "id": 2555859207,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31625",
            "node_id": "IC_kwDOAPphoM6YV1EH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555859207/reactions"
            },
            "updated_at": "2024-12-19T22:10:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555859207",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Currently, the term \"predicate\" is used to refer to both tree-sitter predicates and a specific type of predicate that tests a condition. Updated query.lua to refer to the second meaning as \"guard\".\r\n\r\nWe use `cond` (condition) in various places. Oh, but I see that \"guards\" is user-facing in the docs too, so \"conds\" would be obscure there, and \"conditions\" is presumably too vague. ",
            "created_at": "2024-12-20T11:17:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/31625#issuecomment-2556800967",
            "id": 2556800967,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31625",
            "node_id": "IC_kwDOAPphoM6YZa_H",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2556800967/reactions"
            },
            "updated_at": "2024-12-20T11:20:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2556800967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Currently, the term \"predicate\" is used to refer to both tree-sitter predicates and a specific type of predicate that tests a condition.\r\n\r\nPlease stick to the industry-standard \"predicate\"  here; using our own terminology without need just introduces confusion. _All_ predicates test a condition.",
            "created_at": "2024-12-20T11:24:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/31625#issuecomment-2556811319",
            "id": 2556811319,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31625",
            "node_id": "IC_kwDOAPphoM6YZdg3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2556811319/reactions"
            },
            "updated_at": "2024-12-20T11:24:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2556811319",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> _All_ predicates test a condition.\r\n\r\nTree-sitter refers to `#set!` directive as a predicate on its website: \r\nhttps://tree-sitter.github.io/tree-sitter/syntax-highlighting\r\n![image](https://github.com/user-attachments/assets/d0fa825f-c432-454a-b027-974a6d242304)\r\n\r\nAnd the term \"directive\" doesn't appear in tree-sitter repo.\r\n\r\nI'll remove the last commit.\r\n",
            "created_at": "2024-12-20T18:02:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/31625#issuecomment-2557477466",
            "id": 2557477466,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31625",
            "node_id": "IC_kwDOAPphoM6YcAJa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557477466/reactions"
            },
            "updated_at": "2024-12-20T18:02:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557477466",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yeah, that's unfortunate, but the docs are... in need of improvement. Still, our usage has been consistent for years, so we shouldn't change it now (without _very_ good reason).",
            "created_at": "2024-12-20T18:03:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/31625#issuecomment-2557479490",
            "id": 2557479490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31625",
            "node_id": "IC_kwDOAPphoM6YcApC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557479490/reactions"
            },
            "updated_at": "2024-12-20T18:03:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557479490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31625/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31625/commits",
    "created_at": "2024-12-18T19:13:32Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31625.diff",
    "draft": false,
    "head": {
        "label": "vanaigr:iter_captures-cache",
        "ref": "iter_captures-cache",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/vanaigr/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/vanaigr/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/vanaigr/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/vanaigr/neovim/branches{/branch}",
            "clone_url": "https://github.com/vanaigr/neovim.git",
            "collaborators_url": "https://api.github.com/repos/vanaigr/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/vanaigr/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/vanaigr/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/vanaigr/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/vanaigr/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/vanaigr/neovim/contributors",
            "created_at": "2023-12-05T22:08:59Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/vanaigr/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/vanaigr/neovim/downloads",
            "events_url": "https://api.github.com/repos/vanaigr/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/vanaigr/neovim/forks",
            "full_name": "vanaigr/neovim",
            "git_commits_url": "https://api.github.com/repos/vanaigr/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/vanaigr/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/vanaigr/neovim/git/tags{/sha}",
            "git_url": "git://github.com/vanaigr/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/vanaigr/neovim/hooks",
            "html_url": "https://github.com/vanaigr/neovim",
            "id": 727936921,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/vanaigr/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/vanaigr/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/vanaigr/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/vanaigr/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/vanaigr/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/vanaigr/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/vanaigr/neovim/merges",
            "milestones_url": "https://api.github.com/repos/vanaigr/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK2NvmQ",
            "notifications_url": "https://api.github.com/repos/vanaigr/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/vanaigr/neovim/pulls{/number}",
            "pushed_at": "2024-12-23T05:26:25Z",
            "releases_url": "https://api.github.com/repos/vanaigr/neovim/releases{/id}",
            "size": 291843,
            "ssh_url": "git@github.com:vanaigr/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/vanaigr/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/vanaigr/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/vanaigr/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/vanaigr/neovim/subscription",
            "svn_url": "https://github.com/vanaigr/neovim",
            "tags_url": "https://api.github.com/repos/vanaigr/neovim/tags",
            "teams_url": "https://api.github.com/repos/vanaigr/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/vanaigr/neovim/git/trees{/sha}",
            "updated_at": "2024-12-18T07:07:56Z",
            "url": "https://api.github.com/repos/vanaigr/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
            "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
            "followers_url": "https://api.github.com/users/vanaigr/followers",
            "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/vanaigr",
            "id": 65824523,
            "login": "vanaigr",
            "node_id": "MDQ6VXNlcjY1ODI0NTIz",
            "organizations_url": "https://api.github.com/users/vanaigr/orgs",
            "received_events_url": "https://api.github.com/users/vanaigr/received_events",
            "repos_url": "https://api.github.com/users/vanaigr/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/vanaigr",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31625",
    "id": 2242930377,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31625",
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "e0ea14487a90251cdb7d63176d59898f2bd10fd9",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6FsGbJ",
    "number": 31625,
    "patch_url": "https://github.com/neovim/neovim/pull/31625.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl",
            "user_view_type": "public"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
            "events_url": "https://api.github.com/users/clason/events{/privacy}",
            "followers_url": "https://api.github.com/users/clason/followers",
            "following_url": "https://api.github.com/users/clason/following{/other_user}",
            "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/clason",
            "id": 2361214,
            "login": "clason",
            "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
            "organizations_url": "https://api.github.com/users/clason/orgs",
            "received_events_url": "https://api.github.com/users/clason/received_events",
            "repos_url": "https://api.github.com/users/clason/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/clason",
            "user_view_type": "public"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31625/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/bbd1373e1209b3b221527e35e6466e58ed2fd0a1",
    "title": "perf(decor): improve `iter_captures()` cache",
    "updated_at": "2024-12-21T14:22:12Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31625",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
        "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vanaigr/followers",
        "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vanaigr",
        "id": 65824523,
        "login": "vanaigr",
        "node_id": "MDQ6VXNlcjY1ODI0NTIz",
        "organizations_url": "https://api.github.com/users/vanaigr/orgs",
        "received_events_url": "https://api.github.com/users/vanaigr/received_events",
        "repos_url": "https://api.github.com/users/vanaigr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vanaigr",
        "user_view_type": "public"
    }
}