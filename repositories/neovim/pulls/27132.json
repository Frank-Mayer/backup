{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27132/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27132/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/27132"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27132"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27132/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/4da13cddea1ba0c1f9425a654176857d1b9a0b0d"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5099,
            "forks_count": 5099,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1723,
            "open_issues_count": 1723,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-02-27T00:47:43Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 257650,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 74318,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-02-27T01:34:35Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 74318,
            "watchers_count": 74318,
            "web_commit_signoff_required": false
        },
        "sha": "cb5ae22eab1fbb3162d0f7440a48ad49c7b3c48e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Tree-sitter queries can add URLs to a capture using the `#set!` directive, e.g.\r\n\r\n    (inline_link\r\n      (link_text) @text.reference\r\n      (link_destination) @text.uri\r\n      (#set! @text.reference \"url\" @text.uri))\r\n\r\nThe `#set!` directive is modified to accept other captures as the argument, which includes the captured node in the metadata table.\r\n\r\nIn order to support directives which reference other nodes, the highlighter must be updated to use `iter_matches` rather than `iter_captures` since the former provides the `match` table which maps capture IDs to nodes.\r\n\r\n---\r\n\r\nBlocked by:\r\n\r\n- [x] https://github.com/neovim/neovim/pull/27131\r\n- [x] https://github.com/neovim/neovim/pull/27109\r\n- [X] https://github.com/neovim/neovim/pull/24738\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1470590334"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1470590334"
                }
            },
            "author_association": "MEMBER",
            "body": "Are we sure `state.highlighter_query:query()` won't be nil?",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-01-30T04:55:34Z",
            "diff_hunk": "@@ -259,19 +259,21 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n \n     if state.iter == nil or state.next_row < line then\n       state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+        state.highlighter_query:query():iter_matches(root_node, self.bufnr, line, root_end_row + 1)",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1470590334",
            "id": 1470590334,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Xp21-",
            "original_commit_id": "d9966e8a56ad974f0a11d999f08a8489ed31bfe7",
            "original_line": 262,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1850227084,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1470590334/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-30T04:56:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1470590334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1498828387"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1498828387"
                }
            },
            "author_association": "MEMBER",
            "body": "How does this interact with the conceal later? (What happens if `conceallevel` is set?)",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-22T08:15:55Z",
            "diff_hunk": "@@ -33,6 +33,11 @@\n   ] @markup.link\n   (#set! conceal \"\"))\n \n+(inline_link\n+  (link_text) @markup.link.label\n+  (link_destination) @markup.link\n+  (#set! @markup.link.label \"url\" @markup.link))",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1498828387",
            "id": 1498828387,
            "line": 39,
            "node_id": "PRRC_kwDOAPphoM5ZVk5j",
            "original_commit_id": "b1d3c334caec83cdb3ce5d6e9df12fabebbcde25",
            "original_line": 39,
            "original_position": 7,
            "original_start_line": 36,
            "path": "runtime/queries/markdown_inline/highlights.scm",
            "position": 7,
            "pull_request_review_id": 1895190713,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1498828387/reactions"
            },
            "side": "RIGHT",
            "start_line": 36,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-22T08:15:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1498828387",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1500836873"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1500836873"
                }
            },
            "author_association": "MEMBER",
            "body": "It works beautifully https://github.com/neovim/neovim/pull/27109#issuecomment-1902244611",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T15:35:50Z",
            "diff_hunk": "@@ -33,6 +33,11 @@\n   ] @markup.link\n   (#set! conceal \"\"))\n \n+(inline_link\n+  (link_text) @markup.link.label\n+  (link_destination) @markup.link\n+  (#set! @markup.link.label \"url\" @markup.link))",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1500836873",
            "id": 1500836873,
            "in_reply_to_id": 1498828387,
            "line": 39,
            "node_id": "PRRC_kwDOAPphoM5ZdPQJ",
            "original_commit_id": "b1d3c334caec83cdb3ce5d6e9df12fabebbcde25",
            "original_line": 39,
            "original_position": 7,
            "original_start_line": 36,
            "path": "runtime/queries/markdown_inline/highlights.scm",
            "position": 7,
            "pull_request_review_id": 1898395691,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1500836873/reactions"
            },
            "side": "RIGHT",
            "start_line": 36,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-23T15:35:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1500836873",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1500998407"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1500998407"
                }
            },
            "author_association": "MEMBER",
            "body": "Q: Is this line covered by tests? `get_node_text()` expects the third argument to be `opt = { metadata = ... }`, so it looks like we are not passing the correct argument.",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T17:53:46Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1500998407",
            "id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Zd2sH",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898652428,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1500998407/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T17:56:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1500998407",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501024488"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501024488"
                }
            },
            "author_association": "MEMBER",
            "body": "I suspect fixing this might fix your errors (since both conceal and injection (language) are metadata) ;)",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T18:22:04Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501024488",
            "id": 1501024488,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Zd9Do",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898695046,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501024488/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T18:22:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501024488",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501031269"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501031269"
                }
            },
            "author_association": "MEMBER",
            "body": "Alas, it was not that easy. I suspect the problem lies deeper (another bug in `iter_matches`).",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T18:29:03Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501031269",
            "id": 1501031269,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Zd-tl",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898705788,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501031269/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T18:29:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501031269",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501038421"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501038421"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok I think I understand what's happening. The vimdoc query uses patterns like this:\r\n\r\n```\r\n(tag\r\n  \"*\" @markup.heading.5.marker\r\n  (#set! conceal \"\")\r\n  text: (_) @label)\r\n```\r\n\r\nBut with `iter_matches`, the `#set!` directive now applies to the *whole pattern*, whereas with `iter_captures` it would have applied only to the previous capture(?).",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T18:36:47Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501038421",
            "id": 1501038421,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZeAdV",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898717069,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501038421/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T18:36:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501038421",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501040507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501040507"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, that's a fairly common pattern in nvim-treesitter (also with predicates).",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T18:38:17Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501040507",
            "id": 1501040507,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZeA97",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898719601,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501040507/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T18:38:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501040507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501043648"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501043648"
                }
            },
            "author_association": "MEMBER",
            "body": "The solution is to make it more explicit about _what_ should be concealed:\r\n\r\n```\r\n(taglink\r\n  \"|\" @markup.link.delimiter\r\n  (#set! @markup.link.delimiter conceal \"\")\r\n  text: (_) @markup.link)\r\n```\r\n\r\nThis is (imo) more explicit and easier to understand. But at the obvious cost of being (yet another) breaking change.",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T18:41:17Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501043648",
            "id": 1501043648,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZeBvA",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898723811,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501043648/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T18:41:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501043648",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501045141"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501045141"
                }
            },
            "author_association": "MEMBER",
            "body": "I consider that acceptable (since indeed better because more explicit). And fairly straightforward to fix, though tedious. ",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T18:42:57Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501045141",
            "id": 1501045141,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZeCGV",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898726152,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501045141/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T18:42:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501045141",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501045772"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501045772"
                }
            },
            "author_association": "MEMBER",
            "body": "For highlight queries; adapting injections would be a mess...",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T18:43:39Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501045772",
            "id": 1501045772,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZeCQM",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898727111,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501045772/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T18:43:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501045772",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501047897"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501047897"
                }
            },
            "author_association": "MEMBER",
            "body": "(Probably also applies to priority.)",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T18:46:13Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501047897",
            "id": 1501047897,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZeCxZ",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898730729,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501047897/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T18:46:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501047897",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501085726"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501085726"
                }
            },
            "author_association": "MEMBER",
            "body": "Vimdoc conceal issues should be fixed. @wookayin can you give me more info on the Markdown and injection issues? Haven't been able to find anything yet.",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T19:27:36Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501085726",
            "id": 1501085726,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZeMAe",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898798504,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501085726/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T19:27:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501085726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501147540"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501147540"
                }
            },
            "author_association": "MEMBER",
            "body": "Please never mind about Markdown. I think conceals are fine with Markdown. For injections I will try to find a repro and let you know in another place.\r\n\r\nUsing the new vimdoc highlight query, conceals in vimdoc now look fine. One concern is that this new query doesn't work fully backward-compatible with the previous highlighter implementation (nvim 0.9.x or on the current master): \\`, `*`, `|` are no longer hidden. This might be a bit problematic because the query files from `nvim-treesitter` also need to be updated.\r\n\r\n",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T20:42:53Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501147540",
            "id": 1501147540,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZebGU",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898900432,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501147540/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T20:43:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501147540",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501151470"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501151470"
                }
            },
            "author_association": "MEMBER",
            "body": "I trust @clason to handle the situation with nvim-treesitter. When this PR is merged we can update the queries on the `main` branch of nvim-treesitter which is intended to work with 0.10 only.",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T20:48:05Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501151470",
            "id": 1501151470,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZecDu",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898907105,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501151470/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T20:48:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501151470",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501168783"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501168783"
                }
            },
            "author_association": "MEMBER",
            "body": "This would mean that the master branch will remain locked at 0.9, and that nightly users are forced into main. \n\nIf only we had conditional queries... *cough*",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T21:11:03Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501168783",
            "id": 1501168783,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZegSP",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898936602,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501168783/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T21:11:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501168783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27132#discussion_r1501169792"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27132"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501169792"
                }
            },
            "author_association": "MEMBER",
            "body": "Might have to bite the bullet and backport (part of) this. ",
            "commit_id": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
            "created_at": "2024-02-23T21:12:27Z",
            "diff_hunk": "@@ -258,51 +258,69 @@ local function on_line_impl(self, buf, line, is_spell_nav)\n     end\n \n     if state.iter == nil or state.next_row < line then\n-      state.iter =\n-        state.highlighter_query:query():iter_captures(root_node, self.bufnr, line, root_end_row + 1)\n+      state.iter = state.highlighter_query\n+        :query()\n+        :iter_matches(root_node, self.bufnr, line, root_end_row + 1, { all = true })\n     end\n \n     while line >= state.next_row do\n-      local capture, node, metadata = state.iter(line)\n+      local pattern, match, metadata = state.iter()\n \n-      local range = { root_end_row + 1, 0, root_end_row + 1, 0 }\n-      if node then\n-        range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+      if not match then\n+        state.next_row = root_end_row + 1\n       end\n-      local start_row, start_col, end_row, end_col = Range.unpack4(range)\n \n-      if capture then\n-        local hl = state.highlighter_query:get_hl_from_capture(capture)\n-\n-        local capture_name = state.highlighter_query:query().captures[capture]\n-        local spell = nil ---@type boolean?\n-        if capture_name == 'spell' then\n-          spell = true\n-        elseif capture_name == 'nospell' then\n-          spell = false\n-        end\n-\n-        -- Give nospell a higher priority so it always overrides spell captures.\n-        local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n-\n-        if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n-          local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n-            + spell_pri_offset\n-          api.nvim_buf_set_extmark(buf, ns, start_row, start_col, {\n-            end_line = end_row,\n-            end_col = end_col,\n-            hl_group = hl,\n-            ephemeral = true,\n-            priority = priority,\n-            conceal = metadata.conceal,\n-            spell = spell,\n-          })\n+      for capture, nodes in pairs(match or {}) do\n+        for _, node in ipairs(nodes) do\n+          local range = vim.treesitter.get_range(node, buf, metadata and metadata[capture])\n+          local start_row, start_col, end_row, end_col = Range.unpack4(range)\n+\n+          local hl = state.highlighter_query:get_hl_from_capture(capture)\n+\n+          local capture_name = state.highlighter_query:query().captures[capture]\n+          local spell = nil ---@type boolean?\n+          if capture_name == 'spell' then\n+            spell = true\n+          elseif capture_name == 'nospell' then\n+            spell = false\n+          end\n+\n+          -- Give nospell a higher priority so it always overrides spell captures.\n+          local spell_pri_offset = capture_name == 'nospell' and 1 or 0\n+\n+          if hl and end_row >= line and (not is_spell_nav or spell ~= nil) then\n+            local priority = (tonumber(metadata.priority) or vim.highlight.priorities.treesitter)\n+              + spell_pri_offset\n+            local url = metadata[capture] and metadata[capture].url ---@type string|number|nil\n+            if type(url) == 'number' then\n+              if match and match[url] then\n+                -- Assume there is only one matching node. If there are more than one, take the URL\n+                -- from the first.\n+                local other_node = match[url][1]\n+                url = vim.treesitter.get_node_text(other_node, buf, metadata and metadata[url])",
            "html_url": "https://github.com/neovim/neovim/pull/27132#discussion_r1501169792",
            "id": 1501169792,
            "in_reply_to_id": 1500998407,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZegiA",
            "original_commit_id": "581084bcde45e634b55801aba1268b1c25c9976b",
            "original_line": 300,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 1898938230,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501169792/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-23T21:12:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1501169792",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "If the treesitter highlighter uses `iter_matches` instead of `iter_captures`, doesn't it run into the problem of #17099? I helped rewrite `rainbow-delimiters` to use `iter_captures` instead of `iter_matches`, because we couldn't get the highlighting we wanted with `iter_matches` when there were multiple captures with the same name in one match. ",
            "created_at": "2024-01-23T08:40:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/27132#issuecomment-1905563377",
            "id": 1905563377,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
            "node_id": "IC_kwDOAPphoM5xlJbx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1905563377/reactions"
            },
            "updated_at": "2024-01-23T08:40:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1905563377",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
                "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
                "followers_url": "https://api.github.com/users/Danielkonge/followers",
                "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
                "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Danielkonge",
                "id": 7075380,
                "login": "Danielkonge",
                "node_id": "MDQ6VXNlcjcwNzUzODA=",
                "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
                "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
                "repos_url": "https://api.github.com/users/Danielkonge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Danielkonge"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@Danielkonge Yep you are absolutely right. So this PR is now blocked on _three_ other PRs.",
            "created_at": "2024-01-23T15:52:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/27132#issuecomment-1906362759",
            "id": 1906362759,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
            "node_id": "IC_kwDOAPphoM5xoMmH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 2,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1906362759/reactions"
            },
            "updated_at": "2024-01-23T15:52:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1906362759",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "In discussion on Matrix @wookayin brought up a very good point: can we use the `match` table in `iter_captures` and avoid moving to `iter_matches`?\r\n\r\nIt turns out, we can! `iter_captures` already includes the `match` table which maps capture ids to nodes, which is exactly what we need to support directives that use captures as values (as `#set!` does to set URLs). All we have to do is return it from the `iter_captures` iterator.\r\n\r\nThis is a much simpler change and makes the path forward for this PR clear (and we can probably also revert https://github.com/neovim/neovim/pull/27131 now, since it is no longer needed).",
            "created_at": "2024-01-31T02:07:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/27132#issuecomment-1918238282",
            "id": 1918238282,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
            "node_id": "IC_kwDOAPphoM5yVf5K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 4,
                "laugh": 0,
                "rocket": 3,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1918238282/reactions"
            },
            "updated_at": "2024-01-31T02:07:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1918238282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "With https://github.com/neovim/neovim/pull/24738 merged, I changed this back to use `iter_matches` for highlighting. All tests are passing!\r\n\r\n@lewis6991 @clason @wookayin Please re-review when able. Let's ship this thing.",
            "created_at": "2024-02-22T02:37:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/27132#issuecomment-1958553503",
            "id": 1958553503,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
            "node_id": "IC_kwDOAPphoM50vSef",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1958553503/reactions"
            },
            "updated_at": "2024-02-22T02:37:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1958553503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We probably want to add this to the `(uri_autolink)` node in `markdown_inline` and the `(url)` node in `vimdoc` as well.\r\n\r\n(Adding support to this in nvim-treesitter will be a bigger effort...)",
            "created_at": "2024-02-22T08:18:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/27132#issuecomment-1958923636",
            "id": 1958923636,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
            "node_id": "IC_kwDOAPphoM50ws10",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1958923636/reactions"
            },
            "updated_at": "2024-02-22T08:18:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1958923636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We probably want to add this to the `(uri_autolink)` node in `markdown_inline` and the `(url)` node in `vimdoc` as well.\r\n> \r\n> (Adding support to this in nvim-treesitter will be a bigger effort...)\r\n\r\nIt is not needed for nodes which are _actual_ URLS (like `uri_autolink`) because the terminal emulator will already linkify those (at least every terminal emulator I have ever seen that supports OSC 8 already auto linkifies URLs).",
            "created_at": "2024-02-23T15:38:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/27132#issuecomment-1961551042",
            "id": 1961551042,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
            "node_id": "IC_kwDOAPphoM506uTC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1961551042/reactions"
            },
            "updated_at": "2024-02-23T15:38:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1961551042",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For completeness, I did some benchmarking of the highlighter's `on_line` callback with this PR (using `iter_matches`) and `master` (using `iter_captures`):\r\n\r\n```\r\nThis PR\r\n=======\r\nN=13952, mean=34.048823, std=70.918537, min=0.250000, max=2050.875000\r\n\r\nmaster\r\n======\r\nN=14640, mean=37.406029, std=101.310000, min=0.208000, max=4668.000000\r\n```\r\n\r\nUnits are elapsed microseconds. If anything, using `iter_matches` is slightly _faster_.\r\n\r\n<details>\r\n<summary>Benchmark patch</summary>\r\n\r\n```diff\r\ndiff --git a/runtime/lua/vim/treesitter/highlighter.lua b/runtime/lua/vim/treesitter/highlighter.lua\r\nindex 08c4c2a83..97682d91c 100644\r\n--- a/runtime/lua/vim/treesitter/highlighter.lua\r\n+++ b/runtime/lua/vim/treesitter/highlighter.lua\r\n@@ -307,6 +307,33 @@ local function on_line_impl(self, buf, line, is_spell_nav)\r\n   end)\r\n end\r\n \r\n+local samples = {} ---@type integer[]\r\n+\r\n+function _G.TSStats()\r\n+  local sum = 0\r\n+  local sumsq = 0\r\n+  local min = math.huge\r\n+  local max = 0\r\n+  local n = #samples\r\n+  for i = 1, n  do\r\n+    local sample = samples[i]\r\n+    sum = sum + sample\r\n+    sumsq = sumsq + (sample * sample)\r\n+    if sample > max then\r\n+      max = sample\r\n+    end\r\n+    if sample < min then\r\n+      min = sample\r\n+    end\r\n+  end\r\n+\r\n+  local mean = sum / n\r\n+  local sqsum = sum * sum\r\n+  local std = math.sqrt((sumsq - (sqsum / n)) / (n - 1))\r\n+  print(string.format('N=%d, mean=%f, std=%f, min=%f, max=%f', n, mean, std, min, max))\r\n+  samples = {}\r\n+end\r\n+\r\n ---@private\r\n ---@param _win integer\r\n ---@param buf integer\r\n@@ -317,7 +344,10 @@ function TSHighlighter._on_line(_, _win, buf, line, _)\r\n     return\r\n   end\r\n \r\n+  local start = vim.uv.hrtime()\r\n   on_line_impl(self, buf, line, false)\r\n+  local elapsed = vim.uv.hrtime() - start\r\n+  samples[#samples + 1] = elapsed / 1000\r\n end\r\n \r\n ---@private\r\n```\r\n</details>",
            "created_at": "2024-02-23T16:48:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/27132#issuecomment-1961662610",
            "id": 1961662610,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
            "node_id": "IC_kwDOAPphoM507JiS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1961662610/reactions"
            },
            "updated_at": "2024-02-23T16:48:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1961662610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I find there is a regression: injected highlighting doesn't work for me (e.g. lua -> comment). Also, conceal looks weird to me (e.g. vimdoc/markdown).\r\n\r\nI can repro the conceal breakage in vimdoc. We have a test for conceal, but apparently it's not extensive enough because it didn't catch this.\r\n\r\nCan you give me a repro for the injected highlighting?",
            "created_at": "2024-02-23T18:18:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/27132#issuecomment-1961788419",
            "id": 1961788419,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
            "node_id": "IC_kwDOAPphoM507oQD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1961788419/reactions"
            },
            "updated_at": "2024-02-23T18:18:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1961788419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Here is a repro for highlights with language injection:\r\n\r\n```lua\r\nfor name, url in pairs {\r\n  ['nvim-treesitter'] = 'https://github.com/nvim-treesitter/nvim-treesitter',\r\n} do\r\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\r\n  if vim.fn.isdirectory(install_path) == 0 then\r\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\r\n  end\r\n  -- Important: nvim-treesitter must precede $VIMRUNTIME in &runtimepath\r\n  vim.opt.runtimepath:prepend(install_path)\r\nend\r\n\r\n-- ensure lua and luadoc parser (override the bundled one because of injection queris)\r\nrequire('nvim-treesitter.install').ensure_installed({ 'lua', 'luadoc' })\r\n\r\nvim.cmd [[\r\n  hi! link @comment.luadoc            @comment.documentation\r\n  hi!      @keyword.luadoc            guifg=#a488a6 gui=NONE\r\n  hi! link @keyword.return.luadoc     @keyword.luadoc    \" @return\r\n]]\r\n```\r\n\r\n<img width=\"1045\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/1009873/526e6c43-4ee0-4503-8ab2-e7cc703ea16f\">\r\n\r\nExpected behavior: `@param`, `@return`, etc. in luadoc should be highlighted. `:Inspect` (using `iter_captures`: see `vim.treesitter.get_captures_at_pos`) can detect them. We probably need to change this as well?",
            "created_at": "2024-02-23T21:11:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/27132#issuecomment-1961994537",
            "id": 1961994537,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
            "node_id": "IC_kwDOAPphoM508akp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1961994537/reactions"
            },
            "updated_at": "2024-02-23T21:37:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1961994537",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks @wookayin, I can repro.\r\n\r\nMy guess is that this is related to the ordering that extmarks are applied, which means there are still some cases that our `subpriority` fix is not catching.",
            "created_at": "2024-02-23T21:20:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/27132#issuecomment-1962004801",
            "id": 1962004801,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
            "node_id": "IC_kwDOAPphoM508dFB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1962004801/reactions"
            },
            "updated_at": "2024-02-23T21:20:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1962004801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27132/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/27132/commits",
    "created_at": "2024-01-22T15:13:26Z",
    "diff_url": "https://github.com/neovim/neovim/pull/27132.diff",
    "draft": false,
    "head": {
        "label": "gpanders:treesitter-urls",
        "ref": "treesitter-urls",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/gpanders/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gpanders/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gpanders/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gpanders/neovim/branches{/branch}",
            "clone_url": "https://github.com/gpanders/neovim.git",
            "collaborators_url": "https://api.github.com/repos/gpanders/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gpanders/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/gpanders/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gpanders/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gpanders/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gpanders/neovim/contributors",
            "created_at": "2021-06-11T03:58:44Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gpanders/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/gpanders/neovim/downloads",
            "events_url": "https://api.github.com/repos/gpanders/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gpanders/neovim/forks",
            "full_name": "gpanders/neovim",
            "git_commits_url": "https://api.github.com/repos/gpanders/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gpanders/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gpanders/neovim/git/tags{/sha}",
            "git_url": "git://github.com/gpanders/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/gpanders/neovim/hooks",
            "html_url": "https://github.com/gpanders/neovim",
            "id": 375899052,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/gpanders/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gpanders/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gpanders/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/gpanders/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gpanders/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/gpanders/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gpanders/neovim/merges",
            "milestones_url": "https://api.github.com/repos/gpanders/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzU4OTkwNTI=",
            "notifications_url": "https://api.github.com/repos/gpanders/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gpanders/neovim/pulls{/number}",
            "pushed_at": "2024-02-26T17:33:19Z",
            "releases_url": "https://api.github.com/repos/gpanders/neovim/releases{/id}",
            "size": 251599,
            "ssh_url": "git@github.com:gpanders/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gpanders/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/gpanders/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gpanders/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/gpanders/neovim/subscription",
            "svn_url": "https://github.com/gpanders/neovim",
            "tags_url": "https://api.github.com/repos/gpanders/neovim/tags",
            "teams_url": "https://api.github.com/repos/gpanders/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/gpanders/neovim/git/trees{/sha}",
            "updated_at": "2022-01-07T19:38:08Z",
            "url": "https://api.github.com/repos/gpanders/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/27132",
    "id": 1690029997,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27132",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f17692fb207ec7cc6b733a7c0c744087e33cff90",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5ku8-t",
    "number": 27132,
    "patch_url": "https://github.com/neovim/neovim/pull/27132.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/27132/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/4da13cddea1ba0c1f9425a654176857d1b9a0b0d",
    "title": "feat(treesitter): support URLs",
    "updated_at": "2024-02-23T21:37:48Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/27132",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
        "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gpanders/followers",
        "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gpanders",
        "id": 8965202,
        "login": "gpanders",
        "node_id": "MDQ6VXNlcjg5NjUyMDI=",
        "organizations_url": "https://api.github.com/users/gpanders/orgs",
        "received_events_url": "https://api.github.com/users/gpanders/received_events",
        "repos_url": "https://api.github.com/users/gpanders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gpanders"
    }
}