{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27339/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27339/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/27339"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27339"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27339/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/0aa2bf65a71d90e2ad311b47189929bd68260163"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5132,
            "forks_count": 5132,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1727,
            "open_issues_count": 1727,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-03-11T23:50:40Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 260739,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 74877,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-03-12T01:41:51Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 74877,
            "watchers_count": 74877,
            "web_commit_signoff_required": false
        },
        "sha": "8ba552bd59b0ed9f316ad1473126b603f35c912a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Closes #25714",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27339#discussion_r1493820152"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1493820152"
                }
            },
            "author_association": "MEMBER",
            "body": "Reluctant to add \"attach to client\" (or \"attach to completion\") as yet another way to extend the LSP client. There are already so many ways: start, callbacks, protocol handlers (local and global).\r\n\r\n> Make it opt-in via a `vim.lsp.completion.attach(client, bufnr, [opts])` method\r\n\r\nIf we enabled it by default, then it could be _opt-out_, by documenting how to delete the `CompleteDone` handler. Any problem with that?\r\n\r\nAlternatively, for _opt-in_ behavior, we could document how to define a `CompleteDone` handler that calls a function we provide. \r\n",
            "commit_id": "0aa2bf65a71d90e2ad311b47189929bd68260163",
            "created_at": "2024-02-18T18:22:54Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local M = {}\n+\n+--- @class vim.lsp.completion.BufHandle\n+--- @field clients table<integer, lsp.Client>\n+--- @field triggers table<string, lsp.Client[]>\n+\n+--- @type table<integer, vim.lsp.completion.BufHandle>\n+local buf_handles = {}\n+\n+local function complete_done() end\n+\n+--- Initializes the completion commands for the given client.\n+---\n+--- @param client lsp.Client\n+local function init_commands(client)\n+  local trigger_completion_cmd = 'editor.action.triggerSuggest'\n+\n+  -- Check if the command is in the global registry or in the client's commands.\n+  if\n+    not vim.lsp.commands[trigger_completion_cmd] and not client.commands[trigger_completion_cmd]\n+  then\n+    client.commands[trigger_completion_cmd] = function()\n+      local ok, res = pcall(M.trigger_completion)\n+      return ok and vim.NIL\n+        or vim.lsp.rpc_response_error(vim.lsp.protocol.ErrorCodes.InternalError, res)\n+    end\n+  end\n+end\n+\n+function M.trigger_completion() end\n+\n+--- TODO(mariasolos): Document.\n+---\n+--- @param client_id integer Client ID\n+--- @param bufnr integer Buffer handle, or 0 for the current buffer\n+function M.attach(client_id, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/27339#discussion_r1493820152",
            "id": 1493820152,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZCeL4",
            "original_commit_id": "baf818cc1dbfef9bd864fd27065c050370223bf4",
            "original_line": 261,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 1887302138,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1493820152/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-18T18:25:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1493820152",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27339#discussion_r1493835482"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1493835482"
                }
            },
            "author_association": "MEMBER",
            "body": "I think I prefer opt-in, at least while we develop this feature and make sure it has everything we want/need of core LSP completion.",
            "commit_id": "0aa2bf65a71d90e2ad311b47189929bd68260163",
            "created_at": "2024-02-18T20:05:46Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local M = {}\n+\n+--- @class vim.lsp.completion.BufHandle\n+--- @field clients table<integer, lsp.Client>\n+--- @field triggers table<string, lsp.Client[]>\n+\n+--- @type table<integer, vim.lsp.completion.BufHandle>\n+local buf_handles = {}\n+\n+local function complete_done() end\n+\n+--- Initializes the completion commands for the given client.\n+---\n+--- @param client lsp.Client\n+local function init_commands(client)\n+  local trigger_completion_cmd = 'editor.action.triggerSuggest'\n+\n+  -- Check if the command is in the global registry or in the client's commands.\n+  if\n+    not vim.lsp.commands[trigger_completion_cmd] and not client.commands[trigger_completion_cmd]\n+  then\n+    client.commands[trigger_completion_cmd] = function()\n+      local ok, res = pcall(M.trigger_completion)\n+      return ok and vim.NIL\n+        or vim.lsp.rpc_response_error(vim.lsp.protocol.ErrorCodes.InternalError, res)\n+    end\n+  end\n+end\n+\n+function M.trigger_completion() end\n+\n+--- TODO(mariasolos): Document.\n+---\n+--- @param client_id integer Client ID\n+--- @param bufnr integer Buffer handle, or 0 for the current buffer\n+function M.attach(client_id, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/27339#discussion_r1493835482",
            "id": 1493835482,
            "in_reply_to_id": 1493820152,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZCh7a",
            "original_commit_id": "baf818cc1dbfef9bd864fd27065c050370223bf4",
            "original_line": 261,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 1887317085,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1493835482/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-18T20:05:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1493835482",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27339#discussion_r1494923283"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1494923283"
                }
            },
            "author_association": "MEMBER",
            "body": "These are only needed when we want to trigger completion when deleting. `lsp_compl` makes this configurable, but I think we should just always enable it here (?). WDYT?",
            "commit_id": "0aa2bf65a71d90e2ad311b47189929bd68260163",
            "created_at": "2024-02-19T18:41:28Z",
            "diff_hunk": "@@ -0,0 +1,128 @@\n+local M = {}\n+\n+--- @class vim.lsp.completion.BufHandle\n+--- @field clients table<integer, lsp.Client>\n+--- @field triggers table<string, lsp.Client[]>\n+\n+--- @type table<integer, vim.lsp.completion.BufHandle>\n+local buf_handles = {}\n+\n+--- @param handle vim.lsp.completion.BufHandle\n+local function insert_char_pre_cb(handle) end\n+\n+local function text_changed_p_cb() end\n+\n+local function text_changed_i_cb() end\n+\n+local function insert_leave_cb() end\n+\n+local function complete_done_cb() end\n+\n+--- Initializes the completion commands for the given client.\n+---\n+--- @param client lsp.Client\n+local function init_commands(client)\n+  local trigger_completion_cmd = 'editor.action.triggerSuggest'\n+\n+  -- Check if the command is in the global registry or in the client's commands.\n+  if\n+    not vim.lsp.commands[trigger_completion_cmd] and not client.commands[trigger_completion_cmd]\n+  then\n+    client.commands[trigger_completion_cmd] = function()\n+      pcall(M.trigger_completion)\n+    end\n+  end\n+end\n+\n+function M.trigger_completion() end\n+\n+--- TODO(mariasolos): Document.\n+---\n+--- @param client_id integer Client ID\n+--- @param bufnr integer Buffer handle, or 0 for the current buffer\n+function M.attach(client_id, bufnr)\n+  bufnr = (bufnr == 0 and vim.api.nvim_get_current_buf()) or bufnr\n+\n+  if not buf_handles[bufnr] then\n+    buf_handles[bufnr] = { clients = {}, triggers = {} }\n+\n+    -- Attach to buffer events.\n+    vim.api.nvim_buf_attach(bufnr, false, {\n+      on_detach = function(_, buf)\n+        buf_handles[buf] = nil\n+      end,\n+      on_reload = function(_, buf)\n+        M.attach(client_id, buf)\n+      end,\n+    })\n+\n+    -- Set up autocommands.\n+    local group =\n+      vim.api.nvim_create_augroup(string.format('vim/lsp/completion-%d', bufnr), { clear = true })\n+    vim.api.nvim_create_autocmd('InsertCharPre', {\n+      group = group,\n+      buffer = bufnr,\n+      callback = function()\n+        insert_char_pre_cb(buf_handles[bufnr])\n+      end,\n+    })\n+    vim.api.nvim_create_autocmd('TextChangedP', {\n+      group = group,\n+      buffer = bufnr,\n+      callback = function()\n+        text_changed_p_cb()\n+      end,\n+    })\n+    vim.api.nvim_create_autocmd('TextChangedI', {\n+      group = group,\n+      buffer = bufnr,\n+      callback = function()\n+        text_changed_i_cb()\n+      end,\n+    })",
            "html_url": "https://github.com/neovim/neovim/pull/27339#discussion_r1494923283",
            "id": 1494923283,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZGrgT",
            "original_commit_id": "0d2340935bea14217f4c98755899a330da76d8a2",
            "original_line": 300,
            "original_position": 82,
            "original_start_line": 69,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 1889009848,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1494923283/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-19T18:41:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1494923283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27339#discussion_r1515390941"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515390941"
                }
            },
            "author_association": "MEMBER",
            "body": "[`lsp_compl`](https://github.com/mfussenegger/nvim-lsp-compl/blob/512abbbf40ca98e50b69f70a45e73496adfcc3ee/lua/lsp_compl.lua#L875) also includes `'detail'` and `'documentation'` here, but I'm unsure of doing that since there's actually no support for fetching that when resolving a completion item. If not present in the original completion request, those just default to an empty string.",
            "commit_id": "0aa2bf65a71d90e2ad311b47189929bd68260163",
            "created_at": "2024-03-07T02:20:40Z",
            "diff_hunk": "@@ -744,14 +744,15 @@ function protocol.make_client_capabilities()\n       completion = {\n         dynamicRegistration = false,\n         completionItem = {\n-          -- Until we can actually expand snippet, move cursor and allow for true snippet experience,\n-          -- this should be disabled out of the box.\n-          -- However, users can turn this back on if they have a snippet plugin.\n-          snippetSupport = false,\n+          snippetSupport = true,\n           commitCharactersSupport = false,\n           preselectSupport = false,\n           deprecatedSupport = false,\n           documentationFormat = { protocol.MarkupKind.Markdown, protocol.MarkupKind.PlainText },\n+          resolveSupport = {",
            "html_url": "https://github.com/neovim/neovim/pull/27339#discussion_r1515390941",
            "id": 1515390941,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5aUwfd",
            "original_commit_id": "894946c5cb7a2d5afb15322772d43d244dd5a7f4",
            "original_line": 752,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1921277647,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515390941/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-07T02:20:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515390941",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27339#discussion_r1515426713"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515426713"
                }
            },
            "author_association": "MEMBER",
            "body": "I've made the feature enabled by default, documenting how to disable it if desired. Lmk what you think @justinmk :)",
            "commit_id": "0aa2bf65a71d90e2ad311b47189929bd68260163",
            "created_at": "2024-03-07T03:09:45Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local M = {}\n+\n+--- @class vim.lsp.completion.BufHandle\n+--- @field clients table<integer, lsp.Client>\n+--- @field triggers table<string, lsp.Client[]>\n+\n+--- @type table<integer, vim.lsp.completion.BufHandle>\n+local buf_handles = {}\n+\n+local function complete_done() end\n+\n+--- Initializes the completion commands for the given client.\n+---\n+--- @param client lsp.Client\n+local function init_commands(client)\n+  local trigger_completion_cmd = 'editor.action.triggerSuggest'\n+\n+  -- Check if the command is in the global registry or in the client's commands.\n+  if\n+    not vim.lsp.commands[trigger_completion_cmd] and not client.commands[trigger_completion_cmd]\n+  then\n+    client.commands[trigger_completion_cmd] = function()\n+      local ok, res = pcall(M.trigger_completion)\n+      return ok and vim.NIL\n+        or vim.lsp.rpc_response_error(vim.lsp.protocol.ErrorCodes.InternalError, res)\n+    end\n+  end\n+end\n+\n+function M.trigger_completion() end\n+\n+--- TODO(mariasolos): Document.\n+---\n+--- @param client_id integer Client ID\n+--- @param bufnr integer Buffer handle, or 0 for the current buffer\n+function M.attach(client_id, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/27339#discussion_r1515426713",
            "id": 1515426713,
            "in_reply_to_id": 1493820152,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5aU5OZ",
            "original_commit_id": "baf818cc1dbfef9bd864fd27065c050370223bf4",
            "original_line": 261,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 1921358458,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515426713/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-07T03:09:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515426713",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27339#discussion_r1515685683"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515685683"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it's possible to use `client._exec_cmd` here instead (it's still private, so lsp_compl isn't using it)",
            "commit_id": "0aa2bf65a71d90e2ad311b47189929bd68260163",
            "created_at": "2024-03-07T07:44:10Z",
            "diff_hunk": "@@ -273,4 +381,396 @@ function M.omnifunc(findstart, base)\n   return -2\n end\n \n+--- Initializes the completion commands for the given client.\n+---\n+--- @param client vim.lsp.Client\n+local function init_commands(client)\n+  local trigger_completion_cmd = 'editor.action.triggerSuggest'\n+\n+  -- Check if the command is in the global registry or in the client's commands.\n+  if not lsp.commands[trigger_completion_cmd] and not client.commands[trigger_completion_cmd] then\n+    client.commands[trigger_completion_cmd] = function()\n+      pcall(M.trigger_completion)\n+    end\n+  end\n+end\n+\n+--- @param clients table<integer, vim.lsp.Client>\n+--- @param bufnr integer\n+--- @param win integer\n+--- @param callback fun(responses: table<integer, { err: lsp.ResponseError, result: vim.lsp.CompletionResult }>)\n+--- @return function # Cancellation function\n+local function request(clients, bufnr, win, callback)\n+  local responses = {} --- @type table<integer, { err: lsp.ResponseError, result: any }>\n+  local request_ids = {} --- @type table<integer, integer>\n+  local remaining_requests = vim.tbl_count(clients)\n+\n+  for client_id, client in pairs(clients) do\n+    local params = lsp.util.make_position_params(win, client.offset_encoding)\n+    local ok, request_id = client.request(ms.textDocument_completion, params, function(err, result)\n+      responses[client_id] = { err = err, result = result }\n+      remaining_requests = remaining_requests - 1\n+      if remaining_requests == 0 then\n+        callback(responses)\n+      end\n+    end, bufnr)\n+\n+    if ok then\n+      request_ids[client_id] = request_id\n+    end\n+  end\n+\n+  return function()\n+    for client_id, request_id in pairs(request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client then\n+        client.cancel_request(request_id)\n+      end\n+    end\n+  end\n+end\n+\n+--- @param handle vim.lsp.completion.BufHandle\n+local function insert_char_pre_cb(handle)\n+  if tonumber(vim.fn.pumvisible()) == 1 then\n+    if Context.isIncomplete then\n+      reset_timer(completion_timer)\n+\n+      -- Calling vim.fn.complete while pumvisible will trigger `CompleteDone` for the active completion window,\n+      -- so we suppress it to avoid resetting the completion context.\n+      Context.suppress_completeDone = true\n+\n+      local debounce_ms = next_debounce()\n+      if debounce_ms == 0 then\n+        vim.schedule(M.trigger_completion)\n+      else\n+        completion_timer = new_timer(completion_timer)\n+        completion_timer:start(debounce_ms, 0, vim.schedule_wrap(M.trigger_completion))\n+      end\n+    end\n+\n+    return\n+  end\n+\n+  local char = api.nvim_get_vvar('char')\n+  if not completion_timer and handle.triggers[char] then\n+    completion_timer = assert(vim.uv.new_timer())\n+    completion_timer:start(25, 0, function()\n+      reset_timer(completion_timer)\n+      vim.schedule(M.trigger_completion)\n+    end)\n+  end\n+end\n+\n+local function text_changed_p_cb()\n+  Context.cursor = api.nvim_win_get_cursor(0)\n+end\n+\n+local function text_changed_i_cb()\n+  if not Context.cursor or completion_timer then\n+    return\n+  end\n+\n+  local cursor = api.nvim_win_get_cursor(0)\n+  if cursor[1] == Context.cursor[1] and cursor[2] <= Context.cursor[2] then\n+    completion_timer = new_timer(completion_timer)\n+    completion_timer:start(150, 0, vim.schedule_wrap(M.trigger_completion))\n+  elseif cursor[1] ~= Context.cursor[1] then\n+    Context.cursor = nil\n+  end\n+end\n+\n+local function insert_leave_cb()\n+  reset_timer(completion_timer)\n+  Context.cursor = nil\n+  Context:reset()\n+end\n+\n+local function complete_done_cb()\n+  if Context.suppress_completeDone then\n+    Context.suppress_completeDone = false\n+    return\n+  end\n+\n+  local completed_item = api.nvim_get_vvar('completed_item')\n+  if not completed_item or not completed_item.user_data then\n+    Context:reset()\n+    return\n+  end\n+\n+  local completion_item = completed_item.user_data.nvim.lsp.completion_item --- @type lsp.CompletionItem\n+  local client_id = completed_item.user_data.nvim.lsp.client_id --- @type integer\n+  if not completion_item or not client_id then\n+    Context:reset()\n+    return\n+  end\n+\n+  Context:reset()\n+\n+  local client = lsp.get_client_by_id(client_id)\n+  if not client then\n+    return\n+  end\n+\n+  local offset_encoding = client.offset_encoding or 'utf-16'\n+  local cursor_row, cursor_col = unpack(api.nvim_win_get_cursor(0)) --- @type integer, integer\n+  cursor_row = cursor_row - 1\n+  local bufnr = api.nvim_get_current_buf()\n+  local expand_snippet = completion_item.insertTextFormat == protocol.InsertTextFormat.Snippet\n+    and Context.expand_snippet\n+    and (completion_item.textEdit ~= nil or completion_item.insertText ~= nil)\n+  local resolve_provider = (client.server_capabilities.completionProvider or {}).resolveProvider\n+\n+  local function clear_word()\n+    if not expand_snippet then\n+      return nil\n+    end\n+\n+    -- Remove the already inserted word.\n+    local start_char = cursor_col - #completed_item.word\n+    local line = api.nvim_buf_get_lines(bufnr, cursor_row, cursor_row + 1, true)[1]\n+    api.nvim_buf_set_text(bufnr, cursor_row, start_char, cursor_row, #line, { '' })\n+    return line:sub(cursor_col + 1)\n+  end\n+\n+  --- @param suffix? string\n+  local function apply_snippet_and_command(suffix)\n+    if expand_snippet then\n+      apply_snippet(completion_item, suffix)\n+    end\n+\n+    local command = completion_item.command\n+    if command then\n+      local fn = client.commands[command.command] or lsp.commands[command.command]\n+      if fn then\n+        fn(command, { bufnr = bufnr, client_id = client_id })\n+      else\n+        local command_provider = client.server_capabilities.executeCommandProvider or {}\n+        local server_commands = command_provider.commands or {}\n+        if vim.tbl_contains(server_commands, command.command) then\n+          client.request(ms.workspace_executeCommand, {\n+            command = command.command,\n+            arguments = command.arguments,\n+          }, function() end, bufnr)\n+        else\n+          vim.notify(\n+            'Command not supported on client or server: ' .. command.command,\n+            vim.log.levels.WARN\n+          )\n+        end\n+      end\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/27339#discussion_r1515685683",
            "id": 1515685683,
            "line": 562,
            "node_id": "PRRC_kwDOAPphoM5aV4cz",
            "original_commit_id": "0d578ab117b051d0d5b552c00310d82f3db031da",
            "original_line": 562,
            "original_position": 398,
            "original_start_line": 542,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 398,
            "pull_request_review_id": 1921667827,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515685683/reactions"
            },
            "side": "RIGHT",
            "start_line": 542,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-07T07:55:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515685683",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27339#discussion_r1515688809"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515688809"
                }
            },
            "author_association": "MEMBER",
            "body": "If we enable the snippets by default I think we've to discuss adding default keymaps for snippet navigation too, or how would users use them?",
            "commit_id": "0aa2bf65a71d90e2ad311b47189929bd68260163",
            "created_at": "2024-03-07T07:47:26Z",
            "diff_hunk": "@@ -744,14 +744,15 @@ function protocol.make_client_capabilities()\n       completion = {\n         dynamicRegistration = false,\n         completionItem = {\n-          -- Until we can actually expand snippet, move cursor and allow for true snippet experience,\n-          -- this should be disabled out of the box.\n-          -- However, users can turn this back on if they have a snippet plugin.\n-          snippetSupport = false,\n+          snippetSupport = true,",
            "html_url": "https://github.com/neovim/neovim/pull/27339#discussion_r1515688809",
            "id": 1515688809,
            "line": 739,
            "node_id": "PRRC_kwDOAPphoM5aV5Np",
            "original_commit_id": "0d578ab117b051d0d5b552c00310d82f3db031da",
            "original_line": 739,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": 8,
            "pull_request_review_id": 1921667827,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515688809/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-07T07:55:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515688809",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27339#discussion_r1515698767"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515698767"
                }
            },
            "author_association": "MEMBER",
            "body": "My rough plan would've been to instead rename `_completion.lua` to `completion.lua` and then have `vim.lsp.completion.trigger()`, `.attach()`, `.detach` and I guess `.accept_pum` also needs to be public, unless `CompleteDone` gets extended with a property indicating if the entries got exhaused or if one was explicitly selected with ctrl-y \r\n\r\nIf we go for opt-out instead of opt-in it also opens the question of how to configure the options (trigger characters, later on maybe the debounce interval, if backspace should re-trigger, and maybe server-side fuzzy search support)\r\n\r\n",
            "commit_id": "0aa2bf65a71d90e2ad311b47189929bd68260163",
            "created_at": "2024-03-07T07:55:29Z",
            "diff_hunk": "@@ -1026,6 +1029,14 @@ function lsp.omnifunc(findstart, base)\n   return vim.lsp._completion.omnifunc(findstart, base)\n end\n \n+--- Detaches a client from the given buffer to stop requesting LSP completions.\n+---\n+--- @param client_id integer\n+--- @param bufnr integer\n+function lsp.detach_completion(client_id, bufnr)\n+  vim.lsp._completion.detach(client_id, bufnr)\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/27339#discussion_r1515698767",
            "id": 1515698767,
            "line": 1034,
            "node_id": "PRRC_kwDOAPphoM5aV7pP",
            "original_commit_id": "0d578ab117b051d0d5b552c00310d82f3db031da",
            "original_line": 1034,
            "original_position": 35,
            "original_start_line": 1032,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 10,
            "pull_request_review_id": 1921667827,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515698767/reactions"
            },
            "side": "RIGHT",
            "start_line": 1028,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-07T07:55:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1515698767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27339#discussion_r1516540050"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1516540050"
                }
            },
            "author_association": "MEMBER",
            "body": "This function is mostly called in \"scheduled\" fashion (via `vim.shedule()` or after `vim.schedule_wrap()`). Usually it should be possible to do single `schedule_wrap()` after defining function instead of all other scheduling in place.",
            "commit_id": "0aa2bf65a71d90e2ad311b47189929bd68260163",
            "created_at": "2024-03-07T17:16:37Z",
            "diff_hunk": "@@ -273,4 +381,396 @@ function M.omnifunc(findstart, base)\n   return -2\n end\n \n+--- Initializes the completion commands for the given client.\n+---\n+--- @param client vim.lsp.Client\n+local function init_commands(client)\n+  local trigger_completion_cmd = 'editor.action.triggerSuggest'\n+\n+  -- Check if the command is in the global registry or in the client's commands.\n+  if not lsp.commands[trigger_completion_cmd] and not client.commands[trigger_completion_cmd] then\n+    client.commands[trigger_completion_cmd] = function()\n+      pcall(M.trigger_completion)\n+    end\n+  end\n+end\n+\n+--- @param clients table<integer, vim.lsp.Client>\n+--- @param bufnr integer\n+--- @param win integer\n+--- @param callback fun(responses: table<integer, { err: lsp.ResponseError, result: vim.lsp.CompletionResult }>)\n+--- @return function # Cancellation function\n+local function request(clients, bufnr, win, callback)\n+  local responses = {} --- @type table<integer, { err: lsp.ResponseError, result: any }>\n+  local request_ids = {} --- @type table<integer, integer>\n+  local remaining_requests = vim.tbl_count(clients)\n+\n+  for client_id, client in pairs(clients) do\n+    local params = lsp.util.make_position_params(win, client.offset_encoding)\n+    local ok, request_id = client.request(ms.textDocument_completion, params, function(err, result)\n+      responses[client_id] = { err = err, result = result }\n+      remaining_requests = remaining_requests - 1\n+      if remaining_requests == 0 then\n+        callback(responses)\n+      end\n+    end, bufnr)\n+\n+    if ok then\n+      request_ids[client_id] = request_id\n+    end\n+  end\n+\n+  return function()\n+    for client_id, request_id in pairs(request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client then\n+        client.cancel_request(request_id)\n+      end\n+    end\n+  end\n+end\n+\n+--- @param handle vim.lsp.completion.BufHandle\n+local function insert_char_pre_cb(handle)\n+  if tonumber(vim.fn.pumvisible()) == 1 then\n+    if Context.isIncomplete then\n+      reset_timer(completion_timer)\n+\n+      -- Calling vim.fn.complete while pumvisible will trigger `CompleteDone` for the active completion window,\n+      -- so we suppress it to avoid resetting the completion context.\n+      Context.suppress_completeDone = true\n+\n+      local debounce_ms = next_debounce()\n+      if debounce_ms == 0 then\n+        vim.schedule(M.trigger_completion)\n+      else\n+        completion_timer = new_timer(completion_timer)\n+        completion_timer:start(debounce_ms, 0, vim.schedule_wrap(M.trigger_completion))\n+      end\n+    end\n+\n+    return\n+  end\n+\n+  local char = api.nvim_get_vvar('char')\n+  if not completion_timer and handle.triggers[char] then\n+    completion_timer = assert(vim.uv.new_timer())\n+    completion_timer:start(25, 0, function()\n+      reset_timer(completion_timer)\n+      vim.schedule(M.trigger_completion)\n+    end)\n+  end\n+end\n+\n+local function text_changed_p_cb()\n+  Context.cursor = api.nvim_win_get_cursor(0)\n+end\n+\n+local function text_changed_i_cb()\n+  if not Context.cursor or completion_timer then\n+    return\n+  end\n+\n+  local cursor = api.nvim_win_get_cursor(0)\n+  if cursor[1] == Context.cursor[1] and cursor[2] <= Context.cursor[2] then\n+    completion_timer = new_timer(completion_timer)\n+    completion_timer:start(150, 0, vim.schedule_wrap(M.trigger_completion))\n+  elseif cursor[1] ~= Context.cursor[1] then\n+    Context.cursor = nil\n+  end\n+end\n+\n+local function insert_leave_cb()\n+  reset_timer(completion_timer)\n+  Context.cursor = nil\n+  Context:reset()\n+end\n+\n+local function complete_done_cb()\n+  if Context.suppress_completeDone then\n+    Context.suppress_completeDone = false\n+    return\n+  end\n+\n+  local completed_item = api.nvim_get_vvar('completed_item')\n+  if not completed_item or not completed_item.user_data then\n+    Context:reset()\n+    return\n+  end\n+\n+  local completion_item = completed_item.user_data.nvim.lsp.completion_item --- @type lsp.CompletionItem\n+  local client_id = completed_item.user_data.nvim.lsp.client_id --- @type integer\n+  if not completion_item or not client_id then\n+    Context:reset()\n+    return\n+  end\n+\n+  Context:reset()\n+\n+  local client = lsp.get_client_by_id(client_id)\n+  if not client then\n+    return\n+  end\n+\n+  local offset_encoding = client.offset_encoding or 'utf-16'\n+  local cursor_row, cursor_col = unpack(api.nvim_win_get_cursor(0)) --- @type integer, integer\n+  cursor_row = cursor_row - 1\n+  local bufnr = api.nvim_get_current_buf()\n+  local expand_snippet = completion_item.insertTextFormat == protocol.InsertTextFormat.Snippet\n+    and Context.expand_snippet\n+    and (completion_item.textEdit ~= nil or completion_item.insertText ~= nil)\n+  local resolve_provider = (client.server_capabilities.completionProvider or {}).resolveProvider\n+\n+  local function clear_word()\n+    if not expand_snippet then\n+      return nil\n+    end\n+\n+    -- Remove the already inserted word.\n+    local start_char = cursor_col - #completed_item.word\n+    local line = api.nvim_buf_get_lines(bufnr, cursor_row, cursor_row + 1, true)[1]\n+    api.nvim_buf_set_text(bufnr, cursor_row, start_char, cursor_row, #line, { '' })\n+    return line:sub(cursor_col + 1)\n+  end\n+\n+  --- @param suffix? string\n+  local function apply_snippet_and_command(suffix)\n+    if expand_snippet then\n+      apply_snippet(completion_item, suffix)\n+    end\n+\n+    local command = completion_item.command\n+    if command then\n+      local fn = client.commands[command.command] or lsp.commands[command.command]\n+      if fn then\n+        fn(command, { bufnr = bufnr, client_id = client_id })\n+      else\n+        local command_provider = client.server_capabilities.executeCommandProvider or {}\n+        local server_commands = command_provider.commands or {}\n+        if vim.tbl_contains(server_commands, command.command) then\n+          client.request(ms.workspace_executeCommand, {\n+            command = command.command,\n+            arguments = command.arguments,\n+          }, function() end, bufnr)\n+        else\n+          vim.notify(\n+            'Command not supported on client or server: ' .. command.command,\n+            vim.log.levels.WARN\n+          )\n+        end\n+      end\n+    end\n+  end\n+\n+  if completion_item.additionalTextEdits and next(completion_item.additionalTextEdits) then\n+    local suffix = clear_word()\n+    lsp.util.apply_text_edits(completion_item.additionalTextEdits, bufnr, offset_encoding)\n+    apply_snippet_and_command(suffix)\n+  elseif resolve_provider and type(completion_item) == 'table' then\n+    local changedtick = vim.b[bufnr].changedtick\n+\n+    --- @param result lsp.CompletionItem\n+    client.request(ms.completionItem_resolve, completion_item, function(err, result)\n+      if changedtick ~= vim.b[bufnr].changedtick then\n+        return\n+      end\n+\n+      local suffix = clear_word()\n+      if err then\n+        vim.notify_once(err.message, vim.log.levels.WARN)\n+      elseif result and result.additionalTextEdits then\n+        lsp.util.apply_text_edits(result.additionalTextEdits, bufnr, offset_encoding)\n+        if result.command then\n+          completion_item.command = result.command\n+        end\n+      end\n+\n+      apply_snippet_and_command(suffix)\n+    end, bufnr)\n+  else\n+    local suffix = clear_word()\n+    apply_snippet_and_command(suffix)\n+  end\n+end\n+\n+--- Trigger LSP completion in the current buffer.\n+function M.trigger_completion()",
            "html_url": "https://github.com/neovim/neovim/pull/27339#discussion_r1516540050",
            "id": 1516540050,
            "line": 597,
            "node_id": "PRRC_kwDOAPphoM5aZJCS",
            "original_commit_id": "0d578ab117b051d0d5b552c00310d82f3db031da",
            "original_line": 597,
            "original_position": 433,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_completion.lua",
            "position": 433,
            "pull_request_review_id": 1923061087,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1516540050/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-07T17:16:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1516540050",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27339#discussion_r1518266709"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27339"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1518266709"
                }
            },
            "author_association": "MEMBER",
            "body": "After further discussion, I think that making the feature opt-in is better for now. That will facilitate passing options (see [Mathias' comment](https://github.com/neovim/neovim/pull/27339#discussion_r1515698767)).",
            "commit_id": "0aa2bf65a71d90e2ad311b47189929bd68260163",
            "created_at": "2024-03-08T20:36:05Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local M = {}\n+\n+--- @class vim.lsp.completion.BufHandle\n+--- @field clients table<integer, lsp.Client>\n+--- @field triggers table<string, lsp.Client[]>\n+\n+--- @type table<integer, vim.lsp.completion.BufHandle>\n+local buf_handles = {}\n+\n+local function complete_done() end\n+\n+--- Initializes the completion commands for the given client.\n+---\n+--- @param client lsp.Client\n+local function init_commands(client)\n+  local trigger_completion_cmd = 'editor.action.triggerSuggest'\n+\n+  -- Check if the command is in the global registry or in the client's commands.\n+  if\n+    not vim.lsp.commands[trigger_completion_cmd] and not client.commands[trigger_completion_cmd]\n+  then\n+    client.commands[trigger_completion_cmd] = function()\n+      local ok, res = pcall(M.trigger_completion)\n+      return ok and vim.NIL\n+        or vim.lsp.rpc_response_error(vim.lsp.protocol.ErrorCodes.InternalError, res)\n+    end\n+  end\n+end\n+\n+function M.trigger_completion() end\n+\n+--- TODO(mariasolos): Document.\n+---\n+--- @param client_id integer Client ID\n+--- @param bufnr integer Buffer handle, or 0 for the current buffer\n+function M.attach(client_id, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/27339#discussion_r1518266709",
            "id": 1518266709,
            "in_reply_to_id": 1493820152,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5afulV",
            "original_commit_id": "baf818cc1dbfef9bd864fd27065c050370223bf4",
            "original_line": 261,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 1925795137,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1518266709/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-08T20:36:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1518266709",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27339/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/27339/commits",
    "created_at": "2024-02-04T22:15:08Z",
    "diff_url": "https://github.com/neovim/neovim/pull/27339.diff",
    "draft": false,
    "head": {
        "label": "MariaSolOs:completion",
        "ref": "completion",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/MariaSolOs/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/MariaSolOs/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/MariaSolOs/neovim/branches{/branch}",
            "clone_url": "https://github.com/MariaSolOs/neovim.git",
            "collaborators_url": "https://api.github.com/repos/MariaSolOs/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/MariaSolOs/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/MariaSolOs/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/MariaSolOs/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/MariaSolOs/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/MariaSolOs/neovim/contributors",
            "created_at": "2023-08-05T17:10:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/MariaSolOs/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/MariaSolOs/neovim/downloads",
            "events_url": "https://api.github.com/repos/MariaSolOs/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/MariaSolOs/neovim/forks",
            "full_name": "MariaSolOs/neovim",
            "git_commits_url": "https://api.github.com/repos/MariaSolOs/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/MariaSolOs/neovim/git/tags{/sha}",
            "git_url": "git://github.com/MariaSolOs/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/MariaSolOs/neovim/hooks",
            "html_url": "https://github.com/MariaSolOs/neovim",
            "id": 675070403,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/MariaSolOs/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/MariaSolOs/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/MariaSolOs/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/MariaSolOs/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/MariaSolOs/neovim/merges",
            "milestones_url": "https://api.github.com/repos/MariaSolOs/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOKDzBww",
            "notifications_url": "https://api.github.com/repos/MariaSolOs/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/MariaSolOs/neovim/pulls{/number}",
            "pushed_at": "2024-03-10T23:53:30Z",
            "releases_url": "https://api.github.com/repos/MariaSolOs/neovim/releases{/id}",
            "size": 253261,
            "ssh_url": "git@github.com:MariaSolOs/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/MariaSolOs/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/MariaSolOs/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/MariaSolOs/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/MariaSolOs/neovim/subscription",
            "svn_url": "https://github.com/MariaSolOs/neovim",
            "tags_url": "https://api.github.com/repos/MariaSolOs/neovim/tags",
            "teams_url": "https://api.github.com/repos/MariaSolOs/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/MariaSolOs/neovim/git/trees{/sha}",
            "updated_at": "2023-08-09T04:34:06Z",
            "url": "https://api.github.com/repos/MariaSolOs/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "0aa2bf65a71d90e2ad311b47189929bd68260163",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/27339",
    "id": 1710583780,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27339",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "4637675137d876d45599d1fa12493c2f6eaf90a0",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5l9W_k",
    "number": 27339,
    "patch_url": "https://github.com/neovim/neovim/pull/27339.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
            "events_url": "https://api.github.com/users/folke/events{/privacy}",
            "followers_url": "https://api.github.com/users/folke/followers",
            "following_url": "https://api.github.com/users/folke/following{/other_user}",
            "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/folke",
            "id": 292349,
            "login": "folke",
            "node_id": "MDQ6VXNlcjI5MjM0OQ==",
            "organizations_url": "https://api.github.com/users/folke/orgs",
            "received_events_url": "https://api.github.com/users/folke/received_events",
            "repos_url": "https://api.github.com/users/folke/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/folke"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/27339/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/0aa2bf65a71d90e2ad311b47189929bd68260163",
    "title": "feat(lsp): completion side effects",
    "updated_at": "2024-03-08T20:39:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/27339",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
        "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
        "followers_url": "https://api.github.com/users/MariaSolOs/followers",
        "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
        "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MariaSolOs",
        "id": 62502207,
        "login": "MariaSolOs",
        "node_id": "MDQ6VXNlcjYyNTAyMjA3",
        "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
        "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
        "repos_url": "https://api.github.com/users/MariaSolOs/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MariaSolOs"
    }
}