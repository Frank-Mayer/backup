{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23569/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23569/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/23569"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23569"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23569/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/addf8846ea77fc51a1ceccf6b5a3671700634426"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5503,
            "forks_count": 5503,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1768,
            "open_issues_count": 1768,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-07-22T23:20:44Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 279528,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 80265,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-07-23T01:47:00Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 80265,
            "watchers_count": 80265,
            "web_commit_signoff_required": false
        },
        "sha": "0231265c8cf8c13f317bbddcfcbac2639e7022cd",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "[Request for Comment]\r\n@lewis6991 \r\n@bfredl \r\n@sakhnik \r\n@zeertzjq \r\n\r\nFrom the author of the linematch alignment algorithm, I bring you charmatch!\r\n\r\nbefore:\r\n![before](https://github.com/neovim/neovim/assets/32371757/d8e32883-2457-4ec2-b4d1-ef62fe6f587f)\r\n\r\nafter:\r\n![after](https://github.com/neovim/neovim/assets/32371757/11030c41-5f1e-4f94-8738-455f39261acd)\r\n\r\ncharmatch leverages the existing linematch algorithm to perform a similar diff optimization for highlighting of modified characters between lines of buffers in diff mode.\r\n\r\nThe result of the charmatch algorithm is similarly a set of decisions represented by integers. these integers are then parsed to produce an array containing the highlighting information for a diff hunk.\r\n\r\nThe results are stored as so for a diff of these two files:\r\n```\r\n----------------\r\n| A    | AZBZC |\r\n| B    |       |\r\n| C    |       |\r\n----------------\r\n```\r\n![arrayexample](https://github.com/neovim/neovim/assets/32371757/cc88e775-7d9b-4a46-a816-7368a34b2c27)\r\n\r\nHere I represent \\n 'newline' as 'n' for the purposes of this diagram.\r\n\r\n```\r\ndiff_T->charmatchp\r\nbuf 0 start\r\n|     buf 1 start\r\n|     |\r\nAnBnCnAZBZCn\r\n000000010100\r\n```\r\n\r\nThe newline characters are used in calculation of the highlight grouping, as newlines will always break a highlight group\r\n\r\nThe grouping optimization will attempt to create a highlight solution with the smallest amount of groups (marked highlighted, marked not highlighted) possible, explained more further down.\r\n\r\nThe array stores '1's to indicate highlighted, and 0's to represent not highlighted.\r\n\r\nThis array is unique to each diff hunk (`diff_T`), and is stored in an added array pointer for `diff_T` struct\r\n\r\n```c\r\ntypedef struct diffblock_S diff_T;\r\nstruct diffblock_S {\r\n  ...\r\n  size_t n_charmatch;\r\n  int* charmatchp; // values for charmatch\r\n};\r\n```\r\n\r\nThe charmatch alignment algorithm is ran once a diff hunk is scrolled into view.\r\n\r\nthe diffoption chardiff is given with a number like so:\r\n```\r\nset diffopt+=chardiff:10\r\n```\r\nthe number specifies the summation of the length of the text to be diffed.\r\nit will first try to character wise diff all of the lines of the two (or more) diff blocks, if that exceeds the limit, it will then attempt to diff them matching line-wise. Pictures here illustrate:\r\n![10](https://github.com/neovim/neovim/assets/32371757/285b6b48-d04f-469a-9a1b-f19e639fb0db)\r\n![23](https://github.com/neovim/neovim/assets/32371757/670a1bb0-652e-443f-b7f0-37bf2b9ebbdc)\r\n![100](https://github.com/neovim/neovim/assets/32371757/9b541504-b9f4-441d-aa8f-017547a225c4)\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1651875173"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875173"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Maybe we should free decisions after the loop?",
            "commit_id": "addf8846ea77fc51a1ceccf6b5a3671700634426",
            "created_at": "2024-06-25T01:56:58Z",
            "diff_hunk": "@@ -2076,28 +2105,166 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++; // increment the total characters counter\n+          if (*p == '\\n') { lines--; }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  if (iwhite && (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH)) {\n+    // allocate array for index mapping of result array\n+    iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    for (size_t i = 0; i < total_chars_length; i++) {\n+      iwhite_index_offset[i] = 99;\n+    }\n+  }\n+  if (diff_allignment == WORDMATCH) {\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset[i][j] = 99;\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  for (size_t i = 0; i < ndiffs; i++) {\n+    int cls = INT_MIN;\n+    size_t j = 0, k = 0, lines = (size_t)diff_lines[i], w = result_diff_start_pos[i];\n+    while (lines > 0) {\n+      if (iwhite ? (diffbufs[i][j] != ' ' && diffbufs[i][j] != '\\t') : 1) {\n+        if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+          // a character which is not a blank\n+          if (diff_allignment == WORDMATCH) {\n+            if (utf_class(diffbufs[i][j]) != cls || diffbufs[i][j] == '\\n') {\n+              word_offset[i][diff_length[i]] = k;\n+              diff_length[i]++;\n+              total_word_count++;\n+            }\n+            word_offset_size[i][diff_length[i] - 1]++;\n+            cls = utf_class(diffbufs[i][j]);\n+          } else {\n+            // we are matching characters, not words\n+            diff_length[i]++;\n+          }\n+          if (iwhite) {\n+            iwhite_index_offset[w++] = j - k;\n+          }\n+        }\n+        diffbufs[i][k++] = diffbufs[i][j];\n+      } else if (diff_allignment == WORDMATCH) {\n+        // we are ignoring whitespace and this is a whitespace ' ' or '\\t' reset the class definition\n+        cls = INT_MIN;\n+      }\n+      if (diffbufs[i][j++] == '\\n') { lines--; }\n+    }\n+  }\n+\n   // we will get the output of the linematch algorithm in the format of an array\n   // of integers (*decisions) and the length of that array (decisions_length)\n-  int *decisions = NULL;\n-  const bool iwhite = (diff_flags & (DIFF_IWHITEALL | DIFF_IWHITE)) > 0;\n-  size_t decisions_length = linematch_nbuffers(diffbufs, diff_length, ndiffs, &decisions, iwhite);\n+  if (diff_allignment == LINEMATCH) {\n+    int *decisions = NULL;\n+    size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 0, NULL, NULL);\n+    apply_linematch_results(dp, decisions_length, decisions);\n+    xfree(decisions);\n+  } else if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+    dp->charmatchp = xmalloc(total_chars_length * sizeof(int)); // will hold results\n+    dp->n_charmatch = total_chars_length;\n+\n+    bool lim_exceeded = false;\n+    if (diff_allignment == CHARMATCH && total_chars_length > (size_t)chardiff_chars) {\n+      lim_exceeded = true;\n+    } else if (diff_allignment == WORDMATCH && total_word_count > (size_t)worddiff_words) {\n+      lim_exceeded = true;\n+    }\n+\n+    if (lim_exceeded == true) {\n+      // do not run charmatch on the entire diff block\n+      // we will attempt to run charmatch on the individual lines later\n+      // for now, just initialize the result memory\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = -1; // -1 indicates that algorithm has not yet ran\n+      }\n+    } else {\n+      int *decisions = NULL;\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = 0; // default to not highlighted\n+      }\n+\n+      // check is this a line that does not exist in other buffers?\n+      // if so, highlight it as a 'newline', and we don't need to run the algorithm\n+      bool newline = true;\n+      for (size_t i = 0, c = 0; i < ndiffs; i++) {\n+        if (diff_length[i] > 0) {\n+          c++;\n+        }\n+        if (c > 1) {\n+          newline = false;\n+          break;\n+        }\n+      }\n+\n+      if (newline == true) {\n+        for (size_t i = 0; i < total_chars_length; i++) {\n+          dp->charmatchp[i] = 2;\n+        }\n+      } else {\n+        size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 1, word_offset, word_offset_size);\n+        for (size_t i = 0; i < decisions_length; i++) {\n+          // write to result\n+          // is it a comparison\n+          // check for if this is a 'newline'\n+          if (decisions[i] == (pow(2, (double)ndiffs) - 1)) {\n+            // it's a comparison of all the buffers (don't highlight)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                size_t l = result_diff_start_pos[j]++;\n+                dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 0;\n+              }\n+              word_offset_result_index[j]++;\n+            }\n+          } else {\n+            // it's a skip in a single buffer (highlight as changed)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              if (decisions[i] & (1 << j)) {\n+                for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                  size_t l = result_diff_start_pos[j]++;\n+                  dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 1;\n+                }\n+                word_offset_result_index[j]++;\n+                break;\n+              }\n+            }\n+          }",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1651875173",
            "id": 1651875173,
            "line": 2290,
            "node_id": "PRRC_kwDOAPphoM5idZ1l",
            "original_commit_id": "4e0884a06cd6e77690fa68f82d5e83b80bc87d39",
            "original_line": 2256,
            "original_position": 252,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": 286,
            "pull_request_review_id": 2137153290,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875173/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-25T01:59:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875173",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1681295?v=4",
                "events_url": "https://api.github.com/users/ray-x/events{/privacy}",
                "followers_url": "https://api.github.com/users/ray-x/followers",
                "following_url": "https://api.github.com/users/ray-x/following{/other_user}",
                "gists_url": "https://api.github.com/users/ray-x/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ray-x",
                "id": 1681295,
                "login": "ray-x",
                "node_id": "MDQ6VXNlcjE2ODEyOTU=",
                "organizations_url": "https://api.github.com/users/ray-x/orgs",
                "received_events_url": "https://api.github.com/users/ray-x/received_events",
                "repos_url": "https://api.github.com/users/ray-x/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ray-x/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ray-x/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ray-x"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1651875238"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875238"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "should we free iwhite_index_offset after the block?",
            "commit_id": "addf8846ea77fc51a1ceccf6b5a3671700634426",
            "created_at": "2024-06-25T01:57:07Z",
            "diff_hunk": "@@ -2076,28 +2105,166 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++; // increment the total characters counter\n+          if (*p == '\\n') { lines--; }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  if (iwhite && (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH)) {\n+    // allocate array for index mapping of result array\n+    iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    for (size_t i = 0; i < total_chars_length; i++) {\n+      iwhite_index_offset[i] = 99;\n+    }\n+  }\n+  if (diff_allignment == WORDMATCH) {\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset[i][j] = 99;\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  for (size_t i = 0; i < ndiffs; i++) {\n+    int cls = INT_MIN;\n+    size_t j = 0, k = 0, lines = (size_t)diff_lines[i], w = result_diff_start_pos[i];\n+    while (lines > 0) {\n+      if (iwhite ? (diffbufs[i][j] != ' ' && diffbufs[i][j] != '\\t') : 1) {\n+        if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+          // a character which is not a blank\n+          if (diff_allignment == WORDMATCH) {\n+            if (utf_class(diffbufs[i][j]) != cls || diffbufs[i][j] == '\\n') {\n+              word_offset[i][diff_length[i]] = k;\n+              diff_length[i]++;\n+              total_word_count++;\n+            }\n+            word_offset_size[i][diff_length[i] - 1]++;\n+            cls = utf_class(diffbufs[i][j]);\n+          } else {\n+            // we are matching characters, not words\n+            diff_length[i]++;\n+          }\n+          if (iwhite) {\n+            iwhite_index_offset[w++] = j - k;\n+          }\n+        }\n+        diffbufs[i][k++] = diffbufs[i][j];\n+      } else if (diff_allignment == WORDMATCH) {\n+        // we are ignoring whitespace and this is a whitespace ' ' or '\\t' reset the class definition\n+        cls = INT_MIN;\n+      }\n+      if (diffbufs[i][j++] == '\\n') { lines--; }\n+    }\n+  }\n+\n   // we will get the output of the linematch algorithm in the format of an array\n   // of integers (*decisions) and the length of that array (decisions_length)\n-  int *decisions = NULL;\n-  const bool iwhite = (diff_flags & (DIFF_IWHITEALL | DIFF_IWHITE)) > 0;\n-  size_t decisions_length = linematch_nbuffers(diffbufs, diff_length, ndiffs, &decisions, iwhite);\n+  if (diff_allignment == LINEMATCH) {\n+    int *decisions = NULL;\n+    size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 0, NULL, NULL);\n+    apply_linematch_results(dp, decisions_length, decisions);\n+    xfree(decisions);\n+  } else if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+    dp->charmatchp = xmalloc(total_chars_length * sizeof(int)); // will hold results\n+    dp->n_charmatch = total_chars_length;\n+\n+    bool lim_exceeded = false;\n+    if (diff_allignment == CHARMATCH && total_chars_length > (size_t)chardiff_chars) {\n+      lim_exceeded = true;\n+    } else if (diff_allignment == WORDMATCH && total_word_count > (size_t)worddiff_words) {\n+      lim_exceeded = true;\n+    }\n+\n+    if (lim_exceeded == true) {\n+      // do not run charmatch on the entire diff block\n+      // we will attempt to run charmatch on the individual lines later\n+      // for now, just initialize the result memory\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = -1; // -1 indicates that algorithm has not yet ran\n+      }\n+    } else {\n+      int *decisions = NULL;\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = 0; // default to not highlighted\n+      }\n+\n+      // check is this a line that does not exist in other buffers?\n+      // if so, highlight it as a 'newline', and we don't need to run the algorithm\n+      bool newline = true;\n+      for (size_t i = 0, c = 0; i < ndiffs; i++) {\n+        if (diff_length[i] > 0) {\n+          c++;\n+        }\n+        if (c > 1) {\n+          newline = false;\n+          break;\n+        }\n+      }\n+\n+      if (newline == true) {\n+        for (size_t i = 0; i < total_chars_length; i++) {\n+          dp->charmatchp[i] = 2;\n+        }\n+      } else {\n+        size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 1, word_offset, word_offset_size);\n+        for (size_t i = 0; i < decisions_length; i++) {\n+          // write to result\n+          // is it a comparison\n+          // check for if this is a 'newline'\n+          if (decisions[i] == (pow(2, (double)ndiffs) - 1)) {\n+            // it's a comparison of all the buffers (don't highlight)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                size_t l = result_diff_start_pos[j]++;\n+                dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 0;\n+              }\n+              word_offset_result_index[j]++;\n+            }\n+          } else {\n+            // it's a skip in a single buffer (highlight as changed)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              if (decisions[i] & (1 << j)) {\n+                for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                  size_t l = result_diff_start_pos[j]++;\n+                  dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 1;\n+                }\n+                word_offset_result_index[j]++;\n+                break;\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1651875238",
            "id": 1651875238,
            "line": 2295,
            "node_id": "PRRC_kwDOAPphoM5idZ2m",
            "original_commit_id": "4e0884a06cd6e77690fa68f82d5e83b80bc87d39",
            "original_line": 2260,
            "original_position": 256,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": 291,
            "pull_request_review_id": 2137153290,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875238/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-25T01:59:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1681295?v=4",
                "events_url": "https://api.github.com/users/ray-x/events{/privacy}",
                "followers_url": "https://api.github.com/users/ray-x/followers",
                "following_url": "https://api.github.com/users/ray-x/following{/other_user}",
                "gists_url": "https://api.github.com/users/ray-x/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ray-x",
                "id": 1681295,
                "login": "ray-x",
                "node_id": "MDQ6VXNlcjE2ODEyOTU=",
                "organizations_url": "https://api.github.com/users/ray-x/orgs",
                "received_events_url": "https://api.github.com/users/ray-x/received_events",
                "repos_url": "https://api.github.com/users/ray-x/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ray-x/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ray-x/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ray-x"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1667814328"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667814328"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "yes, you are right that is a memory leak. fixed",
            "commit_id": "addf8846ea77fc51a1ceccf6b5a3671700634426",
            "created_at": "2024-07-08T00:30:06Z",
            "diff_hunk": "@@ -2076,28 +2105,166 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++; // increment the total characters counter\n+          if (*p == '\\n') { lines--; }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  if (iwhite && (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH)) {\n+    // allocate array for index mapping of result array\n+    iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    for (size_t i = 0; i < total_chars_length; i++) {\n+      iwhite_index_offset[i] = 99;\n+    }\n+  }\n+  if (diff_allignment == WORDMATCH) {\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset[i][j] = 99;\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  for (size_t i = 0; i < ndiffs; i++) {\n+    int cls = INT_MIN;\n+    size_t j = 0, k = 0, lines = (size_t)diff_lines[i], w = result_diff_start_pos[i];\n+    while (lines > 0) {\n+      if (iwhite ? (diffbufs[i][j] != ' ' && diffbufs[i][j] != '\\t') : 1) {\n+        if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+          // a character which is not a blank\n+          if (diff_allignment == WORDMATCH) {\n+            if (utf_class(diffbufs[i][j]) != cls || diffbufs[i][j] == '\\n') {\n+              word_offset[i][diff_length[i]] = k;\n+              diff_length[i]++;\n+              total_word_count++;\n+            }\n+            word_offset_size[i][diff_length[i] - 1]++;\n+            cls = utf_class(diffbufs[i][j]);\n+          } else {\n+            // we are matching characters, not words\n+            diff_length[i]++;\n+          }\n+          if (iwhite) {\n+            iwhite_index_offset[w++] = j - k;\n+          }\n+        }\n+        diffbufs[i][k++] = diffbufs[i][j];\n+      } else if (diff_allignment == WORDMATCH) {\n+        // we are ignoring whitespace and this is a whitespace ' ' or '\\t' reset the class definition\n+        cls = INT_MIN;\n+      }\n+      if (diffbufs[i][j++] == '\\n') { lines--; }\n+    }\n+  }\n+\n   // we will get the output of the linematch algorithm in the format of an array\n   // of integers (*decisions) and the length of that array (decisions_length)\n-  int *decisions = NULL;\n-  const bool iwhite = (diff_flags & (DIFF_IWHITEALL | DIFF_IWHITE)) > 0;\n-  size_t decisions_length = linematch_nbuffers(diffbufs, diff_length, ndiffs, &decisions, iwhite);\n+  if (diff_allignment == LINEMATCH) {\n+    int *decisions = NULL;\n+    size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 0, NULL, NULL);\n+    apply_linematch_results(dp, decisions_length, decisions);\n+    xfree(decisions);\n+  } else if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+    dp->charmatchp = xmalloc(total_chars_length * sizeof(int)); // will hold results\n+    dp->n_charmatch = total_chars_length;\n+\n+    bool lim_exceeded = false;\n+    if (diff_allignment == CHARMATCH && total_chars_length > (size_t)chardiff_chars) {\n+      lim_exceeded = true;\n+    } else if (diff_allignment == WORDMATCH && total_word_count > (size_t)worddiff_words) {\n+      lim_exceeded = true;\n+    }\n+\n+    if (lim_exceeded == true) {\n+      // do not run charmatch on the entire diff block\n+      // we will attempt to run charmatch on the individual lines later\n+      // for now, just initialize the result memory\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = -1; // -1 indicates that algorithm has not yet ran\n+      }\n+    } else {\n+      int *decisions = NULL;\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = 0; // default to not highlighted\n+      }\n+\n+      // check is this a line that does not exist in other buffers?\n+      // if so, highlight it as a 'newline', and we don't need to run the algorithm\n+      bool newline = true;\n+      for (size_t i = 0, c = 0; i < ndiffs; i++) {\n+        if (diff_length[i] > 0) {\n+          c++;\n+        }\n+        if (c > 1) {\n+          newline = false;\n+          break;\n+        }\n+      }\n+\n+      if (newline == true) {\n+        for (size_t i = 0; i < total_chars_length; i++) {\n+          dp->charmatchp[i] = 2;\n+        }\n+      } else {\n+        size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 1, word_offset, word_offset_size);\n+        for (size_t i = 0; i < decisions_length; i++) {\n+          // write to result\n+          // is it a comparison\n+          // check for if this is a 'newline'\n+          if (decisions[i] == (pow(2, (double)ndiffs) - 1)) {\n+            // it's a comparison of all the buffers (don't highlight)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                size_t l = result_diff_start_pos[j]++;\n+                dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 0;\n+              }\n+              word_offset_result_index[j]++;\n+            }\n+          } else {\n+            // it's a skip in a single buffer (highlight as changed)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              if (decisions[i] & (1 << j)) {\n+                for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                  size_t l = result_diff_start_pos[j]++;\n+                  dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 1;\n+                }\n+                word_offset_result_index[j]++;\n+                break;\n+              }\n+            }\n+          }",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1667814328",
            "id": 1667814328,
            "in_reply_to_id": 1651875173,
            "line": 2290,
            "node_id": "PRRC_kwDOAPphoM5jaNO4",
            "original_commit_id": "4e0884a06cd6e77690fa68f82d5e83b80bc87d39",
            "original_line": 2256,
            "original_position": 252,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": 286,
            "pull_request_review_id": 2161986195,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667814328/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-08T00:30:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667814328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1667819343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667819343"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "fixed",
            "commit_id": "addf8846ea77fc51a1ceccf6b5a3671700634426",
            "created_at": "2024-07-08T00:39:14Z",
            "diff_hunk": "@@ -2076,28 +2105,166 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++; // increment the total characters counter\n+          if (*p == '\\n') { lines--; }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  if (iwhite && (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH)) {\n+    // allocate array for index mapping of result array\n+    iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    for (size_t i = 0; i < total_chars_length; i++) {\n+      iwhite_index_offset[i] = 99;\n+    }\n+  }\n+  if (diff_allignment == WORDMATCH) {\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset[i][j] = 99;\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  for (size_t i = 0; i < ndiffs; i++) {\n+    int cls = INT_MIN;\n+    size_t j = 0, k = 0, lines = (size_t)diff_lines[i], w = result_diff_start_pos[i];\n+    while (lines > 0) {\n+      if (iwhite ? (diffbufs[i][j] != ' ' && diffbufs[i][j] != '\\t') : 1) {\n+        if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+          // a character which is not a blank\n+          if (diff_allignment == WORDMATCH) {\n+            if (utf_class(diffbufs[i][j]) != cls || diffbufs[i][j] == '\\n') {\n+              word_offset[i][diff_length[i]] = k;\n+              diff_length[i]++;\n+              total_word_count++;\n+            }\n+            word_offset_size[i][diff_length[i] - 1]++;\n+            cls = utf_class(diffbufs[i][j]);\n+          } else {\n+            // we are matching characters, not words\n+            diff_length[i]++;\n+          }\n+          if (iwhite) {\n+            iwhite_index_offset[w++] = j - k;\n+          }\n+        }\n+        diffbufs[i][k++] = diffbufs[i][j];\n+      } else if (diff_allignment == WORDMATCH) {\n+        // we are ignoring whitespace and this is a whitespace ' ' or '\\t' reset the class definition\n+        cls = INT_MIN;\n+      }\n+      if (diffbufs[i][j++] == '\\n') { lines--; }\n+    }\n+  }\n+\n   // we will get the output of the linematch algorithm in the format of an array\n   // of integers (*decisions) and the length of that array (decisions_length)\n-  int *decisions = NULL;\n-  const bool iwhite = (diff_flags & (DIFF_IWHITEALL | DIFF_IWHITE)) > 0;\n-  size_t decisions_length = linematch_nbuffers(diffbufs, diff_length, ndiffs, &decisions, iwhite);\n+  if (diff_allignment == LINEMATCH) {\n+    int *decisions = NULL;\n+    size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 0, NULL, NULL);\n+    apply_linematch_results(dp, decisions_length, decisions);\n+    xfree(decisions);\n+  } else if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+    dp->charmatchp = xmalloc(total_chars_length * sizeof(int)); // will hold results\n+    dp->n_charmatch = total_chars_length;\n+\n+    bool lim_exceeded = false;\n+    if (diff_allignment == CHARMATCH && total_chars_length > (size_t)chardiff_chars) {\n+      lim_exceeded = true;\n+    } else if (diff_allignment == WORDMATCH && total_word_count > (size_t)worddiff_words) {\n+      lim_exceeded = true;\n+    }\n+\n+    if (lim_exceeded == true) {\n+      // do not run charmatch on the entire diff block\n+      // we will attempt to run charmatch on the individual lines later\n+      // for now, just initialize the result memory\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = -1; // -1 indicates that algorithm has not yet ran\n+      }\n+    } else {\n+      int *decisions = NULL;\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = 0; // default to not highlighted\n+      }\n+\n+      // check is this a line that does not exist in other buffers?\n+      // if so, highlight it as a 'newline', and we don't need to run the algorithm\n+      bool newline = true;\n+      for (size_t i = 0, c = 0; i < ndiffs; i++) {\n+        if (diff_length[i] > 0) {\n+          c++;\n+        }\n+        if (c > 1) {\n+          newline = false;\n+          break;\n+        }\n+      }\n+\n+      if (newline == true) {\n+        for (size_t i = 0; i < total_chars_length; i++) {\n+          dp->charmatchp[i] = 2;\n+        }\n+      } else {\n+        size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 1, word_offset, word_offset_size);\n+        for (size_t i = 0; i < decisions_length; i++) {\n+          // write to result\n+          // is it a comparison\n+          // check for if this is a 'newline'\n+          if (decisions[i] == (pow(2, (double)ndiffs) - 1)) {\n+            // it's a comparison of all the buffers (don't highlight)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                size_t l = result_diff_start_pos[j]++;\n+                dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 0;\n+              }\n+              word_offset_result_index[j]++;\n+            }\n+          } else {\n+            // it's a skip in a single buffer (highlight as changed)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              if (decisions[i] & (1 << j)) {\n+                for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                  size_t l = result_diff_start_pos[j]++;\n+                  dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 1;\n+                }\n+                word_offset_result_index[j]++;\n+                break;\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1667819343",
            "id": 1667819343,
            "in_reply_to_id": 1651875238,
            "line": 2295,
            "node_id": "PRRC_kwDOAPphoM5jaOdP",
            "original_commit_id": "4e0884a06cd6e77690fa68f82d5e83b80bc87d39",
            "original_line": 2260,
            "original_position": 256,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": 291,
            "pull_request_review_id": 2161995300,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667819343/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-08T00:39:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667819343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Haven't read the full write-up yet, but can the grouping optimization be pulled into a separate PR?",
            "created_at": "2023-05-10T11:31:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-1542026759",
            "id": 1542026759,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM5b6XYH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542026759/reactions"
            },
            "updated_at": "2023-05-10T11:31:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542026759",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I created a separate pull request for the grouping optimization https://github.com/neovim/neovim/pull/23611",
            "created_at": "2023-05-13T13:56:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-1546658613",
            "id": 1546658613,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM5cMCM1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1546658613/reactions"
            },
            "updated_at": "2023-05-13T13:56:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1546658613",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "can someone point me to where in the source code a word definition (:set iskeyword / iskeyword=@,48-57,_,192-255 ) is used to increment the cursor positon? I've been trying to find it. I'd like to add some functionality for a word diff that uses the current \"iskeyword\" definition to define the word for a word-based diff, instead of character wise.",
            "created_at": "2023-05-23T19:25:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-1560008179",
            "id": 1560008179,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM5c-9Xz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1560008179/reactions"
            },
            "updated_at": "2023-05-23T19:25:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1560008179",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> where in the source code a word definition (:set iskeyword / iskeyword=@,48-57,_,192-255 ) is used to increment the cursor positon?\r\n\r\n[buf_init_chartab](https://github.com/neovim/neovim/blob/28f1f65bb30768db3423dc6eb39b2d75dfaba326/src/nvim/charset.c#L88) uses 'iskeyword' to set `g_chartab`, which is used by [vim_iswordc](https://github.com/neovim/neovim/blob/28f1f65bb30768db3423dc6eb39b2d75dfaba326/src/nvim/charset.c#L800) to decide a \"word\". Example of advancing over a `<word>`: https://github.com/neovim/neovim/blob/28f1f65bb30768db3423dc6eb39b2d75dfaba326/src/nvim/mapping.c#L610-L617",
            "created_at": "2023-06-05T02:02:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-1575928350",
            "id": 1575928350,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM5d7sIe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1575928350/reactions"
            },
            "updated_at": "2023-06-05T02:02:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1575928350",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The current version I have on this pull request works for word-diff and char-diff. It seems to be working fine, I'm planning to add a bunch tests for it and the code might be able to be simplified further or atleast move some things to functions to make it look cleaner\r\n\r\nword diff is activated with:\r\nset diffopt+=worddiff:100\r\nand char diff is activated with:\r\nset diffopt+=chardiff:100",
            "created_at": "2023-06-10T12:59:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-1585654395",
            "id": 1585654395,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM5egyp7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 9,
                "laugh": 0,
                "rocket": 0,
                "total_count": 9,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1585654395/reactions"
            },
            "updated_at": "2023-06-10T12:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1585654395",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@lewis6991 \r\nany chance of getting this character/word diff merged?",
            "created_at": "2024-06-13T13:45:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2165723214",
            "id": 2165723214,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6BFlBO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165723214/reactions"
            },
            "updated_at": "2024-06-13T13:45:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165723214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "All of CI is failing so that needs to be addressed first.\r\n\r\nI'm also not fully sure what this even does. Can you update description and remove anything that's not needed.",
            "created_at": "2024-06-13T13:57:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2165756114",
            "id": 2165756114,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6BFtDS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165756114/reactions"
            },
            "updated_at": "2024-06-13T13:57:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165756114",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the reply @lewis6991 \r\n\r\nthe part in the description that is no longer relevant is the grouping optimization, which was already merged. I will remove that.\r\n\r\nso,  when you have two lines compared side by side in diff mode (whether linematch is enabled or not), the changed line will be highlighted from the start of the changed area to the end. So this is fine when there is one change per line. But when you get two changes on a line that are not adjacent, it highlights the whole unchanged area in between\r\nSo take for example this line:\r\nAAAAAAA\r\nchanged to \r\nBAAAAAAA\r\njust the B will be highlighted\r\nbut when I change it to \r\nBAAAAAAAB\r\nthe whole line will be highlighted, because the 'changed' area starts at the first change (the B on the left) and goes to the last change (the B on the right), this makes the highlight very not useful, because when I first glance at the highlight I see the entire line is changed, when I'd like to see just the two characters that have changed. So this is what the charmatch and wordmatch do, they highlight only the changed characters (or words with wordmatch) , instead of the whole line.\r\nThese pictures are still relevant to show what it is doing, they show charmatch enabled and disabled.\r\n\r\n![image](https://github.com/neovim/neovim/assets/32371757/c8a3a219-9736-49c2-96a0-8799aa48705e)\r\n![image](https://github.com/neovim/neovim/assets/32371757/043b3029-b8b1-445b-86cf-5f015c788bfe)\r\n",
            "created_at": "2024-06-14T12:26:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2167916634",
            "id": 2167916634,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6BN8ha",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 4,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2167916634/reactions"
            },
            "updated_at": "2024-06-14T12:28:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2167916634",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "description is modified to be up to date with the code (grouping optimization part removed)",
            "created_at": "2024-06-14T12:57:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2167982490",
            "id": 2167982490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6BOMma",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2167982490/reactions"
            },
            "updated_at": "2024-06-14T12:57:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2167982490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Don't forget the test failures; those are more important.",
            "created_at": "2024-06-14T13:11:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2168014113",
            "id": 2168014113,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6BOUUh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2168014113/reactions"
            },
            "updated_at": "2024-06-14T13:11:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2168014113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> A few comments. Also, how will we handle internationalization/utf-8?\r\n\r\nI have not used international utf-8 characters much, I just tried it and seems to work fine. If the utf-8 character is more than 1 byte, it gets treated as multiple chars (of 1 byte each)  in the comparison. If there is an issue, we may have to treat the longer utf-8 character as a 'word', as is done in the worddiff feature.  But the end result seems to work fine. Do you have an example where it is not working?\r\n![image](https://github.com/neovim/neovim/assets/32371757/188361dd-0ad7-4a75-9a90-20dcd01634af)\r\nedit:\r\nI think I can see how if one of the 8 bit sections of a utf-8 char is the same as one of the 'normal' characters like 'a', 'b', 'c', then it would cause problems.\r\n",
            "created_at": "2024-06-30T02:26:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2198409066",
            "id": 2198409066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6DCQ9q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2198409066/reactions"
            },
            "updated_at": "2024-06-30T12:11:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2198409066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> A few comments. Also, how will we handle internationalization/utf-8?\r\n\r\nI just put in a change to handle utf-8 characters as multiple character tokens so they are compared correctly, similar to how words are compared. I will put in some functional tests for it",
            "created_at": "2024-07-03T03:06:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2204979540",
            "id": 2204979540,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6DbVFU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 5,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2204979540/reactions"
            },
            "updated_at": "2024-07-03T03:06:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2204979540",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23569/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/23569/commits",
    "created_at": "2023-05-10T11:07:43Z",
    "diff_url": "https://github.com/neovim/neovim/pull/23569.diff",
    "draft": true,
    "head": {
        "label": "jwhite510:charmatch5",
        "ref": "charmatch5",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/jwhite510/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/jwhite510/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/jwhite510/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/jwhite510/neovim/branches{/branch}",
            "clone_url": "https://github.com/jwhite510/neovim.git",
            "collaborators_url": "https://api.github.com/repos/jwhite510/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/jwhite510/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/jwhite510/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/jwhite510/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/jwhite510/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/jwhite510/neovim/contributors",
            "created_at": "2021-03-27T20:08:15Z",
            "default_branch": "document_1",
            "deployments_url": "https://api.github.com/repos/jwhite510/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/jwhite510/neovim/downloads",
            "events_url": "https://api.github.com/repos/jwhite510/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/jwhite510/neovim/forks",
            "full_name": "jwhite510/neovim",
            "git_commits_url": "https://api.github.com/repos/jwhite510/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/jwhite510/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/jwhite510/neovim/git/tags{/sha}",
            "git_url": "git://github.com/jwhite510/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/jwhite510/neovim/hooks",
            "html_url": "https://github.com/jwhite510/neovim",
            "id": 352166879,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/jwhite510/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/jwhite510/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/jwhite510/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/jwhite510/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/jwhite510/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/jwhite510/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/jwhite510/neovim/merges",
            "milestones_url": "https://api.github.com/repos/jwhite510/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTIxNjY4Nzk=",
            "notifications_url": "https://api.github.com/repos/jwhite510/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/jwhite510/neovim/pulls{/number}",
            "pushed_at": "2024-07-21T01:21:22Z",
            "releases_url": "https://api.github.com/repos/jwhite510/neovim/releases{/id}",
            "size": 280028,
            "ssh_url": "git@github.com:jwhite510/neovim.git",
            "stargazers_count": 6,
            "stargazers_url": "https://api.github.com/repos/jwhite510/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/jwhite510/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/jwhite510/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/jwhite510/neovim/subscription",
            "svn_url": "https://github.com/jwhite510/neovim",
            "tags_url": "https://api.github.com/repos/jwhite510/neovim/tags",
            "teams_url": "https://api.github.com/repos/jwhite510/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/jwhite510/neovim/git/trees{/sha}",
            "updated_at": "2021-12-10T20:56:23Z",
            "url": "https://api.github.com/repos/jwhite510/neovim",
            "visibility": "public",
            "watchers": 6,
            "watchers_count": 6,
            "web_commit_signoff_required": false
        },
        "sha": "addf8846ea77fc51a1ceccf6b5a3671700634426",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
            "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
            "followers_url": "https://api.github.com/users/jwhite510/followers",
            "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
            "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/jwhite510",
            "id": 32371757,
            "login": "jwhite510",
            "node_id": "MDQ6VXNlcjMyMzcxNzU3",
            "organizations_url": "https://api.github.com/users/jwhite510/orgs",
            "received_events_url": "https://api.github.com/users/jwhite510/received_events",
            "repos_url": "https://api.github.com/users/jwhite510/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/jwhite510"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/23569",
    "id": 1345201310,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 3010934759,
            "name": "diff",
            "node_id": "MDU6TGFiZWwzMDEwOTM0NzU5",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diff"
        }
    ],
    "locked": false,
    "merge_commit_sha": "87f86775f8f5fe884977265488f1aa3615b48731",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5QLiSe",
    "number": 23569,
    "patch_url": "https://github.com/neovim/neovim/pull/23569.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/23569/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/addf8846ea77fc51a1ceccf6b5a3671700634426",
    "title": "charmatch / wordmatch - improved diff highlighting between adjacent lines",
    "updated_at": "2024-07-21T01:21:23Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
        "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
        "followers_url": "https://api.github.com/users/jwhite510/followers",
        "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
        "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jwhite510",
        "id": 32371757,
        "login": "jwhite510",
        "node_id": "MDQ6VXNlcjMyMzcxNzU3",
        "organizations_url": "https://api.github.com/users/jwhite510/orgs",
        "received_events_url": "https://api.github.com/users/jwhite510/received_events",
        "repos_url": "https://api.github.com/users/jwhite510/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jwhite510"
    }
}