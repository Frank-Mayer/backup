{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30227/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30227/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/30227"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30227"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30227/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/1c4510cc053005dd20ed3e63c8542847bb0155f9"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5573,
            "forks_count": 5573,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1771,
            "open_issues_count": 1771,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-09-09T12:14:47Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 284802,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 81560,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-09-10T01:50:42Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 81560,
            "watchers_count": 81560,
            "web_commit_signoff_required": false
        },
        "sha": "9570ad24f52442d75d677412cfe2fa83a7ff7a88",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "This commit also adds some tests for the existing memoization functionality.\r\n\r\n---\r\n\r\n### Justification\r\n\r\n1. It would be nice to have some finer-grained control over the memoization cache invalidation. I have anecdotally observed that this would be very helpful when trying to tackle something like https://github.com/neovim/neovim/pull/27422#issuecomment-1937493022. (E.g., how can we manually invalidate the result of a function for a specific bufnr?)\r\n2. Based on [this TODO comment](https://github.com/neovim/neovim/blob/60ea0467411d8452b0af75836aec377cbe781fbc/runtime/lua/vim/func.lua#L6C1-L8C10), it seems like this was already a feature that was desired in general\r\n\r\n### Implementation\r\n\r\nNow, instead of just returning a function which has it's result memoized, the memoization initializer (now a separate `_init` method) returns a table, which is still callable as a function to match the previous functionality, but also stores additional metadata (in its metatable, to avoid clashes with the actual cache content), like a function to invalidate the cache value at a certain index. This invalidation function is then used by a new method in the memoization module (`_invalidate`) to actually perform the cache invalidation ",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1740248881"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740248881"
                }
            },
            "author_association": "MEMBER",
            "body": "Not sure if it's absolutely needed since the module is private, but I think we can prefix the methods in this module with an underscore to mark them as private (and that way you can remove the `@nodoc` annotation).",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-02T01:47:21Z",
            "diff_hunk": "@@ -33,31 +35,67 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- Memoizes a function {fn} using {hash} to hash the arguments.\n+---\n+--- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n+--- cache will be invalidated whenever Lua does garbage collection.\n+---\n+--- The memoized function returns shared references so be wary about\n+--- mutating return values.\n+---\n --- @generic F: function\n---- @param hash integer|string|fun(...): any\n---- @param fn F\n---- @param strong? boolean\n---- @return F\n-return function(hash, fn, strong)\n+--- @param hash integer|string|function Hash function to create a hash to use as a key to\n+---     store results. Possible values:\n+---     - When integer, refers to the index of an argument of {fn} to hash.\n+---     This argument can have any type.\n+---     - When function, is evaluated using the same arguments passed to {fn}.\n+---     - When `concat`, the hash is determined by string concatenating all the\n+---     arguments passed to {fn}.\n+---     - When `concat-n`, the hash is determined by string concatenating the\n+---     first n arguments passed to {fn}.\n+---\n+--- @param fn F Function to memoize.\n+--- @param strong? boolean Do not use a weak table\n+--- @return F # Memoized version of {fn}\n+--- @nodoc\n+M.init = function(hash, fn, strong)",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1740248881",
            "id": 1740248881,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5nuhcx",
            "original_commit_id": "948956895c1e1f0fc0b0d58907bd58eb6aec54b0",
            "original_line": 61,
            "original_position": 40,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": null,
            "pull_request_review_id": 2274559531,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740248881/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-02T01:49:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740248881",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1740249388"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740249388"
                }
            },
            "author_association": "MEMBER",
            "body": "Why not validate `strong`?",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-02T01:48:43Z",
            "diff_hunk": "@@ -33,31 +35,67 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- Memoizes a function {fn} using {hash} to hash the arguments.\n+---\n+--- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n+--- cache will be invalidated whenever Lua does garbage collection.\n+---\n+--- The memoized function returns shared references so be wary about\n+--- mutating return values.\n+---\n --- @generic F: function\n---- @param hash integer|string|fun(...): any\n---- @param fn F\n---- @param strong? boolean\n---- @return F\n-return function(hash, fn, strong)\n+--- @param hash integer|string|function Hash function to create a hash to use as a key to\n+---     store results. Possible values:\n+---     - When integer, refers to the index of an argument of {fn} to hash.\n+---     This argument can have any type.\n+---     - When function, is evaluated using the same arguments passed to {fn}.\n+---     - When `concat`, the hash is determined by string concatenating all the\n+---     arguments passed to {fn}.\n+---     - When `concat-n`, the hash is determined by string concatenating the\n+---     first n arguments passed to {fn}.\n+---\n+--- @param fn F Function to memoize.\n+--- @param strong? boolean Do not use a weak table\n+--- @return F # Memoized version of {fn}\n+--- @nodoc\n+M.init = function(hash, fn, strong)\n   vim.validate({",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1740249388",
            "id": 1740249388,
            "line": 52,
            "node_id": "PRRC_kwDOAPphoM5nuhks",
            "original_commit_id": "948956895c1e1f0fc0b0d58907bd58eb6aec54b0",
            "original_line": 52,
            "original_position": 41,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 28,
            "pull_request_review_id": 2274559531,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740249388/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-02T01:49:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740249388",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1741059026"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741059026"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah right, thx good catch!",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-02T15:18:06Z",
            "diff_hunk": "@@ -33,31 +35,67 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- Memoizes a function {fn} using {hash} to hash the arguments.\n+---\n+--- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n+--- cache will be invalidated whenever Lua does garbage collection.\n+---\n+--- The memoized function returns shared references so be wary about\n+--- mutating return values.\n+---\n --- @generic F: function\n---- @param hash integer|string|fun(...): any\n---- @param fn F\n---- @param strong? boolean\n---- @return F\n-return function(hash, fn, strong)\n+--- @param hash integer|string|function Hash function to create a hash to use as a key to\n+---     store results. Possible values:\n+---     - When integer, refers to the index of an argument of {fn} to hash.\n+---     This argument can have any type.\n+---     - When function, is evaluated using the same arguments passed to {fn}.\n+---     - When `concat`, the hash is determined by string concatenating all the\n+---     arguments passed to {fn}.\n+---     - When `concat-n`, the hash is determined by string concatenating the\n+---     first n arguments passed to {fn}.\n+---\n+--- @param fn F Function to memoize.\n+--- @param strong? boolean Do not use a weak table\n+--- @return F # Memoized version of {fn}\n+--- @nodoc\n+M.init = function(hash, fn, strong)\n   vim.validate({",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1741059026",
            "id": 1741059026,
            "in_reply_to_id": 1740249388,
            "line": 52,
            "node_id": "PRRC_kwDOAPphoM5nxnPS",
            "original_commit_id": "948956895c1e1f0fc0b0d58907bd58eb6aec54b0",
            "original_line": 52,
            "original_position": 41,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 28,
            "pull_request_review_id": 2275882139,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741059026/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-02T15:18:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741059026",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1741676396"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741676396"
                }
            },
            "author_association": "MEMBER",
            "body": "Instead of using `getmetatable`, how about returning an object with an `invalidate` method? This would also mean not returning `cache` directly and doing something like:\r\n\r\n```lua\r\n\r\n  local obj = { \r\n    _cache = {},\r\n    _hash = hash,\r\n    invalidate = function(self, ...)\r\n      local key = self._hash(...)\r\n      self._cache[key] = nil\r\n    end,\r\n  }\r\n\r\n  return setmetatable(obj, {\r\n    __mode == strong and 'kv' or nil,\r\n    __call = function(self, ...)\r\n      local key = self._hash(...)\r\n      local cache = self._cache\r\n      if cache[key] == nil then\r\n        cache[key] = vim.F.pack_len(fn(...))\r\n      end\r\n      return vim.F.unpack_len(cache[key])\r\n    end,\r\n  }\r\n```\r\n\r\nThis would mean none of the call sites need to change.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-03T08:46:29Z",
            "diff_hunk": "@@ -33,31 +35,67 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- Memoizes a function {fn} using {hash} to hash the arguments.\n+---\n+--- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n+--- cache will be invalidated whenever Lua does garbage collection.\n+---\n+--- The memoized function returns shared references so be wary about\n+--- mutating return values.\n+---\n --- @generic F: function\n---- @param hash integer|string|fun(...): any\n---- @param fn F\n---- @param strong? boolean\n---- @return F\n-return function(hash, fn, strong)\n+--- @param hash integer|string|function Hash function to create a hash to use as a key to\n+---     store results. Possible values:\n+---     - When integer, refers to the index of an argument of {fn} to hash.\n+---     This argument can have any type.\n+---     - When function, is evaluated using the same arguments passed to {fn}.\n+---     - When `concat`, the hash is determined by string concatenating all the\n+---     arguments passed to {fn}.\n+---     - When `concat-n`, the hash is determined by string concatenating the\n+---     first n arguments passed to {fn}.\n+---\n+--- @param fn F Function to memoize.\n+--- @param strong? boolean Do not use a weak table\n+--- @return F # Memoized version of {fn}\n+M._init = function(hash, fn, strong)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    strong = { strong, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n+  hash = resolve_hash(hash)\n+\n   local cache = {}\n+  ---@type metatable\n+  local mt = {\n+    __call = function(self, ...)\n+      local key = hash(...)\n+      if rawget(self, key) == nil then\n+        rawset(self, key, vim.F.pack_len(fn(...)))\n+      end\n+\n+      return vim.F.unpack_len(rawget(self, key))\n+    end,\n+    invalidate = function(self, ...)\n+      local key = hash(...)\n+      rawset(self, key, nil)\n+    end,\n+  }\n+\n   if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n+    mt.__mode = 'kv'\n   end\n \n-  hash = resolve_hash(hash)\n+  setmetatable(cache, mt)\n \n-  return function(...)\n-    local key = hash(...)\n-    if cache[key] == nil then\n-      cache[key] = vim.F.pack_len(fn(...))\n-    end\n+  return cache\n+end\n \n-    return vim.F.unpack_len(cache[key])\n-  end\n+--- Invalidates the memoized function result for the given inputs.\n+--- @param memoized_func function\n+M._invalidate = function(memoized_func, ...)\n+  getmetatable(memoized_func).invalidate(memoized_func, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1741676396",
            "id": 1741676396,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5nz99s",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 98,
            "original_position": 87,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": null,
            "pull_request_review_id": 2276800920,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741676396/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-03T08:52:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741676396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1741680471"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741680471"
                }
            },
            "author_association": "MEMBER",
            "body": "The point of wrapping this in a function is so the `require` is only done when the function is called. I'd prefer if we keep this as it was for now.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-03T08:49:09Z",
            "diff_hunk": "@@ -3,40 +3,11 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.\n -- - I don't think the story around `hash` is completely thought out. We\n --   may be able to have a good default hash by hashing each argument,\n --   so basically a better 'concat'.\n -- - Need to support multi level caches. Can be done by allow `hash` to\n --   return multiple values.\n---\n---- Memoizes a function {fn} using {hash} to hash the arguments.\n----\n---- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n---- cache will be invalidated whenever Lua does garbage collection.\n----\n---- The memoized function returns shared references so be wary about\n---- mutating return values.\n----\n---- @generic F: function\n---- @param hash integer|string|function Hash function to create a hash to use as a key to\n----     store results. Possible values:\n----     - When integer, refers to the index of an argument of {fn} to hash.\n----     This argument can have any type.\n----     - When function, is evaluated using the same arguments passed to {fn}.\n----     - When `concat`, the hash is determined by string concatenating all the\n----     arguments passed to {fn}.\n----     - When `concat-n`, the hash is determined by string concatenating the\n----     first n arguments passed to {fn}.\n----\n---- @param fn F Function to memoize.\n---- @param strong? boolean Do not use a weak table\n---- @return F # Memoized version of {fn}\n---- @nodoc\n-function M._memoize(hash, fn, strong)\n-  return require('vim.func._memoize')(hash, fn, strong)\n-end\n+M._memoize = require('vim.func._memoize')",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1741680471",
            "id": 1741680471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5nz-9X",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 11,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": null,
            "pull_request_review_id": 2276800920,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741680471/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-03T08:52:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741680471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1741733378"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741733378"
                }
            },
            "author_association": "MEMBER",
            "body": "maybe add a `-- lazy-load` comment so this is clear",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-03T09:25:01Z",
            "diff_hunk": "@@ -3,40 +3,11 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.\n -- - I don't think the story around `hash` is completely thought out. We\n --   may be able to have a good default hash by hashing each argument,\n --   so basically a better 'concat'.\n -- - Need to support multi level caches. Can be done by allow `hash` to\n --   return multiple values.\n---\n---- Memoizes a function {fn} using {hash} to hash the arguments.\n----\n---- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n---- cache will be invalidated whenever Lua does garbage collection.\n----\n---- The memoized function returns shared references so be wary about\n---- mutating return values.\n----\n---- @generic F: function\n---- @param hash integer|string|function Hash function to create a hash to use as a key to\n----     store results. Possible values:\n----     - When integer, refers to the index of an argument of {fn} to hash.\n----     This argument can have any type.\n----     - When function, is evaluated using the same arguments passed to {fn}.\n----     - When `concat`, the hash is determined by string concatenating all the\n----     arguments passed to {fn}.\n----     - When `concat-n`, the hash is determined by string concatenating the\n----     first n arguments passed to {fn}.\n----\n---- @param fn F Function to memoize.\n---- @param strong? boolean Do not use a weak table\n---- @return F # Memoized version of {fn}\n---- @nodoc\n-function M._memoize(hash, fn, strong)\n-  return require('vim.func._memoize')(hash, fn, strong)\n-end\n+M._memoize = require('vim.func._memoize')",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1741733378",
            "id": 1741733378,
            "in_reply_to_id": 1741680471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5n0L4C",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 11,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": null,
            "pull_request_review_id": 2276892473,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741733378/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-03T09:25:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741733378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1741738509"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741738509"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- @param weak? boolean Use a weak table (default true)\r\n```",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-03T09:28:30Z",
            "diff_hunk": "@@ -33,31 +35,67 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- Memoizes a function {fn} using {hash} to hash the arguments.\n+---\n+--- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n+--- cache will be invalidated whenever Lua does garbage collection.\n+---\n+--- The memoized function returns shared references so be wary about\n+--- mutating return values.\n+---\n --- @generic F: function\n---- @param hash integer|string|fun(...): any\n---- @param fn F\n---- @param strong? boolean\n---- @return F\n-return function(hash, fn, strong)\n+--- @param hash integer|string|function Hash function to create a hash to use as a key to\n+---     store results. Possible values:\n+---     - When integer, refers to the index of an argument of {fn} to hash.\n+---     This argument can have any type.\n+---     - When function, is evaluated using the same arguments passed to {fn}.\n+---     - When `concat`, the hash is determined by string concatenating all the\n+---     arguments passed to {fn}.\n+---     - When `concat-n`, the hash is determined by string concatenating the\n+---     first n arguments passed to {fn}.\n+---\n+--- @param fn F Function to memoize.\n+--- @param strong? boolean Do not use a weak table",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1741738509",
            "id": 1741738509,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5n0NIN",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 58,
            "original_position": 37,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": null,
            "pull_request_review_id": 2276900378,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741738509/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-03T09:28:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741738509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1741739690"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741739690"
                }
            },
            "author_association": "MEMBER",
            "body": "why not move the memoize impl to `runtime/lua/vim/func.lua` ? ",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-03T09:29:21Z",
            "diff_hunk": "@@ -3,40 +3,11 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.\n -- - I don't think the story around `hash` is completely thought out. We\n --   may be able to have a good default hash by hashing each argument,\n --   so basically a better 'concat'.\n -- - Need to support multi level caches. Can be done by allow `hash` to\n --   return multiple values.\n---\n---- Memoizes a function {fn} using {hash} to hash the arguments.\n----\n---- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n---- cache will be invalidated whenever Lua does garbage collection.\n----\n---- The memoized function returns shared references so be wary about\n---- mutating return values.\n----\n---- @generic F: function\n---- @param hash integer|string|function Hash function to create a hash to use as a key to\n----     store results. Possible values:\n----     - When integer, refers to the index of an argument of {fn} to hash.\n----     This argument can have any type.\n----     - When function, is evaluated using the same arguments passed to {fn}.\n----     - When `concat`, the hash is determined by string concatenating all the\n----     arguments passed to {fn}.\n----     - When `concat-n`, the hash is determined by string concatenating the\n----     first n arguments passed to {fn}.\n----\n---- @param fn F Function to memoize.\n---- @param strong? boolean Do not use a weak table\n---- @return F # Memoized version of {fn}\n---- @nodoc\n-function M._memoize(hash, fn, strong)\n-  return require('vim.func._memoize')(hash, fn, strong)\n-end\n+M._memoize = require('vim.func._memoize')",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1741739690",
            "id": 1741739690,
            "in_reply_to_id": 1741680471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5n0Naq",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 11,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": null,
            "pull_request_review_id": 2276902295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741739690/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-03T09:29:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741739690",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1741858826"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741858826"
                }
            },
            "author_association": "MEMBER",
            "body": "I put it in its own file (`runtime/lua/vim/func/_memoize.lua`) for better encapsulation as `_memoize` needs at least 3 niche helper functions, and probably more in the future when the other TODO's are implemented.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-03T10:58:59Z",
            "diff_hunk": "@@ -3,40 +3,11 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.\n -- - I don't think the story around `hash` is completely thought out. We\n --   may be able to have a good default hash by hashing each argument,\n --   so basically a better 'concat'.\n -- - Need to support multi level caches. Can be done by allow `hash` to\n --   return multiple values.\n---\n---- Memoizes a function {fn} using {hash} to hash the arguments.\n----\n---- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n---- cache will be invalidated whenever Lua does garbage collection.\n----\n---- The memoized function returns shared references so be wary about\n---- mutating return values.\n----\n---- @generic F: function\n---- @param hash integer|string|function Hash function to create a hash to use as a key to\n----     store results. Possible values:\n----     - When integer, refers to the index of an argument of {fn} to hash.\n----     This argument can have any type.\n----     - When function, is evaluated using the same arguments passed to {fn}.\n----     - When `concat`, the hash is determined by string concatenating all the\n----     arguments passed to {fn}.\n----     - When `concat-n`, the hash is determined by string concatenating the\n----     first n arguments passed to {fn}.\n----\n---- @param fn F Function to memoize.\n---- @param strong? boolean Do not use a weak table\n---- @return F # Memoized version of {fn}\n---- @nodoc\n-function M._memoize(hash, fn, strong)\n-  return require('vim.func._memoize')(hash, fn, strong)\n-end\n+M._memoize = require('vim.func._memoize')",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1741858826",
            "id": 1741858826,
            "in_reply_to_id": 1741680471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5n0qgK",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 11,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": null,
            "pull_request_review_id": 2277102303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741858826/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-03T10:58:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1741858826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1742911660"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1742911660"
                }
            },
            "author_association": "MEMBER",
            "body": "Nice, that's a good change",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-04T02:40:55Z",
            "diff_hunk": "@@ -33,31 +35,67 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- Memoizes a function {fn} using {hash} to hash the arguments.\n+---\n+--- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n+--- cache will be invalidated whenever Lua does garbage collection.\n+---\n+--- The memoized function returns shared references so be wary about\n+--- mutating return values.\n+---\n --- @generic F: function\n---- @param hash integer|string|fun(...): any\n---- @param fn F\n---- @param strong? boolean\n---- @return F\n-return function(hash, fn, strong)\n+--- @param hash integer|string|function Hash function to create a hash to use as a key to\n+---     store results. Possible values:\n+---     - When integer, refers to the index of an argument of {fn} to hash.\n+---     This argument can have any type.\n+---     - When function, is evaluated using the same arguments passed to {fn}.\n+---     - When `concat`, the hash is determined by string concatenating all the\n+---     arguments passed to {fn}.\n+---     - When `concat-n`, the hash is determined by string concatenating the\n+---     first n arguments passed to {fn}.\n+---\n+--- @param fn F Function to memoize.\n+--- @param strong? boolean Do not use a weak table\n+--- @return F # Memoized version of {fn}\n+M._init = function(hash, fn, strong)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    strong = { strong, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n+  hash = resolve_hash(hash)\n+\n   local cache = {}\n+  ---@type metatable\n+  local mt = {\n+    __call = function(self, ...)\n+      local key = hash(...)\n+      if rawget(self, key) == nil then\n+        rawset(self, key, vim.F.pack_len(fn(...)))\n+      end\n+\n+      return vim.F.unpack_len(rawget(self, key))\n+    end,\n+    invalidate = function(self, ...)\n+      local key = hash(...)\n+      rawset(self, key, nil)\n+    end,\n+  }\n+\n   if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n+    mt.__mode = 'kv'\n   end\n \n-  hash = resolve_hash(hash)\n+  setmetatable(cache, mt)\n \n-  return function(...)\n-    local key = hash(...)\n-    if cache[key] == nil then\n-      cache[key] = vim.F.pack_len(fn(...))\n-    end\n+  return cache\n+end\n \n-    return vim.F.unpack_len(cache[key])\n-  end\n+--- Invalidates the memoized function result for the given inputs.\n+--- @param memoized_func function\n+M._invalidate = function(memoized_func, ...)\n+  getmetatable(memoized_func).invalidate(memoized_func, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1742911660",
            "id": 1742911660,
            "in_reply_to_id": 1741676396,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5n4ris",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 98,
            "original_position": 87,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": null,
            "pull_request_review_id": 2278828956,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1742911660/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-04T02:40:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1742911660",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1742921823"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1742921823"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm fine to change this back, but I had initially changed it also to reduce `require` usage; I may be misunderstanding but wouldn't the previous functionality always call `require` on each function call, whereas this version only calls `require` the one time initially (since it is not wrapped in a function, and thus just gets evaluated as a value the one time)? My debugging seems to confirm this as well, using\r\n\r\n```lua\r\nmy_count = 0\r\n\r\nlocal require = function(module)\r\n  my_count = my_count + 1\r\n  vim.print(my_count)\r\n  return original_require(module)\r\nend\r\n```\r\n\r\nI may be misunderstanding something, please let me know",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-04T02:59:44Z",
            "diff_hunk": "@@ -3,40 +3,11 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.\n -- - I don't think the story around `hash` is completely thought out. We\n --   may be able to have a good default hash by hashing each argument,\n --   so basically a better 'concat'.\n -- - Need to support multi level caches. Can be done by allow `hash` to\n --   return multiple values.\n---\n---- Memoizes a function {fn} using {hash} to hash the arguments.\n----\n---- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n---- cache will be invalidated whenever Lua does garbage collection.\n----\n---- The memoized function returns shared references so be wary about\n---- mutating return values.\n----\n---- @generic F: function\n---- @param hash integer|string|function Hash function to create a hash to use as a key to\n----     store results. Possible values:\n----     - When integer, refers to the index of an argument of {fn} to hash.\n----     This argument can have any type.\n----     - When function, is evaluated using the same arguments passed to {fn}.\n----     - When `concat`, the hash is determined by string concatenating all the\n----     arguments passed to {fn}.\n----     - When `concat-n`, the hash is determined by string concatenating the\n----     first n arguments passed to {fn}.\n----\n---- @param fn F Function to memoize.\n---- @param strong? boolean Do not use a weak table\n---- @return F # Memoized version of {fn}\n---- @nodoc\n-function M._memoize(hash, fn, strong)\n-  return require('vim.func._memoize')(hash, fn, strong)\n-end\n+M._memoize = require('vim.func._memoize')",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1742921823",
            "id": 1742921823,
            "in_reply_to_id": 1741680471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5n4uBf",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 11,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": null,
            "pull_request_review_id": 2278843860,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1742921823/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-04T02:59:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1742921823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1743384327"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1743384327"
                }
            },
            "author_association": "MEMBER",
            "body": ">  but wouldn't the previous functionality always call require on each function call\r\n\r\n`require` is self caching so this isn't a problem. On the first call `require` places the module in `package.loaded[<module_name>]`, and fetches from that on subsequent calls.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-04T09:25:05Z",
            "diff_hunk": "@@ -3,40 +3,11 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.\n -- - I don't think the story around `hash` is completely thought out. We\n --   may be able to have a good default hash by hashing each argument,\n --   so basically a better 'concat'.\n -- - Need to support multi level caches. Can be done by allow `hash` to\n --   return multiple values.\n---\n---- Memoizes a function {fn} using {hash} to hash the arguments.\n----\n---- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n---- cache will be invalidated whenever Lua does garbage collection.\n----\n---- The memoized function returns shared references so be wary about\n---- mutating return values.\n----\n---- @generic F: function\n---- @param hash integer|string|function Hash function to create a hash to use as a key to\n----     store results. Possible values:\n----     - When integer, refers to the index of an argument of {fn} to hash.\n----     This argument can have any type.\n----     - When function, is evaluated using the same arguments passed to {fn}.\n----     - When `concat`, the hash is determined by string concatenating all the\n----     arguments passed to {fn}.\n----     - When `concat-n`, the hash is determined by string concatenating the\n----     first n arguments passed to {fn}.\n----\n---- @param fn F Function to memoize.\n---- @param strong? boolean Do not use a weak table\n---- @return F # Memoized version of {fn}\n---- @nodoc\n-function M._memoize(hash, fn, strong)\n-  return require('vim.func._memoize')(hash, fn, strong)\n-end\n+M._memoize = require('vim.func._memoize')",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1743384327",
            "id": 1743384327,
            "in_reply_to_id": 1741680471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5n6e8H",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 11,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": null,
            "pull_request_review_id": 2279502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1743384327/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-04T09:25:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1743384327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1743391048"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1743391048"
                }
            },
            "author_association": "MEMBER",
            "body": "If you want to optimize away the table indexes, which I don't recommend, you could do.\r\n\r\n```lua\r\nfunction M._memoize(hash, fn, strong)\r\n  M._memoize = require('vim.func._memoize')\r\n  return M._memoize(hash, fn, strong)\r\nend\r\n```\r\n\r\nBut this is an extreme micro-op IMO.\r\n\r\nFor now I don't think any churn here is worth it. We can revisit this when `vim.func` is more fleshed out.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-04T09:29:31Z",
            "diff_hunk": "@@ -3,40 +3,11 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.\n -- - I don't think the story around `hash` is completely thought out. We\n --   may be able to have a good default hash by hashing each argument,\n --   so basically a better 'concat'.\n -- - Need to support multi level caches. Can be done by allow `hash` to\n --   return multiple values.\n---\n---- Memoizes a function {fn} using {hash} to hash the arguments.\n----\n---- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n---- cache will be invalidated whenever Lua does garbage collection.\n----\n---- The memoized function returns shared references so be wary about\n---- mutating return values.\n----\n---- @generic F: function\n---- @param hash integer|string|function Hash function to create a hash to use as a key to\n----     store results. Possible values:\n----     - When integer, refers to the index of an argument of {fn} to hash.\n----     This argument can have any type.\n----     - When function, is evaluated using the same arguments passed to {fn}.\n----     - When `concat`, the hash is determined by string concatenating all the\n----     arguments passed to {fn}.\n----     - When `concat-n`, the hash is determined by string concatenating the\n----     first n arguments passed to {fn}.\n----\n---- @param fn F Function to memoize.\n---- @param strong? boolean Do not use a weak table\n---- @return F # Memoized version of {fn}\n---- @nodoc\n-function M._memoize(hash, fn, strong)\n-  return require('vim.func._memoize')(hash, fn, strong)\n-end\n+M._memoize = require('vim.func._memoize')",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1743391048",
            "id": 1743391048,
            "in_reply_to_id": 1741680471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5n6glI",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 11,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": null,
            "pull_request_review_id": 2279513795,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1743391048/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-04T09:30:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1743391048",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1743827301"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1743827301"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, I understand the purpose of the original functionality then, I misinterpreted what you meant initially (deferred require > less requires). Thanks",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-04T13:41:07Z",
            "diff_hunk": "@@ -3,40 +3,11 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.\n -- - I don't think the story around `hash` is completely thought out. We\n --   may be able to have a good default hash by hashing each argument,\n --   so basically a better 'concat'.\n -- - Need to support multi level caches. Can be done by allow `hash` to\n --   return multiple values.\n---\n---- Memoizes a function {fn} using {hash} to hash the arguments.\n----\n---- Internally uses a |lua-weaktable| to cache the results of {fn} meaning the\n---- cache will be invalidated whenever Lua does garbage collection.\n----\n---- The memoized function returns shared references so be wary about\n---- mutating return values.\n----\n---- @generic F: function\n---- @param hash integer|string|function Hash function to create a hash to use as a key to\n----     store results. Possible values:\n----     - When integer, refers to the index of an argument of {fn} to hash.\n----     This argument can have any type.\n----     - When function, is evaluated using the same arguments passed to {fn}.\n----     - When `concat`, the hash is determined by string concatenating all the\n----     arguments passed to {fn}.\n----     - When `concat-n`, the hash is determined by string concatenating the\n----     first n arguments passed to {fn}.\n----\n---- @param fn F Function to memoize.\n---- @param strong? boolean Do not use a weak table\n---- @return F # Memoized version of {fn}\n---- @nodoc\n-function M._memoize(hash, fn, strong)\n-  return require('vim.func._memoize')(hash, fn, strong)\n-end\n+M._memoize = require('vim.func._memoize')",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1743827301",
            "id": 1743827301,
            "in_reply_to_id": 1741680471,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5n8LFl",
            "original_commit_id": "597181872527965bab6d9f78ea2697dfa43fe5e7",
            "original_line": 11,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": null,
            "pull_request_review_id": 2280265688,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1743827301/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-04T13:41:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1743827301",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745283058"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745283058"
                }
            },
            "author_association": "MEMBER",
            "body": "Another TODO: do we have visibility into the memoize data? For these long-lived containers which can grow indefinitely, we need to be able to ask them \r\n\r\n- to list their keys\r\n- (roughly) how much memory they're using\r\n- ideally, which keys are the most costly\r\n\r\n That will allow `:checkhealth` to show a warning, and eventually also we can do dynamic performance checks.\r\n\r\nOTOH, maybe there's an existing way to do that using Lua debug/introspection API.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T11:19:55Z",
            "diff_hunk": "@@ -3,9 +3,6 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745283058",
            "id": 1745283058,
            "line": 8,
            "node_id": "PRRC_kwDOAPphoM5oBufy",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 8,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": 6,
            "pull_request_review_id": 2282626552,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745283058/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T11:20:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745283058",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745287270"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745287270"
                }
            },
            "author_association": "MEMBER",
            "body": "Any objection to naming this `clear()` (see `:help dev-name-common`)? \r\n\r\nWe may eventually need to introduce `dispose()` as a conventional name, but that probably doesn't fit here.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T11:23:36Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {\n+    _cache = create_cache(weak),\n+    _hash = resolve_hash(hash),\n+    _weak = weak,\n+    --- @param self MemoObj\n+    invalidate = function(self, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745287270",
            "id": 1745287270,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5oBvhm",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 64,
            "original_position": 47,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": null,
            "pull_request_review_id": 2282633437,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745287270/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T11:23:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745287270",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745289835"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745289835"
                }
            },
            "author_association": "MEMBER",
            "body": "Just FYI: it's not really required to assign these in tests anymore, now that we have the `t` and `n` convention.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T11:25:41Z",
            "diff_hunk": "@@ -0,0 +1,120 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local clear = n.clear\n+local exec_lua = n.exec_lua\n+local eq = t.eq",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745289835",
            "id": 1745289835,
            "line": 5,
            "node_id": "PRRC_kwDOAPphoM5oBwJr",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": 3,
            "path": "test/functional/func/memoize_spec.lua",
            "position": 5,
            "pull_request_review_id": 2282637514,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745289835/reactions"
            },
            "side": "RIGHT",
            "start_line": 3,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-05T11:25:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745289835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745300715"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745300715"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we have a test that calls `vim.func._memoize('foo')` with the *same* string hash arg, and asserts that the memoized result is returned?\r\n\r\nIt's expected that `vim.func._memoize('foo')` called from anywhere in the Nvim process, from any plugin, will get the memoized result, correct? If so, that's useful for the \"visibility\" I mentioned earlier, because that means we have a centralized store in one place that can be inspected.\r\n\r\n",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T11:34:38Z",
            "diff_hunk": "@@ -0,0 +1,120 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local clear = n.clear\n+local exec_lua = n.exec_lua\n+local eq = t.eq\n+\n+describe('vim.func._memoize', function()\n+  before_each(clear)\n+\n+  it('caches function results based on their parameters', function()\n+    exec_lua([[\n+      _G.count = 0\n+\n+      local adder = vim.func._memoize('concat', function(arg1, arg2)",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745300715",
            "id": 1745300715,
            "line": 14,
            "node_id": "PRRC_kwDOAPphoM5oByzr",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 14,
            "original_position": 14,
            "original_start_line": null,
            "path": "test/functional/func/memoize_spec.lua",
            "position": 14,
            "pull_request_review_id": 2282655110,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745300715/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T11:34:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745300715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745300985"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745300985"
                }
            },
            "author_association": "MEMBER",
            "body": "\r\nDo callers need a way to ask `_memoize()` if something (a `hash` key) is already cached?",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T11:34:52Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745300985",
            "id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oBy35",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2282655575,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745300985/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T11:35:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745300985",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745498933"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745498933"
                }
            },
            "author_association": "MEMBER",
            "body": "The cache and hash function are exposed below.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T13:02:45Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745498933",
            "id": 1745498933,
            "in_reply_to_id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oCjM1",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2282989774,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745498933/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T13:02:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745498933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745499965"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745499965"
                }
            },
            "author_association": "MEMBER",
            "body": "I was also thinking `clear` or `reset`.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T13:03:23Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {\n+    _cache = create_cache(weak),\n+    _hash = resolve_hash(hash),\n+    _weak = weak,\n+    --- @param self MemoObj\n+    invalidate = function(self, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745499965",
            "id": 1745499965,
            "in_reply_to_id": 1745287270,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5oCjc9",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 64,
            "original_position": 47,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": null,
            "pull_request_review_id": 2282991885,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745499965/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T13:03:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745499965",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745514427"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745514427"
                }
            },
            "author_association": "MEMBER",
            "body": "- `_cache` is an exposed field.\r\n- Detecting memory usage is very difficult to implement, even roughly.\r\n\r\nI think the conventional debugger is a more productive route here.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T13:12:10Z",
            "diff_hunk": "@@ -3,9 +3,6 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745514427",
            "id": 1745514427,
            "in_reply_to_id": 1745283058,
            "line": 8,
            "node_id": "PRRC_kwDOAPphoM5oCm-7",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 8,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": 6,
            "pull_request_review_id": 2283016049,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745514427/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T13:12:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745514427",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745567136"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745567136"
                }
            },
            "author_association": "MEMBER",
            "body": "> I think the conventional debugger is a more productive route here.\r\n\r\nas long as that gives us a way to programmatically warn about potential performance issues, sure",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T13:42:19Z",
            "diff_hunk": "@@ -3,9 +3,6 @@ local M = {}\n -- TODO(lewis6991): Private for now until:\n -- - There are other places in the codebase that could benefit from this\n --   (e.g. LSP), but might require other changes to accommodate.\n--- - Invalidation of the cache needs to be controllable. Using weak tables\n---   is an acceptable invalidation policy, but it shouldn't be the only\n---   one.",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745567136",
            "id": 1745567136,
            "in_reply_to_id": 1745283058,
            "line": 8,
            "node_id": "PRRC_kwDOAPphoM5oCz2g",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 8,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/lua/vim/func.lua",
            "position": 6,
            "pull_request_review_id": 2283106835,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745567136/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T13:42:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745567136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745570303"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745570303"
                }
            },
            "author_association": "MEMBER",
            "body": "they're currently marked private, while `invalidate` / `clear` is not. ",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T13:44:06Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745570303",
            "id": 1745570303,
            "in_reply_to_id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oC0n_",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2283111845,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745570303/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T13:44:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745570303",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745644421"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745644421"
                }
            },
            "author_association": "MEMBER",
            "body": "The whole module is private.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T14:23:12Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745644421",
            "id": 1745644421,
            "in_reply_to_id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oDGuF",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2283230187,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745644421/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T14:23:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745644421",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745654251"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745654251"
                }
            },
            "author_association": "MEMBER",
            "body": "that doesn't explain why we are marking some of its functions as private and some not. at some point we expect the module to mature and then we'll graduate it. we wouldn't wait until that time to then decide which of these functions are private/public",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T14:27:58Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745654251",
            "id": 1745654251,
            "in_reply_to_id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oDJHr",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2283245362,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745654251/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T14:28:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745654251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745685591"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745685591"
                }
            },
            "author_association": "MEMBER",
            "body": "I think these comments are getting out of scope. The motivation here is to assist with other active PR's. Let's not over-engineer this, the current requirements are simple.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T14:44:31Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745685591",
            "id": 1745685591,
            "in_reply_to_id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oDQxX",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2283295973,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745685591/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T14:44:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745685591",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745686741"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745686741"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- @alias vim.func.MemoObj { _hash: (fun(...): any), _weak: boolean?, _cache: table<any> }\r\n```",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T14:45:08Z",
            "diff_hunk": "@@ -1,5 +1,7 @@\n --- Module for private utility functions\n \n+--- @alias MemoObj { _hash: (fun(...): any), _weak: boolean?, _cache: table<any> }",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745686741",
            "id": 1745686741,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5oDRDV",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 3,
            "original_position": 3,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": null,
            "pull_request_review_id": 2283297835,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745686741/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T14:45:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745686741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745687503"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745687503"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  --- @type vim.func.MemoObj\r\n```",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T14:45:30Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745687503",
            "id": 1745687503,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5oDRPP",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 58,
            "original_position": 41,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": null,
            "pull_request_review_id": 2283298926,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745687503/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T14:45:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745687503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745687971"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745687971"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    --- @param self vim.func.MemoObj\r\n```",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T14:45:46Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {\n+    _cache = create_cache(weak),\n+    _hash = resolve_hash(hash),\n+    _weak = weak,\n+    --- @param self MemoObj",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745687971",
            "id": 1745687971,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5oDRWj",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 63,
            "original_position": 46,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": null,
            "pull_request_review_id": 2283299676,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745687971/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T14:45:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745687971",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1745700821"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745700821"
                }
            },
            "author_association": "MEMBER",
            "body": "> Do callers need a way to ask `_memoize()` if something (a `hash` key) is already cached?\r\n\r\nI asked this question for my own understanding, and whether these ideas are written in a TODO or other issue. There's nothing out of scope about that.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-05T14:51:54Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1745700821",
            "id": 1745700821,
            "in_reply_to_id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oDUfV",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2283320079,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745700821/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-05T14:53:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1745700821",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1746381988"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746381988"
                }
            },
            "author_association": "MEMBER",
            "body": "> It's expected that `vim.func._memoize('foo')` called from anywhere in the Nvim process, from any plugin, will get the memoized result, correct? If so, that's useful for the \"visibility\" I mentioned earlier, because that means we have a centralized store in one place that can be inspected.\r\n\r\nI don't think so, it's simpler than that thankfully. It would look more like this:\r\n\r\n```lua\r\nvim.func._memoize(tostring, function(arg) return arg end)('foo')\r\n-- or, more realistically:\r\nlocal returnme = vim.func._memoize(tostring, function(arg) return arg end)\r\nprint(returnme('foo'))\r\n```\r\nso you can see that the data inside the cache is local to each object and there isn't really an idea of the data being stored globally.\r\n\r\nJust as a final note for clarity, `vim.func._memoize('foo')` is invalid, since the function expects at least two functions (and then the returned value of that will be what gets called)",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-06T01:53:13Z",
            "diff_hunk": "@@ -0,0 +1,120 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local clear = n.clear\n+local exec_lua = n.exec_lua\n+local eq = t.eq\n+\n+describe('vim.func._memoize', function()\n+  before_each(clear)\n+\n+  it('caches function results based on their parameters', function()\n+    exec_lua([[\n+      _G.count = 0\n+\n+      local adder = vim.func._memoize('concat', function(arg1, arg2)",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1746381988",
            "id": 1746381988,
            "in_reply_to_id": 1745300715,
            "line": 14,
            "node_id": "PRRC_kwDOAPphoM5oF6yk",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 14,
            "original_position": 14,
            "original_start_line": null,
            "path": "test/functional/func/memoize_spec.lua",
            "position": 14,
            "pull_request_review_id": 2284422986,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746381988/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-06T01:53:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746381988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1746385612"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746385612"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry, I'm not sure what you mean? If I remove those assignments my test fails, since e.g. `exec_lua` is nil",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-06T02:00:42Z",
            "diff_hunk": "@@ -0,0 +1,120 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local clear = n.clear\n+local exec_lua = n.exec_lua\n+local eq = t.eq",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1746385612",
            "id": 1746385612,
            "in_reply_to_id": 1745289835,
            "line": 5,
            "node_id": "PRRC_kwDOAPphoM5oF7rM",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": 3,
            "path": "test/functional/func/memoize_spec.lua",
            "position": 5,
            "pull_request_review_id": 2284428393,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746385612/reactions"
            },
            "side": "RIGHT",
            "start_line": 3,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-06T02:00:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746385612",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1746399673"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746399673"
                }
            },
            "author_association": "MEMBER",
            "body": "> `e()` if something (a `hash` key) is already cached?\r\n\r\nThat should be pretty easy to do. Shall I add a TODO for it? I will say I think something like that would hopefully be rarely used/needed, since ideally callers would be able to set up the memoized function and then basically forget that it is a cache and just treat it like a normal function. \r\n\r\nAlso this can also be done now by inspecting the hidden cache, e.g. with query.get: `:=vim.treesitter.query.get._cache` (and then if your entry exists in here you know it was already cached. not saying it should be done that way but at least it is hackable as of now even :laughing: )",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-06T02:27:27Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1746399673",
            "id": 1746399673,
            "in_reply_to_id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oF_G5",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2284448516,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746399673/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-06T02:27:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746399673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1746911277"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746911277"
                }
            },
            "author_association": "MEMBER",
            "body": "I mean you can call `t.eq`, `n.clear` in the tests instead of declaring aliases here. It's up to you though.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-06T10:36:09Z",
            "diff_hunk": "@@ -0,0 +1,120 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local clear = n.clear\n+local exec_lua = n.exec_lua\n+local eq = t.eq",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1746911277",
            "id": 1746911277,
            "in_reply_to_id": 1745289835,
            "line": 5,
            "node_id": "PRRC_kwDOAPphoM5oH8At",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": 3,
            "path": "test/functional/func/memoize_spec.lua",
            "position": 5,
            "pull_request_review_id": 2285889330,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746911277/reactions"
            },
            "side": "RIGHT",
            "start_line": 3,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-06T10:36:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746911277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1746915864"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746915864"
                }
            },
            "author_association": "MEMBER",
            "body": "Based on [this](https://github.com/neovim/neovim/pull/30227#discussion_r1746381988) I guess it sounds like callers don't need a way to ask if a hash key is already cached, because there is no global memoize store. \r\n\r\nNot sure how I feel about this. It means that we don't have visbility into all these caches, and won't be able to give intuitive performance checks/warnings.",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-06T10:40:34Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1746915864",
            "id": 1746915864,
            "in_reply_to_id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oH9IY",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2285902779,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746915864/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-06T10:40:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746915864",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1746925485"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746925485"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we first should have any indication that these are possible performance issues; so far there has been none (but then this is not public API, although a number of plugins have their own local variant). ",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-06T10:50:04Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1746925485",
            "id": 1746925485,
            "in_reply_to_id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oH_et",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2285931775,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746925485/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-06T10:50:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746925485",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30227#discussion_r1746928783"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30227"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746928783"
                }
            },
            "author_association": "MEMBER",
            "body": ">  I think we first should have any indication that these are possible performance issues;\r\n\r\nNot in this case. Global long lived-caches will cause issues. They'll just be hidden. And \"giving indication\" will later be unnecessarily cumbersome if we don't have visibility, which is what I'm asking for (not in this PR, but eventually).",
            "commit_id": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
            "created_at": "2024-09-06T10:53:38Z",
            "diff_hunk": "@@ -33,31 +35,51 @@ local function resolve_hash(hash)\n   return hash\n end\n \n+--- @param weak boolean?\n+--- @return table\n+local create_cache = function(weak)\n+  return setmetatable({}, {\n+    __mode = weak ~= false and 'kv',\n+  })\n+end\n+\n --- @generic F: function\n --- @param hash integer|string|fun(...): any\n --- @param fn F\n---- @param strong? boolean\n+--- @param weak? boolean\n --- @return F\n-return function(hash, fn, strong)\n+return function(hash, fn, weak)\n   vim.validate({\n     hash = { hash, { 'number', 'string', 'function' } },\n     fn = { fn, 'function' },\n+    weak = { weak, 'boolean', true },\n   })\n \n-  ---@type table<any,table<any,any>>\n-  local cache = {}\n-  if not strong then\n-    setmetatable(cache, { __mode = 'kv' })\n-  end\n-\n-  hash = resolve_hash(hash)\n+  --- @type MemoObj\n+  local obj = {",
            "html_url": "https://github.com/neovim/neovim/pull/30227#discussion_r1746928783",
            "id": 1746928783,
            "in_reply_to_id": 1745300985,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5oIASP",
            "original_commit_id": "917764f40ef2d763b15b470b881589cd7f53f752",
            "original_line": 59,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/func/_memoize.lua",
            "position": 42,
            "pull_request_review_id": 2285942414,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746928783/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-06T10:53:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1746928783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Marking as skip news- I'm assuming this is ok since the function is private?",
            "created_at": "2024-09-02T00:14:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/30227#issuecomment-2323557958",
            "id": 2323557958,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30227",
            "node_id": "IC_kwDOAPphoM6Kfq5G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2323557958/reactions"
            },
            "updated_at": "2024-09-02T00:14:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2323557958",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Please make sure you provide appropriate context as to why you are making this change. What problem are you trying to solve?",
            "created_at": "2024-09-02T05:46:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/30227#issuecomment-2323861955",
            "id": 2323861955,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30227",
            "node_id": "IC_kwDOAPphoM6Kg1HD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2323861955/reactions"
            },
            "updated_at": "2024-09-02T05:46:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2323861955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Please make sure you provide appropriate context as to why you are making this change. What problem are you trying to solve?\r\n\r\nApologies, I have updated the PR description with this info :+1: ",
            "created_at": "2024-09-02T15:26:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/30227#issuecomment-2324984592",
            "id": 2324984592,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30227",
            "node_id": "IC_kwDOAPphoM6KlHMQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2324984592/reactions"
            },
            "updated_at": "2024-09-02T15:26:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2324984592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I would like to use these changes in #30257 (which is based on the implementation of #27392). The original design allows the invalidation to take no parameters, clearing the entire cache. Maybe I'm missing something but this PR doesn't seem to allow that right? @ribru17 ",
            "created_at": "2024-09-04T02:19:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/30227#issuecomment-2327776902",
            "id": 2327776902,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30227",
            "node_id": "IC_kwDOAPphoM6Kvw6G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2327776902/reactions"
            },
            "updated_at": "2024-09-04T02:19:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2327776902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@MariaSolOs correct, but I'll add that it sounds helpful",
            "created_at": "2024-09-04T02:38:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/30227#issuecomment-2327801865",
            "id": 2327801865,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30227",
            "node_id": "IC_kwDOAPphoM6Kv3AJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2327801865/reactions"
            },
            "updated_at": "2024-09-04T02:38:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2327801865",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ok I believe I've resolved everything, but I have not yet figured out a way for the type system to recognize that the result of `_memoize` can not only be called, but also have an `invalidate` method. I've been unable to get `@operator` and `@override` to work due to difficulties around preserving the generic function in the type signature.\r\n\r\nFor now it doesn't *really* affect anything because this method is not yet called, but it should still be resolved before this is merged I think",
            "created_at": "2024-09-05T03:34:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/30227#issuecomment-2330528999",
            "id": 2330528999,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30227",
            "node_id": "IC_kwDOAPphoM6K6Qzn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2330528999/reactions"
            },
            "updated_at": "2024-09-05T03:35:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2330528999",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@lewis6991 is the luals whisperer, maybe he has an idea",
            "created_at": "2024-09-05T09:57:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/30227#issuecomment-2331107942",
            "id": 2331107942,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30227",
            "node_id": "IC_kwDOAPphoM6K8eJm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2331107942/reactions"
            },
            "updated_at": "2024-09-05T09:57:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2331107942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30227/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/30227/commits",
    "created_at": "2024-09-02T00:08:39Z",
    "diff_url": "https://github.com/neovim/neovim/pull/30227.diff",
    "draft": false,
    "head": {
        "label": "ribru17:memo_invalidate",
        "ref": "memo_invalidate",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ribru17/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ribru17/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ribru17/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ribru17/neovim/branches{/branch}",
            "clone_url": "https://github.com/ribru17/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ribru17/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ribru17/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ribru17/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ribru17/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ribru17/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ribru17/neovim/contributors",
            "created_at": "2023-12-31T05:02:30Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ribru17/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ribru17/neovim/downloads",
            "events_url": "https://api.github.com/repos/ribru17/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ribru17/neovim/forks",
            "full_name": "ribru17/neovim",
            "git_commits_url": "https://api.github.com/repos/ribru17/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ribru17/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ribru17/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ribru17/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ribru17/neovim/hooks",
            "html_url": "https://github.com/ribru17/neovim",
            "id": 737455179,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ribru17/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ribru17/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ribru17/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ribru17/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ribru17/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ribru17/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ribru17/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ribru17/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK_SsSw",
            "notifications_url": "https://api.github.com/repos/ribru17/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ribru17/neovim/pulls{/number}",
            "pushed_at": "2024-09-09T05:31:04Z",
            "releases_url": "https://api.github.com/repos/ribru17/neovim/releases{/id}",
            "size": 278165,
            "ssh_url": "git@github.com:ribru17/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ribru17/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ribru17/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ribru17/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ribru17/neovim/subscription",
            "svn_url": "https://github.com/ribru17/neovim",
            "tags_url": "https://api.github.com/repos/ribru17/neovim/tags",
            "teams_url": "https://api.github.com/repos/ribru17/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ribru17/neovim/git/trees{/sha}",
            "updated_at": "2024-09-07T15:31:30Z",
            "url": "https://api.github.com/repos/ribru17/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "1c4510cc053005dd20ed3e63c8542847bb0155f9",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
            "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
            "followers_url": "https://api.github.com/users/ribru17/followers",
            "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
            "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ribru17",
            "id": 55766287,
            "login": "ribru17",
            "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
            "organizations_url": "https://api.github.com/users/ribru17/orgs",
            "received_events_url": "https://api.github.com/users/ribru17/received_events",
            "repos_url": "https://api.github.com/users/ribru17/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ribru17"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/30227",
    "id": 2048481255,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30227",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        },
        {
            "color": "0052CC",
            "default": false,
            "description": "",
            "id": 6664957181,
            "name": "ci:skip-news",
            "node_id": "LA_kwDOAPphoM8AAAABjUMs_Q",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ci:skip-news"
        }
    ],
    "locked": false,
    "merge_commit_sha": "90d0ea42d04587d68123ddb81facdd1fc8b40001",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM56GVfn",
    "number": 30227,
    "patch_url": "https://github.com/neovim/neovim/pull/30227.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
            "events_url": "https://api.github.com/users/clason/events{/privacy}",
            "followers_url": "https://api.github.com/users/clason/followers",
            "following_url": "https://api.github.com/users/clason/following{/other_user}",
            "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/clason",
            "id": 2361214,
            "login": "clason",
            "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
            "organizations_url": "https://api.github.com/users/clason/orgs",
            "received_events_url": "https://api.github.com/users/clason/received_events",
            "repos_url": "https://api.github.com/users/clason/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/clason"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
            "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
            "followers_url": "https://api.github.com/users/wookayin/followers",
            "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
            "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/wookayin",
            "id": 1009873,
            "login": "wookayin",
            "node_id": "MDQ6VXNlcjEwMDk4NzM=",
            "organizations_url": "https://api.github.com/users/wookayin/orgs",
            "received_events_url": "https://api.github.com/users/wookayin/received_events",
            "repos_url": "https://api.github.com/users/wookayin/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/wookayin"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/30227/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/1c4510cc053005dd20ed3e63c8542847bb0155f9",
    "title": "feat(func): allow manual cache invalidation for _memoize",
    "updated_at": "2024-09-06T10:53:38Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/30227",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
        "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
        "followers_url": "https://api.github.com/users/ribru17/followers",
        "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
        "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ribru17",
        "id": 55766287,
        "login": "ribru17",
        "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
        "organizations_url": "https://api.github.com/users/ribru17/orgs",
        "received_events_url": "https://api.github.com/users/ribru17/received_events",
        "repos_url": "https://api.github.com/users/ribru17/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ribru17"
    }
}