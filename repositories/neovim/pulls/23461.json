{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23461/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23461/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/23461"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23461"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23461/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4790,
            "forks_count": 4790,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1643,
            "open_issues_count": 1643,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-08-02T00:12:39Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 248191,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 67927,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-08-02T01:36:05Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 67927,
            "watchers_count": 67927,
            "web_commit_signoff_required": false
        },
        "sha": "fe7cdc7cc0037bb41bd940bee7818a5235ffaa79",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "This PR closes #23232. Implements `vim.net.fetch()` and `vim.net.download()`. Wraps CURL.\r\n\r\nI am asking everyone for their thoughts on the interface and implementation, I decided this would be a fun project to write over a few days.\r\n\r\nIt wraps curl's stdout, somewhat \"handles\" errors, and has some tests written. It is implemented in the best way I could think, please let me know if there is a smarter way to wrap curl.\r\n\r\nNot everything is fully covered in the tests, however ive made many requests using it and ironed out a ridiculous amount of bugs. Even with `vim.json.encod`'ing entire certificates its still somehow faster than netrw.\r\n\r\n### `vim.net.fetch()`\r\nAsynchronously make HTTP requests. I took some inspiration from Javascript's `fetch()`.\r\n\r\nIt is likely that it will have to be expanded to other protocols. It is also likely that some already work, but they are entirely untested.\r\n\r\n<details>\r\n  <summary>Code Example</summary>\r\n  \r\n```lua\r\n-- GET a url\r\nvim.net.fetch(\"https://example.com/api/data\", {\r\n on_complete = function (response)\r\n   -- Lets read the response!\r\n\r\n   if response.ok then\r\n     -- Read response body\r\n     local body = response.body()\r\n   else\r\n end\r\n})\r\n\r\n-- POST to a url, sending a table as JSON and providing an authorization header\r\nvim.net.fetch(\"https://example.com/api/data\", {\r\n method = \"POST\",\r\n data = {\r\n   key = value\r\n },\r\n headers = {\r\n   Authorization = \"Bearer \" .. token\r\n },\r\n on_complete = function (response)\r\n   -- Lets read the response!\r\n\r\n   if response.ok then\r\n     -- Read JSON response\r\n     local table = response.json()\r\n   else\r\n\r\n   -- What went wrong?\r\n   vim.print(response.status)\r\n end\r\n})\r\n\r\n```\r\n</details>\r\n\r\n### `vim.net.download()`\r\nAsynchronously download a file. To read the response metadata, such as headers and body, use `vi.net.fetch()`.\r\n\r\nShares a few options with `vim.net.fetch()`, but not all of them.\r\n\r\nIt is entirely possible that this function gets removed, as the `:edit URL` implementation saves the file contents to memory. (Unlike netrw's `wget` implementation).\r\n\r\n<details>\r\n  <summary>Code Example</summary>\r\n\r\n```lua\r\n vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\r\n   on_complete = function ()\r\n     vim.notify(\"File Downloaded\", vim.log.levels.INFO)\r\n   end\r\n })\r\n```\r\n\r\n</details>\r\n\r\n### `HeaderTable`\r\n\r\nHelper class to deal with header operations, both internal and external plugins can benefit from its methods. See `:help vim.net`. \r\n\r\n### `:e, :w, :[range]w!, :r  URL`\r\n\r\nCurrently, this PR only handles `https://*,http://*,scp://*,ftp://*`. \r\n\r\n[Screencast from 2023-05-04 11-44-45.webm](https://user-images.githubusercontent.com/40532058/236091188-a1150780-b780-4789-b20c-eb7dd7045d52.webm)\r\n\r\n### **Benchmarks**\r\n\r\nUsing this command, we can benchmark the time it takes to \"read\" a readme. This isnt proper benchmark, more data is required, but I think it might be enough.\r\n\r\n```vim\r\n:let start_time = reltime() | edit https://raw.githubusercontent.com/neovim/neovim/master/README.md | let end_time = reltime() | echo reltimestr(reltime(start_time, end_time))\r\n```\r\n\r\n`nvim --clean` on **vim.net** it took about `0.08` seconds.\r\n\r\n![image](https://user-images.githubusercontent.com/40532058/235909157-0ceba42a-19a7-4831-9fe2-e82ea07394b4.png)\r\n\r\nStock `nvim --clean` on **master**.\r\n\r\n![image](https://user-images.githubusercontent.com/40532058/235908873-e7d6b111-1e97-424b-9f0b-3f04927e2463.png)\r\n\r\n`vim --clean` (for fun) (also showing that master is pretty similar)\r\n\r\n![image](https://user-images.githubusercontent.com/40532058/235909266-42918a8b-9d3f-421f-ad31-9acddaf83d5f.png)\r\n\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1183605341"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183605341"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a reason you are using vim.fn.jobstart over vim.loop.spawn?\r\n\r\nI think we plan to eventually deprecate a replace `jobstart` with `vim.spawn.loop` wrapper.\r\n\r\nOne of the main limitations of `jobstart` is that since it's implemented in the `eval` layer, it cannot handle any strings with NULL bytes.",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-03T12:13:27Z",
            "diff_hunk": "@@ -0,0 +1,364 @@\n+local M = {}\n+\n+---@private Function to create method arguments. Method defaults to GET.\n+---@param method string|nil Http method.\n+---@return string[]\n+local function createMethodArgs(method)\n+  method = method and method:upper() or 'GET'\n+\n+  if method == 'HEAD' then\n+    return { '--head' }\n+  elseif method == 'GET' then\n+    return { '--get' }\n+  end\n+\n+  return {\n+    '--request',\n+    method,\n+  }\n+end\n+\n+---@private --- Creates a table of curl command arguments based on the provided URL and options.\n+---@param url string The request URL.\n+---@param opts table Keyword arguments:\n+---             - method string|nil Http method.\n+---             - follow_redirects boolean|nil Follow redirects.\n+---             - data string|table|nil Data to send with the request. If a table, it will be JSON\n+---             encoded.\n+---             - headers table<string, string>|nil Headers to set on the request\n+---             - download_location string|nil Where to download a file if applicable.\n+---\n+---@return string[] args Curl command.\n+local function createCurlArgs(url, opts)\n+  vim.validate({\n+    opts = { opts, 'table', true },\n+  })\n+\n+  local args = {\n+    'curl',\n+\n+    -- Blocks progress bars and other non-parsable things\n+    -- TODO: Allow stderr\n+    '--no-progress-meter',\n+  }\n+\n+  -- Set http method.\n+  vim.list_extend(args, createMethodArgs(opts.method))\n+\n+  -- Follow redirects by default.\n+  if opts.follow_redirects or opts.follow_redirects == nil then\n+    table.insert(args, '--location')\n+  end\n+\n+  if opts.data ~= nil then\n+    if type(opts.data) == 'table' then\n+      vim.list_extend(args, {\n+        -- Let curl do some extra stuff for JSON\n+        '--json',\n+        vim.json.encode(opts.data),\n+      })\n+    else\n+      vim.list_extend(args, {\n+        -- Otherwise, just pass the string as data\n+        -- --data-raw does not give @ any special meaning\n+        '--data-raw',\n+        opts.data,\n+      })\n+    end\n+  end\n+\n+  if opts.headers ~= nil then\n+    for key, value in pairs(opts.headers) do\n+      vim.list_extend(args, {\n+        '--header',\n+        key .. ': ' .. value,\n+      })\n+    end\n+  end\n+\n+  if opts.download_location == nil then\n+    -- Write additonal request metadata after the body.\n+    vim.list_extend(args, {\n+      '--write-out',\n+      '\\\\nBEGIN_HEADERS\\\\n%{header_json}\\\\n%{json}',\n+    })\n+  else\n+    -- Write body contents to file.\n+    vim.list_extend(args, {\n+      '--output',\n+      opts.download_location,\n+    })\n+  end\n+\n+  -- Finally, insert the request url.\n+  table.insert(args, url)\n+\n+  return args\n+end\n+\n+--- @private Processes a list of data received from buffered stdout and returns a table with response data.\n+--- @param data string[] Data recieved from stdout.\n+--- @return table Response A table containing processed response data.\n+local function process_stdout(data)\n+  local cache = {}\n+\n+  local extra = {}\n+\n+  extra = vim.json.decode(data[#data])\n+\n+  -- Remove `json`\n+  table.remove(data, #data)\n+\n+  -- This makes our life so much easier\n+  local began_headers_at\n+\n+  -- In the vast majority of cases, BEGAN_HEADERS is near the end of the list.\n+  -- We can loop backwards to gain some perf\n+  for i = #data, 1, -1 do\n+    if data[i] == 'BEGIN_HEADERS' then\n+      began_headers_at = i\n+      break\n+    end\n+  end\n+\n+  table.remove(data, began_headers_at)\n+\n+  local status = extra.http_code and tonumber(extra.http_code) or nil\n+  extra.method = extra.method:upper()\n+\n+  ---@private\n+  local function read_headers()\n+    if began_headers_at ~= nil and cache.headers == nil then\n+      local header_string = table.concat(data, nil, began_headers_at, #data)\n+\n+      cache.headers = vim.json.decode(header_string)\n+    end\n+\n+    return cache.headers\n+  end\n+\n+  ---@private\n+  local function read_body()\n+    -- check cache, return nil if method is HEAD\n+    if cache.body == nil and extra.method ~= 'HEAD' then\n+      local body = table.concat(data, '\\n', 1, began_headers_at - 1)\n+\n+      cache.body = body\n+    end\n+\n+    return cache.body\n+  end\n+\n+  return {\n+    headers = read_headers,\n+    body = read_body,\n+    json = function(opts)\n+      return vim.json.decode(read_body(), opts and opts or {})\n+    end,\n+    method = extra.method,\n+    status = status,\n+    ok = status and (status >= 200 and status <= 299) or false,\n+    size = extra.size_download and tonumber(extra.size_download) or nil,\n+    http_version = extra.http_version and tonumber(extra.http_version) or nil,\n+    _raw_write_out = extra,\n+  }\n+end\n+\n+--- Asynchronously make HTTP requests.\n+---\n+---@see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n+---@see |job-control|\n+---@see man://curl\n+---\n+---@param url string The request URL.\n+---@param opts table|nil Optional keyword arguments:\n+---             - method string|nil HTTP method to use. Defaults to GET.\n+---             - headers table|nil A table of key-value headers.\n+---             - follow_redirects boolean|nil Whether to follow redirects. Defaults to true.\n+---             - data string|table|nil Data to send with the request. If a table, it will be\n+---             JSON-encoded. vim.net does not currently support form encoding.\n+---\n+---             - on_complete fun(response: table)|nil Callback function when request is\n+---             completed successfully. The response has the following keys:\n+---                 - ok boolean Whether the request was successful (status within 2XX range).\n+---                 - headers fun(): table<string, string> Function returning a table of response headers.\n+---                 - body fun(): string|nil Function returning response body. If method was HEAD,\n+---                 this is nil.\n+---                 - json fun(opts: table|nil): table Read the body as JSON. Optionally accepts\n+---                 opts from |vim.json.decode|. Will throw errors if body is not JSON-decodable.\n+---                 - method string The http method used in the most recent HTTP request.\n+---                 - status number The numerical response code.\n+---                 - size number The total amount of bytes that were downloaded. This\n+---                 is the size of the body/data that was transferred, excluding headers.\n+---                 - http_version number HTTP version used in the request.\n+---             - on_err fun(err: string[])|nil An optional function recieving a `stderr_buffered` string[] of curl\n+---             stderr. Without providing this function, |fetch()| will automatically raise an error\n+---             to the user. See |on_stderr| and `stderr_buffered`.\n+---@return number jobid A job id.\n+---\n+--- Example:\n+--- <pre>lua\n+--- -- GET a url\n+--- vim.net.fetch(\"https://example.com/api/data\", {\n+---   on_complete = function (response)\n+---     -- Lets read the response!\n+---\n+---     if response.ok then\n+---       -- Read response body\n+---       local body = response.body()\n+---     else\n+---   end\n+--- })\n+---\n+--- -- POST to a url, sending a table as JSON and providing an authorization header\n+--- vim.net.fetch(\"https://example.com/api/data\", {\n+---   method = \"POST\",\n+---   data = {\n+---     key = value\n+---   },\n+---   headers = {\n+---     Authorization = \"Bearer \" .. token\n+---   },\n+---   on_complete = function (response)\n+---     -- Lets read the response!\n+---\n+---     if response.ok then\n+---       -- Read JSON response\n+---       local table = response.json()\n+---     else\n+---\n+---     -- What went wrong?\n+---     vim.print(response.status)\n+---   end\n+--- })\n+--- </pre>\n+function M.fetch(url, opts)\n+  vim.validate({\n+    opts = { opts, 'table', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  -- Ensure that we dont download to a file in fetch()\n+  opts.download_location = nil\n+\n+  local args = createCurlArgs(url, opts)\n+\n+  local out = {}\n+\n+  if opts._dry then\n+    return args\n+  end\n+\n+  local job = vim.fn.jobstart(args, {",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1183605341",
            "id": 1183605341,
            "line": 406,
            "node_id": "PRRC_kwDOAPphoM5GjGJd",
            "original_commit_id": "cf45bf43b5648ed77b1bcd366d39fc4747dd8b5a",
            "original_line": 253,
            "original_position": 253,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": 406,
            "pull_request_review_id": 1410764746,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183605341/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-03T12:22:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183605341",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1183610885"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183610885"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Nope, I will look into that.",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-03T12:19:23Z",
            "diff_hunk": "@@ -0,0 +1,364 @@\n+local M = {}\n+\n+---@private Function to create method arguments. Method defaults to GET.\n+---@param method string|nil Http method.\n+---@return string[]\n+local function createMethodArgs(method)\n+  method = method and method:upper() or 'GET'\n+\n+  if method == 'HEAD' then\n+    return { '--head' }\n+  elseif method == 'GET' then\n+    return { '--get' }\n+  end\n+\n+  return {\n+    '--request',\n+    method,\n+  }\n+end\n+\n+---@private --- Creates a table of curl command arguments based on the provided URL and options.\n+---@param url string The request URL.\n+---@param opts table Keyword arguments:\n+---             - method string|nil Http method.\n+---             - follow_redirects boolean|nil Follow redirects.\n+---             - data string|table|nil Data to send with the request. If a table, it will be JSON\n+---             encoded.\n+---             - headers table<string, string>|nil Headers to set on the request\n+---             - download_location string|nil Where to download a file if applicable.\n+---\n+---@return string[] args Curl command.\n+local function createCurlArgs(url, opts)\n+  vim.validate({\n+    opts = { opts, 'table', true },\n+  })\n+\n+  local args = {\n+    'curl',\n+\n+    -- Blocks progress bars and other non-parsable things\n+    -- TODO: Allow stderr\n+    '--no-progress-meter',\n+  }\n+\n+  -- Set http method.\n+  vim.list_extend(args, createMethodArgs(opts.method))\n+\n+  -- Follow redirects by default.\n+  if opts.follow_redirects or opts.follow_redirects == nil then\n+    table.insert(args, '--location')\n+  end\n+\n+  if opts.data ~= nil then\n+    if type(opts.data) == 'table' then\n+      vim.list_extend(args, {\n+        -- Let curl do some extra stuff for JSON\n+        '--json',\n+        vim.json.encode(opts.data),\n+      })\n+    else\n+      vim.list_extend(args, {\n+        -- Otherwise, just pass the string as data\n+        -- --data-raw does not give @ any special meaning\n+        '--data-raw',\n+        opts.data,\n+      })\n+    end\n+  end\n+\n+  if opts.headers ~= nil then\n+    for key, value in pairs(opts.headers) do\n+      vim.list_extend(args, {\n+        '--header',\n+        key .. ': ' .. value,\n+      })\n+    end\n+  end\n+\n+  if opts.download_location == nil then\n+    -- Write additonal request metadata after the body.\n+    vim.list_extend(args, {\n+      '--write-out',\n+      '\\\\nBEGIN_HEADERS\\\\n%{header_json}\\\\n%{json}',\n+    })\n+  else\n+    -- Write body contents to file.\n+    vim.list_extend(args, {\n+      '--output',\n+      opts.download_location,\n+    })\n+  end\n+\n+  -- Finally, insert the request url.\n+  table.insert(args, url)\n+\n+  return args\n+end\n+\n+--- @private Processes a list of data received from buffered stdout and returns a table with response data.\n+--- @param data string[] Data recieved from stdout.\n+--- @return table Response A table containing processed response data.\n+local function process_stdout(data)\n+  local cache = {}\n+\n+  local extra = {}\n+\n+  extra = vim.json.decode(data[#data])\n+\n+  -- Remove `json`\n+  table.remove(data, #data)\n+\n+  -- This makes our life so much easier\n+  local began_headers_at\n+\n+  -- In the vast majority of cases, BEGAN_HEADERS is near the end of the list.\n+  -- We can loop backwards to gain some perf\n+  for i = #data, 1, -1 do\n+    if data[i] == 'BEGIN_HEADERS' then\n+      began_headers_at = i\n+      break\n+    end\n+  end\n+\n+  table.remove(data, began_headers_at)\n+\n+  local status = extra.http_code and tonumber(extra.http_code) or nil\n+  extra.method = extra.method:upper()\n+\n+  ---@private\n+  local function read_headers()\n+    if began_headers_at ~= nil and cache.headers == nil then\n+      local header_string = table.concat(data, nil, began_headers_at, #data)\n+\n+      cache.headers = vim.json.decode(header_string)\n+    end\n+\n+    return cache.headers\n+  end\n+\n+  ---@private\n+  local function read_body()\n+    -- check cache, return nil if method is HEAD\n+    if cache.body == nil and extra.method ~= 'HEAD' then\n+      local body = table.concat(data, '\\n', 1, began_headers_at - 1)\n+\n+      cache.body = body\n+    end\n+\n+    return cache.body\n+  end\n+\n+  return {\n+    headers = read_headers,\n+    body = read_body,\n+    json = function(opts)\n+      return vim.json.decode(read_body(), opts and opts or {})\n+    end,\n+    method = extra.method,\n+    status = status,\n+    ok = status and (status >= 200 and status <= 299) or false,\n+    size = extra.size_download and tonumber(extra.size_download) or nil,\n+    http_version = extra.http_version and tonumber(extra.http_version) or nil,\n+    _raw_write_out = extra,\n+  }\n+end\n+\n+--- Asynchronously make HTTP requests.\n+---\n+---@see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n+---@see |job-control|\n+---@see man://curl\n+---\n+---@param url string The request URL.\n+---@param opts table|nil Optional keyword arguments:\n+---             - method string|nil HTTP method to use. Defaults to GET.\n+---             - headers table|nil A table of key-value headers.\n+---             - follow_redirects boolean|nil Whether to follow redirects. Defaults to true.\n+---             - data string|table|nil Data to send with the request. If a table, it will be\n+---             JSON-encoded. vim.net does not currently support form encoding.\n+---\n+---             - on_complete fun(response: table)|nil Callback function when request is\n+---             completed successfully. The response has the following keys:\n+---                 - ok boolean Whether the request was successful (status within 2XX range).\n+---                 - headers fun(): table<string, string> Function returning a table of response headers.\n+---                 - body fun(): string|nil Function returning response body. If method was HEAD,\n+---                 this is nil.\n+---                 - json fun(opts: table|nil): table Read the body as JSON. Optionally accepts\n+---                 opts from |vim.json.decode|. Will throw errors if body is not JSON-decodable.\n+---                 - method string The http method used in the most recent HTTP request.\n+---                 - status number The numerical response code.\n+---                 - size number The total amount of bytes that were downloaded. This\n+---                 is the size of the body/data that was transferred, excluding headers.\n+---                 - http_version number HTTP version used in the request.\n+---             - on_err fun(err: string[])|nil An optional function recieving a `stderr_buffered` string[] of curl\n+---             stderr. Without providing this function, |fetch()| will automatically raise an error\n+---             to the user. See |on_stderr| and `stderr_buffered`.\n+---@return number jobid A job id.\n+---\n+--- Example:\n+--- <pre>lua\n+--- -- GET a url\n+--- vim.net.fetch(\"https://example.com/api/data\", {\n+---   on_complete = function (response)\n+---     -- Lets read the response!\n+---\n+---     if response.ok then\n+---       -- Read response body\n+---       local body = response.body()\n+---     else\n+---   end\n+--- })\n+---\n+--- -- POST to a url, sending a table as JSON and providing an authorization header\n+--- vim.net.fetch(\"https://example.com/api/data\", {\n+---   method = \"POST\",\n+---   data = {\n+---     key = value\n+---   },\n+---   headers = {\n+---     Authorization = \"Bearer \" .. token\n+---   },\n+---   on_complete = function (response)\n+---     -- Lets read the response!\n+---\n+---     if response.ok then\n+---       -- Read JSON response\n+---       local table = response.json()\n+---     else\n+---\n+---     -- What went wrong?\n+---     vim.print(response.status)\n+---   end\n+--- })\n+--- </pre>\n+function M.fetch(url, opts)\n+  vim.validate({\n+    opts = { opts, 'table', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  -- Ensure that we dont download to a file in fetch()\n+  opts.download_location = nil\n+\n+  local args = createCurlArgs(url, opts)\n+\n+  local out = {}\n+\n+  if opts._dry then\n+    return args\n+  end\n+\n+  local job = vim.fn.jobstart(args, {",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1183610885",
            "id": 1183610885,
            "in_reply_to_id": 1183605341,
            "line": 406,
            "node_id": "PRRC_kwDOAPphoM5GjHgF",
            "original_commit_id": "cf45bf43b5648ed77b1bcd366d39fc4747dd8b5a",
            "original_line": 253,
            "original_position": 253,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": 406,
            "pull_request_review_id": 1410773702,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183610885/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-03T12:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183610885",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1183725363"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183725363"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                  providing this function, |vim.net.fetch()| will automatically raise\r\n```",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-03T13:56:18Z",
            "diff_hunk": "@@ -3349,4 +3349,133 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Shares a few options with |vim.net.fetch()|, but not all of them.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table<string, string>|nil A table of key-value\n+                  headers.\n+                • follow_redirects boolean|nil Will follow redirects by\n+                  default.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun()|nil Callback function when download\n+                  successfully completed.\n+                • on_err fun(err: string[])|nil An optional function recieving\n+                  a `stderr_buffered` string[] of curl stderr. Without\n+                  providing this function, |download()| will automatically\n+                  raise an error to the user. See |on_stderr| and\n+                  `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id. See |job-control|.\n+\n+    See also: ~\n+      • |job-control|\n+      • man://curl\n+\n+fetch({url}, {opts})                                         *vim.net.fetch()*\n+    Asynchronously make HTTP requests.\n+\n+    Example: >lua\n+\n+     -- GET a url\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read response body\n+           local body = response.body()\n+         else\n+       end\n+     })\n+\n+     -- POST to a url, sending a table as JSON and providing an authorization header\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       method = \"POST\",\n+       data = {\n+         key = value\n+       },\n+       headers = {\n+         Authorization = \"Bearer \" .. token\n+       },\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read JSON response\n+           local table = response.json()\n+         else\n+\n+         -- What went wrong?\n+         vim.print(response.status)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) The request URL.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table|nil A table of key-value headers.\n+                • follow_redirects boolean|nil Whether to follow redirects.\n+                  Defaults to true.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON-encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun(response: table)|nil Callback function when\n+                  request is completed successfully. The response has the\n+                  following keys:\n+                  • ok boolean Whether the request was successful (status\n+                    within 2XX range).\n+                  • headers fun(): table<string, string> Function returning a\n+                    table of response headers.\n+                  • body fun(): string|nil Function returning response body.\n+                    If method was HEAD, this is nil.\n+                  • json fun(opts: table|nil): table Read the body as JSON.\n+                    Optionally accepts opts from |vim.json.decode|. Will throw\n+                    errors if body is not JSON-decodable.\n+                  • method string The http method used in the most recent HTTP\n+                    request.\n+                  • status number The numerical response code.\n+                  • size number The total amount of bytes that were\n+                    downloaded. This is the size of the body/data that was\n+                    transferred, excluding headers.\n+                  • http_version number HTTP version used in the request.\n+\n+                • on_err fun(err: string[])|nil An optional function recieving\n+                  a `stderr_buffered` string[] of curl stderr. Without\n+                  providing this function, |fetch()| will automatically raise",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1183725363",
            "id": 1183725363,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Gjjcz",
            "original_commit_id": "4f14ca74dff113d03c1f2afa5ceaff149e1742fe",
            "original_line": 3470,
            "original_position": 122,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1410958689,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183725363/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-03T13:56:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183725363",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1183726968"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183726968"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                  providing this function, |vim.net.download()| will automatically\r\n```",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-03T13:57:29Z",
            "diff_hunk": "@@ -3349,4 +3349,133 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Shares a few options with |vim.net.fetch()|, but not all of them.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table<string, string>|nil A table of key-value\n+                  headers.\n+                • follow_redirects boolean|nil Will follow redirects by\n+                  default.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun()|nil Callback function when download\n+                  successfully completed.\n+                • on_err fun(err: string[])|nil An optional function recieving\n+                  a `stderr_buffered` string[] of curl stderr. Without\n+                  providing this function, |download()| will automatically",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1183726968",
            "id": 1183726968,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Gjj14",
            "original_commit_id": "4f14ca74dff113d03c1f2afa5ceaff149e1742fe",
            "original_line": 3387,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1410961174,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183726968/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-03T13:57:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1183726968",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1184364846"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184364846"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Can we name the options match https://fetch.spec.whatwg.org/#request-class?\r\n\r\n- `follow_redirects -> redirect=\"follow\"`\r\n- `data -> body`",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-03T22:33:55Z",
            "diff_hunk": "@@ -3349,4 +3349,133 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Shares a few options with |vim.net.fetch()|, but not all of them.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table<string, string>|nil A table of key-value\n+                  headers.\n+                • follow_redirects boolean|nil Will follow redirects by",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1184364846",
            "id": 1184364846,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Gl_ku",
            "original_commit_id": "4f14ca74dff113d03c1f2afa5ceaff149e1742fe",
            "original_line": 3378,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1411995243,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184364846/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-03T22:33:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184364846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8050659?v=4",
                "events_url": "https://api.github.com/users/MunifTanjim/events{/privacy}",
                "followers_url": "https://api.github.com/users/MunifTanjim/followers",
                "following_url": "https://api.github.com/users/MunifTanjim/following{/other_user}",
                "gists_url": "https://api.github.com/users/MunifTanjim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MunifTanjim",
                "id": 8050659,
                "login": "MunifTanjim",
                "node_id": "MDQ6VXNlcjgwNTA2NTk=",
                "organizations_url": "https://api.github.com/users/MunifTanjim/orgs",
                "received_events_url": "https://api.github.com/users/MunifTanjim/received_events",
                "repos_url": "https://api.github.com/users/MunifTanjim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MunifTanjim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MunifTanjim/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MunifTanjim"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1184370567"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184370567"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> - `follow_redirects -> redirect=\"follow\"`\n\nWhen naming this, I specifically chose to make it a boolean.\nUntil there is a way to error on redirect the other value simply has no meaning.\n\n> - `data -> body`\n\nYeah, probably.\n",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-03T22:38:06Z",
            "diff_hunk": "@@ -3349,4 +3349,133 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Shares a few options with |vim.net.fetch()|, but not all of them.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table<string, string>|nil A table of key-value\n+                  headers.\n+                • follow_redirects boolean|nil Will follow redirects by",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1184370567",
            "id": 1184370567,
            "in_reply_to_id": 1184364846,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GmA-H",
            "original_commit_id": "4f14ca74dff113d03c1f2afa5ceaff149e1742fe",
            "original_line": 3378,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1412002045,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184370567/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-03T22:38:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184370567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1184376180"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184376180"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Until there is a way to error on redirect the other value simply has no meaning.\r\n\r\nThe only supported value can be `\"follow\"` right now. If the other values are implemented in future, it would be good to not rename things.",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-03T22:44:45Z",
            "diff_hunk": "@@ -3349,4 +3349,133 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Shares a few options with |vim.net.fetch()|, but not all of them.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table<string, string>|nil A table of key-value\n+                  headers.\n+                • follow_redirects boolean|nil Will follow redirects by",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1184376180",
            "id": 1184376180,
            "in_reply_to_id": 1184364846,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GmCV0",
            "original_commit_id": "4f14ca74dff113d03c1f2afa5ceaff149e1742fe",
            "original_line": 3378,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1412007389,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184376180/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-03T22:44:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184376180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8050659?v=4",
                "events_url": "https://api.github.com/users/MunifTanjim/events{/privacy}",
                "followers_url": "https://api.github.com/users/MunifTanjim/followers",
                "following_url": "https://api.github.com/users/MunifTanjim/following{/other_user}",
                "gists_url": "https://api.github.com/users/MunifTanjim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MunifTanjim",
                "id": 8050659,
                "login": "MunifTanjim",
                "node_id": "MDQ6VXNlcjgwNTA2NTk=",
                "organizations_url": "https://api.github.com/users/MunifTanjim/orgs",
                "received_events_url": "https://api.github.com/users/MunifTanjim/received_events",
                "repos_url": "https://api.github.com/users/MunifTanjim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MunifTanjim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MunifTanjim/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MunifTanjim"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1184377904"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184377904"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This can be `text()` following fetch api standard?",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-03T22:46:46Z",
            "diff_hunk": "@@ -3349,4 +3349,133 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Shares a few options with |vim.net.fetch()|, but not all of them.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table<string, string>|nil A table of key-value\n+                  headers.\n+                • follow_redirects boolean|nil Will follow redirects by\n+                  default.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun()|nil Callback function when download\n+                  successfully completed.\n+                • on_err fun(err: string[])|nil An optional function recieving\n+                  a `stderr_buffered` string[] of curl stderr. Without\n+                  providing this function, |download()| will automatically\n+                  raise an error to the user. See |on_stderr| and\n+                  `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id. See |job-control|.\n+\n+    See also: ~\n+      • |job-control|\n+      • man://curl\n+\n+fetch({url}, {opts})                                         *vim.net.fetch()*\n+    Asynchronously make HTTP requests.\n+\n+    Example: >lua\n+\n+     -- GET a url\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read response body\n+           local body = response.body()\n+         else\n+       end\n+     })\n+\n+     -- POST to a url, sending a table as JSON and providing an authorization header\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       method = \"POST\",\n+       data = {\n+         key = value\n+       },\n+       headers = {\n+         Authorization = \"Bearer \" .. token\n+       },\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read JSON response\n+           local table = response.json()\n+         else\n+\n+         -- What went wrong?\n+         vim.print(response.status)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) The request URL.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table|nil A table of key-value headers.\n+                • follow_redirects boolean|nil Whether to follow redirects.\n+                  Defaults to true.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON-encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun(response: table)|nil Callback function when\n+                  request is completed successfully. The response has the\n+                  following keys:\n+                  • ok boolean Whether the request was successful (status\n+                    within 2XX range).\n+                  • headers fun(): table<string, string> Function returning a\n+                    table of response headers.\n+                  • body fun(): string|nil Function returning response body.",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1184377904",
            "id": 1184377904,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GmCww",
            "original_commit_id": "4f14ca74dff113d03c1f2afa5ceaff149e1742fe",
            "original_line": 3455,
            "original_position": 107,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1412009269,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184377904/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-03T22:46:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184377904",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8050659?v=4",
                "events_url": "https://api.github.com/users/MunifTanjim/events{/privacy}",
                "followers_url": "https://api.github.com/users/MunifTanjim/followers",
                "following_url": "https://api.github.com/users/MunifTanjim/following{/other_user}",
                "gists_url": "https://api.github.com/users/MunifTanjim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MunifTanjim",
                "id": 8050659,
                "login": "MunifTanjim",
                "node_id": "MDQ6VXNlcjgwNTA2NTk=",
                "organizations_url": "https://api.github.com/users/MunifTanjim/orgs",
                "received_events_url": "https://api.github.com/users/MunifTanjim/received_events",
                "repos_url": "https://api.github.com/users/MunifTanjim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MunifTanjim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MunifTanjim/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MunifTanjim"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1184390973"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184390973"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Up to the maintainers, but it would be nice to have `.get`, `.set`, `.append`, `.has` etc methods for Headers (for both request and response).\r\n\r\nOtherwise always working with `table<string, string[]>` can get tedious. Appending value to existing header would require user to first check if header exists and then assign or concat to existing string. Also headers are case-insensitive, handing that in userland can be very error-prone.",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-03T23:13:53Z",
            "diff_hunk": "@@ -3349,4 +3349,134 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Shares a few options with |vim.net.fetch()|, but not all of them.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table<string, string>|nil A table of key-value\n+                  headers.\n+                • follow_redirects boolean|nil Will follow redirects by\n+                  default.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun()|nil Callback function when download\n+                  successfully completed.\n+                • on_err fun(err: string[])|nil An optional function recieving\n+                  a `stderr_buffered` string[] of curl stderr. Without\n+                  providing this function, |vim.net.download()| will\n+                  automatically raise an error to the user. See |on_stderr|\n+                  and `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id. See |job-control|.\n+\n+    See also: ~\n+      • |job-control|\n+      • man://curl\n+\n+fetch({url}, {opts})                                         *vim.net.fetch()*\n+    Asynchronously make HTTP requests.\n+\n+    Example: >lua\n+\n+     -- GET a url\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read response text\n+           local body = response.text()\n+         else\n+       end\n+     })\n+\n+     -- POST to a url, sending a table as JSON and providing an authorization header\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       method = \"POST\",\n+       data = {\n+         key = value\n+       },\n+       headers = {\n+         Authorization = \"Bearer \" .. token\n+       },\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read JSON response\n+           local table = response.json()\n+         else\n+\n+         -- What went wrong?\n+         vim.print(response.status)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) The request URL.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table|nil A table of key-value headers.\n+                • follow_redirects boolean|nil Whether to follow redirects.\n+                  Defaults to true.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON-encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun(response: table)|nil Callback function when\n+                  request is completed successfully. The response has the\n+                  following keys:\n+                  • ok boolean Whether the request was successful (status\n+                    within 2XX range).\n+                  • headers fun(): table<string, string[]> Function returning",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1184390973",
            "id": 1184390973,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GmF89",
            "original_commit_id": "6c0e17c6f3a58e44dfbceadeab138dcbbde2517d",
            "original_line": 3453,
            "original_position": 105,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1412029762,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184390973/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-03T23:13:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184390973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8050659?v=4",
                "events_url": "https://api.github.com/users/MunifTanjim/events{/privacy}",
                "followers_url": "https://api.github.com/users/MunifTanjim/followers",
                "following_url": "https://api.github.com/users/MunifTanjim/following{/other_user}",
                "gists_url": "https://api.github.com/users/MunifTanjim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MunifTanjim",
                "id": 8050659,
                "login": "MunifTanjim",
                "node_id": "MDQ6VXNlcjgwNTA2NTk=",
                "organizations_url": "https://api.github.com/users/MunifTanjim/orgs",
                "received_events_url": "https://api.github.com/users/MunifTanjim/received_events",
                "repos_url": "https://api.github.com/users/MunifTanjim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MunifTanjim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MunifTanjim/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MunifTanjim"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1184402348"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184402348"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Headers can contain multiple values (cookies), hence `table<string, string[]>`. Accepting `table<string, string[]>` in opts is planned. A non-casesensitive map object to handle these operations would be useful.",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-03T23:38:26Z",
            "diff_hunk": "@@ -3349,4 +3349,134 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Shares a few options with |vim.net.fetch()|, but not all of them.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table<string, string>|nil A table of key-value\n+                  headers.\n+                • follow_redirects boolean|nil Will follow redirects by\n+                  default.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun()|nil Callback function when download\n+                  successfully completed.\n+                • on_err fun(err: string[])|nil An optional function recieving\n+                  a `stderr_buffered` string[] of curl stderr. Without\n+                  providing this function, |vim.net.download()| will\n+                  automatically raise an error to the user. See |on_stderr|\n+                  and `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id. See |job-control|.\n+\n+    See also: ~\n+      • |job-control|\n+      • man://curl\n+\n+fetch({url}, {opts})                                         *vim.net.fetch()*\n+    Asynchronously make HTTP requests.\n+\n+    Example: >lua\n+\n+     -- GET a url\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read response text\n+           local body = response.text()\n+         else\n+       end\n+     })\n+\n+     -- POST to a url, sending a table as JSON and providing an authorization header\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       method = \"POST\",\n+       data = {\n+         key = value\n+       },\n+       headers = {\n+         Authorization = \"Bearer \" .. token\n+       },\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read JSON response\n+           local table = response.json()\n+         else\n+\n+         -- What went wrong?\n+         vim.print(response.status)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) The request URL.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table|nil A table of key-value headers.\n+                • follow_redirects boolean|nil Whether to follow redirects.\n+                  Defaults to true.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON-encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun(response: table)|nil Callback function when\n+                  request is completed successfully. The response has the\n+                  following keys:\n+                  • ok boolean Whether the request was successful (status\n+                    within 2XX range).\n+                  • headers fun(): table<string, string[]> Function returning",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1184402348",
            "id": 1184402348,
            "in_reply_to_id": 1184390973,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GmIus",
            "original_commit_id": "6c0e17c6f3a58e44dfbceadeab138dcbbde2517d",
            "original_line": 3453,
            "original_position": 105,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1412046144,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184402348/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-03T23:38:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184402348",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1184431215"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184431215"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Up to the maintainers, but it would be nice to have .get, .set, .append, .has etc methods for Headers (for both request and response).\r\n\r\nDone",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-04T00:45:55Z",
            "diff_hunk": "@@ -3349,4 +3349,134 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Shares a few options with |vim.net.fetch()|, but not all of them.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table<string, string>|nil A table of key-value\n+                  headers.\n+                • follow_redirects boolean|nil Will follow redirects by\n+                  default.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun()|nil Callback function when download\n+                  successfully completed.\n+                • on_err fun(err: string[])|nil An optional function recieving\n+                  a `stderr_buffered` string[] of curl stderr. Without\n+                  providing this function, |vim.net.download()| will\n+                  automatically raise an error to the user. See |on_stderr|\n+                  and `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id. See |job-control|.\n+\n+    See also: ~\n+      • |job-control|\n+      • man://curl\n+\n+fetch({url}, {opts})                                         *vim.net.fetch()*\n+    Asynchronously make HTTP requests.\n+\n+    Example: >lua\n+\n+     -- GET a url\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read response text\n+           local body = response.text()\n+         else\n+       end\n+     })\n+\n+     -- POST to a url, sending a table as JSON and providing an authorization header\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       method = \"POST\",\n+       data = {\n+         key = value\n+       },\n+       headers = {\n+         Authorization = \"Bearer \" .. token\n+       },\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read JSON response\n+           local table = response.json()\n+         else\n+\n+         -- What went wrong?\n+         vim.print(response.status)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) The request URL.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers table|nil A table of key-value headers.\n+                • follow_redirects boolean|nil Whether to follow redirects.\n+                  Defaults to true.\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON-encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun(response: table)|nil Callback function when\n+                  request is completed successfully. The response has the\n+                  following keys:\n+                  • ok boolean Whether the request was successful (status\n+                    within 2XX range).\n+                  • headers fun(): table<string, string[]> Function returning",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1184431215",
            "id": 1184431215,
            "in_reply_to_id": 1184390973,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GmPxv",
            "original_commit_id": "6c0e17c6f3a58e44dfbceadeab138dcbbde2517d",
            "original_line": 3453,
            "original_position": 105,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1412088447,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184431215/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-04T00:45:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184431215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1184674921"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184674921"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "majority of the headers have single value. I'd expect `:get()` to return the `string` like how it's actually transported in the http header. Most http library's Headers interface does that. 🤔",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-04T08:02:19Z",
            "diff_hunk": "@@ -3349,4 +3349,194 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Please carefully note the option differences with |vim.net.fetch()|,\n+    notably `redirect`.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers HeaderTable | table<string, string | string[]> | nil Headers to set on\n+                  the request\n+                • redirect string|nil Redirect mode. Defaults to \"follow\".\n+                  Possible values are:\n+                  • \"follow\": Follow all redirects incurred when fetching a\n+                    resource.\n+                  • \"none\": Ignores redirect status.\n+\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun()|nil Callback function when download\n+                  successfully completed.\n+                • on_err fun(err: string[])|nil An optional function recieving\n+                  a `stderr_buffered` string[] of curl stderr. Without\n+                  providing this function, |vim.net.download()| will\n+                  automatically raise an error to the user. See |on_stderr|\n+                  and `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id. See |job-control|.\n+\n+    See also: ~\n+      • |vim.net.fetch()|\n+      • |job-control|\n+      • man://curl\n+\n+fetch({url}, {opts})                                         *vim.net.fetch()*\n+    Asynchronously make HTTP requests.\n+\n+    Please carefully note the option differences with |vim.net.download()|,\n+    notably `redirect`.\n+\n+    Example: >lua\n+\n+     -- GET a url\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read response text\n+           local body = response.text()\n+         else\n+       end\n+     })\n+\n+     -- POST to a url, sending a table as JSON and providing an authorization header\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       method = \"POST\",\n+       data = {\n+         key = value\n+       },\n+       headers = {\n+         Authorization = \"Bearer \" .. token\n+       },\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read JSON response\n+           local table = response.json()\n+         else\n+\n+         -- What went wrong?\n+         vim.print(response.status)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) The request URL.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers HeaderTable | table<string, string | string[]> | nil Headers to set on\n+                  the request\n+                • redirect string|nil Redirect mode. Defaults to \"follow\".\n+                  Possible values are:\n+                  • \"follow\": Follow all redirects incurred when fetching a\n+                    resource.\n+                  • \"error\": Throw an error using on_err or vim.notify when\n+                    status is 3XX.\n+\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON-encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun(response: table)|nil Callback function when\n+                  request is completed successfully. The response has the\n+                  following keys:\n+                  • ok boolean Whether the request was successful (status\n+                    within 2XX range).\n+                  • headers fun(): HeaderTable Function returning a HeaderTable of response headers.\n+                  • text fun(): string|nil Function returning response body.\n+                    If method was HEAD, this is nil.\n+                  • json fun(opts: table|nil): table|nil Read the body as\n+                    JSON. Optionally accepts opts from |vim.json.decode|. Will\n+                    throw errors if body is not JSON-decodable. Nil if method\n+                    is HEAD.\n+                  • method string The http method used in the most recent HTTP\n+                    request.\n+                  • status number The numerical response code.\n+                  • size number The total amount of bytes that were\n+                    downloaded. This is the size of the body/data that was\n+                    transferred, excluding headers.\n+                  • http_version number HTTP version used in the request.\n+\n+                • on_err fun(err: string[])|nil Function recieving a\n+                  `stderr_buffered` string[] of error. err is either curl\n+                  stderr or internal fetch() error. Without providing this\n+                  function, |vim.net.fetch()| will automatically raise the\n+                  error to the user. See |on_stderr| and `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id.\n+\n+    See also: ~\n+      • |vim.net.download()|\n+      • https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n+      • |job-control|\n+      • man://curl\n+\n+HeaderTable:append({self}, {key}, {value})              *HeaderTable:append()*\n+    Append value to header.\n+\n+    Parameters: ~\n+      • {self}  \n+      • {key}   (string) Non case-sensitive header name.\n+\n+HeaderTable:get({self}, {key})                             *HeaderTable:get()*\n+    Get header values.\n+\n+    Parameters: ~\n+      • {self}  \n+      • {key}   (string) Non case-sensitive header name.\n+\n+    Return: ~\n+        string[]",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1184674921",
            "id": 1184674921,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GnLRp",
            "original_commit_id": "bfafe104912d05f52f5491373c3768960c8b9231",
            "original_line": 3513,
            "original_position": 165,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1412524731,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184674921/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-04T08:02:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184674921",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8050659?v=4",
                "events_url": "https://api.github.com/users/MunifTanjim/events{/privacy}",
                "followers_url": "https://api.github.com/users/MunifTanjim/followers",
                "following_url": "https://api.github.com/users/MunifTanjim/following{/other_user}",
                "gists_url": "https://api.github.com/users/MunifTanjim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MunifTanjim",
                "id": 8050659,
                "login": "MunifTanjim",
                "node_id": "MDQ6VXNlcjgwNTA2NTk=",
                "organizations_url": "https://api.github.com/users/MunifTanjim/orgs",
                "received_events_url": "https://api.github.com/users/MunifTanjim/received_events",
                "repos_url": "https://api.github.com/users/MunifTanjim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MunifTanjim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MunifTanjim/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MunifTanjim"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1184983864"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184983864"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "it is now `string[] | string | nil`",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-04T13:02:29Z",
            "diff_hunk": "@@ -3349,4 +3349,194 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Please carefully note the option differences with |vim.net.fetch()|,\n+    notably `redirect`.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers HeaderTable | table<string, string | string[]> | nil Headers to set on\n+                  the request\n+                • redirect string|nil Redirect mode. Defaults to \"follow\".\n+                  Possible values are:\n+                  • \"follow\": Follow all redirects incurred when fetching a\n+                    resource.\n+                  • \"none\": Ignores redirect status.\n+\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun()|nil Callback function when download\n+                  successfully completed.\n+                • on_err fun(err: string[])|nil An optional function recieving\n+                  a `stderr_buffered` string[] of curl stderr. Without\n+                  providing this function, |vim.net.download()| will\n+                  automatically raise an error to the user. See |on_stderr|\n+                  and `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id. See |job-control|.\n+\n+    See also: ~\n+      • |vim.net.fetch()|\n+      • |job-control|\n+      • man://curl\n+\n+fetch({url}, {opts})                                         *vim.net.fetch()*\n+    Asynchronously make HTTP requests.\n+\n+    Please carefully note the option differences with |vim.net.download()|,\n+    notably `redirect`.\n+\n+    Example: >lua\n+\n+     -- GET a url\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read response text\n+           local body = response.text()\n+         else\n+       end\n+     })\n+\n+     -- POST to a url, sending a table as JSON and providing an authorization header\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       method = \"POST\",\n+       data = {\n+         key = value\n+       },\n+       headers = {\n+         Authorization = \"Bearer \" .. token\n+       },\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read JSON response\n+           local table = response.json()\n+         else\n+\n+         -- What went wrong?\n+         vim.print(response.status)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) The request URL.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers HeaderTable | table<string, string | string[]> | nil Headers to set on\n+                  the request\n+                • redirect string|nil Redirect mode. Defaults to \"follow\".\n+                  Possible values are:\n+                  • \"follow\": Follow all redirects incurred when fetching a\n+                    resource.\n+                  • \"error\": Throw an error using on_err or vim.notify when\n+                    status is 3XX.\n+\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON-encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun(response: table)|nil Callback function when\n+                  request is completed successfully. The response has the\n+                  following keys:\n+                  • ok boolean Whether the request was successful (status\n+                    within 2XX range).\n+                  • headers fun(): HeaderTable Function returning a HeaderTable of response headers.\n+                  • text fun(): string|nil Function returning response body.\n+                    If method was HEAD, this is nil.\n+                  • json fun(opts: table|nil): table|nil Read the body as\n+                    JSON. Optionally accepts opts from |vim.json.decode|. Will\n+                    throw errors if body is not JSON-decodable. Nil if method\n+                    is HEAD.\n+                  • method string The http method used in the most recent HTTP\n+                    request.\n+                  • status number The numerical response code.\n+                  • size number The total amount of bytes that were\n+                    downloaded. This is the size of the body/data that was\n+                    transferred, excluding headers.\n+                  • http_version number HTTP version used in the request.\n+\n+                • on_err fun(err: string[])|nil Function recieving a\n+                  `stderr_buffered` string[] of error. err is either curl\n+                  stderr or internal fetch() error. Without providing this\n+                  function, |vim.net.fetch()| will automatically raise the\n+                  error to the user. See |on_stderr| and `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id.\n+\n+    See also: ~\n+      • |vim.net.download()|\n+      • https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n+      • |job-control|\n+      • man://curl\n+\n+HeaderTable:append({self}, {key}, {value})              *HeaderTable:append()*\n+    Append value to header.\n+\n+    Parameters: ~\n+      • {self}  \n+      • {key}   (string) Non case-sensitive header name.\n+\n+HeaderTable:get({self}, {key})                             *HeaderTable:get()*\n+    Get header values.\n+\n+    Parameters: ~\n+      • {self}  \n+      • {key}   (string) Non case-sensitive header name.\n+\n+    Return: ~\n+        string[]",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1184983864",
            "id": 1184983864,
            "in_reply_to_id": 1184674921,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GoWs4",
            "original_commit_id": "bfafe104912d05f52f5491373c3768960c8b9231",
            "original_line": 3513,
            "original_position": 165,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1413043270,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184983864/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-04T13:02:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184983864",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1184989177"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184989177"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "That's a bad api design tho. Return type should be consistent, it shouldn't return `string` or `string[]`.\r\n\r\nFor example,\r\n\r\nPython has a `get_all` that always returns `string[]` and `get` that always returns `string`.\r\n\r\nJavascript has `get` that always returns `string` and `getSetCookie` always returns `string[]`.\r\n\r\nGolang has `get` that always returns `string`.\r\n\r\nOf course, they can also return `null` / `nil` / equivalent.",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-04T13:06:55Z",
            "diff_hunk": "@@ -3349,4 +3349,194 @@ totable({f}, {...})                                       *vim.iter.totable()*\n     Return: ~\n         (table)\n \n+\n+==============================================================================\n+Lua module: net                                                      *lua-net*\n+\n+download({url}, {path}, {opts})                           *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    Please carefully note the option differences with |vim.net.fetch()|,\n+    notably `redirect`.\n+\n+    Example: >lua\n+\n+     vim.net.download(\"https://.../path/file\", \"~/.cache/download/location\", {\n+       on_complete = function ()\n+         vim.notify(\"File Downloaded\", vim.log.levels.INFO)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) url\n+      • {path}  (string) A download path, can be relative.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers HeaderTable | table<string, string | string[]> | nil Headers to set on\n+                  the request\n+                • redirect string|nil Redirect mode. Defaults to \"follow\".\n+                  Possible values are:\n+                  • \"follow\": Follow all redirects incurred when fetching a\n+                    resource.\n+                  • \"none\": Ignores redirect status.\n+\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun()|nil Callback function when download\n+                  successfully completed.\n+                • on_err fun(err: string[])|nil An optional function recieving\n+                  a `stderr_buffered` string[] of curl stderr. Without\n+                  providing this function, |vim.net.download()| will\n+                  automatically raise an error to the user. See |on_stderr|\n+                  and `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id. See |job-control|.\n+\n+    See also: ~\n+      • |vim.net.fetch()|\n+      • |job-control|\n+      • man://curl\n+\n+fetch({url}, {opts})                                         *vim.net.fetch()*\n+    Asynchronously make HTTP requests.\n+\n+    Please carefully note the option differences with |vim.net.download()|,\n+    notably `redirect`.\n+\n+    Example: >lua\n+\n+     -- GET a url\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read response text\n+           local body = response.text()\n+         else\n+       end\n+     })\n+\n+     -- POST to a url, sending a table as JSON and providing an authorization header\n+     vim.net.fetch(\"https://example.com/api/data\", {\n+       method = \"POST\",\n+       data = {\n+         key = value\n+       },\n+       headers = {\n+         Authorization = \"Bearer \" .. token\n+       },\n+       on_complete = function (response)\n+         -- Lets read the response!\n+\n+         if response.ok then\n+           -- Read JSON response\n+           local table = response.json()\n+         else\n+\n+         -- What went wrong?\n+         vim.print(response.status)\n+       end\n+     })\n+<\n+\n+    Parameters: ~\n+      • {url}   (string) The request URL.\n+      • {opts}  (table|nil) Optional keyword arguments:\n+                • method string|nil HTTP method to use. Defaults to GET.\n+                • headers HeaderTable | table<string, string | string[]> | nil Headers to set on\n+                  the request\n+                • redirect string|nil Redirect mode. Defaults to \"follow\".\n+                  Possible values are:\n+                  • \"follow\": Follow all redirects incurred when fetching a\n+                    resource.\n+                  • \"error\": Throw an error using on_err or vim.notify when\n+                    status is 3XX.\n+\n+                • data string|table|nil Data to send with the request. If a\n+                  table, it will be JSON-encoded. vim.net does not currently\n+                  support form encoding.\n+                • on_complete fun(response: table)|nil Callback function when\n+                  request is completed successfully. The response has the\n+                  following keys:\n+                  • ok boolean Whether the request was successful (status\n+                    within 2XX range).\n+                  • headers fun(): HeaderTable Function returning a HeaderTable of response headers.\n+                  • text fun(): string|nil Function returning response body.\n+                    If method was HEAD, this is nil.\n+                  • json fun(opts: table|nil): table|nil Read the body as\n+                    JSON. Optionally accepts opts from |vim.json.decode|. Will\n+                    throw errors if body is not JSON-decodable. Nil if method\n+                    is HEAD.\n+                  • method string The http method used in the most recent HTTP\n+                    request.\n+                  • status number The numerical response code.\n+                  • size number The total amount of bytes that were\n+                    downloaded. This is the size of the body/data that was\n+                    transferred, excluding headers.\n+                  • http_version number HTTP version used in the request.\n+\n+                • on_err fun(err: string[])|nil Function recieving a\n+                  `stderr_buffered` string[] of error. err is either curl\n+                  stderr or internal fetch() error. Without providing this\n+                  function, |vim.net.fetch()| will automatically raise the\n+                  error to the user. See |on_stderr| and `stderr_buffered`.\n+\n+    Return: ~\n+        (number) jobid A job id.\n+\n+    See also: ~\n+      • |vim.net.download()|\n+      • https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n+      • |job-control|\n+      • man://curl\n+\n+HeaderTable:append({self}, {key}, {value})              *HeaderTable:append()*\n+    Append value to header.\n+\n+    Parameters: ~\n+      • {self}  \n+      • {key}   (string) Non case-sensitive header name.\n+\n+HeaderTable:get({self}, {key})                             *HeaderTable:get()*\n+    Get header values.\n+\n+    Parameters: ~\n+      • {self}  \n+      • {key}   (string) Non case-sensitive header name.\n+\n+    Return: ~\n+        string[]",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1184989177",
            "id": 1184989177,
            "in_reply_to_id": 1184674921,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GoX_5",
            "original_commit_id": "bfafe104912d05f52f5491373c3768960c8b9231",
            "original_line": 3513,
            "original_position": 165,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1413052701,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184989177/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-04T13:06:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1184989177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8050659?v=4",
                "events_url": "https://api.github.com/users/MunifTanjim/events{/privacy}",
                "followers_url": "https://api.github.com/users/MunifTanjim/followers",
                "following_url": "https://api.github.com/users/MunifTanjim/following{/other_user}",
                "gists_url": "https://api.github.com/users/MunifTanjim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MunifTanjim",
                "id": 8050659,
                "login": "MunifTanjim",
                "node_id": "MDQ6VXNlcjgwNTA2NTk=",
                "organizations_url": "https://api.github.com/users/MunifTanjim/orgs",
                "received_events_url": "https://api.github.com/users/MunifTanjim/received_events",
                "repos_url": "https://api.github.com/users/MunifTanjim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MunifTanjim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MunifTanjim/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MunifTanjim"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1185927205"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185927205"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "That's a bad api design tho. Return type should be consistent, it shouldn't return `string` or `string[]`.\r\n\r\nFor example,\r\n\r\nPython:\r\n- `get` returns `string` -https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.get\r\n- `get_all` returns `string[]` - https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.get_all\r\n\r\nJavascript:\r\n- `get` returns `string` - https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\r\n- `getSetCookie` returns `string[]` - https://developer.mozilla.org/en-US/docs/Web/API/Headers/getSetCookie\r\n\r\nGolang:\r\n- `get` returns `string` - https://pkg.go.dev/net/http#Header.Get\r\n- `values` returns `string[]` - https://pkg.go.dev/net/http#Header.Values \r\n\r\nRust:\r\n- `get` returns `string` - https://docs.rs/http/latest/http/header/struct.HeaderMap.html#method.get\r\n- `get_all` returns `string` - https://docs.rs/http/latest/http/header/struct.HeaderMap.html#method.get_all",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-05T10:17:47Z",
            "diff_hunk": "@@ -0,0 +1,533 @@\n+local M = {}\n+\n+---@class HeaderTable\n+---@field private _storage table<string, string[]>\n+local HeaderTable = {}\n+HeaderTable.__index = HeaderTable\n+\n+---@private\n+function HeaderTable.new(input_table)\n+  local instance = setmetatable({ _storage = {} }, HeaderTable)\n+  if input_table then\n+    instance:_from_table(input_table)\n+  end\n+  return instance\n+end\n+\n+---@private\n+function HeaderTable:_normalize_key(key)\n+  return key:lower()\n+end\n+\n+---@private\n+function HeaderTable:_from_table(input_table)\n+  for key, value in pairs(input_table) do\n+    local normalized_key = self:_normalize_key(key)\n+    if type(value) == 'string' then\n+      self._storage[normalized_key] = { value }\n+    elseif type(value) == 'table' then\n+      self._storage[normalized_key] = value\n+    else\n+      vim.notify('Invalid value type for key: ' .. key, vim.log.levels.ERROR)\n+    end\n+  end\n+end\n+\n+---Set value of header.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param value string[] | string Header value.\n+---@param key string Non case-sensitive header name.\n+function HeaderTable:set(key, value)\n+  local normalized_key = self:_normalize_key(key)\n+  if type(value) == 'string' then\n+    self._storage[normalized_key] = { value }\n+  elseif type(value) == 'table' then\n+    self._storage[normalized_key] = value\n+  else\n+    vim.notify('Invalid value type for key: ' .. key, vim.log.levels.ERROR)\n+  end\n+end\n+\n+---Append value to header.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param key string Non case-sensitive header name.\n+function HeaderTable:append(key, value)\n+  local normalized_key = self:_normalize_key(key)\n+  if self._storage[normalized_key] then\n+    table.insert(self._storage[normalized_key], value)\n+  else\n+    self._storage[normalized_key] = { value }\n+  end\n+end\n+\n+---Get header values.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param key string Non case-sensitive header name.\n+---@return string[] | string | nil",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1185927205",
            "id": 1185927205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Gr9Al",
            "original_commit_id": "c46075fc2e1f10ea5dd9ac546970d585e3ccbb0d",
            "original_line": 66,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 1414524957,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185927205/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-05T10:17:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185927205",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8050659?v=4",
                "events_url": "https://api.github.com/users/MunifTanjim/events{/privacy}",
                "followers_url": "https://api.github.com/users/MunifTanjim/followers",
                "following_url": "https://api.github.com/users/MunifTanjim/following{/other_user}",
                "gists_url": "https://api.github.com/users/MunifTanjim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MunifTanjim",
                "id": 8050659,
                "login": "MunifTanjim",
                "node_id": "MDQ6VXNlcjgwNTA2NTk=",
                "organizations_url": "https://api.github.com/users/MunifTanjim/orgs",
                "received_events_url": "https://api.github.com/users/MunifTanjim/received_events",
                "repos_url": "https://api.github.com/users/MunifTanjim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MunifTanjim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MunifTanjim/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MunifTanjim"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1185937667"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185937667"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure if it's a good idea to expose the job id and refer to curl. It will make it more difficult to change the implementation later. E.g if we wanted to avoid spawning a process\r\n\r\n",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-05T10:30:08Z",
            "diff_hunk": "@@ -0,0 +1,533 @@\n+local M = {}\n+\n+---@class HeaderTable\n+---@field private _storage table<string, string[]>\n+local HeaderTable = {}\n+HeaderTable.__index = HeaderTable\n+\n+---@private\n+function HeaderTable.new(input_table)\n+  local instance = setmetatable({ _storage = {} }, HeaderTable)\n+  if input_table then\n+    instance:_from_table(input_table)\n+  end\n+  return instance\n+end\n+\n+---@private\n+function HeaderTable:_normalize_key(key)\n+  return key:lower()\n+end\n+\n+---@private\n+function HeaderTable:_from_table(input_table)\n+  for key, value in pairs(input_table) do\n+    local normalized_key = self:_normalize_key(key)\n+    if type(value) == 'string' then\n+      self._storage[normalized_key] = { value }\n+    elseif type(value) == 'table' then\n+      self._storage[normalized_key] = value\n+    else\n+      vim.notify('Invalid value type for key: ' .. key, vim.log.levels.ERROR)\n+    end\n+  end\n+end\n+\n+---Set value of header.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param value string[] | string Header value.\n+---@param key string Non case-sensitive header name.\n+function HeaderTable:set(key, value)\n+  local normalized_key = self:_normalize_key(key)\n+  if type(value) == 'string' then\n+    self._storage[normalized_key] = { value }\n+  elseif type(value) == 'table' then\n+    self._storage[normalized_key] = value\n+  else\n+    vim.notify('Invalid value type for key: ' .. key, vim.log.levels.ERROR)\n+  end\n+end\n+\n+---Append value to header.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param key string Non case-sensitive header name.\n+function HeaderTable:append(key, value)\n+  local normalized_key = self:_normalize_key(key)\n+  if self._storage[normalized_key] then\n+    table.insert(self._storage[normalized_key], value)\n+  else\n+    self._storage[normalized_key] = { value }\n+  end\n+end\n+\n+---Get header values.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param key string Non case-sensitive header name.\n+---@return string[] | string | nil\n+function HeaderTable:get(key)\n+  local normalized_key = self:_normalize_key(key)\n+  local value = self._storage[normalized_key]\n+\n+  if value == nil then\n+    return nil\n+  elseif #value == 1 then\n+    return value[1]\n+  else\n+    return value\n+  end\n+end\n+\n+---@param self HeaderTable HeaderTable Instance.\n+---@param key string Non case-sensitive header name.\n+---@return boolean has true if the HeaderTable contains key.\n+function HeaderTable:has(key)\n+  local normalized_key = self:_normalize_key(key)\n+  return self._storage[normalized_key] ~= nil\n+end\n+\n+---Create a non-case sensitive table of headers that can contain multiple values per header.\n+---\n+---@param input_table table<string, string[] | string> | nil Optional input table.\n+---@return HeaderTable\n+function M.new_headers(input_table)\n+  return HeaderTable.new(input_table)\n+end\n+\n+---@private\n+local function header_table_to_curl_arg_list(header_table)\n+  local arg_list = {}\n+  for key, values in pairs(header_table._storage) do\n+    for _, value in ipairs(values) do\n+      vim.list_extend(arg_list, {\n+        '--header',\n+        key .. ': ' .. value,\n+      })\n+    end\n+  end\n+  return arg_list\n+end\n+\n+---@private Function to create method arguments. Method defaults to GET.\n+---@param method string|nil Http method.\n+---@return string[]\n+local function createMethodArgs(method)\n+  method = method and method:upper() or 'GET'\n+\n+  if method == 'HEAD' then\n+    return { '--head' }\n+  elseif method == 'GET' then\n+    return { '--get' }\n+  end\n+\n+  return {\n+    '--request',\n+    method,\n+  }\n+end\n+\n+---@private --- Creates a table of curl command arguments based on the provided URL and options.\n+---@param url string The request URL.\n+---@param opts table Keyword arguments:\n+---             - method string|nil Http method.\n+---             - redirect string|nil Redirect mode.\n+---             - data string|table|nil Data to send with the request. If a table, it will be JSON\n+---             encoded.\n+---             - headers HeaderTable | table<string, string | string[]> | nil Headers to set on the request\n+---             - download_location string|nil Where to download a file if applicable.\n+---\n+---@return string[] args Curl command.\n+local function createCurlArgs(url, opts)\n+  vim.validate({\n+    opts = { opts, 'table', true },\n+  })\n+\n+  local args = {\n+    'curl',\n+\n+    -- Blocks progress bars and other non-parsable things\n+    '--no-progress-meter',\n+  }\n+\n+  -- Set http method.\n+  vim.list_extend(args, createMethodArgs(opts.method))\n+\n+  -- redirect mode\n+  if opts.redirect == 'follow' or opts.redirect == nil then\n+    table.insert(args, '--location')\n+  end\n+\n+  -- upload_file\n+  if opts.upload_file then\n+    vim.list_extend(args, {\n+      '--upload-file',\n+      vim.fn.fnameescape(vim.fn.fnamemodify(opts.upload_file, ':p')),\n+    })\n+  end\n+\n+  if opts.data ~= nil then\n+    if type(opts.data) == 'table' then\n+      vim.list_extend(args, {\n+        -- Let curl do some extra stuff for JSON\n+        '--json',\n+        vim.json.encode(opts.data),\n+      })\n+    else\n+      vim.list_extend(args, {\n+        -- Otherwise, just pass the string as data\n+        -- --data-raw does not give @ any special meaning\n+        '--data-raw',\n+        opts.data,\n+      })\n+    end\n+  end\n+\n+  if opts.headers ~= nil then\n+    local headers = opts.headers\n+\n+    if opts.headers._storage == nil then\n+      headers = HeaderTable.new(opts.headers)\n+    end\n+\n+    vim.list_extend(args, header_table_to_curl_arg_list(headers))\n+  end\n+\n+  if opts.download_location == nil then\n+    -- Write additonal request metadata after the body.\n+    vim.list_extend(args, {\n+      '--write-out',\n+      '\\\\nBEGIN_HEADERS\\\\n%{header_json}\\\\n%{json}',\n+    })\n+  else\n+    -- Write body contents to file.\n+    vim.list_extend(args, {\n+      '--output',\n+      opts.download_location,\n+    })\n+  end\n+\n+  if opts.user ~= nil then\n+    vim.list_extend(args, {\n+      '--user',\n+      opts.user,\n+    })\n+  end\n+\n+  -- Finally, insert the request url.\n+  table.insert(args, url)\n+\n+  return args\n+end\n+\n+--- @private Processes a list of data received from buffered stdout and returns a table with response data.\n+--- @param data string[] Data recieved from stdout.\n+--- @return table Response A table containing processed response data.\n+local function process_stdout(data)\n+  local cache = {}\n+\n+  local extra = {}\n+\n+  extra = vim.json.decode(data[#data])\n+\n+  -- Remove `json`\n+  table.remove(data, #data)\n+\n+  -- This makes our life so much easier\n+  local began_headers_at\n+\n+  -- In the vast majority of cases, BEGAN_HEADERS is near the end of the list.\n+  -- We can loop backwards to gain some perf\n+  for i = #data, 1, -1 do\n+    if data[i] == 'BEGIN_HEADERS' then\n+      began_headers_at = i\n+      break\n+    end\n+  end\n+\n+  table.remove(data, began_headers_at)\n+\n+  local status = extra.http_code and tonumber(extra.http_code) or nil\n+  extra.method = extra.method:upper()\n+\n+  ---@private\n+  local function read_headers()\n+    if began_headers_at ~= nil and cache.headers == nil then\n+      local header_string = table.concat(data, nil, began_headers_at, #data)\n+\n+      cache.headers = HeaderTable.new(vim.json.decode(header_string))\n+    end\n+\n+    return cache.headers\n+  end\n+\n+  ---@private\n+  local function read_text()\n+    -- check cache, return nil if method is HEAD\n+    if cache.body == nil and extra.method ~= 'HEAD' then\n+      -- Fix a strange case where it seems anything but HTTP will return with an extra\n+      -- \"\" item on the end.\n+      local extra_skip = (extra.scheme == 'SCP' or extra.scheme == 'FTP') and 1 or 0\n+\n+      local body = table.concat(data, '\\n', 1, began_headers_at - 1 - extra_skip)\n+\n+      cache.body = body\n+    end\n+\n+    return cache.body\n+  end\n+\n+  return {\n+    headers = read_headers,\n+    text = read_text,\n+    json = function(opts)\n+      local text = read_text()\n+      return text and vim.json.decode(text, opts and opts or {}) or nil\n+    end,\n+    method = extra.method,\n+    status = status,\n+    ok = status and (status >= 200 and status <= 299) or false,\n+    size = extra.size_download and tonumber(extra.size_download) or nil,\n+    http_version = extra.http_version and tonumber(extra.http_version) or nil,\n+    _raw_write_out = extra,\n+  }\n+end\n+\n+--- Asynchronously make network requests.\n+---\n+--- See man://curl for supported protocols. Not all protocols are fully tested.\n+---\n+--- Please carefully note the option differences with |vim.net.download()|, notably\n+--- `redirect`.\n+---\n+---@see |vim.net.download()|\n+---@see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n+---@see |job-control|\n+---@see man://curl\n+---\n+---@param url string The request URL.\n+---@param opts table|nil Optional keyword arguments:\n+---             - method string|nil HTTP method to use. Defaults to GET.\n+---             - headers HeaderTable | table<string, string | string[]> | nil Headers to set on the request\n+---             - redirect string|nil Redirect mode. Defaults to \"follow\". Possible values are:\n+---                 - \"follow\": Follow all redirects incurred when fetching a resource.\n+---                 - \"error\": Throw an error using on_err or vim.notify when status is 3XX.\n+---             - upload_file string|nil Path to an upload_file. Can be relative.\n+---             - user string|nil String in \"username:password\" format. Prefer over passing in url.\n+---             - data string|table|nil Data to send with the request. If a table, it will be\n+---             JSON-encoded. vim.net does not currently support form encoding.\n+---             - on_complete fun(response: table)|nil Callback function when request is\n+---             completed successfully. The response has the following keys:\n+---                 - ok boolean Whether the request was successful (status within 2XX range).\n+---                 - headers fun(): HeaderTable Function returning a HeaderTable of response headers.\n+---                 - text fun(): string|nil Function returning response body. If method was HEAD,\n+---                 this is nil.\n+---                 - json fun(opts: table|nil): table|nil Read the body as JSON. Optionally accepts\n+---                 opts from |vim.json.decode|. Will throw errors if body is not JSON-decodable.\n+---                 Nil if method is HEAD.\n+---                 - method string The http method used in the most recent HTTP request.\n+---                 - status number The numerical response code.\n+---                 - size number The total amount of bytes that were downloaded. This\n+---                 is the size of the body/data that was transferred, excluding headers.\n+---                 - http_version number HTTP version used in the request.\n+---             - on_err fun(err: string[], exit_code: number|nil)|nil Function recieving a `stderr_buffered` string[] of error.\n+---             err is either curl stderr or internal fetch() error. Without providing this\n+---             function, |vim.net.fetch()| will automatically raise the error to the user.\n+---             See |on_stderr| and `stderr_buffered`.\n+---@return number jobid A job id.",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1185937667",
            "id": 1185937667,
            "line": 350,
            "node_id": "PRRC_kwDOAPphoM5Gr_kD",
            "original_commit_id": "c46075fc2e1f10ea5dd9ac546970d585e3ccbb0d",
            "original_line": 335,
            "original_position": 335,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": 350,
            "pull_request_review_id": 1414541581,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185937667/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-05T10:37:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185937667",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1185942861"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185942861"
                }
            },
            "author_association": "MEMBER",
            "body": "This looks a lot like a [multimap](https://en.m.wikipedia.org/wiki/Multimap).  Maybe worth having this as `vim.multimap` or `vim.multidict`, similar to `vim.defaulttable` - instead of exposing a specialised HeaderTable\r\n\r\nIf it's even required. Maybe using `defaulttable` would be good enough too?",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-05T10:36:59Z",
            "diff_hunk": "@@ -0,0 +1,533 @@\n+local M = {}\n+\n+---@class HeaderTable\n+---@field private _storage table<string, string[]>\n+local HeaderTable = {}",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1185942861",
            "id": 1185942861,
            "line": 5,
            "node_id": "PRRC_kwDOAPphoM5GsA1N",
            "original_commit_id": "c46075fc2e1f10ea5dd9ac546970d585e3ccbb0d",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": 5,
            "pull_request_review_id": 1414541581,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185942861/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-05T10:40:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185942861",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1185960220"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185960220"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Please be more specific in your requests in the future.",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-05T10:58:54Z",
            "diff_hunk": "@@ -0,0 +1,533 @@\n+local M = {}\n+\n+---@class HeaderTable\n+---@field private _storage table<string, string[]>\n+local HeaderTable = {}\n+HeaderTable.__index = HeaderTable\n+\n+---@private\n+function HeaderTable.new(input_table)\n+  local instance = setmetatable({ _storage = {} }, HeaderTable)\n+  if input_table then\n+    instance:_from_table(input_table)\n+  end\n+  return instance\n+end\n+\n+---@private\n+function HeaderTable:_normalize_key(key)\n+  return key:lower()\n+end\n+\n+---@private\n+function HeaderTable:_from_table(input_table)\n+  for key, value in pairs(input_table) do\n+    local normalized_key = self:_normalize_key(key)\n+    if type(value) == 'string' then\n+      self._storage[normalized_key] = { value }\n+    elseif type(value) == 'table' then\n+      self._storage[normalized_key] = value\n+    else\n+      vim.notify('Invalid value type for key: ' .. key, vim.log.levels.ERROR)\n+    end\n+  end\n+end\n+\n+---Set value of header.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param value string[] | string Header value.\n+---@param key string Non case-sensitive header name.\n+function HeaderTable:set(key, value)\n+  local normalized_key = self:_normalize_key(key)\n+  if type(value) == 'string' then\n+    self._storage[normalized_key] = { value }\n+  elseif type(value) == 'table' then\n+    self._storage[normalized_key] = value\n+  else\n+    vim.notify('Invalid value type for key: ' .. key, vim.log.levels.ERROR)\n+  end\n+end\n+\n+---Append value to header.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param key string Non case-sensitive header name.\n+function HeaderTable:append(key, value)\n+  local normalized_key = self:_normalize_key(key)\n+  if self._storage[normalized_key] then\n+    table.insert(self._storage[normalized_key], value)\n+  else\n+    self._storage[normalized_key] = { value }\n+  end\n+end\n+\n+---Get header values.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param key string Non case-sensitive header name.\n+---@return string[] | string | nil",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1185960220",
            "id": 1185960220,
            "in_reply_to_id": 1185927205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GsFEc",
            "original_commit_id": "c46075fc2e1f10ea5dd9ac546970d585e3ccbb0d",
            "original_line": 66,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 1414577705,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185960220/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-05T10:58:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185960220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1185964835"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185964835"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm not telling you to change anything... that's between you and the maintainers. I'm just somebody who's looking forward to this feature and so giving feedback from the user's perspective.\r\n\r\nAnd about being specific,\r\n\r\n> I'd expect `:get()` to return the `string` like how it's actually transported in the http header.\r\n\r\nHTTP header values are just plain strings. Even if a header has multiple values they're all joined together when being transported over http. Not sure if I could be more specific.",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-05T11:05:00Z",
            "diff_hunk": "@@ -0,0 +1,533 @@\n+local M = {}\n+\n+---@class HeaderTable\n+---@field private _storage table<string, string[]>\n+local HeaderTable = {}\n+HeaderTable.__index = HeaderTable\n+\n+---@private\n+function HeaderTable.new(input_table)\n+  local instance = setmetatable({ _storage = {} }, HeaderTable)\n+  if input_table then\n+    instance:_from_table(input_table)\n+  end\n+  return instance\n+end\n+\n+---@private\n+function HeaderTable:_normalize_key(key)\n+  return key:lower()\n+end\n+\n+---@private\n+function HeaderTable:_from_table(input_table)\n+  for key, value in pairs(input_table) do\n+    local normalized_key = self:_normalize_key(key)\n+    if type(value) == 'string' then\n+      self._storage[normalized_key] = { value }\n+    elseif type(value) == 'table' then\n+      self._storage[normalized_key] = value\n+    else\n+      vim.notify('Invalid value type for key: ' .. key, vim.log.levels.ERROR)\n+    end\n+  end\n+end\n+\n+---Set value of header.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param value string[] | string Header value.\n+---@param key string Non case-sensitive header name.\n+function HeaderTable:set(key, value)\n+  local normalized_key = self:_normalize_key(key)\n+  if type(value) == 'string' then\n+    self._storage[normalized_key] = { value }\n+  elseif type(value) == 'table' then\n+    self._storage[normalized_key] = value\n+  else\n+    vim.notify('Invalid value type for key: ' .. key, vim.log.levels.ERROR)\n+  end\n+end\n+\n+---Append value to header.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param key string Non case-sensitive header name.\n+function HeaderTable:append(key, value)\n+  local normalized_key = self:_normalize_key(key)\n+  if self._storage[normalized_key] then\n+    table.insert(self._storage[normalized_key], value)\n+  else\n+    self._storage[normalized_key] = { value }\n+  end\n+end\n+\n+---Get header values.\n+---@param self HeaderTable HeaderTable Instance.\n+---@param key string Non case-sensitive header name.\n+---@return string[] | string | nil",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1185964835",
            "id": 1185964835,
            "in_reply_to_id": 1185927205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GsGMj",
            "original_commit_id": "c46075fc2e1f10ea5dd9ac546970d585e3ccbb0d",
            "original_line": 66,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 1414585336,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185964835/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-05T11:05:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185964835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8050659?v=4",
                "events_url": "https://api.github.com/users/MunifTanjim/events{/privacy}",
                "followers_url": "https://api.github.com/users/MunifTanjim/followers",
                "following_url": "https://api.github.com/users/MunifTanjim/following{/other_user}",
                "gists_url": "https://api.github.com/users/MunifTanjim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MunifTanjim",
                "id": 8050659,
                "login": "MunifTanjim",
                "node_id": "MDQ6VXNlcjgwNTA2NTk=",
                "organizations_url": "https://api.github.com/users/MunifTanjim/orgs",
                "received_events_url": "https://api.github.com/users/MunifTanjim/received_events",
                "repos_url": "https://api.github.com/users/MunifTanjim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MunifTanjim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MunifTanjim/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MunifTanjim"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23461#discussion_r1185965965"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23461"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185965965"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "the requirements are a multimap data structure with case-insensitive operations, and header concatenation (multiple values returned in `get()` are seperated by \", \"). Either `vim.multimap` includes that as an option or the `HeaderTable` stays as a wrapper.",
            "commit_id": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
            "created_at": "2023-05-05T11:06:37Z",
            "diff_hunk": "@@ -0,0 +1,533 @@\n+local M = {}\n+\n+---@class HeaderTable\n+---@field private _storage table<string, string[]>\n+local HeaderTable = {}",
            "html_url": "https://github.com/neovim/neovim/pull/23461#discussion_r1185965965",
            "id": 1185965965,
            "in_reply_to_id": 1185942861,
            "line": 5,
            "node_id": "PRRC_kwDOAPphoM5GsGeN",
            "original_commit_id": "c46075fc2e1f10ea5dd9ac546970d585e3ccbb0d",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": 5,
            "pull_request_review_id": 1414587296,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185965965/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-05T12:11:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1185965965",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "> vim.net.download()\r\n> [...]\r\n> It is entirely possible that this function gets removed, as the :edit URL implementation saves the file contents to memory. (Unlike netrw's wget implementation).\r\n\r\nI think this function has independent value, e.g., for bootstrapping `vim-plug` (or downloading spell files or -- a boy can dream -- compiled treesitter parsers).",
            "created_at": "2023-05-03T13:55:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1533074161",
            "id": 1533074161,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bYNrx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1533074161/reactions"
            },
            "updated_at": "2023-05-03T13:55:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1533074161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "[Screencast from 2023-05-04 12-21-58.webm](https://user-images.githubusercontent.com/40532058/236097279-6c991c1f-5bdd-4141-8117-24fd70aa2fa4.webm)\r\n\r\nCurl is magic.... Now we make writes work",
            "created_at": "2023-05-04T02:22:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1533992172",
            "id": 1533992172,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bbtzs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1533992172/reactions"
            },
            "updated_at": "2023-05-05T03:05:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1533992172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We need to decide how to handle the situation if `curl` is not available. Is this API optional (so just fail gracefully with a warning message), or do we want to allow users/plugins to rely on it (so make `curl` a hard runtime dependency)?\r\n\r\nIn either case, probably good to add a health check for it being present.",
            "created_at": "2023-05-04T07:49:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1534241292",
            "id": 1534241292,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bcqoM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1534241292/reactions"
            },
            "updated_at": "2023-05-04T07:49:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1534241292",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> We need to decide how to handle the situation if curl is not available\r\n\r\nI personally believe that neovim should handle the situation itself and let plugins/configs trust the output. The vast majority of plugins will just throw a \"Curl not found!\" error....\r\n\r\nAnd even if they *wanted* to fall back to `wget` (or whatever) they can just check the executable themselves.\r\n",
            "created_at": "2023-05-04T09:31:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1534400240",
            "id": 1534400240,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bdRbw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1534400240/reactions"
            },
            "updated_at": "2023-05-04T13:06:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1534400240",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I personally believe that neovim should handle the situation itself and let plugins/configs trust the output. The vast majority of plugins will just throw a \"Curl not found!\" error....\r\n\r\nWhat does that mean concretely?\r\n\r\n(And adding fallbacks is irrelevant here; what affects one tool can affect (all) others, too.)",
            "created_at": "2023-05-04T13:08:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1534753349",
            "id": 1534753349,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5benpF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1534753349/reactions"
            },
            "updated_at": "2023-05-04T13:08:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1534753349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> What does that mean concretely?\r\n\r\nconcretely I think if something makes a fetch() request without curl it should raise an error and notify the user (once). checkhealth should consider missing curl as a broken installation however neovim *should* work fine without curl (Similar to the clipboard provider). curl should also be added to package dependencies\r\n\r\n`scp` and `ftp` and reads now work fine. However, it is completely out of scope for this PR to implement netrw's directory explorer so enabling `g:lua_net_enable` will break `:edit`ing remote directories.",
            "created_at": "2023-05-05T03:10:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1535645075",
            "id": 1535645075,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5biBWT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1535645075/reactions"
            },
            "updated_at": "2023-05-05T03:12:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1535645075",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If we make `curl` a hard requirement (which I'm not against, but which would be a first and make this technically a breaking change), we should at least consider bundling `libcurl` instead. (There may be good reasons against it -- such as being responsible for its security issues, but it's worth a consideration.)",
            "created_at": "2023-05-05T13:39:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1536278713",
            "id": 1536278713,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bkcC5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1536278713/reactions"
            },
            "updated_at": "2023-05-05T13:39:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1536278713",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "(Provably naively) I dont think bundling libcurl and calling C from fetch() would be the hardest thing in the world. remove `return job` and the implementation can be changed at any time",
            "created_at": "2023-05-07T11:48:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1537420228",
            "id": 1537420228,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5boyvE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537420228/reactions"
            },
            "updated_at": "2023-05-07T11:48:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537420228",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It's mainly a question whether we want to go to the trouble of including yet another library in our build scripts.",
            "created_at": "2023-05-07T12:05:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1537424126",
            "id": 1537424126,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bozr-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537424126/reactions"
            },
            "updated_at": "2023-05-07T12:05:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537424126",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I would say the addition of vim.net warrants including some native lib for its backend, otherwise we can't properly ensure the behaviour across platforms.\n\nIf adding another lib is too much cost, then maybe we shouldn't add vim.net?",
            "created_at": "2023-05-07T20:03:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1537529241",
            "id": 1537529241,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bpNWZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537529241/reactions"
            },
            "updated_at": "2023-05-07T20:04:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537529241",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "(To be clear, I am in favor of including libcurl, and prefer it to requiring curl binaries. But my vote counts for little here.)",
            "created_at": "2023-05-07T20:17:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1537531848",
            "id": 1537531848,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bpN_I",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537531848/reactions"
            },
            "updated_at": "2023-05-07T20:17:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537531848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "i consider this a personal project it has no ETA and im currently entering exam season so development will certainly slow down",
            "created_at": "2023-05-08T02:52:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1537663206",
            "id": 1537663206,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bpuDm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537663206/reactions"
            },
            "updated_at": "2023-05-08T02:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537663206",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is assuming curl being available on all systems not reasonable? What distro/operating system doesn't ship curl?",
            "created_at": "2023-05-08T08:06:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1537932022",
            "id": 1537932022,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bqvr2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537932022/reactions"
            },
            "updated_at": "2023-05-08T08:06:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537932022",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Nothing guarantees a linux distro will ship with curl, and the version of curl will vary so we'd need to be careful about what options we use. We already have a similar problem with `man` which has a different implementation on MacOS with an incompatible option set.\n\nIf we just need curl to support a few autocmds internally, then using the binary is probably ok, but this PR introduces a full API for downloading.",
            "created_at": "2023-05-08T08:11:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1537939803",
            "id": 1537939803,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bqxlb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537939803/reactions"
            },
            "updated_at": "2023-05-08T08:11:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537939803",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "working on a libcurl implementation. should work more or less the same on every platform",
            "created_at": "2023-05-08T12:17:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1538266243",
            "id": 1538266243,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5bsBSD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1538266243/reactions"
            },
            "updated_at": "2023-05-08T12:20:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1538266243",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I might make a new PR since this is an almost complete rewrite at this point.",
            "created_at": "2023-05-10T11:48:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1542063299",
            "id": 1542063299,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5b6gTD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542063299/reactions"
            },
            "updated_at": "2023-05-10T11:48:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542063299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> If we make `curl` a hard requirement (which I'm not against, but which would be a first and make this technically a breaking change), we should at least consider bundling `libcurl` instead. (There may be good reasons against it -- such as being responsible for its security issues, but it's worth a consideration.)\r\n\r\nThe security implications of bundling `libcurl` are quite significant. Doing so is probably not a very good idea unless you also provide a system for `nvim` to update itself (or, at least, the bundled `libcurl` bits) for the users who install the binaries distributed via releases from this repo. Such a system will likely also not sit will with package managers/distros, so it may also need an opt-out. Alternatively to a self-update mechanism, a way to warn users that they need to update because their bundled `libcurl` has outstanding CVEs may also work.",
            "created_at": "2023-05-11T09:28:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543655098",
            "id": 1543655098,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cAk66",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543655098/reactions"
            },
            "updated_at": "2023-05-11T09:28:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543655098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30379873?v=4",
                "events_url": "https://api.github.com/users/carlocab/events{/privacy}",
                "followers_url": "https://api.github.com/users/carlocab/followers",
                "following_url": "https://api.github.com/users/carlocab/following{/other_user}",
                "gists_url": "https://api.github.com/users/carlocab/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/carlocab",
                "id": 30379873,
                "login": "carlocab",
                "node_id": "MDQ6VXNlcjMwMzc5ODcz",
                "organizations_url": "https://api.github.com/users/carlocab/orgs",
                "received_events_url": "https://api.github.com/users/carlocab/received_events",
                "repos_url": "https://api.github.com/users/carlocab/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/carlocab/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/carlocab/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/carlocab"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "But why is this any different than, say, `libuv`? (Just to be 100% clear here: bundle != vendor.)",
            "created_at": "2023-05-11T09:35:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543667715",
            "id": 1543667715,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cAoAD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543667715/reactions"
            },
            "updated_at": "2023-05-11T10:59:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543667715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The security implications of bundling libcurl are quite significant. Doing so is probably not a very good idea unless you also provide a system for nvim to update itself (or, at least, the bundled libcurl bits) for the users who install the binaries distributed via releases from this repo. Such a system will likely also not sit will with package managers/distros, so it may also need an opt-out. Alternatively to a self-update mechanism, a way to warn users that they need to update because their bundled libcurl has outstanding CVEs may also work.\r\n\r\nI still run nvim on rhel7 (curl 7.29.0 with [74 vulnerabilities](https://curl.se/docs/vuln-7.29.0.html)), so bundling libcurl would significantly **increase** security for me.\r\n\r\nOn the latest MacOS, curl is at version 7.87.0 which has at least [8 vulnerabilities](https://curl.se/docs/vuln-7.87.0.html).\r\n\r\nUbuntu 23.04, curl is at version 7.88.1 which has at least [6 vulnerabilities](https://curl.se/docs/vuln-7.88.1.html)",
            "created_at": "2023-05-11T10:53:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543773173",
            "id": 1543773173,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cBBv1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543773173/reactions"
            },
            "updated_at": "2023-05-11T10:58:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543773173",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Interesting view. Important to remember that any plugin that is making requests on your system realistically already has full access to your computer. ",
            "created_at": "2023-05-11T12:37:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543921625",
            "id": 1543921625,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cBl_Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543921625/reactions"
            },
            "updated_at": "2023-05-11T12:39:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543921625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> But why is this any different than, say, `libuv`? (Just to be 100% clear here: bundle != vendor.)\r\n\r\nThere may not be a difference in kind, but there's certainly a difference in degree. For one thing, the list of published vulnerabilities for `curl` is much longer than that for `libuv`.\r\n\r\n> bundling libcurl would significantly **increase** security for me.\r\n\r\nNo, it would not. Ubuntu, Canonical and Apple have security teams that backport vulnerability fixes to their `curl` packages. Even if it did: I would argue that the security gains for you are outweighed by the vulnerabilities you expose against users who only occasionally download Neovim from the releases page.",
            "created_at": "2023-05-11T12:47:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543936811",
            "id": 1543936811,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cBpsr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543936811/reactions"
            },
            "updated_at": "2023-05-11T12:47:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543936811",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30379873?v=4",
                "events_url": "https://api.github.com/users/carlocab/events{/privacy}",
                "followers_url": "https://api.github.com/users/carlocab/followers",
                "following_url": "https://api.github.com/users/carlocab/following{/other_user}",
                "gists_url": "https://api.github.com/users/carlocab/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/carlocab",
                "id": 30379873,
                "login": "carlocab",
                "node_id": "MDQ6VXNlcjMwMzc5ODcz",
                "organizations_url": "https://api.github.com/users/carlocab/orgs",
                "received_events_url": "https://api.github.com/users/carlocab/received_events",
                "repos_url": "https://api.github.com/users/carlocab/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/carlocab/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/carlocab/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/carlocab"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> There may not be a difference in kind, but there's certainly a difference in degree. For one thing, the list of published vulnerabilities for curl is much longer than that for libuv.\r\n\r\nWell, but _that_ degree applies to _all_ users of libcurl, does it not? So if a distribution packages curl _at all_, the only effect this would have is to increase the number of dependencies to rebuild after updating or patching curl by one. (Whose cost is not zero, but marginal.)\r\n\r\nThe cost for _us_ is a different matter, but you know I've been quite on point with keeping our dependencies (arguably too) up-to-date.",
            "created_at": "2023-05-11T12:53:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543947112",
            "id": 1543947112,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cBsNo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543947112/reactions"
            },
            "updated_at": "2023-05-11T12:54:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543947112",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "i dont disagree but id also like to say that any user who downloads neovim is already exposed to these vulnerabilities through the thousands of other applications that use curl likely already running on their system",
            "created_at": "2023-05-11T12:54:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543948633",
            "id": 1543948633,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cBslZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543948633/reactions"
            },
            "updated_at": "2023-05-11T12:57:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543948633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I do get your point, of course; this is not a decision to be made lightly. But the alternative would be to add a new external runtime dependency that cannot be checked a priori, which leads us back to the old discussion about tree-sitter parsers, where we didn't get anywhere either.",
            "created_at": "2023-05-11T13:02:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543966947",
            "id": 1543966947,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cBxDj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543966947/reactions"
            },
            "updated_at": "2023-05-11T13:02:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543966947",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Ubuntu, Canonical and Apple have security teams that backport vulnerability fixes to their curl packages.\r\n\r\nSo why haven't they? (genuine question)\r\n\r\nMacos:\r\n\r\n```\r\n> curl --version\r\ncurl 7.87.0 (x86_64-apple-darwin22.0) libcurl/7.87.0 (SecureTransport) LibreSSL/3.3.6 zlib/1.2.11 nghttp2/1.51.0\r\nRelease-Date: 2022-12-21\r\nProtocols: dict file ftp ftps gopher gophers http https imap imaps ldap ldaps mqtt pop3 pop3s rtsp smb smbs smtp smtps telnet tftp\r\nFeatures: alt-svc AsynchDNS GSS-API HSTS HTTP2 HTTPS-proxy IPv6 Kerberos Largefile libz MultiSSL NTLM NTLM_WB SPNEGO SSL threadsafe UnixSockets\r\n```\r\n\r\nUbuntu 23.04:\r\n\r\n```\r\n> curl --version\r\ncurl 7.88.1 (aarch64-unknown-linux-gnu) libcurl/7.88.1 OpenSSL/3.0.8 zlib/1.2.13 brotli/1.0.9 zstd/1.5.4 libidn2/2.3.3 libpsl/0.21.2 (+libidn2/2.3.3) libssh/0.10.4/openssl/zlib nghttp2/1.52.0 librtmp/2.3\r\nRelease-Date: 2023-02-20\r\nProtocols: dict file ftp ftps gopher gophers http https imap imaps ldap ldaps mqtt pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp\r\nFeatures: alt-svc AsynchDNS brotli GSS-API HSTS HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM NTLM_WB PSL SPNEGO SSL threadsafe TLS-SRP UnixSockets zstd\r\n```\r\n\r\nNeither of these look like they have any backports applied.\r\n\r\n> Even if it did: I would argue that the security gains for you are outweighed by the vulnerabilities you expose against users who only occasionally download Neovim from the releases page.\r\n\r\nWhat about users who **don't** update their OS but **do** update their Neovim version? It's pretty common for MacOS users to hold off a release or 2 (at least in my circle).\r\n\r\nMy point is that punting security fixes to the OS is a wash on whether it's more secure or not. ",
            "created_at": "2023-05-11T13:02:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543967039",
            "id": 1543967039,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cBxE_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543967039/reactions"
            },
            "updated_at": "2023-05-11T13:02:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543967039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "(don't trust Apple on anything. they lie with impunity as far as their CLI tools are concerned.)",
            "created_at": "2023-05-11T13:02:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543968335",
            "id": 1543968335,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cBxZP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543968335/reactions"
            },
            "updated_at": "2023-05-11T13:02:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543968335",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`curl` on MacOS isn't even built against aarch64! I need homebrew to get the goodness.",
            "created_at": "2023-05-11T13:03:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1543969846",
            "id": 1543969846,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cBxw2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543969846/reactions"
            },
            "updated_at": "2023-05-11T13:03:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543969846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Well, but _that_ degree applies to _all_ users of libcurl, does it not? So if a distribution packages curl _at all_, the only effect this would have is to increase the number of dependencies to rebuild after updating or patching curl by one. (Whose cost is not zero, but marginal.)\r\n\r\nI don't think I follow you here. My point is that bundling `libcurl` is particularly dangerous for users who download Neovim from your releases page and only occasionally update it the same way. In an alternative where Neovim shelled out to `curl` (or `dlopen`ed `libcurl` or something) instead, they would not be as exposed to the same vulnerabilities as they would have been if `libcurl` were bundled.\r\n\r\n> The cost for _us_ is a different matter, but you know I've been quite on point with keeping our dependencies (arguably too) up-to-date.\r\n\r\nYou have, which is why I'm not worried about users who regularly pull from `master`! Though you'll also need to bundle a TLS implementation. (Which, TBH, is probably even scarier.)\r\n\r\n> i dont disagree but id also like to say that any user who downloads neovim is already exposed to these vulnerabilities through the thousands of other applications that use curl likely already running on their system\r\n\r\nYes. However, the question is 1) in which situations are users exposed to more vulnerabilities, and 2) to what extent is the Neovim project responsible for that exposure? The answers to those questions don't look great in a world where Neovim bundles `libcurl`.\r\n\r\n> So why haven't they? (genuine question)\r\n\r\nThey have! Backporting security fixes is the not the same as updating the version of `[lib]curl`. For example, this is the [list of patches](https://sources.debian.org/patches/curl/7.64.0-4%2Bdeb10u2/) that Debian applies to `curl` 7.64, which is the version that ships with buster.\r\n\r\n> What about users who **don't** update their OS but **do** update their Neovim version? It's pretty common for MacOS users to hold off a release or 2 (at least in my circle).\r\n\r\nApple ships security updates to the latest three versions of macOS, so holding off a release or two is fine. However, I take your point regarding users who update Neovim much more often than they update their OS. I guess the question is: what share of your user base does this make up? I'd hazard that the share of users who no longer get security updates for their OS but do update their Neovim installation regularly is a relative minority.\r\n\r\n> My point is that punting security fixes to the OS is a wash on whether it's more secure or not.\r\n\r\nIt really isn't. OSes have full-time engineers working on keeping their OS secure.\r\n\r\n> (don't trust Apple on anything. they lie with impunity as far as their CLI tools are concerned.)\r\n\r\nApple may not care about the dev experience, but they do care about the security of macOS, and they are careful about the CLI bits their own software relies on. (What do you think Gatekeeper uses to phone home?)\r\n\r\n> `curl` on MacOS isn't even built against aarch64! I need homebrew to get the goodness.\r\n\r\nWhich version of macOS are you on? It is for me, and I'm not even on Ventura (or ARM64)...\r\n```\r\n❯ file /usr/bin/curl\r\n/usr/bin/curl: Mach-O universal binary with 2 architectures: [x86_64:\\012- Mach-O 64-bit x86_64 executable, flags:<NOUNDEFS|DYLDLINK|TWOLEVEL|PIE>] [\\012- arm64e (caps: 0x2):\\012- Mach-O 64-bit arm64e (caps: PAC00) executable, flags:<NOUNDEFS|DYLDLINK|TWOLEVEL|PIE>]\r\n\r\n❯ rg -A1 -- '- targets:' /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib/libcurl.tbd\r\n22:  - targets:         [ x86_64-macos, x86_64-maccatalyst, arm64-macos, arm64-maccatalyst,\r\n23-                       arm64e-macos, arm64e-maccatalyst ]\r\n```",
            "created_at": "2023-05-11T13:54:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544033689",
            "id": 1544033689,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cCBWZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544033689/reactions"
            },
            "updated_at": "2023-05-11T13:54:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544033689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30379873?v=4",
                "events_url": "https://api.github.com/users/carlocab/events{/privacy}",
                "followers_url": "https://api.github.com/users/carlocab/followers",
                "following_url": "https://api.github.com/users/carlocab/following{/other_user}",
                "gists_url": "https://api.github.com/users/carlocab/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/carlocab",
                "id": 30379873,
                "login": "carlocab",
                "node_id": "MDQ6VXNlcjMwMzc5ODcz",
                "organizations_url": "https://api.github.com/users/carlocab/orgs",
                "received_events_url": "https://api.github.com/users/carlocab/received_events",
                "repos_url": "https://api.github.com/users/carlocab/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/carlocab/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/carlocab/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/carlocab"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I don't think I follow you here. My point is that bundling libcurl is particularly dangerous for users who download Neovim from your releases page and only occasionally update it the same way. In an alternative where Neovim shelled out to curl (or dlopened libcurl or something) instead, they would not be as exposed to the same vulnerabilities as they would have been if libcurl were bundled.\r\n\r\nIt wasn't clear to me whether your concerns where from the point of view of a distro maintainer packaging Neovim, or just a general point of advice. I was addressing the former, while you were (only) focusing on the latter.\r\n\r\n> Apple may not care about the dev experience, but they do care about the security of macOS, and they are careful about the CLI bits their own software relies on. (What do you think Gatekeeper uses to phone home?)\r\n\r\nI was just saying not to trust the version output, especially in relation to the corresponding \"vanilla\" versions. Clearly they put care into their tools; I just wish they put as much care in communicating with their non-(paying) Xcode-Ecosystem developers...",
            "created_at": "2023-05-11T13:59:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544039678",
            "id": 1544039678,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cCCz-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544039678/reactions"
            },
            "updated_at": "2023-05-11T14:14:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544039678",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "god i wonder what version microsoft ships\r\n\r\nupdate: they do this stupid alias thing because of course they do",
            "created_at": "2023-05-11T14:12:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544059780",
            "id": 1544059780,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cCHuE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544059780/reactions"
            },
            "updated_at": "2023-05-11T14:20:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544059780",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In an alternative where Neovim shelled out to curl (or dlopened libcurl or something) instead, they would not be as exposed to the same vulnerabilities as they would have been if libcurl were bundled.\n\nWhy is that? Won't the same problem happen if the user doesn't update their system curl?\n\nDisclaimer: neither for or against bundling curl at the moment, just gathering data to understand the situation.",
            "created_at": "2023-05-11T14:13:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544061555",
            "id": 1544061555,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cCIJz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544061555/reactions"
            },
            "updated_at": "2023-05-11T14:13:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544061555",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It wasn't clear to me whether your concerns where from the point of view of a distro maintainer packaging Neovim, or just a general point of advice. I was addressing the former, while you were (only) focusing on the latter.\r\n\r\nYes, exactly. Apologies for the lack of clarity there!\r\n\r\n> Why is that? Won't the same problem happen if the user doesn't update their system curl?\r\n\r\nIt would, but my argument is that the system `curl` is likely to be updated more often than one that is hypothetically bundled with Neovim. For one thing: OSes have ways of making it really annoying to not apply security fixes (cf. Windows), or will just apply them behind your back when you're not looking (cf. Apple's Rapid Security Response). If the bundled `libcurl` has a high-severity CVE, Neovim can cut a new release, but you don't have the same mechanisms for trying to maximise the probability of users upgrading to it.\r\n\r\nThe hypothetical of tagging a new release even assumes that it will just be as simple as updating the dependency. What do you do in the situation where your usage of the `libcurl` API is broken by the `libcurl` update that also fixes the CVE? Or in the analogous situation with respect to the TLS implementation (which you also have to bundle) and `libcurl`? (i.e. TLS implementation needs update, but same update happens to break `libcurl`.)",
            "created_at": "2023-05-11T14:28:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544089754",
            "id": 1544089754,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cCPCa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544089754/reactions"
            },
            "updated_at": "2023-05-11T14:28:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544089754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30379873?v=4",
                "events_url": "https://api.github.com/users/carlocab/events{/privacy}",
                "followers_url": "https://api.github.com/users/carlocab/followers",
                "following_url": "https://api.github.com/users/carlocab/following{/other_user}",
                "gists_url": "https://api.github.com/users/carlocab/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/carlocab",
                "id": 30379873,
                "login": "carlocab",
                "node_id": "MDQ6VXNlcjMwMzc5ODcz",
                "organizations_url": "https://api.github.com/users/carlocab/orgs",
                "received_events_url": "https://api.github.com/users/carlocab/received_events",
                "repos_url": "https://api.github.com/users/carlocab/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/carlocab/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/carlocab/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/carlocab"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That of course assumes that Microsoft and other distributers actually are expedient with pushing out curl.exe updates as security updates, which seems to be of varying reliability in practice https://daniel.haxx.se/blog/2023/04/24/deleting-system32curl-exe/",
            "created_at": "2023-05-11T14:43:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544118302",
            "id": 1544118302,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cCWAe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544118302/reactions"
            },
            "updated_at": "2023-05-11T14:44:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544118302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> That of course assumes that Microsoft and other distributers actually are expedient with pushing out curl.exe updates as security updates, which seems to be of varying reliability in practice https://daniel.haxx.se/blog/2023/04/24/deleting-system32curl-exe/\r\n\r\nActually, it doesn't assume that. Even if Microsoft, et al are not expedient with pushing out `curl` updates: they still have more tools at their disposal for ensuring adoption of security updates than Neovim does. This is what I mean by\r\n\r\n> but you don't have the same mechanisms for trying to maximise the probability of users upgrading to it\r\n\r\nThat said, I disagree that mainstream OS developers are not expedient at pushing `curl` updates. A _lot_ in their systems rely on `curl` (as the blog post that you linked demonstrates), so they better damn well make sure it works properly. The fact that Microsoft didn't ship a fix for `curl` until four months after is more likely a consequence of their own assessment that it wasn't an important enough update to do sooner (which seems to agree with Daniel's own classification of the vulnerability as low severity).",
            "created_at": "2023-05-11T15:01:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544153622",
            "id": 1544153622,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cCeoW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544153622/reactions"
            },
            "updated_at": "2023-05-11T15:01:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544153622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30379873?v=4",
                "events_url": "https://api.github.com/users/carlocab/events{/privacy}",
                "followers_url": "https://api.github.com/users/carlocab/followers",
                "following_url": "https://api.github.com/users/carlocab/following{/other_user}",
                "gists_url": "https://api.github.com/users/carlocab/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/carlocab",
                "id": 30379873,
                "login": "carlocab",
                "node_id": "MDQ6VXNlcjMwMzc5ODcz",
                "organizations_url": "https://api.github.com/users/carlocab/orgs",
                "received_events_url": "https://api.github.com/users/carlocab/received_events",
                "repos_url": "https://api.github.com/users/carlocab/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/carlocab/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/carlocab/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/carlocab"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "So in general it won't be an issue with putting out fixes to such low-impact vulnerabilities in our point releases (which is closer to monthly than biannual in frequency) either?",
            "created_at": "2023-05-11T15:26:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544198436",
            "id": 1544198436,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cCpkk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544198436/reactions"
            },
            "updated_at": "2023-05-11T15:26:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544198436",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Also, it bears pointing out that we are not planning to expose the full Curl functionality to users; only a very limited subset needed for downloading and `:e` operations. (Probably even less than are exposed in the libcurl PR right now.)",
            "created_at": "2023-05-11T15:33:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544209548",
            "id": 1544209548,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cCsSM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544209548/reactions"
            },
            "updated_at": "2023-05-11T15:33:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544209548",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> So in general it won't be an issue with putting out fixes to such low-impact vulnerabilities in our point releases (which is closer to monthly than biannual in frequency) either?\r\n\r\nIt depends on whether your usage (and, perhaps, plugins' usage...) of the `libcurl` API is likely to expose users to the vulnerability. If not, then delayed updates are probably ok. But I'd say you probably want a cybersecurity expert (or, preferably, a team of them) to make this assessment. This doesn't address the problem of higher impact vulnerabilities, however.",
            "created_at": "2023-05-11T15:36:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544216106",
            "id": 1544216106,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cCt4q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544216106/reactions"
            },
            "updated_at": "2023-05-11T15:36:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544216106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30379873?v=4",
                "events_url": "https://api.github.com/users/carlocab/events{/privacy}",
                "followers_url": "https://api.github.com/users/carlocab/followers",
                "following_url": "https://api.github.com/users/carlocab/following{/other_user}",
                "gists_url": "https://api.github.com/users/carlocab/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/carlocab",
                "id": 30379873,
                "login": "carlocab",
                "node_id": "MDQ6VXNlcjMwMzc5ODcz",
                "organizations_url": "https://api.github.com/users/carlocab/orgs",
                "received_events_url": "https://api.github.com/users/carlocab/received_events",
                "repos_url": "https://api.github.com/users/carlocab/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/carlocab/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/carlocab/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/carlocab"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I already mentioned some of this in chat, but adding it here too for the record:\r\n\r\n\r\nFirst to clarify about bundling: If Neovim were to bundle libcurl, distributions can still link against their packaged versions when they build Neovim. Most distributions will likely do that. If they then update libcurl, Neovim will use that updated version thanks to dynamic linking.\r\n\r\n\r\nFor distributions and systems where that's not the case, or when using the AppImage, the users are exposed to the same problem that any other _manually_ installed piece of software has: If there are vulnerabilities that may affect them, they'll need to wait for a fix and then update. That's the case for statically distributed software (like Github CLI for example), or for software manually installed via tools like `pip install`.  Some software may support auto-updates, but I think that's a minority. And at least in the Linux ecosystem many don't like it, because that's what we got distributions and package managers for.\r\n\r\n\r\nIf Neovim had a vulnerability today where reading a file could lead to code execution - or something similar - we'd need to fix it and release a new version. Users would need to update. Manually if their installation was done manually, and otherwise it will hopefully arrive in the distributions channel in a timely manner.\r\n\r\nAdding libcurl won't change anything in that regard. More code has more risks for vulnerabilities. Whether that's from a dependency or from Neovim's own written code doesn't matter. Adding more network functionality may cause users to expose themselves more to untrusted input, but that's independent of the distribution or linking model. It would only be an argument against adding this functionality at all.\r\n\r\nAnd I think whether to use a bundled version or not is ultimately the users choice as they take & need to accept the risk. The best we can do is inform them about the trade-offs and consequences.\r\n",
            "created_at": "2023-05-11T17:26:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544399979",
            "id": 1544399979,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cDaxr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544399979/reactions"
            },
            "updated_at": "2023-05-11T17:26:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544399979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Adding libcurl won't change anything in that regard. More code has more risks for vulnerabilities. Whether that's from a dependency or from Neovim's own written code doesn't matter. \r\n\r\nI think this is overly reductive, and very similar to @clason's [point earlier](https://github.com/neovim/neovim/pull/23461#issuecomment-1543667715). There is a [meaningful distinction](https://github.com/neovim/neovim/pull/23461#issuecomment-1543936811) between adding `libcurl` and, say, writing more code for buffer handling.",
            "created_at": "2023-05-11T17:57:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544443915",
            "id": 1544443915,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cDlgL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 2,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544443915/reactions"
            },
            "updated_at": "2023-05-11T17:57:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544443915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30379873?v=4",
                "events_url": "https://api.github.com/users/carlocab/events{/privacy}",
                "followers_url": "https://api.github.com/users/carlocab/followers",
                "following_url": "https://api.github.com/users/carlocab/following{/other_user}",
                "gists_url": "https://api.github.com/users/carlocab/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/carlocab",
                "id": 30379873,
                "login": "carlocab",
                "node_id": "MDQ6VXNlcjMwMzc5ODcz",
                "organizations_url": "https://api.github.com/users/carlocab/orgs",
                "received_events_url": "https://api.github.com/users/carlocab/received_events",
                "repos_url": "https://api.github.com/users/carlocab/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/carlocab/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/carlocab/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/carlocab"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> There is a meaningful distinction between adding libcurl and, say, writing more code for buffer handling.\r\n\r\n\r\nOne reads (& decodes) bytes from a filesystem, the other over the network. Maybe I'm oversimplifying, maybe you're exaggerating. I'm not sure if there's any good approximates to the attack vector. Maybe the amount of CVEs, but they can also correlate more with the amount of audits it had. An example is https://nvd.nist.gov/vuln/detail/CVE-2019-12735\r\n\r\nLooking at libuv vs. libcurl I think we actually shouldn't make a distinction. libuv provides networking capabilities and neovim core already uses them. E.g. if you're in a untrusted network and somebody does DNS poisoning you may connect to a malicious host via LSP or when using plugins like nvim-dap to debug something on a remote machine. That can blow up too if there are vulnerabilities.\r\n\r\n\r\nAnd let's look at the alternatives:\r\n\r\n- Don't do anything: Nothing changes\r\n\r\n- Load libcurl dynamically at runtime: This won't prevent people from creating bundles but might make it harder to detect that there is a dependency for people packaging it. I'm not that familiar with AppImage but I can imagine that it would actually end up bundling libcurl too. Except that instead of that we control it in cmake it would be in some appImage spec or something?\r\n\r\n- Spawn curl processes:\r\n    - Much less value proposition for plugin authors as spawning processes is already relatively simple. One of the appeals of an API is that you don't have that overhead and that you can do things like connection re-use.\r\n    - We can't provide bundles, or the bundle would need to bundle the curl executable. If it bundles an executable we've the same problem as with libcurl in regards to updates. Not providing bundles would be the same as bundling libcurl but removing the artifacts from Github. People who really want to could still do it. Others are pushed more towards distribution packages. (I'm looking forward to that outcry, if the Debian package removal was any indication of how popular that is)\r\n    - I think there's a bigger chance of people manually placing a curl binary in $PATH (that they then forget updating), than people manually messing with system libraries. So this may actually decrease security.\r\n\r\n\r\n- Implement own stuff on top of libuv and link against a SSL library: From a stdlib perspective I'd prefer this as you can then do stuff where you need SSL without HTTP. But it's more work and suffers the same problems.\r\n\r\n\r\nIn a nutshell: I think this discussion is a red herring. If we want vim.net functionality we've to pay some price for it. Otherwise we have to leave it out.\r\n",
            "created_at": "2023-05-11T19:09:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544539580",
            "id": 1544539580,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cD828",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544539580/reactions"
            },
            "updated_at": "2023-05-11T20:51:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544539580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Well I wrote both sides so I don't mind :P\r\n\r\nWhat I haven't seen mentioned is that neovim *right now* shells out to multiple tools (depending on the protocol, `wget` for http, `scp`..), and even though those have significantly less CVEs, reducing these down to a single `curl` would reduce the attack surface, right?\r\n\r\nThis PR is simply an rewrite and abstraction of the downloading that neovim already does to make it more useful for users and authors.\r\n\r\nIf I made this exact same PR but with wget as a more direct implementation port with Lua, in the same way it is already being used in neovim, would these same issues be raised?\r\n\r\nFrom what I've read here, it's best to never statically link/bundle curl since that's quite dangerous. but that can also lead to users incorrectly maintaining a manual install themselves.\r\n\r\nI'm not familiar with AppImage etc, but what distribution/computer does not have curl but can run AppImage?",
            "created_at": "2023-05-11T23:24:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1544823491",
            "id": 1544823491,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cFCLD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544823491/reactions"
            },
            "updated_at": "2023-05-11T23:53:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1544823491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> In a nutshell: I think this discussion is a red herring. If we want vim.net functionality we've to pay some price for it. Otherwise we have to leave it out.\r\n\r\nSure -- but surely this discussion is also at least in part about the price we have to pay for it, which to me is absolutely not a red herring.\r\n\r\n> One reads (& decodes) bytes from a filesystem, the other over the network. Maybe I'm oversimplifying, maybe you're exaggerating. I'm not sure if there's any good approximates to the attack vector. An example is https://nvd.nist.gov/vuln/detail/CVE-2019-12735\r\n\r\nIf you really think that code that interfaces with a library whose primary use case is handling untrusted data should be treated exactly the same as code that primarily handles other contexts, then there's not much I can say to convince you of anything. I suspect many users would (and I think should) disagree, however.\r\n\r\n> Maybe the amount of CVEs, but they can also correlate more with the amount of audits it had.\r\n\r\nYou're talking as if audits occur as a consequence of purely random circumstance, as opposed to, you know, how security-sensitive some software is. That is to say: we should probably infer something about the number of audits that some software has had, and that something likely has bearing on your security posture when you decide to use/bundle/etc a piece of software.",
            "created_at": "2023-05-15T17:19:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1548250535",
            "id": 1548250535,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5cSG2n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1548250535/reactions"
            },
            "updated_at": "2023-05-15T17:19:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1548250535",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30379873?v=4",
                "events_url": "https://api.github.com/users/carlocab/events{/privacy}",
                "followers_url": "https://api.github.com/users/carlocab/followers",
                "following_url": "https://api.github.com/users/carlocab/following{/other_user}",
                "gists_url": "https://api.github.com/users/carlocab/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/carlocab",
                "id": 30379873,
                "login": "carlocab",
                "node_id": "MDQ6VXNlcjMwMzc5ODcz",
                "organizations_url": "https://api.github.com/users/carlocab/orgs",
                "received_events_url": "https://api.github.com/users/carlocab/received_events",
                "repos_url": "https://api.github.com/users/carlocab/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/carlocab/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/carlocab/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/carlocab"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\r\n> If we make `curl` a hard requirement (which I'm not against, but which would be a first and make this technically a breaking change), we should at least consider bundling `libcurl` instead.\r\n> ...\r\n> I would say the addition of vim.net warrants including some native lib for its backend, otherwise we can't properly ensure the behaviour across platforms.\r\n\r\nThis is premature. And Nvim has already required `curl` since almost the beginning, for e.g. spellfile downloads. (That's why we (used to) bundle `curl` on Windows).\r\n\r\nGold-plating this can come later. The first goal of https://github.com/neovim/neovim/issues/23232 is just to introduce a simple interface that removes netrw from the equation. It can be \"synchronous only\" for now.\r\n\r\n# Status\r\n\r\n- We just need a simple `curl` wrapper to start with so we can remove netrw from the equation. All the discussion about bundling libcurl is premature and unnecessary.\r\n- @mfussenegger [comment](https://github.com/neovim/neovim/pull/23461#issuecomment-1544539580) is a nice summary of above discussion.",
            "created_at": "2023-08-01T14:29:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/23461#issuecomment-1660446261",
            "id": 1660446261,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
            "node_id": "IC_kwDOAPphoM5i-GY1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1660446261/reactions"
            },
            "updated_at": "2023-08-01T14:29:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1660446261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23461/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/23461/commits",
    "created_at": "2023-05-03T12:10:01Z",
    "diff_url": "https://github.com/neovim/neovim/pull/23461.diff",
    "draft": false,
    "head": {
        "label": "mrshmllow:vim.net",
        "ref": "vim.net",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/mrshmllow/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/mrshmllow/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/mrshmllow/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/mrshmllow/neovim/branches{/branch}",
            "clone_url": "https://github.com/mrshmllow/neovim.git",
            "collaborators_url": "https://api.github.com/repos/mrshmllow/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/mrshmllow/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/mrshmllow/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/mrshmllow/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/mrshmllow/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/mrshmllow/neovim/contributors",
            "created_at": "2023-04-30T05:55:38Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/mrshmllow/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/mrshmllow/neovim/downloads",
            "events_url": "https://api.github.com/repos/mrshmllow/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/mrshmllow/neovim/forks",
            "full_name": "mrshmllow/neovim",
            "git_commits_url": "https://api.github.com/repos/mrshmllow/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/mrshmllow/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/mrshmllow/neovim/git/tags{/sha}",
            "git_url": "git://github.com/mrshmllow/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/mrshmllow/neovim/hooks",
            "html_url": "https://github.com/mrshmllow/neovim",
            "id": 634440330,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/mrshmllow/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/mrshmllow/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/mrshmllow/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/mrshmllow/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/mrshmllow/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/mrshmllow/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/mrshmllow/neovim/merges",
            "milestones_url": "https://api.github.com/repos/mrshmllow/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOJdDKig",
            "notifications_url": "https://api.github.com/repos/mrshmllow/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
                "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrshmllow/followers",
                "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrshmllow",
                "id": 40532058,
                "login": "mrshmllow",
                "node_id": "MDQ6VXNlcjQwNTMyMDU4",
                "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
                "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
                "repos_url": "https://api.github.com/users/mrshmllow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrshmllow"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/mrshmllow/neovim/pulls{/number}",
            "pushed_at": "2023-07-22T10:43:57Z",
            "releases_url": "https://api.github.com/repos/mrshmllow/neovim/releases{/id}",
            "size": 247103,
            "ssh_url": "git@github.com:mrshmllow/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/mrshmllow/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/mrshmllow/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/mrshmllow/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/mrshmllow/neovim/subscription",
            "svn_url": "https://github.com/mrshmllow/neovim",
            "tags_url": "https://api.github.com/repos/mrshmllow/neovim/tags",
            "teams_url": "https://api.github.com/repos/mrshmllow/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/mrshmllow/neovim/git/trees{/sha}",
            "updated_at": "2023-04-30T05:55:39Z",
            "url": "https://api.github.com/repos/mrshmllow/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
            "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
            "followers_url": "https://api.github.com/users/mrshmllow/followers",
            "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mrshmllow",
            "id": 40532058,
            "login": "mrshmllow",
            "node_id": "MDQ6VXNlcjQwNTMyMDU4",
            "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
            "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
            "repos_url": "https://api.github.com/users/mrshmllow/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mrshmllow"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/23461",
    "id": 1336597345,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23461",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f6bce5bb56c07830e57177519d507802eabc26ab",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5Pqtth",
    "number": 23461,
    "patch_url": "https://github.com/neovim/neovim/pull/23461.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/23461/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/5d76fcb6e3fc1382c9b691c4b6f2b376e7894c42",
    "title": "feat(vim.net): `fetch()`, `download()`, and `:e URL` in lua",
    "updated_at": "2023-08-01T14:29:26Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/23461",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/40532058?v=4",
        "events_url": "https://api.github.com/users/mrshmllow/events{/privacy}",
        "followers_url": "https://api.github.com/users/mrshmllow/followers",
        "following_url": "https://api.github.com/users/mrshmllow/following{/other_user}",
        "gists_url": "https://api.github.com/users/mrshmllow/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mrshmllow",
        "id": 40532058,
        "login": "mrshmllow",
        "node_id": "MDQ6VXNlcjQwNTMyMDU4",
        "organizations_url": "https://api.github.com/users/mrshmllow/orgs",
        "received_events_url": "https://api.github.com/users/mrshmllow/received_events",
        "repos_url": "https://api.github.com/users/mrshmllow/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mrshmllow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mrshmllow/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mrshmllow"
    }
}