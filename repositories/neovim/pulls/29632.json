{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29632/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29632/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/29632"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29632"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29632/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/708b5f86ba6513050da0af72e1b6e07386c0acdb"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5511,
            "forks_count": 5511,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1773,
            "open_issues_count": 1773,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-07-15T22:47:18Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 279309,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 80116,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-07-16T02:04:40Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 80116,
            "watchers_count": 80116,
            "web_commit_signoff_required": false
        },
        "sha": "8d8b8af2d2b837c9a7a4005b943a8a4c9bfc391d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "There are three parts in this refactor/optimization:\r\n- Separate single \"sorted patterns\" list into two: \"sorted patterns with non-negative priority\" and \"sorted patterns with negative priority\". It allows extracting logic of matching sorted patterns into a separate function. As a result, main `vim.filetype.match()` code is cleaner and pattern matching is easier to manage (hopefully, will be important in future PRs).\r\n- Instead of caching only whether pattern has environment variable (during \"match\" time), cache other data about it (during \"add\" time): full pattern (with '^' / '$' at start / end) and whether it contains slash. use them in equivalent manner as before.\r\n- Extract \"expand environment variables\" in a separate function. I tried simplifying it by simply throwing error if there is no envvar defined (and later call it with `pcall()`), but this seemed to be slower than current approach.\r\n- Convert patterns to be explicit (without implicit anchoring). This proved to be slightly faster (probably due to less backtracking during match) and allows to not compute and cache `fullpat`.\r\n\r\n------\r\n\r\nEach step also seems to lead to small but consistent performance improvements. I tested (with debug build) for three cases of 'filename' on `main` and latest commit of this PR:\r\n\r\nFilename | `master` | This PR |\r\n--------------|-----------|--------------|\r\ninit.lua | 0.136ms  | 0.111ms |\r\nno-match | 0.163ms | 0.132ms |\r\n/home/user/.config/hello/world/no-match | 0.240ms | 0.210ms |\r\n\r\n------\r\n\r\nThis is all done in (hopefully) a preparation for #29660.",
    "closed_at": "2024-07-13T07:27:48Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1670920072"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1670920072"
                }
            },
            "author_association": "MEMBER",
            "body": "Why change this from the tuple syntax?",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-09T17:30:00Z",
            "diff_hunk": "@@ -4,7 +4,7 @@ local fn = vim.fn\n local M = {}\n \n --- @alias vim.filetype.mapfn fun(path:string,bufnr:integer, ...):string?, fun(b:integer)?\n---- @alias vim.filetype.maptbl [string|vim.filetype.mapfn, {priority:integer}]\n+--- @alias vim.filetype.maptbl { [1]: string|vim.filetype.mapfn, [2]: { priority: number? } }",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1670920072",
            "id": 1670920072,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5jmDeI",
            "original_commit_id": "defb3a91d62714f76d201e05e55d0c04d606c096",
            "original_line": 7,
            "original_position": 5,
            "original_start_line": 7,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2166970711,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1670920072/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2024-07-09T17:37:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1670920072",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1670977117"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1670977117"
                }
            },
            "author_association": "MEMBER",
            "body": "Because LuaLS gave warnings about it and because [it is a table in code](https://github.com/neovim/neovim/blob/51d85f7ea58bd715cec1fdfa8d19826cafe7185d/runtime/lua/vim/filetype.lua#L15-L32). Here is [another example](https://github.com/neovim/neovim/blob/51d85f7ea58bd715cec1fdfa8d19826cafe7185d/runtime/lua/vim/filetype.lua#L1779-L1784).",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-09T18:19:56Z",
            "diff_hunk": "@@ -4,7 +4,7 @@ local fn = vim.fn\n local M = {}\n \n --- @alias vim.filetype.mapfn fun(path:string,bufnr:integer, ...):string?, fun(b:integer)?\n---- @alias vim.filetype.maptbl [string|vim.filetype.mapfn, {priority:integer}]\n+--- @alias vim.filetype.maptbl { [1]: string|vim.filetype.mapfn, [2]: { priority: number? } }",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1670977117",
            "id": 1670977117,
            "in_reply_to_id": 1670920072,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5jmRZd",
            "original_commit_id": "defb3a91d62714f76d201e05e55d0c04d606c096",
            "original_line": 7,
            "original_position": 5,
            "original_start_line": 7,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2167059289,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1670977117/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2024-07-09T18:21:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1670977117",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1670984556"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1670984556"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh, maybe I am misunderstanding what LuaLS means by \"tuple\". Is it indeed the same as table but with known set of indexes? So are these two annotations equivalent?",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-09T18:26:06Z",
            "diff_hunk": "@@ -4,7 +4,7 @@ local fn = vim.fn\n local M = {}\n \n --- @alias vim.filetype.mapfn fun(path:string,bufnr:integer, ...):string?, fun(b:integer)?\n---- @alias vim.filetype.maptbl [string|vim.filetype.mapfn, {priority:integer}]\n+--- @alias vim.filetype.maptbl { [1]: string|vim.filetype.mapfn, [2]: { priority: number? } }",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1670984556",
            "id": 1670984556,
            "in_reply_to_id": 1670920072,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5jmTNs",
            "original_commit_id": "defb3a91d62714f76d201e05e55d0c04d606c096",
            "original_line": 7,
            "original_position": 5,
            "original_start_line": 7,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2167070962,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1670984556/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2024-07-09T18:42:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1670984556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1671009231"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1671009231"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah, I've updated LuaLS (from 3.7.4 to 3.9.3) and now warnings now.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-09T18:49:05Z",
            "diff_hunk": "@@ -4,7 +4,7 @@ local fn = vim.fn\n local M = {}\n \n --- @alias vim.filetype.mapfn fun(path:string,bufnr:integer, ...):string?, fun(b:integer)?\n---- @alias vim.filetype.maptbl [string|vim.filetype.mapfn, {priority:integer}]\n+--- @alias vim.filetype.maptbl { [1]: string|vim.filetype.mapfn, [2]: { priority: number? } }",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1671009231",
            "id": 1671009231,
            "in_reply_to_id": 1670920072,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5jmZPP",
            "original_commit_id": "defb3a91d62714f76d201e05e55d0c04d606c096",
            "original_line": 7,
            "original_position": 5,
            "original_start_line": 7,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2167111239,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1671009231/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2024-07-09T18:49:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1671009231",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1675996031"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675996031"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm guessing the point of this is to speed up `vim.filetype.add`?",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T14:16:36Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1675996031",
            "id": 1675996031,
            "line": 2250,
            "node_id": "PRRC_kwDOAPphoM5j5at_",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2250,
            "original_position": 974,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 974,
            "pull_request_review_id": 2175013978,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675996031/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:16:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675996031",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1675999514"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675999514"
                }
            },
            "author_association": "MEMBER",
            "body": "Light suggestion: we could just sort the built-in table once, then any additions with `vim.filetype.add` can place the new filetypes at the correct position rather than invoking a full sort.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T14:19:10Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }\n+\n+    local opts = (type(maptbl) == 'table' and type(maptbl[2]) == 'table') and maptbl[2] or {}\n+    opts.priority = opts.priority or 0\n+\n+    table.insert(opts.priority >= 0 and pos or neg, { [pat] = { ft, opts } })\n   end\n-  table.sort(sorted, function(a, b)\n-    return a[next(a)][2].priority > b[next(b)][2].priority\n-  end)\n-  return sorted\n+\n+  table.sort(pos, compare_by_priority)\n+  table.sort(neg, compare_by_priority)",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1675999514",
            "id": 1675999514,
            "line": 2259,
            "node_id": "PRRC_kwDOAPphoM5j5bka",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2259,
            "original_position": 987,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 987,
            "pull_request_review_id": 2175019773,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675999514/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:19:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675999514",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676027856"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676027856"
                }
            },
            "author_association": "MEMBER",
            "body": "The `... = pattern_lookup[pat] or ...` part? Yes, there is no need to parse same string pattern more than once.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T14:36:14Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676027856",
            "id": 1676027856,
            "in_reply_to_id": 1675996031,
            "line": 2250,
            "node_id": "PRRC_kwDOAPphoM5j5ifQ",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2250,
            "original_position": 974,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 974,
            "pull_request_review_id": 2175063111,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676027856/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:36:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676027856",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676029175"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676029175"
                }
            },
            "author_association": "MEMBER",
            "body": "That is a reasonable thing to do. I'd leave it for some other time.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T14:37:09Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }\n+\n+    local opts = (type(maptbl) == 'table' and type(maptbl[2]) == 'table') and maptbl[2] or {}\n+    opts.priority = opts.priority or 0\n+\n+    table.insert(opts.priority >= 0 and pos or neg, { [pat] = { ft, opts } })\n   end\n-  table.sort(sorted, function(a, b)\n-    return a[next(a)][2].priority > b[next(b)][2].priority\n-  end)\n-  return sorted\n+\n+  table.sort(pos, compare_by_priority)\n+  table.sort(neg, compare_by_priority)",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676029175",
            "id": 1676029175,
            "in_reply_to_id": 1675999514,
            "line": 2259,
            "node_id": "PRRC_kwDOAPphoM5j5iz3",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2259,
            "original_position": 987,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 987,
            "pull_request_review_id": 2175065169,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676029175/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:37:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676029175",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676035161"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676035161"
                }
            },
            "author_association": "MEMBER",
            "body": "At least add a todonote for it.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T14:39:22Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }\n+\n+    local opts = (type(maptbl) == 'table' and type(maptbl[2]) == 'table') and maptbl[2] or {}\n+    opts.priority = opts.priority or 0\n+\n+    table.insert(opts.priority >= 0 and pos or neg, { [pat] = { ft, opts } })\n   end\n-  table.sort(sorted, function(a, b)\n-    return a[next(a)][2].priority > b[next(b)][2].priority\n-  end)\n-  return sorted\n+\n+  table.sort(pos, compare_by_priority)\n+  table.sort(neg, compare_by_priority)",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676035161",
            "id": 1676035161,
            "in_reply_to_id": 1675999514,
            "line": 2259,
            "node_id": "PRRC_kwDOAPphoM5j5kRZ",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2259,
            "original_position": 987,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 987,
            "pull_request_review_id": 2175072904,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676035161/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:39:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676035161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676057828"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676057828"
                }
            },
            "author_association": "MEMBER",
            "body": "It's already approved, so I don't want to force push. Is it OK to leave as is? It would still pop up if/when `vim.filetype.add()` optimization is considered to be done.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T14:52:16Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }\n+\n+    local opts = (type(maptbl) == 'table' and type(maptbl[2]) == 'table') and maptbl[2] or {}\n+    opts.priority = opts.priority or 0\n+\n+    table.insert(opts.priority >= 0 and pos or neg, { [pat] = { ft, opts } })\n   end\n-  table.sort(sorted, function(a, b)\n-    return a[next(a)][2].priority > b[next(b)][2].priority\n-  end)\n-  return sorted\n+\n+  table.sort(pos, compare_by_priority)\n+  table.sort(neg, compare_by_priority)",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676057828",
            "id": 1676057828,
            "in_reply_to_id": 1675999514,
            "line": 2259,
            "node_id": "PRRC_kwDOAPphoM5j5pzk",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2259,
            "original_position": 987,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 987,
            "pull_request_review_id": 2175108614,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676057828/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:52:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676057828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676061602"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676061602"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd still prefer it (I don't know where the force-push concern comes from.)",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T14:55:08Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }\n+\n+    local opts = (type(maptbl) == 'table' and type(maptbl[2]) == 'table') and maptbl[2] or {}\n+    opts.priority = opts.priority or 0\n+\n+    table.insert(opts.priority >= 0 and pos or neg, { [pat] = { ft, opts } })\n   end\n-  table.sort(sorted, function(a, b)\n-    return a[next(a)][2].priority > b[next(b)][2].priority\n-  end)\n-  return sorted\n+\n+  table.sort(pos, compare_by_priority)\n+  table.sort(neg, compare_by_priority)",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676061602",
            "id": 1676061602,
            "in_reply_to_id": 1675999514,
            "line": 2259,
            "node_id": "PRRC_kwDOAPphoM5j5qui",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2259,
            "original_position": 987,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 987,
            "pull_request_review_id": 2175116721,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676061602/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:55:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676061602",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676065458"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676065458"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, I think you have slightly misunderstood the suggestion of moving the preprocessing to *add* time from *match*.\r\n\r\nThe idea was to parse the pattern and store that result, instead of maintaining two separate tables. So instead of having both `pattern_sorted` and `pattern_lookup`, which are tightly coupled with a 1-1 mapping, we just maintain one table (`patterns_processed`?) which is the fully elaborated table.\r\n\r\nTo explain in more detail. Right now the input looks like:\r\n\r\n```lua\r\nlocal pattern = {\r\n  ['pat1'] = {'foo', priority = 1},\r\n  ['pat2'] = {'bar', priority = 2},\r\n}\r\n```\r\n\r\nwhich gets elaborated into:\r\n\r\n```lua\r\nlocal pattern_sorted = {\r\n  { ['pat2'] = {'bar', priority = 2} },\r\n  { ['pat1'] = {'foo', priority = 1} },\r\n}\r\n\r\nlocal pattern_lookup = {\r\n  ['pat1'] = { has_env = false, hash_slash = false },\r\n  ['pat2'] = { has_env = false, hash_slash = false },\r\n}\r\n```\r\n\r\nbut this is a bit messy and redundant and the suggestion was that we should elaborate it into something like:\r\n\r\n```lua\r\nlocal patterns_elab = {\r\n  { ['pat2'] = {'bar', priority = 2, has_env = false, hash_slash = false} },\r\n  { ['pat1'] = {'foo', priority = 1, has_env = false, hash_slash = false} },\r\n}\r\n```\r\n\r\nand whilst we're at it, maybe change the structure to something more flat and explicit:\r\n\r\n```lua\r\nlocal patterns_elab = {\r\n  { pattern = 'pat2', detect = 'bar', priority = 2, has_env = false, hash_slash = false },\r\n  { pattern = 'pat1', detect = 'foo', priority = 1, has_env = false, hash_slash = false },\r\n}\r\n```\r\n\r\nThen there is a single source of truth.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T14:57:27Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676065458",
            "id": 1676065458,
            "in_reply_to_id": 1675996031,
            "line": 2250,
            "node_id": "PRRC_kwDOAPphoM5j5rqy",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2250,
            "original_position": 974,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 974,
            "pull_request_review_id": 2175121636,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676065458/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:57:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676065458",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676074048"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676074048"
                }
            },
            "author_association": "MEMBER",
            "body": "On second thought, with the PR that adds the grouping, keeping a separate table is better as 99.9% of the time most of these patterns will never need to be processed.\r\n\r\nThere still might be merit to keeping this all in one table and lazy populating the fields but that can be an exercise for another day.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T15:04:08Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676074048",
            "id": 1676074048,
            "in_reply_to_id": 1675996031,
            "line": 2250,
            "node_id": "PRRC_kwDOAPphoM5j5txA",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2250,
            "original_position": 974,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 974,
            "pull_request_review_id": 2175135726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676074048/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T15:04:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676074048",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676075818"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676075818"
                }
            },
            "author_association": "MEMBER",
            "body": "I see.\r\n\r\nIs it too much to ask to leave it to some other time (some other contributor)? This whole refactor was to get the necessary pieces for #29660, not make it as perfect as it can be. And at least at the moment I'd prefer to do the reasonable minimum to get the performance gain of #29660 merged.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T15:05:29Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676075818",
            "id": 1676075818,
            "in_reply_to_id": 1675996031,
            "line": 2250,
            "node_id": "PRRC_kwDOAPphoM5j5uMq",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2250,
            "original_position": 974,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 974,
            "pull_request_review_id": 2175138707,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676075818/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T15:05:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676075818",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676077235"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676077235"
                }
            },
            "author_association": "MEMBER",
            "body": "OK. I'll add it shortly.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T15:06:38Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }\n+\n+    local opts = (type(maptbl) == 'table' and type(maptbl[2]) == 'table') and maptbl[2] or {}\n+    opts.priority = opts.priority or 0\n+\n+    table.insert(opts.priority >= 0 and pos or neg, { [pat] = { ft, opts } })\n   end\n-  table.sort(sorted, function(a, b)\n-    return a[next(a)][2].priority > b[next(b)][2].priority\n-  end)\n-  return sorted\n+\n+  table.sort(pos, compare_by_priority)\n+  table.sort(neg, compare_by_priority)",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676077235",
            "id": 1676077235,
            "in_reply_to_id": 1675999514,
            "line": 2259,
            "node_id": "PRRC_kwDOAPphoM5j5uiz",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2259,
            "original_position": 987,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 987,
            "pull_request_review_id": 2175140999,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676077235/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T15:06:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676077235",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676077545"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676077545"
                }
            },
            "author_association": "MEMBER",
            "body": "I sniped a comment in before yours. We don't need to do this for now, and whatever we do, the parsing should be done lazily.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T15:06:56Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676077545",
            "id": 1676077545,
            "in_reply_to_id": 1675996031,
            "line": 2250,
            "node_id": "PRRC_kwDOAPphoM5j5unp",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2250,
            "original_position": 974,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 974,
            "pull_request_review_id": 2175141558,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676077545/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T15:06:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676077545",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29632#discussion_r1676316203"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29632"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676316203"
                }
            },
            "author_association": "MEMBER",
            "body": "Added a TODO comment.",
            "commit_id": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
            "created_at": "2024-07-12T18:23:02Z",
            "diff_hunk": "@@ -2218,30 +2221,46 @@ local pattern = {\n -- luacheck: pop\n -- luacheck: pop\n \n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+local function compare_by_priority(a, b)\n+  return a[next(a)][2].priority > b[next(b)][2].priority\n+end\n+\n --- @param t vim.filetype.mapping\n --- @return vim.filetype.mapping[]\n+--- @return vim.filetype.mapping[]\n local function sort_by_priority(t)\n-  local sorted = {} --- @type vim.filetype.mapping[]\n-  for k, v in pairs(t) do\n-    local ft = type(v) == 'table' and v[1] or v\n+  -- Separate patterns with non-negative and negative priority because they\n+  -- will be processed separately\n+  local pos = {} --- @type vim.filetype.mapping[]\n+  local neg = {} --- @type vim.filetype.mapping[]\n+  for pat, maptbl in pairs(t) do\n+    local ft = type(maptbl) == 'table' and maptbl[1] or maptbl\n     assert(\n       type(ft) == 'string' or type(ft) == 'function',\n       'Expected string or function for filetype'\n     )\n \n-    local opts = (type(v) == 'table' and type(v[2]) == 'table') and v[2] or {}\n-    if not opts.priority then\n-      opts.priority = 0\n-    end\n-    table.insert(sorted, { [k] = { ft, opts } })\n+    -- Parse pattern for common data and cache it once\n+    pattern_lookup[pat] = pattern_lookup[pat]\n+      or { has_env = pat:find('%$%b{}') ~= nil, has_slash = pat:find('/') ~= nil }\n+\n+    local opts = (type(maptbl) == 'table' and type(maptbl[2]) == 'table') and maptbl[2] or {}\n+    opts.priority = opts.priority or 0\n+\n+    table.insert(opts.priority >= 0 and pos or neg, { [pat] = { ft, opts } })\n   end\n-  table.sort(sorted, function(a, b)\n-    return a[next(a)][2].priority > b[next(b)][2].priority\n-  end)\n-  return sorted\n+\n+  table.sort(pos, compare_by_priority)\n+  table.sort(neg, compare_by_priority)",
            "html_url": "https://github.com/neovim/neovim/pull/29632#discussion_r1676316203",
            "id": 1676316203,
            "in_reply_to_id": 1675999514,
            "line": 2259,
            "node_id": "PRRC_kwDOAPphoM5j6o4r",
            "original_commit_id": "8767cdcfbbdb66b79dbe402bb01de4ca0492896f",
            "original_line": 2259,
            "original_position": 987,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": 987,
            "pull_request_review_id": 2175502527,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676316203/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T18:23:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676316203",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "@gpanders, I've force pushed several changes that were suggested in #29660. Would you mind re-review, please?\r\n\r\nList of changes:\r\n- Caching pattern data is done during \"add\" time. [Relevant suggestion](https://github.com/neovim/neovim/pull/29660#discussion_r1675514653). Also renamed several local variables to be more explicit.\r\n- All patterns in `pattern` table are now explicit (without implicit anchoring). I planned to suggest it later (after \"fast pattern\" PR), but here is a [relevant suggestion](https://github.com/neovim/neovim/pull/29660#discussion_r1675510985).\r\n\r\nAlso rebased on current `master` and updated first comment with more up to date info. Other things are untouched.\r\n\r\n",
            "created_at": "2024-07-12T13:22:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/29632#issuecomment-2225582927",
            "id": 2225582927,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29632",
            "node_id": "IC_kwDOAPphoM6Ep7NP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2225582927/reactions"
            },
            "updated_at": "2024-07-12T13:22:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2225582927",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ready to merge?",
            "created_at": "2024-07-13T06:36:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/29632#issuecomment-2226795993",
            "id": 2226795993,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29632",
            "node_id": "IC_kwDOAPphoM6EujXZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2226795993/reactions"
            },
            "updated_at": "2024-07-13T06:36:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2226795993",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Ready to merge?\r\n\r\nFrom my side - yes.",
            "created_at": "2024-07-13T06:51:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/29632#issuecomment-2226798955",
            "id": 2226798955,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29632",
            "node_id": "IC_kwDOAPphoM6EukFr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2226798955/reactions"
            },
            "updated_at": "2024-07-13T06:51:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2226798955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29632/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/29632/commits",
    "created_at": "2024-07-09T16:53:11Z",
    "diff_url": "https://github.com/neovim/neovim/pull/29632.diff",
    "draft": false,
    "head": {
        "label": "echasnovski:filetype-refactor",
        "ref": "filetype-refactor",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/echasnovski/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/echasnovski/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/echasnovski/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/echasnovski/neovim/branches{/branch}",
            "clone_url": "https://github.com/echasnovski/neovim.git",
            "collaborators_url": "https://api.github.com/repos/echasnovski/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/echasnovski/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/echasnovski/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/echasnovski/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/echasnovski/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/echasnovski/neovim/contributors",
            "created_at": "2021-12-02T09:43:59Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/echasnovski/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/echasnovski/neovim/downloads",
            "events_url": "https://api.github.com/repos/echasnovski/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/echasnovski/neovim/forks",
            "full_name": "echasnovski/neovim",
            "git_commits_url": "https://api.github.com/repos/echasnovski/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/echasnovski/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/echasnovski/neovim/git/tags{/sha}",
            "git_url": "git://github.com/echasnovski/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/echasnovski/neovim/hooks",
            "html_url": "https://github.com/echasnovski/neovim",
            "id": 434162461,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/echasnovski/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/echasnovski/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/echasnovski/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/echasnovski/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/echasnovski/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/echasnovski/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/echasnovski/neovim/merges",
            "milestones_url": "https://api.github.com/repos/echasnovski/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGeDLHQ",
            "notifications_url": "https://api.github.com/repos/echasnovski/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/echasnovski/neovim/pulls{/number}",
            "pushed_at": "2024-07-14T16:21:25Z",
            "releases_url": "https://api.github.com/repos/echasnovski/neovim/releases{/id}",
            "size": 273640,
            "ssh_url": "git@github.com:echasnovski/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/echasnovski/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/echasnovski/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/echasnovski/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/echasnovski/neovim/subscription",
            "svn_url": "https://github.com/echasnovski/neovim",
            "tags_url": "https://api.github.com/repos/echasnovski/neovim/tags",
            "teams_url": "https://api.github.com/repos/echasnovski/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/echasnovski/neovim/git/trees{/sha}",
            "updated_at": "2024-07-13T07:49:00Z",
            "url": "https://api.github.com/repos/echasnovski/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "708b5f86ba6513050da0af72e1b6e07386c0acdb",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/29632",
    "id": 1960599233,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29632",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "filetype detection, filetype.lua",
            "id": 3708202139,
            "name": "filetype",
            "node_id": "LA_kwDOAPphoM7dBqyb",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filetype"
        }
    ],
    "locked": false,
    "merge_commit_sha": "b0f39f3ef5502c037b5bdb0da3d45d312b7fdc2a",
    "merged_at": "2024-07-13T07:27:48Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM503F7B",
    "number": 29632,
    "patch_url": "https://github.com/neovim/neovim/pull/29632.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/29632/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/708b5f86ba6513050da0af72e1b6e07386c0acdb",
    "title": "refactor(filetype): extract some functions, use more cache",
    "updated_at": "2024-07-13T07:28:01Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/29632",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski"
    }
}