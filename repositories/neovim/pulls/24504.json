{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24504/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24504/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/24504"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24504"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24504/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/f41496ce74fb30c18bb9a03027a172800b269643"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4790,
            "forks_count": 4790,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1643,
            "open_issues_count": 1643,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-08-02T00:12:39Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 248191,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 67927,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-08-02T01:36:05Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 67927,
            "watchers_count": 67927,
            "web_commit_signoff_required": false
        },
        "sha": "48d533272e57e91e4d14c93b26d4922957f40cd7",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Methods constants replace method strings. ï¼ˆmaybe useful maybe not ? )\r\n\r\nFix #24500 ",
    "closed_at": "2023-08-01T14:36:57Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278152406"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278152406"
                }
            },
            "author_association": "MEMBER",
            "body": "Do not use different casing than the actual protocol. That just creates useless differences.\r\n\r\nI guess we could use underscore for the slash. Or nested tables, which is what we do elsewhere, e.g. `protocol.make_client_capabilities()`\r\n\r\n```suggestion\r\n  client_registerCapability = 'client/registerCapability',\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-28T23:01:48Z",
            "diff_hunk": "@@ -318,6 +318,96 @@ for k, v in pairs(constants) do\n   protocol[k] = tbl\n end\n \n+--Lsp methods (based on version 3.18)\n+protocol.Methods = {\n+  Initialized = 'initialized',\n+  Exit = 'exit',\n+  ShutDown = 'shutdown',\n+  SetTrace = '$/setTrace',\n+  LogTrace = '$/logTrace',\n+  ClientRegisterCapability = 'client/registerCapability',",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278152406",
            "id": 1278152406,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MLw7W",
            "original_commit_id": "e103862c7e8f15e6c5c118e253aaa379e6895a67",
            "original_line": 328,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553064613,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278152406/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T01:12:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278152406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278152720"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278152720"
                }
            },
            "author_association": "MEMBER",
            "body": "why aren't the namespaces included in the symbol names? Again this harms discoverability by adding useless differences.\r\n\r\n```suggestion\r\n  textDocument_declaration = 'textDocument/declaration',\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-28T23:02:41Z",
            "diff_hunk": "@@ -318,6 +318,96 @@ for k, v in pairs(constants) do\n   protocol[k] = tbl\n end\n \n+--Lsp methods (based on version 3.18)\n+protocol.Methods = {\n+  Initialized = 'initialized',\n+  Exit = 'exit',\n+  ShutDown = 'shutdown',\n+  SetTrace = '$/setTrace',\n+  LogTrace = '$/logTrace',\n+  ClientRegisterCapability = 'client/registerCapability',\n+  ClientUnregisterCapability = 'client/unregisterCapability',\n+  LogMessage = 'window/logMessage',\n+  CancelRequest = '$/cancelRequest',\n+  ShowMessage = 'window/showMessage',\n+  ShowMessageRequest = 'window/showMesageRequest',\n+  TelemetryEvent = 'telemetry/event',\n+  DidOpen = 'textDocument/didOpen',\n+  DidClose = 'textDocument/didClose',\n+  WillSave = 'textDocument/willSave',\n+  WillSaveWaitUnitl = 'textDocument/willSaveWaitUntil',\n+  DidSave = 'textDocument/didSave',\n+  DidChange = 'textDocument/didChange',\n+  Hover = 'textDocument/hover',\n+  Rename = 'textDocument/rename',\n+  PrepareRename = 'textDocument/prepareRename',\n+  References = 'textDocument/references',\n+  Definition = 'textDocument/definition',\n+  TypeDefinition = 'textDocument/typeDefinition',\n+  Declaration = 'textDocument/declaration',",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278152720",
            "id": 1278152720,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MLxAQ",
            "original_commit_id": "e103862c7e8f15e6c5c118e253aaa379e6895a67",
            "original_line": 347,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553065040,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278152720/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-28T23:02:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278152720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278160582"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278160582"
                }
            },
            "author_association": "MEMBER",
            "body": "Can it be generated from `scripts/lsp_types.lua`? \r\n\r\nOr at least validated--could be part of our lint check.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-28T23:05:58Z",
            "diff_hunk": "@@ -318,6 +318,96 @@ for k, v in pairs(constants) do\n   protocol[k] = tbl\n end\n \n+--Lsp methods (based on version 3.18)\n+protocol.Methods = {",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278160582",
            "id": 1278160582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MLy7G",
            "original_commit_id": "e103862c7e8f15e6c5c118e253aaa379e6895a67",
            "original_line": 322,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553077198,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278160582/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-28T23:06:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278160582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278191827"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278191827"
                }
            },
            "author_association": "NONE",
            "body": "Out of curiosity @justinmk, have you guys considered using the [metamodel](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#metaModel) for LSP type generation? Not sure if it would make things easier in the Lua side, but at least it would help ensuring that Neovim's implementation remains up to date.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T00:38:13Z",
            "diff_hunk": "@@ -318,6 +318,96 @@ for k, v in pairs(constants) do\n   protocol[k] = tbl\n end\n \n+--Lsp methods (based on version 3.18)\n+protocol.Methods = {",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278191827",
            "id": 1278191827,
            "in_reply_to_id": 1278160582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML6jT",
            "original_commit_id": "e103862c7e8f15e6c5c118e253aaa379e6895a67",
            "original_line": 322,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553131453,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278191827/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T00:38:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278191827",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278192636"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278192636"
                }
            },
            "author_association": "MEMBER",
            "body": "Nice, didn't know about that! `metaModel.json` looks useful",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T00:44:55Z",
            "diff_hunk": "@@ -318,6 +318,96 @@ for k, v in pairs(constants) do\n   protocol[k] = tbl\n end\n \n+--Lsp methods (based on version 3.18)\n+protocol.Methods = {",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278192636",
            "id": 1278192636,
            "in_reply_to_id": 1278160582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML6v8",
            "original_commit_id": "e103862c7e8f15e6c5c118e253aaa379e6895a67",
            "original_line": 322,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553132618,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278192636/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T00:44:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278192636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278203824"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278203824"
                }
            },
            "author_association": "MEMBER",
            "body": "these methods generate from 3.18 modeljson https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/metaModel/metaModel.json\r\n\r\n",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T01:02:30Z",
            "diff_hunk": "@@ -318,6 +318,96 @@ for k, v in pairs(constants) do\n   protocol[k] = tbl\n end\n \n+--Lsp methods (based on version 3.18)\n+protocol.Methods = {",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278203824",
            "id": 1278203824,
            "in_reply_to_id": 1278160582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML9ew",
            "original_commit_id": "e103862c7e8f15e6c5c118e253aaa379e6895a67",
            "original_line": 322,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553147747,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278203824/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T01:02:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278203824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278204465"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278204465"
                }
            },
            "author_association": "MEMBER",
            "body": "forget `protococol.lua` is generate from script. yes we can also generate these methods from `lsp_types.lua` do it later.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T01:08:42Z",
            "diff_hunk": "@@ -318,6 +318,96 @@ for k, v in pairs(constants) do\n   protocol[k] = tbl\n end\n \n+--Lsp methods (based on version 3.18)\n+protocol.Methods = {",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278204465",
            "id": 1278204465,
            "in_reply_to_id": 1278160582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML9ox",
            "original_commit_id": "e103862c7e8f15e6c5c118e253aaa379e6895a67",
            "original_line": 322,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553148699,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278204465/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T01:08:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278204465",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278204756"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278204756"
                }
            },
            "author_association": "MEMBER",
            "body": "yeah it looks like `lsp.json` which is used by `lsp_types.lua`, is equivalent to `metaModel.json`",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T01:10:19Z",
            "diff_hunk": "@@ -318,6 +318,96 @@ for k, v in pairs(constants) do\n   protocol[k] = tbl\n end\n \n+--Lsp methods (based on version 3.18)\n+protocol.Methods = {",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278204756",
            "id": 1278204756,
            "in_reply_to_id": 1278160582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML9tU",
            "original_commit_id": "e103862c7e8f15e6c5c118e253aaa379e6895a67",
            "original_line": 322,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553149004,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278204756/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T01:10:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278204756",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278227000"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278227000"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we got one thing wrong. The file that `lsp_types` generates annotations is `lsp/types/protocol.lua`, and the constant file we need is` lsp/protocol.lua`. So I made some changes here in the script. For the previous script annotation generation code, I feel that it may need to be improved. use `vim.system` and api to write file like what i do in this pr.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T03:33:10Z",
            "diff_hunk": "@@ -318,6 +318,96 @@ for k, v in pairs(constants) do\n   protocol[k] = tbl\n end\n \n+--Lsp methods (based on version 3.18)\n+protocol.Methods = {",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278227000",
            "id": 1278227000,
            "in_reply_to_id": 1278160582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMDI4",
            "original_commit_id": "e103862c7e8f15e6c5c118e253aaa379e6895a67",
            "original_line": 322,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553182861,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278227000/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T03:33:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278227000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278228436"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278228436"
                }
            },
            "author_association": "NONE",
            "body": "```suggestion\r\nlocal function gen_methods(opt)\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T03:46:41Z",
            "diff_hunk": "@@ -18,6 +19,84 @@ local function tofile(fname, text)\n   end\n end\n \n+local function gen_mehtods(opt)",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278228436",
            "id": 1278228436,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMDfU",
            "original_commit_id": "93353a0679644c451495d9b6490f5bfe6a53012b",
            "original_line": 22,
            "original_position": 12,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553184649,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278228436/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T03:50:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278228436",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278228627"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278228627"
                }
            },
            "author_association": "NONE",
            "body": "```suggestion\r\n      --remove textDocument prefix but keep workspace prefix\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T03:49:11Z",
            "diff_hunk": "@@ -18,6 +19,84 @@ local function tofile(fname, text)\n   end\n end\n \n+local function gen_mehtods(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n+  end\n+  res = vim.json.decode(res.stdout)\n+  local output = { '--Lsp methods keep at last', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+  vim.iter(res.requests):map(function(item)\n+    if item.method then\n+      local name = ''\n+      --remove textDoucment prefix but keep workspace prefix",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278228627",
            "id": 1278228627,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMDiT",
            "original_commit_id": "93353a0679644c451495d9b6490f5bfe6a53012b",
            "original_line": 46,
            "original_position": 36,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553184649,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278228627/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T03:50:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278228627",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278230254"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278230254"
                }
            },
            "author_association": "NONE",
            "body": "This conversion won't be needed if following @justinmk's suggestion of [using the same casing as the protocol](https://github.com/neovim/neovim/pull/24504#discussion_r1278152406) right?",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T04:01:49Z",
            "diff_hunk": "@@ -18,6 +19,84 @@ local function tofile(fname, text)\n   end\n end\n \n+local function gen_mehtods(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n+  end\n+  res = vim.json.decode(res.stdout)\n+  local output = { '--Lsp methods keep at last', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+  vim.iter(res.requests):map(function(item)\n+    if item.method then\n+      local name = ''\n+      --remove textDoucment prefix but keep workspace prefix\n+      --method name convert to CamelCase",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278230254",
            "id": 1278230254,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMD7u",
            "original_commit_id": "93353a0679644c451495d9b6490f5bfe6a53012b",
            "original_line": 47,
            "original_position": 37,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553186912,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278230254/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T04:01:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278230254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278245509"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278245509"
                }
            },
            "author_association": "MEMBER",
            "body": "In my opinion this is different. This is the naming convention for fields. Refer to protocol.lua All constants are named with camelCase. That's just function naming.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T04:55:20Z",
            "diff_hunk": "@@ -18,6 +19,84 @@ local function tofile(fname, text)\n   end\n end\n \n+local function gen_mehtods(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n+  end\n+  res = vim.json.decode(res.stdout)\n+  local output = { '--Lsp methods keep at last', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+  vim.iter(res.requests):map(function(item)\n+    if item.method then\n+      local name = ''\n+      --remove textDoucment prefix but keep workspace prefix\n+      --method name convert to CamelCase",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278245509",
            "id": 1278245509,
            "in_reply_to_id": 1278230254,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMHqF",
            "original_commit_id": "93353a0679644c451495d9b6490f5bfe6a53012b",
            "original_line": 47,
            "original_position": 37,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553201575,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278245509/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T04:55:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278245509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278294011"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294011"
                }
            },
            "author_association": "MEMBER",
            "body": "Naming conventions are less important than avoiding useless differences, especially when mapping to an upstream spec. ",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T12:50:23Z",
            "diff_hunk": "@@ -18,6 +19,84 @@ local function tofile(fname, text)\n   end\n end\n \n+local function gen_mehtods(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n+  end\n+  res = vim.json.decode(res.stdout)\n+  local output = { '--Lsp methods keep at last', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+  vim.iter(res.requests):map(function(item)\n+    if item.method then\n+      local name = ''\n+      --remove textDoucment prefix but keep workspace prefix\n+      --method name convert to CamelCase",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278294011",
            "id": 1278294011,
            "in_reply_to_id": 1278230254,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMTf7",
            "original_commit_id": "93353a0679644c451495d9b6490f5bfe6a53012b",
            "original_line": 47,
            "original_position": 37,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553274436,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294011/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T12:50:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294011",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278294652"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294652"
                }
            },
            "author_association": "MEMBER",
            "body": "why do the `workspace/` symbols have Workspace prefix, but the `textDocument/` symbols don't? I asked this above...\r\n\r\nRandom quirky differences generally things harder to understand and require more documentation. So that should be avoided.\r\n\r\n\r\n```suggestion\r\n  textDocument_linkedEditingRange = 'textDocument/linkedEditingRange',\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T12:58:38Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams\n+  TypeDefinition = 'textDocument/typeDefinition',\n+  --The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.\n+  WorkspaceWorkspaceFolders = 'workspace/workspaceFolders',\n+  --The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n+  --configuration setting.\n+  --This pull model replaces the old push model were the client signaled configuration change via an\n+  --event. If the server still needs to react to configuration changes (since the server caches the\n+  --result of `workspace/configuration` requests) the server should register for an empty configuration\n+  --change event and empty the cache if such an event is received.\n+  --@param ConfigurationParams\n+  WorkspaceConfiguration = 'workspace/configuration',\n+  --A request to list all color symbols found in a given text document. The request's\n+  --parameter is of type {@link DocumentColorParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param DocumentColorParams\n+  DocumentColor = 'textDocument/documentColor',\n+  --A request to list all presentation for a color. The request's\n+  --parameter is of type {@link ColorPresentationParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param ColorPresentationParams\n+  ColorPresentation = 'textDocument/colorPresentation',\n+  --A request to provide folding ranges in a document. The request's\n+  --parameter is of type {@link FoldingRangeParams}, the\n+  --response is of type {@link FoldingRangeList} or a Thenable\n+  --that resolves to such.\n+  --@param FoldingRangeParams\n+  FoldingRange = 'textDocument/foldingRange',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Declaration}\n+  --or a typed array of {@link DeclarationLink} or a Thenable that resolves\n+  --to such.\n+  --@param DeclarationParams\n+  Declaration = 'textDocument/declaration',\n+  --A request to provide selection ranges in a document. The request's\n+  --parameter is of type {@link SelectionRangeParams}, the\n+  --response is of type {@link SelectionRange SelectionRange[]} or a Thenable\n+  --that resolves to such.\n+  --@param SelectionRangeParams\n+  SelectionRange = 'textDocument/selectionRange',\n+  --The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n+  --reporting from the server.\n+  --@param WorkDoneProgressCreateParams\n+  WindowWorkDoneProgressCreate = 'window/workDoneProgress/create',\n+  --A request to result a `CallHierarchyItem` in a document at a given position.\n+  --Can be used as an input to an incoming or outgoing call hierarchy.\n+  --@since 3.16.0\n+  --@param CallHierarchyPrepareParams\n+  PrepareCallHierarchy = 'textDocument/prepareCallHierarchy',\n+  --A request to resolve the incoming calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyIncomingCallsParams\n+  CallHierarchyIncomingCalls = 'callHierarchy/incomingCalls',\n+  --A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyOutgoingCallsParams\n+  CallHierarchyOutgoingCalls = 'callHierarchy/outgoingCalls',\n+  --@since 3.16.0\n+  --@param SemanticTokensParams\n+  SemanticTokensFull = 'textDocument/semanticTokens/full',\n+  --@since 3.16.0\n+  --@param SemanticTokensDeltaParams\n+  SemanticTokensFullDelta = 'textDocument/semanticTokens/full/delta',\n+  --@since 3.16.0\n+  --@param SemanticTokensRangeParams\n+  SemanticTokensRange = 'textDocument/semanticTokens/range',\n+  --@since 3.16.0\n+  WorkspaceSemanticTokensRefresh = 'workspace/semanticTokens/refresh',\n+  --A request to show a document. This request might open an\n+  --external program depending on the value of the URI to open.\n+  --For example a request to open `https://code.visualstudio.com/`\n+  --will very likely open the URI in a WEB browser.\n+  --@since 3.16.0\n+  --@param ShowDocumentParams\n+  WindowShowDocument = 'window/showDocument',\n+  --A request to provide ranges that can be edited together.\n+  --@since 3.16.0\n+  --@param LinkedEditingRangeParams\n+  LinkedEditingRange = 'textDocument/linkedEditingRange',",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278294652",
            "id": 1278294652,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMTp8",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 1019,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553275056,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294652/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T12:58:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294652",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278294693"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294693"
                }
            },
            "author_association": "MEMBER",
            "body": "Alternatively:\r\n\r\n```suggestion\r\n  textDocument = {\r\n    linkedEditingRange = 'textDocument/linkedEditingRange',\r\n    foo = 'textDocument/foo',\r\n    ...\r\n  }\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T12:59:29Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams\n+  TypeDefinition = 'textDocument/typeDefinition',\n+  --The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.\n+  WorkspaceWorkspaceFolders = 'workspace/workspaceFolders',\n+  --The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n+  --configuration setting.\n+  --This pull model replaces the old push model were the client signaled configuration change via an\n+  --event. If the server still needs to react to configuration changes (since the server caches the\n+  --result of `workspace/configuration` requests) the server should register for an empty configuration\n+  --change event and empty the cache if such an event is received.\n+  --@param ConfigurationParams\n+  WorkspaceConfiguration = 'workspace/configuration',\n+  --A request to list all color symbols found in a given text document. The request's\n+  --parameter is of type {@link DocumentColorParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param DocumentColorParams\n+  DocumentColor = 'textDocument/documentColor',\n+  --A request to list all presentation for a color. The request's\n+  --parameter is of type {@link ColorPresentationParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param ColorPresentationParams\n+  ColorPresentation = 'textDocument/colorPresentation',\n+  --A request to provide folding ranges in a document. The request's\n+  --parameter is of type {@link FoldingRangeParams}, the\n+  --response is of type {@link FoldingRangeList} or a Thenable\n+  --that resolves to such.\n+  --@param FoldingRangeParams\n+  FoldingRange = 'textDocument/foldingRange',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Declaration}\n+  --or a typed array of {@link DeclarationLink} or a Thenable that resolves\n+  --to such.\n+  --@param DeclarationParams\n+  Declaration = 'textDocument/declaration',\n+  --A request to provide selection ranges in a document. The request's\n+  --parameter is of type {@link SelectionRangeParams}, the\n+  --response is of type {@link SelectionRange SelectionRange[]} or a Thenable\n+  --that resolves to such.\n+  --@param SelectionRangeParams\n+  SelectionRange = 'textDocument/selectionRange',\n+  --The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n+  --reporting from the server.\n+  --@param WorkDoneProgressCreateParams\n+  WindowWorkDoneProgressCreate = 'window/workDoneProgress/create',\n+  --A request to result a `CallHierarchyItem` in a document at a given position.\n+  --Can be used as an input to an incoming or outgoing call hierarchy.\n+  --@since 3.16.0\n+  --@param CallHierarchyPrepareParams\n+  PrepareCallHierarchy = 'textDocument/prepareCallHierarchy',\n+  --A request to resolve the incoming calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyIncomingCallsParams\n+  CallHierarchyIncomingCalls = 'callHierarchy/incomingCalls',\n+  --A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyOutgoingCallsParams\n+  CallHierarchyOutgoingCalls = 'callHierarchy/outgoingCalls',\n+  --@since 3.16.0\n+  --@param SemanticTokensParams\n+  SemanticTokensFull = 'textDocument/semanticTokens/full',\n+  --@since 3.16.0\n+  --@param SemanticTokensDeltaParams\n+  SemanticTokensFullDelta = 'textDocument/semanticTokens/full/delta',\n+  --@since 3.16.0\n+  --@param SemanticTokensRangeParams\n+  SemanticTokensRange = 'textDocument/semanticTokens/range',\n+  --@since 3.16.0\n+  WorkspaceSemanticTokensRefresh = 'workspace/semanticTokens/refresh',\n+  --A request to show a document. This request might open an\n+  --external program depending on the value of the URI to open.\n+  --For example a request to open `https://code.visualstudio.com/`\n+  --will very likely open the URI in a WEB browser.\n+  --@since 3.16.0\n+  --@param ShowDocumentParams\n+  WindowShowDocument = 'window/showDocument',\n+  --A request to provide ranges that can be edited together.\n+  --@since 3.16.0\n+  --@param LinkedEditingRangeParams\n+  LinkedEditingRange = 'textDocument/linkedEditingRange',",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278294693",
            "id": 1278294693,
            "in_reply_to_id": 1278294652,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMTql",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 1019,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553275116,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294693/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T12:59:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294693",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278294953"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294953"
                }
            },
            "author_association": "MEMBER",
            "body": "Why does this use metaModel.json, but the rest of the script uses lsp.json? Stick with one unless there is an important reason to use both.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:02:39Z",
            "diff_hunk": "@@ -18,7 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n+local function gen_methods(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278294953",
            "id": 1278294953,
            "line": 25,
            "node_id": "PRRC_kwDOAPphoM5MMTup",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 25,
            "original_position": 15,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 24,
            "pull_request_review_id": 1553275398,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294953/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:02:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278294953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295047"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295047"
                }
            },
            "author_association": "MEMBER",
            "body": "Some common language features usually start with the textDocument prefix. The workspace has some special features (in order to use the workspace of vscode, they designed it) some language feature requests will contain some subsequent workspace requests.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:04:04Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams\n+  TypeDefinition = 'textDocument/typeDefinition',\n+  --The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.\n+  WorkspaceWorkspaceFolders = 'workspace/workspaceFolders',\n+  --The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n+  --configuration setting.\n+  --This pull model replaces the old push model were the client signaled configuration change via an\n+  --event. If the server still needs to react to configuration changes (since the server caches the\n+  --result of `workspace/configuration` requests) the server should register for an empty configuration\n+  --change event and empty the cache if such an event is received.\n+  --@param ConfigurationParams\n+  WorkspaceConfiguration = 'workspace/configuration',\n+  --A request to list all color symbols found in a given text document. The request's\n+  --parameter is of type {@link DocumentColorParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param DocumentColorParams\n+  DocumentColor = 'textDocument/documentColor',\n+  --A request to list all presentation for a color. The request's\n+  --parameter is of type {@link ColorPresentationParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param ColorPresentationParams\n+  ColorPresentation = 'textDocument/colorPresentation',\n+  --A request to provide folding ranges in a document. The request's\n+  --parameter is of type {@link FoldingRangeParams}, the\n+  --response is of type {@link FoldingRangeList} or a Thenable\n+  --that resolves to such.\n+  --@param FoldingRangeParams\n+  FoldingRange = 'textDocument/foldingRange',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Declaration}\n+  --or a typed array of {@link DeclarationLink} or a Thenable that resolves\n+  --to such.\n+  --@param DeclarationParams\n+  Declaration = 'textDocument/declaration',\n+  --A request to provide selection ranges in a document. The request's\n+  --parameter is of type {@link SelectionRangeParams}, the\n+  --response is of type {@link SelectionRange SelectionRange[]} or a Thenable\n+  --that resolves to such.\n+  --@param SelectionRangeParams\n+  SelectionRange = 'textDocument/selectionRange',\n+  --The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n+  --reporting from the server.\n+  --@param WorkDoneProgressCreateParams\n+  WindowWorkDoneProgressCreate = 'window/workDoneProgress/create',\n+  --A request to result a `CallHierarchyItem` in a document at a given position.\n+  --Can be used as an input to an incoming or outgoing call hierarchy.\n+  --@since 3.16.0\n+  --@param CallHierarchyPrepareParams\n+  PrepareCallHierarchy = 'textDocument/prepareCallHierarchy',\n+  --A request to resolve the incoming calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyIncomingCallsParams\n+  CallHierarchyIncomingCalls = 'callHierarchy/incomingCalls',\n+  --A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyOutgoingCallsParams\n+  CallHierarchyOutgoingCalls = 'callHierarchy/outgoingCalls',\n+  --@since 3.16.0\n+  --@param SemanticTokensParams\n+  SemanticTokensFull = 'textDocument/semanticTokens/full',\n+  --@since 3.16.0\n+  --@param SemanticTokensDeltaParams\n+  SemanticTokensFullDelta = 'textDocument/semanticTokens/full/delta',\n+  --@since 3.16.0\n+  --@param SemanticTokensRangeParams\n+  SemanticTokensRange = 'textDocument/semanticTokens/range',\n+  --@since 3.16.0\n+  WorkspaceSemanticTokensRefresh = 'workspace/semanticTokens/refresh',\n+  --A request to show a document. This request might open an\n+  --external program depending on the value of the URI to open.\n+  --For example a request to open `https://code.visualstudio.com/`\n+  --will very likely open the URI in a WEB browser.\n+  --@since 3.16.0\n+  --@param ShowDocumentParams\n+  WindowShowDocument = 'window/showDocument',\n+  --A request to provide ranges that can be edited together.\n+  --@since 3.16.0\n+  --@param LinkedEditingRangeParams\n+  LinkedEditingRange = 'textDocument/linkedEditingRange',",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295047",
            "id": 1278295047,
            "in_reply_to_id": 1278294652,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMTwH",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 1019,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553275509,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295047/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:04:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295155"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295155"
                }
            },
            "author_association": "MEMBER",
            "body": "The question is about consistency (lack thereof).\r\n",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:05:24Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams\n+  TypeDefinition = 'textDocument/typeDefinition',\n+  --The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.\n+  WorkspaceWorkspaceFolders = 'workspace/workspaceFolders',\n+  --The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n+  --configuration setting.\n+  --This pull model replaces the old push model were the client signaled configuration change via an\n+  --event. If the server still needs to react to configuration changes (since the server caches the\n+  --result of `workspace/configuration` requests) the server should register for an empty configuration\n+  --change event and empty the cache if such an event is received.\n+  --@param ConfigurationParams\n+  WorkspaceConfiguration = 'workspace/configuration',\n+  --A request to list all color symbols found in a given text document. The request's\n+  --parameter is of type {@link DocumentColorParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param DocumentColorParams\n+  DocumentColor = 'textDocument/documentColor',\n+  --A request to list all presentation for a color. The request's\n+  --parameter is of type {@link ColorPresentationParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param ColorPresentationParams\n+  ColorPresentation = 'textDocument/colorPresentation',\n+  --A request to provide folding ranges in a document. The request's\n+  --parameter is of type {@link FoldingRangeParams}, the\n+  --response is of type {@link FoldingRangeList} or a Thenable\n+  --that resolves to such.\n+  --@param FoldingRangeParams\n+  FoldingRange = 'textDocument/foldingRange',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Declaration}\n+  --or a typed array of {@link DeclarationLink} or a Thenable that resolves\n+  --to such.\n+  --@param DeclarationParams\n+  Declaration = 'textDocument/declaration',\n+  --A request to provide selection ranges in a document. The request's\n+  --parameter is of type {@link SelectionRangeParams}, the\n+  --response is of type {@link SelectionRange SelectionRange[]} or a Thenable\n+  --that resolves to such.\n+  --@param SelectionRangeParams\n+  SelectionRange = 'textDocument/selectionRange',\n+  --The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n+  --reporting from the server.\n+  --@param WorkDoneProgressCreateParams\n+  WindowWorkDoneProgressCreate = 'window/workDoneProgress/create',\n+  --A request to result a `CallHierarchyItem` in a document at a given position.\n+  --Can be used as an input to an incoming or outgoing call hierarchy.\n+  --@since 3.16.0\n+  --@param CallHierarchyPrepareParams\n+  PrepareCallHierarchy = 'textDocument/prepareCallHierarchy',\n+  --A request to resolve the incoming calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyIncomingCallsParams\n+  CallHierarchyIncomingCalls = 'callHierarchy/incomingCalls',\n+  --A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyOutgoingCallsParams\n+  CallHierarchyOutgoingCalls = 'callHierarchy/outgoingCalls',\n+  --@since 3.16.0\n+  --@param SemanticTokensParams\n+  SemanticTokensFull = 'textDocument/semanticTokens/full',\n+  --@since 3.16.0\n+  --@param SemanticTokensDeltaParams\n+  SemanticTokensFullDelta = 'textDocument/semanticTokens/full/delta',\n+  --@since 3.16.0\n+  --@param SemanticTokensRangeParams\n+  SemanticTokensRange = 'textDocument/semanticTokens/range',\n+  --@since 3.16.0\n+  WorkspaceSemanticTokensRefresh = 'workspace/semanticTokens/refresh',\n+  --A request to show a document. This request might open an\n+  --external program depending on the value of the URI to open.\n+  --For example a request to open `https://code.visualstudio.com/`\n+  --will very likely open the URI in a WEB browser.\n+  --@since 3.16.0\n+  --@param ShowDocumentParams\n+  WindowShowDocument = 'window/showDocument',\n+  --A request to provide ranges that can be edited together.\n+  --@since 3.16.0\n+  --@param LinkedEditingRangeParams\n+  LinkedEditingRange = 'textDocument/linkedEditingRange',",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295155",
            "id": 1278295155,
            "in_reply_to_id": 1278294652,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMTxz",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 1019,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553275628,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295155/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:05:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295157"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295157"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n-- LSP methods. Generated by lsp_types.lua, keep at end of file.\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:05:26Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295157",
            "id": 1278295157,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMTx1",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 926,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553275630,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295157/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:05:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295206"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295206"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we use `---` wherever we intend machine-readable docstrings.\r\n\r\n```suggestion\r\n  ---@param TypeDefinitionParams\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:06:15Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295206",
            "id": 1278295206,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMTym",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 938,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553275703,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295206/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:06:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295206",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295235"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295235"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  --- A request to resolve the type definition locations of a symbol at a given text\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:06:36Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295235",
            "id": 1278295235,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMTzD",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 934,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553275742,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295235/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:06:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295235",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295412"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295412"
                }
            },
            "author_association": "MEMBER",
            "body": "`lsp.json` is in a lsp python implementation repo. this `metaModel.json` in lsp official repo .",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:08:24Z",
            "diff_hunk": "@@ -18,7 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n+local function gen_methods(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295412",
            "id": 1278295412,
            "in_reply_to_id": 1278294953,
            "line": 25,
            "node_id": "PRRC_kwDOAPphoM5MMT10",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 25,
            "original_position": 15,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 24,
            "pull_request_review_id": 1553275903,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295412/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:08:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295412",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295467"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295467"
                }
            },
            "author_association": "MEMBER",
            "body": "before tried use `---` but lua_ls seems like not parse this for field and you will see lots of warning of this param type.  do we really need this param ? ",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:09:19Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295467",
            "id": 1278295467,
            "in_reply_to_id": 1278295206,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMT2r",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 938,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553275976,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295467/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:13:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295467",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295576"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295576"
                }
            },
            "author_association": "MEMBER",
            "body": "> Some common language features usually start with the textDocument prefix.\r\n\r\nThese are low-level symbols. We don't need to take shortcuts or make things clever. Let's be extra consistent here.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:10:12Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams\n+  TypeDefinition = 'textDocument/typeDefinition',\n+  --The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.\n+  WorkspaceWorkspaceFolders = 'workspace/workspaceFolders',\n+  --The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n+  --configuration setting.\n+  --This pull model replaces the old push model were the client signaled configuration change via an\n+  --event. If the server still needs to react to configuration changes (since the server caches the\n+  --result of `workspace/configuration` requests) the server should register for an empty configuration\n+  --change event and empty the cache if such an event is received.\n+  --@param ConfigurationParams\n+  WorkspaceConfiguration = 'workspace/configuration',\n+  --A request to list all color symbols found in a given text document. The request's\n+  --parameter is of type {@link DocumentColorParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param DocumentColorParams\n+  DocumentColor = 'textDocument/documentColor',\n+  --A request to list all presentation for a color. The request's\n+  --parameter is of type {@link ColorPresentationParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param ColorPresentationParams\n+  ColorPresentation = 'textDocument/colorPresentation',\n+  --A request to provide folding ranges in a document. The request's\n+  --parameter is of type {@link FoldingRangeParams}, the\n+  --response is of type {@link FoldingRangeList} or a Thenable\n+  --that resolves to such.\n+  --@param FoldingRangeParams\n+  FoldingRange = 'textDocument/foldingRange',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Declaration}\n+  --or a typed array of {@link DeclarationLink} or a Thenable that resolves\n+  --to such.\n+  --@param DeclarationParams\n+  Declaration = 'textDocument/declaration',\n+  --A request to provide selection ranges in a document. The request's\n+  --parameter is of type {@link SelectionRangeParams}, the\n+  --response is of type {@link SelectionRange SelectionRange[]} or a Thenable\n+  --that resolves to such.\n+  --@param SelectionRangeParams\n+  SelectionRange = 'textDocument/selectionRange',\n+  --The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n+  --reporting from the server.\n+  --@param WorkDoneProgressCreateParams\n+  WindowWorkDoneProgressCreate = 'window/workDoneProgress/create',\n+  --A request to result a `CallHierarchyItem` in a document at a given position.\n+  --Can be used as an input to an incoming or outgoing call hierarchy.\n+  --@since 3.16.0\n+  --@param CallHierarchyPrepareParams\n+  PrepareCallHierarchy = 'textDocument/prepareCallHierarchy',\n+  --A request to resolve the incoming calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyIncomingCallsParams\n+  CallHierarchyIncomingCalls = 'callHierarchy/incomingCalls',\n+  --A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyOutgoingCallsParams\n+  CallHierarchyOutgoingCalls = 'callHierarchy/outgoingCalls',\n+  --@since 3.16.0\n+  --@param SemanticTokensParams\n+  SemanticTokensFull = 'textDocument/semanticTokens/full',\n+  --@since 3.16.0\n+  --@param SemanticTokensDeltaParams\n+  SemanticTokensFullDelta = 'textDocument/semanticTokens/full/delta',\n+  --@since 3.16.0\n+  --@param SemanticTokensRangeParams\n+  SemanticTokensRange = 'textDocument/semanticTokens/range',\n+  --@since 3.16.0\n+  WorkspaceSemanticTokensRefresh = 'workspace/semanticTokens/refresh',\n+  --A request to show a document. This request might open an\n+  --external program depending on the value of the URI to open.\n+  --For example a request to open `https://code.visualstudio.com/`\n+  --will very likely open the URI in a WEB browser.\n+  --@since 3.16.0\n+  --@param ShowDocumentParams\n+  WindowShowDocument = 'window/showDocument',\n+  --A request to provide ranges that can be edited together.\n+  --@since 3.16.0\n+  --@param LinkedEditingRangeParams\n+  LinkedEditingRange = 'textDocument/linkedEditingRange',",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295576",
            "id": 1278295576,
            "in_reply_to_id": 1278294652,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMT4Y",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 1019,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553276076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295576/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:10:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295576",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295735"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295735"
                }
            },
            "author_association": "MEMBER",
            "body": "This URL does not mention python: https://github.com/neovim/neovim/blob/861ecc0b33a7b90b2187821654cdac44c4b8bcea/scripts/lsp_types.lua#L111\r\n\r\nIf lsp.json isn't needed, then that part of the script should be updated to use metaModel.json",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:11:54Z",
            "diff_hunk": "@@ -18,7 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n+local function gen_methods(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295735",
            "id": 1278295735,
            "in_reply_to_id": 1278294953,
            "line": 25,
            "node_id": "PRRC_kwDOAPphoM5MMT63",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 25,
            "original_position": 15,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 24,
            "pull_request_review_id": 1553276245,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295735/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:11:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295735",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295952"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295952"
                }
            },
            "author_association": "MEMBER",
            "body": "okay change it now.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:15:07Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams\n+  TypeDefinition = 'textDocument/typeDefinition',\n+  --The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.\n+  WorkspaceWorkspaceFolders = 'workspace/workspaceFolders',\n+  --The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n+  --configuration setting.\n+  --This pull model replaces the old push model were the client signaled configuration change via an\n+  --event. If the server still needs to react to configuration changes (since the server caches the\n+  --result of `workspace/configuration` requests) the server should register for an empty configuration\n+  --change event and empty the cache if such an event is received.\n+  --@param ConfigurationParams\n+  WorkspaceConfiguration = 'workspace/configuration',\n+  --A request to list all color symbols found in a given text document. The request's\n+  --parameter is of type {@link DocumentColorParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param DocumentColorParams\n+  DocumentColor = 'textDocument/documentColor',\n+  --A request to list all presentation for a color. The request's\n+  --parameter is of type {@link ColorPresentationParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param ColorPresentationParams\n+  ColorPresentation = 'textDocument/colorPresentation',\n+  --A request to provide folding ranges in a document. The request's\n+  --parameter is of type {@link FoldingRangeParams}, the\n+  --response is of type {@link FoldingRangeList} or a Thenable\n+  --that resolves to such.\n+  --@param FoldingRangeParams\n+  FoldingRange = 'textDocument/foldingRange',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Declaration}\n+  --or a typed array of {@link DeclarationLink} or a Thenable that resolves\n+  --to such.\n+  --@param DeclarationParams\n+  Declaration = 'textDocument/declaration',\n+  --A request to provide selection ranges in a document. The request's\n+  --parameter is of type {@link SelectionRangeParams}, the\n+  --response is of type {@link SelectionRange SelectionRange[]} or a Thenable\n+  --that resolves to such.\n+  --@param SelectionRangeParams\n+  SelectionRange = 'textDocument/selectionRange',\n+  --The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n+  --reporting from the server.\n+  --@param WorkDoneProgressCreateParams\n+  WindowWorkDoneProgressCreate = 'window/workDoneProgress/create',\n+  --A request to result a `CallHierarchyItem` in a document at a given position.\n+  --Can be used as an input to an incoming or outgoing call hierarchy.\n+  --@since 3.16.0\n+  --@param CallHierarchyPrepareParams\n+  PrepareCallHierarchy = 'textDocument/prepareCallHierarchy',\n+  --A request to resolve the incoming calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyIncomingCallsParams\n+  CallHierarchyIncomingCalls = 'callHierarchy/incomingCalls',\n+  --A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyOutgoingCallsParams\n+  CallHierarchyOutgoingCalls = 'callHierarchy/outgoingCalls',\n+  --@since 3.16.0\n+  --@param SemanticTokensParams\n+  SemanticTokensFull = 'textDocument/semanticTokens/full',\n+  --@since 3.16.0\n+  --@param SemanticTokensDeltaParams\n+  SemanticTokensFullDelta = 'textDocument/semanticTokens/full/delta',\n+  --@since 3.16.0\n+  --@param SemanticTokensRangeParams\n+  SemanticTokensRange = 'textDocument/semanticTokens/range',\n+  --@since 3.16.0\n+  WorkspaceSemanticTokensRefresh = 'workspace/semanticTokens/refresh',\n+  --A request to show a document. This request might open an\n+  --external program depending on the value of the URI to open.\n+  --For example a request to open `https://code.visualstudio.com/`\n+  --will very likely open the URI in a WEB browser.\n+  --@since 3.16.0\n+  --@param ShowDocumentParams\n+  WindowShowDocument = 'window/showDocument',\n+  --A request to provide ranges that can be edited together.\n+  --@since 3.16.0\n+  --@param LinkedEditingRangeParams\n+  LinkedEditingRange = 'textDocument/linkedEditingRange',",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278295952",
            "id": 1278295952,
            "in_reply_to_id": 1278294652,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMT-Q",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 1019,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553276600,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295952/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:15:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278295952",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278296086"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278296086"
                }
            },
            "author_association": "MEMBER",
            "body": "The official metaModel.json should be used uniformly. sorry that repo is `Language Server Protocol types code generator`",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:16:52Z",
            "diff_hunk": "@@ -18,7 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n+local function gen_methods(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278296086",
            "id": 1278296086,
            "in_reply_to_id": 1278294953,
            "line": 25,
            "node_id": "PRRC_kwDOAPphoM5MMUAW",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 25,
            "original_position": 15,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 24,
            "pull_request_review_id": 1553276748,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278296086/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:16:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278296086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278297473"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278297473"
                }
            },
            "author_association": "MEMBER",
            "body": "? we use that everywhere:\r\n\r\n    git grep '\\---@param'\r\n",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:23:11Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278297473",
            "id": 1278297473,
            "in_reply_to_id": 1278295206,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMUWB",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 938,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553277654,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278297473/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:23:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278297473",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278301909"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278301909"
                }
            },
            "author_association": "MEMBER",
            "body": " I already tried it not work so I use `--` just for comment. we no these `**Params` define.\r\n\r\n![image](https://github.com/neovim/neovim/assets/41671631/e947212e-23b3-4eab-b2c6-c0a2da5452bb)\r\n",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:36:57Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278301909",
            "id": 1278301909,
            "in_reply_to_id": 1278295206,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMVbV",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 938,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553285320,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278301909/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:38:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278301909",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278303057"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278303057"
                }
            },
            "author_association": "MEMBER",
            "body": "I think `@param` here is in any case not appropriate given that this is a string constant, and not a function. Strings don't have parameters.\r\n\r\nI'm also not sure we want the text at all 1:1 as it is in the JSON. The `Thenable` stuff is nonsense in our context and the links don't work as is.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:48:48Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278303057",
            "id": 1278303057,
            "in_reply_to_id": 1278295206,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMVtR",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 938,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553286945,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278303057/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:48:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278303057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278303622"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278303622"
                }
            },
            "author_association": "MEMBER",
            "body": "this way might have problem.\r\n\r\n```lua\r\n textDocument = {\r\n    linkedEditingRange = 'textDocument/linkedEditingRange',\r\n    foo = 'textDocument/foo',\r\n    ...\r\n  }\r\n```\r\n some methods have  prefix some methods not . but they are both work for `inlayhint`..so which way ? convert `/` to `_` (suggest)\r\n```\r\ntextDocument/inlayHint\r\ninlayHint/resolve\r\nworkspace/inlayHint/refresh\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:54:59Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams\n+  TypeDefinition = 'textDocument/typeDefinition',\n+  --The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.\n+  WorkspaceWorkspaceFolders = 'workspace/workspaceFolders',\n+  --The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n+  --configuration setting.\n+  --This pull model replaces the old push model were the client signaled configuration change via an\n+  --event. If the server still needs to react to configuration changes (since the server caches the\n+  --result of `workspace/configuration` requests) the server should register for an empty configuration\n+  --change event and empty the cache if such an event is received.\n+  --@param ConfigurationParams\n+  WorkspaceConfiguration = 'workspace/configuration',\n+  --A request to list all color symbols found in a given text document. The request's\n+  --parameter is of type {@link DocumentColorParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param DocumentColorParams\n+  DocumentColor = 'textDocument/documentColor',\n+  --A request to list all presentation for a color. The request's\n+  --parameter is of type {@link ColorPresentationParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param ColorPresentationParams\n+  ColorPresentation = 'textDocument/colorPresentation',\n+  --A request to provide folding ranges in a document. The request's\n+  --parameter is of type {@link FoldingRangeParams}, the\n+  --response is of type {@link FoldingRangeList} or a Thenable\n+  --that resolves to such.\n+  --@param FoldingRangeParams\n+  FoldingRange = 'textDocument/foldingRange',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Declaration}\n+  --or a typed array of {@link DeclarationLink} or a Thenable that resolves\n+  --to such.\n+  --@param DeclarationParams\n+  Declaration = 'textDocument/declaration',\n+  --A request to provide selection ranges in a document. The request's\n+  --parameter is of type {@link SelectionRangeParams}, the\n+  --response is of type {@link SelectionRange SelectionRange[]} or a Thenable\n+  --that resolves to such.\n+  --@param SelectionRangeParams\n+  SelectionRange = 'textDocument/selectionRange',\n+  --The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n+  --reporting from the server.\n+  --@param WorkDoneProgressCreateParams\n+  WindowWorkDoneProgressCreate = 'window/workDoneProgress/create',\n+  --A request to result a `CallHierarchyItem` in a document at a given position.\n+  --Can be used as an input to an incoming or outgoing call hierarchy.\n+  --@since 3.16.0\n+  --@param CallHierarchyPrepareParams\n+  PrepareCallHierarchy = 'textDocument/prepareCallHierarchy',\n+  --A request to resolve the incoming calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyIncomingCallsParams\n+  CallHierarchyIncomingCalls = 'callHierarchy/incomingCalls',\n+  --A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyOutgoingCallsParams\n+  CallHierarchyOutgoingCalls = 'callHierarchy/outgoingCalls',\n+  --@since 3.16.0\n+  --@param SemanticTokensParams\n+  SemanticTokensFull = 'textDocument/semanticTokens/full',\n+  --@since 3.16.0\n+  --@param SemanticTokensDeltaParams\n+  SemanticTokensFullDelta = 'textDocument/semanticTokens/full/delta',\n+  --@since 3.16.0\n+  --@param SemanticTokensRangeParams\n+  SemanticTokensRange = 'textDocument/semanticTokens/range',\n+  --@since 3.16.0\n+  WorkspaceSemanticTokensRefresh = 'workspace/semanticTokens/refresh',\n+  --A request to show a document. This request might open an\n+  --external program depending on the value of the URI to open.\n+  --For example a request to open `https://code.visualstudio.com/`\n+  --will very likely open the URI in a WEB browser.\n+  --@since 3.16.0\n+  --@param ShowDocumentParams\n+  WindowShowDocument = 'window/showDocument',\n+  --A request to provide ranges that can be edited together.\n+  --@since 3.16.0\n+  --@param LinkedEditingRangeParams\n+  LinkedEditingRange = 'textDocument/linkedEditingRange',",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278303622",
            "id": 1278303622,
            "in_reply_to_id": 1278294652,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMV2G",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 1019,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553287433,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278303622/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:55:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278303622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278303979"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278303979"
                }
            },
            "author_association": "MEMBER",
            "body": "yep when i write also think it does not make sense. ",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T13:57:55Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278303979",
            "id": 1278303979,
            "in_reply_to_id": 1278295206,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMV7r",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 938,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553287880,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278303979/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T13:57:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278303979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278340616"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278340616"
                }
            },
            "author_association": "NONE",
            "body": "If you allow me a vote here, I prefer something like `textDocument_linkedEditingRange = 'textDocument/linkedEditingRange'` than `textDocument = { linkedEditingRange = 'textDocument/linkedEditingRange' }`, since the former would result in code like:\r\n```lua\r\nlocal methods = vim.lsp.protocol.Methods\r\n\r\n-- From just the line below, it is clear which method we're referring to.\r\nif client.supports_method methods.textDocument_linkedEditingRange:\r\n   ...\r\n```\r\n\r\nwhile the latter could result in code like:\r\n```lua\r\nlocal methods = vim.lsp.protocol.Methods.textDocument\r\n\r\n-- Harder to understand because of the differences with the names used by the LSP specs.\r\nif client.supports_method methods.linkedEditingRange:\r\n```\r\n\r\nOf course this is up to the person using these new constants, but still.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T16:38:45Z",
            "diff_hunk": "@@ -923,4 +923,330 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--Lsp methods keep at last\n+protocol.Methods = {\n+  --A request to resolve the implementation locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param ImplementationParams\n+  Implementation = 'textDocument/implementation',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --Thenable that resolves to such.\n+  --@param TypeDefinitionParams\n+  TypeDefinition = 'textDocument/typeDefinition',\n+  --The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.\n+  WorkspaceWorkspaceFolders = 'workspace/workspaceFolders',\n+  --The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n+  --configuration setting.\n+  --This pull model replaces the old push model were the client signaled configuration change via an\n+  --event. If the server still needs to react to configuration changes (since the server caches the\n+  --result of `workspace/configuration` requests) the server should register for an empty configuration\n+  --change event and empty the cache if such an event is received.\n+  --@param ConfigurationParams\n+  WorkspaceConfiguration = 'workspace/configuration',\n+  --A request to list all color symbols found in a given text document. The request's\n+  --parameter is of type {@link DocumentColorParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param DocumentColorParams\n+  DocumentColor = 'textDocument/documentColor',\n+  --A request to list all presentation for a color. The request's\n+  --parameter is of type {@link ColorPresentationParams} the\n+  --response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --that resolves to such.\n+  --@param ColorPresentationParams\n+  ColorPresentation = 'textDocument/colorPresentation',\n+  --A request to provide folding ranges in a document. The request's\n+  --parameter is of type {@link FoldingRangeParams}, the\n+  --response is of type {@link FoldingRangeList} or a Thenable\n+  --that resolves to such.\n+  --@param FoldingRangeParams\n+  FoldingRange = 'textDocument/foldingRange',\n+  --A request to resolve the type definition locations of a symbol at a given text\n+  --document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --(#TextDocumentPositionParams) the response is of type {@link Declaration}\n+  --or a typed array of {@link DeclarationLink} or a Thenable that resolves\n+  --to such.\n+  --@param DeclarationParams\n+  Declaration = 'textDocument/declaration',\n+  --A request to provide selection ranges in a document. The request's\n+  --parameter is of type {@link SelectionRangeParams}, the\n+  --response is of type {@link SelectionRange SelectionRange[]} or a Thenable\n+  --that resolves to such.\n+  --@param SelectionRangeParams\n+  SelectionRange = 'textDocument/selectionRange',\n+  --The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n+  --reporting from the server.\n+  --@param WorkDoneProgressCreateParams\n+  WindowWorkDoneProgressCreate = 'window/workDoneProgress/create',\n+  --A request to result a `CallHierarchyItem` in a document at a given position.\n+  --Can be used as an input to an incoming or outgoing call hierarchy.\n+  --@since 3.16.0\n+  --@param CallHierarchyPrepareParams\n+  PrepareCallHierarchy = 'textDocument/prepareCallHierarchy',\n+  --A request to resolve the incoming calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyIncomingCallsParams\n+  CallHierarchyIncomingCalls = 'callHierarchy/incomingCalls',\n+  --A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n+  --@since 3.16.0\n+  --@param CallHierarchyOutgoingCallsParams\n+  CallHierarchyOutgoingCalls = 'callHierarchy/outgoingCalls',\n+  --@since 3.16.0\n+  --@param SemanticTokensParams\n+  SemanticTokensFull = 'textDocument/semanticTokens/full',\n+  --@since 3.16.0\n+  --@param SemanticTokensDeltaParams\n+  SemanticTokensFullDelta = 'textDocument/semanticTokens/full/delta',\n+  --@since 3.16.0\n+  --@param SemanticTokensRangeParams\n+  SemanticTokensRange = 'textDocument/semanticTokens/range',\n+  --@since 3.16.0\n+  WorkspaceSemanticTokensRefresh = 'workspace/semanticTokens/refresh',\n+  --A request to show a document. This request might open an\n+  --external program depending on the value of the URI to open.\n+  --For example a request to open `https://code.visualstudio.com/`\n+  --will very likely open the URI in a WEB browser.\n+  --@since 3.16.0\n+  --@param ShowDocumentParams\n+  WindowShowDocument = 'window/showDocument',\n+  --A request to provide ranges that can be edited together.\n+  --@since 3.16.0\n+  --@param LinkedEditingRangeParams\n+  LinkedEditingRange = 'textDocument/linkedEditingRange',",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278340616",
            "id": 1278340616,
            "in_reply_to_id": 1278294652,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMe4I",
            "original_commit_id": "861ecc0b33a7b90b2187821654cdac44c4b8bcea",
            "original_line": 1019,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553331128,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278340616/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T16:38:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278340616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278444923"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278444923"
                }
            },
            "author_association": "MEMBER",
            "body": "why is `opt.version` the field that decides if gen_methods is called? seems like it should be named `opt.methods`",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T22:25:48Z",
            "diff_hunk": "@@ -18,19 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n   end\n-  vim.fn.system({\n-    'curl',\n-    'https://raw.githubusercontent.com/microsoft/lsprotocol/' .. opt.ref .. '/generator/lsp.json',\n-    '-o',\n-    './lsp.json',\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  vim.iter(protocol.requests):map(function(item)\n+    if item.method then\n+      local name = item.method:gsub('/', '_', 3)\n+      if item.documentation then\n+        local document = vim.split(item.documentation, '\\n?\\n', { trimempty = true })\n+        vim.iter(document):map(function(docstring)\n+          output[#output + 1] = indent .. '--- ' .. docstring\n+        end)\n+      end\n+      output[#output + 1] = indent .. name .. \" = '\" .. item.method .. \"',\"\n+    end\n+  end)\n+  output[#output + 1] = '}'\n+  output = vim.list_extend(\n+    output,\n+    vim.split(\n+      [[\n+local function freeze(t)\n+  return setmetatable({}, {\n+    __index = t,\n+    __newindex = function()\n+      error('cannot modify immutable table')\n+    end,\n   })\n-  local protocol = vim.fn.json_decode(vim.fn.readfile('./lsp.json'))\n-  vim.fn.delete('./lsp.json')\n-  protocol = protocol or {}\n+end\n+protocol.Methods = freeze(protocol.Methods)\n+\n+return protocol\n+]],\n+      '\\n',\n+      { trimempty = true }\n+    )\n+  )\n+\n+  local fname = './runtime/lua/vim/lsp/protocol.lua'\n+  local bufnr = vim.fn.bufadd(fname)\n+  vim.fn.bufload(bufnr)\n+  vim.api.nvim_set_current_buf(bufnr)\n+  local lines = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local index = vim.iter(ipairs(lines)):find(function(key, item)\n+    return item:find('%-%-%- Lsp methods') and key or nil\n+  end)\n+  index = index and index - 1 or vim.api.nvim_buf_line_count(bufnr) - 1\n+  vim.api.nvim_buf_set_lines(bufnr, index, -1, true, output)\n+  vim.cmd.write()\n+end\n+\n+function M.gen(opt)\n+  local protocol = read_json(opt)\n+  if not protocol then\n+    return\n+  end\n+\n+  if opt.version then\n+    gen_methods(protocol)",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278444923",
            "id": 1278444923,
            "line": 104,
            "node_id": "PRRC_kwDOAPphoM5MM4V7",
            "original_commit_id": "f79fd3223f466965ef78c5d8c7e1a2b2cf95559b",
            "original_line": 104,
            "original_position": 103,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 111,
            "pull_request_review_id": 1553485872,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278444923/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T22:25:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278444923",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278444991"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278444991"
                }
            },
            "author_association": "MEMBER",
            "body": "is stylua forcing this? this is an excessive use of linebreaks.\r\n\r\n```suggestion\r\n  local res = vim.system({ 'curl', uri, '-o', '-'}):wait()\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T22:27:14Z",
            "diff_hunk": "@@ -18,19 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278444991",
            "id": 1278444991,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MM4W_",
            "original_commit_id": "f79fd3223f466965ef78c5d8c7e1a2b2cf95559b",
            "original_line": 34,
            "original_position": 27,
            "original_start_line": 27,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553485944,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278444991/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-29T22:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278444991",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278445133"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278445133"
                }
            },
            "author_association": "MEMBER",
            "body": "silently failing is not a good practice. `os.exit(1)`",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T22:30:26Z",
            "diff_hunk": "@@ -18,19 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n   end\n-  vim.fn.system({\n-    'curl',\n-    'https://raw.githubusercontent.com/microsoft/lsprotocol/' .. opt.ref .. '/generator/lsp.json',\n-    '-o',\n-    './lsp.json',\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  vim.iter(protocol.requests):map(function(item)\n+    if item.method then\n+      local name = item.method:gsub('/', '_', 3)\n+      if item.documentation then\n+        local document = vim.split(item.documentation, '\\n?\\n', { trimempty = true })\n+        vim.iter(document):map(function(docstring)\n+          output[#output + 1] = indent .. '--- ' .. docstring\n+        end)\n+      end\n+      output[#output + 1] = indent .. name .. \" = '\" .. item.method .. \"',\"\n+    end\n+  end)\n+  output[#output + 1] = '}'\n+  output = vim.list_extend(\n+    output,\n+    vim.split(\n+      [[\n+local function freeze(t)\n+  return setmetatable({}, {\n+    __index = t,\n+    __newindex = function()\n+      error('cannot modify immutable table')\n+    end,\n   })\n-  local protocol = vim.fn.json_decode(vim.fn.readfile('./lsp.json'))\n-  vim.fn.delete('./lsp.json')\n-  protocol = protocol or {}\n+end\n+protocol.Methods = freeze(protocol.Methods)\n+\n+return protocol\n+]],\n+      '\\n',\n+      { trimempty = true }\n+    )\n+  )\n+\n+  local fname = './runtime/lua/vim/lsp/protocol.lua'\n+  local bufnr = vim.fn.bufadd(fname)\n+  vim.fn.bufload(bufnr)\n+  vim.api.nvim_set_current_buf(bufnr)\n+  local lines = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local index = vim.iter(ipairs(lines)):find(function(key, item)\n+    return item:find('%-%-%- Lsp methods') and key or nil\n+  end)\n+  index = index and index - 1 or vim.api.nvim_buf_line_count(bufnr) - 1\n+  vim.api.nvim_buf_set_lines(bufnr, index, -1, true, output)\n+  vim.cmd.write()\n+end\n+\n+function M.gen(opt)\n+  local protocol = read_json(opt)\n+  if not protocol then\n+    return",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278445133",
            "id": 1278445133,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MM4ZN",
            "original_commit_id": "f79fd3223f466965ef78c5d8c7e1a2b2cf95559b",
            "original_line": 121,
            "original_position": 99,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553486168,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278445133/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T22:30:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278445133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278445720"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278445720"
                }
            },
            "author_association": "MEMBER",
            "body": "This is an unnecessary and confusing use of iter/map. This is not \"mapping\" anything, it's just iterating `protocol.requests`. Please avoid that.\r\n\r\nAlso, using `vim.spairs()` would allow the output be sorted, so that's another\r\nreason not to use map().\r\n\r\n```suggestion\r\n  for k, item in vim.spairs(protocol.requests)\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T22:37:53Z",
            "diff_hunk": "@@ -18,19 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n   end\n-  vim.fn.system({\n-    'curl',\n-    'https://raw.githubusercontent.com/microsoft/lsprotocol/' .. opt.ref .. '/generator/lsp.json',\n-    '-o',\n-    './lsp.json',\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  vim.iter(protocol.requests):map(function(item)",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278445720",
            "id": 1278445720,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MM4iY",
            "original_commit_id": "f79fd3223f466965ef78c5d8c7e1a2b2cf95559b",
            "original_line": 48,
            "original_position": 46,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553487528,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278445720/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T22:39:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278445720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278446950"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278446950"
                }
            },
            "author_association": "MEMBER",
            "body": "why is iter/map being used here instead of ipairs()? Always use simple, common idioms unless there is an actual reason that a higher level abstraction is needed.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-29T22:41:22Z",
            "diff_hunk": "@@ -18,19 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n   end\n-  vim.fn.system({\n-    'curl',\n-    'https://raw.githubusercontent.com/microsoft/lsprotocol/' .. opt.ref .. '/generator/lsp.json',\n-    '-o',\n-    './lsp.json',\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  vim.iter(protocol.requests):map(function(item)\n+    if item.method then\n+      local name = item.method:gsub('/', '_', 3)\n+      if item.documentation then\n+        local document = vim.split(item.documentation, '\\n?\\n', { trimempty = true })\n+        vim.iter(document):map(function(docstring)\n+          output[#output + 1] = indent .. '--- ' .. docstring",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278446950",
            "id": 1278446950,
            "line": 59,
            "node_id": "PRRC_kwDOAPphoM5MM41m",
            "original_commit_id": "f79fd3223f466965ef78c5d8c7e1a2b2cf95559b",
            "original_line": 59,
            "original_position": 52,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 58,
            "pull_request_review_id": 1553489827,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278446950/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T22:41:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278446950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278516047"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278516047"
                }
            },
            "author_association": "MEMBER",
            "body": "yep. stylua force format . I need disable it on this script..",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-30T06:09:18Z",
            "diff_hunk": "@@ -18,19 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278516047",
            "id": 1278516047,
            "in_reply_to_id": 1278444991,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MNJtP",
            "original_commit_id": "f79fd3223f466965ef78c5d8c7e1a2b2cf95559b",
            "original_line": 34,
            "original_position": 27,
            "original_start_line": 27,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553586368,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278516047/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-30T06:09:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278516047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278516332"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278516332"
                }
            },
            "author_association": "MEMBER",
            "body": "error handle in `read_json`  when curl failed it will show it like this\r\n\r\n![image](https://github.com/neovim/neovim/assets/41671631/06f34840-5257-4ec6-92db-c8c0b9445ddc)\r\n",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-30T06:12:57Z",
            "diff_hunk": "@@ -18,19 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n   end\n-  vim.fn.system({\n-    'curl',\n-    'https://raw.githubusercontent.com/microsoft/lsprotocol/' .. opt.ref .. '/generator/lsp.json',\n-    '-o',\n-    './lsp.json',\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  vim.iter(protocol.requests):map(function(item)\n+    if item.method then\n+      local name = item.method:gsub('/', '_', 3)\n+      if item.documentation then\n+        local document = vim.split(item.documentation, '\\n?\\n', { trimempty = true })\n+        vim.iter(document):map(function(docstring)\n+          output[#output + 1] = indent .. '--- ' .. docstring\n+        end)\n+      end\n+      output[#output + 1] = indent .. name .. \" = '\" .. item.method .. \"',\"\n+    end\n+  end)\n+  output[#output + 1] = '}'\n+  output = vim.list_extend(\n+    output,\n+    vim.split(\n+      [[\n+local function freeze(t)\n+  return setmetatable({}, {\n+    __index = t,\n+    __newindex = function()\n+      error('cannot modify immutable table')\n+    end,\n   })\n-  local protocol = vim.fn.json_decode(vim.fn.readfile('./lsp.json'))\n-  vim.fn.delete('./lsp.json')\n-  protocol = protocol or {}\n+end\n+protocol.Methods = freeze(protocol.Methods)\n+\n+return protocol\n+]],\n+      '\\n',\n+      { trimempty = true }\n+    )\n+  )\n+\n+  local fname = './runtime/lua/vim/lsp/protocol.lua'\n+  local bufnr = vim.fn.bufadd(fname)\n+  vim.fn.bufload(bufnr)\n+  vim.api.nvim_set_current_buf(bufnr)\n+  local lines = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local index = vim.iter(ipairs(lines)):find(function(key, item)\n+    return item:find('%-%-%- Lsp methods') and key or nil\n+  end)\n+  index = index and index - 1 or vim.api.nvim_buf_line_count(bufnr) - 1\n+  vim.api.nvim_buf_set_lines(bufnr, index, -1, true, output)\n+  vim.cmd.write()\n+end\n+\n+function M.gen(opt)\n+  local protocol = read_json(opt)\n+  if not protocol then\n+    return",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278516332",
            "id": 1278516332,
            "in_reply_to_id": 1278445133,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MNJxs",
            "original_commit_id": "f79fd3223f466965ef78c5d8c7e1a2b2cf95559b",
            "original_line": 121,
            "original_position": 99,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553586650,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278516332/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-30T06:13:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278516332",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278517104"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278517104"
                }
            },
            "author_association": "MEMBER",
            "body": "forget update new change. now the command use `--version` mean lsp version instead before `ref` (it's wried). when lsp release 3.19 we can use `gen --version 3.19 --methods --build ` to sync new methods and lsp types.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-30T06:22:35Z",
            "diff_hunk": "@@ -18,19 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n   end\n-  vim.fn.system({\n-    'curl',\n-    'https://raw.githubusercontent.com/microsoft/lsprotocol/' .. opt.ref .. '/generator/lsp.json',\n-    '-o',\n-    './lsp.json',\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  vim.iter(protocol.requests):map(function(item)\n+    if item.method then\n+      local name = item.method:gsub('/', '_', 3)\n+      if item.documentation then\n+        local document = vim.split(item.documentation, '\\n?\\n', { trimempty = true })\n+        vim.iter(document):map(function(docstring)\n+          output[#output + 1] = indent .. '--- ' .. docstring\n+        end)\n+      end\n+      output[#output + 1] = indent .. name .. \" = '\" .. item.method .. \"',\"\n+    end\n+  end)\n+  output[#output + 1] = '}'\n+  output = vim.list_extend(\n+    output,\n+    vim.split(\n+      [[\n+local function freeze(t)\n+  return setmetatable({}, {\n+    __index = t,\n+    __newindex = function()\n+      error('cannot modify immutable table')\n+    end,\n   })\n-  local protocol = vim.fn.json_decode(vim.fn.readfile('./lsp.json'))\n-  vim.fn.delete('./lsp.json')\n-  protocol = protocol or {}\n+end\n+protocol.Methods = freeze(protocol.Methods)\n+\n+return protocol\n+]],\n+      '\\n',\n+      { trimempty = true }\n+    )\n+  )\n+\n+  local fname = './runtime/lua/vim/lsp/protocol.lua'\n+  local bufnr = vim.fn.bufadd(fname)\n+  vim.fn.bufload(bufnr)\n+  vim.api.nvim_set_current_buf(bufnr)\n+  local lines = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local index = vim.iter(ipairs(lines)):find(function(key, item)\n+    return item:find('%-%-%- Lsp methods') and key or nil\n+  end)\n+  index = index and index - 1 or vim.api.nvim_buf_line_count(bufnr) - 1\n+  vim.api.nvim_buf_set_lines(bufnr, index, -1, true, output)\n+  vim.cmd.write()\n+end\n+\n+function M.gen(opt)\n+  local protocol = read_json(opt)\n+  if not protocol then\n+    return\n+  end\n+\n+  if opt.version then\n+    gen_methods(protocol)",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278517104",
            "id": 1278517104,
            "in_reply_to_id": 1278444923,
            "line": 104,
            "node_id": "PRRC_kwDOAPphoM5MNJ9w",
            "original_commit_id": "f79fd3223f466965ef78c5d8c7e1a2b2cf95559b",
            "original_line": 104,
            "original_position": 103,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 111,
            "pull_request_review_id": 1553587446,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278517104/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-30T06:22:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278517104",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278572442"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278572442"
                }
            },
            "author_association": "MEMBER",
            "body": "that doesn't set the exit code. do not just print errors without signaling the problem programmatically.\r\n\r\nif `read_json()` fails there is nothing more for this script to do, so it should fail immediately, it shouldn't even return. it could do `error(stderr)`, then the caller can pcall() if they really want.\r\n\r\ni'm mostly mentioning this in an effort to hint about general practices. similar for the pairs() vs iter() comments. those practices are general practices that apply all over the codebase, in all projects.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-30T14:02:20Z",
            "diff_hunk": "@@ -18,19 +19,90 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim\n+    .system({\n+      'curl',\n+      uri,\n+      '-o',\n+      '-',\n+    })\n+    :wait()\n+\n+  if res.code ~= 0 then\n+    print(res.stderr)\n+    return\n   end\n-  vim.fn.system({\n-    'curl',\n-    'https://raw.githubusercontent.com/microsoft/lsprotocol/' .. opt.ref .. '/generator/lsp.json',\n-    '-o',\n-    './lsp.json',\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  vim.iter(protocol.requests):map(function(item)\n+    if item.method then\n+      local name = item.method:gsub('/', '_', 3)\n+      if item.documentation then\n+        local document = vim.split(item.documentation, '\\n?\\n', { trimempty = true })\n+        vim.iter(document):map(function(docstring)\n+          output[#output + 1] = indent .. '--- ' .. docstring\n+        end)\n+      end\n+      output[#output + 1] = indent .. name .. \" = '\" .. item.method .. \"',\"\n+    end\n+  end)\n+  output[#output + 1] = '}'\n+  output = vim.list_extend(\n+    output,\n+    vim.split(\n+      [[\n+local function freeze(t)\n+  return setmetatable({}, {\n+    __index = t,\n+    __newindex = function()\n+      error('cannot modify immutable table')\n+    end,\n   })\n-  local protocol = vim.fn.json_decode(vim.fn.readfile('./lsp.json'))\n-  vim.fn.delete('./lsp.json')\n-  protocol = protocol or {}\n+end\n+protocol.Methods = freeze(protocol.Methods)\n+\n+return protocol\n+]],\n+      '\\n',\n+      { trimempty = true }\n+    )\n+  )\n+\n+  local fname = './runtime/lua/vim/lsp/protocol.lua'\n+  local bufnr = vim.fn.bufadd(fname)\n+  vim.fn.bufload(bufnr)\n+  vim.api.nvim_set_current_buf(bufnr)\n+  local lines = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local index = vim.iter(ipairs(lines)):find(function(key, item)\n+    return item:find('%-%-%- Lsp methods') and key or nil\n+  end)\n+  index = index and index - 1 or vim.api.nvim_buf_line_count(bufnr) - 1\n+  vim.api.nvim_buf_set_lines(bufnr, index, -1, true, output)\n+  vim.cmd.write()\n+end\n+\n+function M.gen(opt)\n+  local protocol = read_json(opt)\n+  if not protocol then\n+    return",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278572442",
            "id": 1278572442,
            "in_reply_to_id": 1278445133,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MNXea",
            "original_commit_id": "f79fd3223f466965ef78c5d8c7e1a2b2cf95559b",
            "original_line": 121,
            "original_position": 99,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1553648027,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278572442/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-30T14:17:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278572442",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278573080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278573080"
                }
            },
            "author_association": "MEMBER",
            "body": "Did you try `vim.spairs` ? So the generated `Methods` fields will be sorted.\r\n\r\n```suggestion\r\n  for _, item in vim.spairs(protocol.requests) do\r\n```\r\n\r\nOh, if `vim.spairs` doesn't work on list-like tables, try `tabel.sort`.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-30T14:07:44Z",
            "diff_hunk": "@@ -18,19 +19,82 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return\n+  end\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  for _, item in ipairs(protocol.requests) do",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278573080",
            "id": 1278573080,
            "line": 54,
            "node_id": "PRRC_kwDOAPphoM5MNXoY",
            "original_commit_id": "7692a87717d826aefbe95ceb452c12b9b91ea921",
            "original_line": 54,
            "original_position": 38,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 53,
            "pull_request_review_id": 1553648753,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278573080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-30T14:09:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278573080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278573649"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278573649"
                }
            },
            "author_association": "MEMBER",
            "body": "the \"generated by...\" does not belong in user-facing docs, so it should have only two hypens `--`. See if this works...\r\n\r\n```suggestion\r\n-- Generated by lsp_types.lua, keep at end of file.\r\n--- LSP method names.\r\n---\r\n---@see https://microsoft.github.io/language-server-protocol/specifications/specification-current/#metaModel\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-30T14:12:10Z",
            "diff_hunk": "@@ -923,4 +923,271 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--- LSP methods. Generated by lsp_types.lua, keep at end of file.",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278573649",
            "id": 1278573649,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MNXxR",
            "original_commit_id": "7692a87717d826aefbe95ceb452c12b9b91ea921",
            "original_line": 926,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1553649399,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278573649/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-30T14:14:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278573649",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278860276"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278860276"
                }
            },
            "author_association": "MEMBER",
            "body": "not work lua_ls still parse `--`",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-31T06:54:28Z",
            "diff_hunk": "@@ -923,4 +923,271 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+--- LSP methods. Generated by lsp_types.lua, keep at end of file.",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278860276",
            "id": 1278860276,
            "in_reply_to_id": 1278573649,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MOdv0",
            "original_commit_id": "7692a87717d826aefbe95ceb452c12b9b91ea921",
            "original_line": 926,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1554070143,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278860276/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-31T06:54:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278860276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1278866885"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278866885"
                }
            },
            "author_association": "MEMBER",
            "body": "before tried it, it works for list-like table. but the result same as `ipairs` .",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-31T07:02:40Z",
            "diff_hunk": "@@ -18,19 +19,82 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return\n+  end\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  for _, item in ipairs(protocol.requests) do",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1278866885",
            "id": 1278866885,
            "in_reply_to_id": 1278573080,
            "line": 54,
            "node_id": "PRRC_kwDOAPphoM5MOfXF",
            "original_commit_id": "7692a87717d826aefbe95ceb452c12b9b91ea921",
            "original_line": 54,
            "original_position": 38,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 53,
            "pull_request_review_id": 1554080850,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278866885/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-31T07:05:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278866885",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1279134290"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279134290"
                }
            },
            "author_association": "MEMBER",
            "body": "ok, did you try sorting `protocol.requests` with `table.sort` ? The goal is the sort the result somehow.\r\n\r\n`vim.spairs` doesn't work for lists, it \"sorts\" by the index:\r\n\r\n```lua\r\nlocal a = { 'c', 'f', 'a', 'd' }\r\nfor k,v in vim.spairs(a) do\r\n  vim.print(k, v)\r\nend\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-31T10:57:13Z",
            "diff_hunk": "@@ -18,19 +19,82 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return\n+  end\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  for _, item in ipairs(protocol.requests) do",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1279134290",
            "id": 1279134290,
            "in_reply_to_id": 1278573080,
            "line": 54,
            "node_id": "PRRC_kwDOAPphoM5MPgpS",
            "original_commit_id": "7692a87717d826aefbe95ceb452c12b9b91ea921",
            "original_line": 54,
            "original_position": 38,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 53,
            "pull_request_review_id": 1554509409,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279134290/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-31T10:58:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279134290",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1279151556"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279151556"
                }
            },
            "author_association": "MEMBER",
            "body": "hmmm doc say it works for list-like\r\n```\r\n    Parameters:  \r\n      â€¢ {t}  (table) List-like table\r\n```\r\nand what is the meaning of sort in there every item struct in `protocol.request` like\r\n\r\n```\r\n{\r\n  documentation = \"A request send from the client to the server to execute a command. The request might return\\na workspace edit which the client will apply to the workspace.\",\r\n  messageDirection = \"clientToServer\",\r\n  method = \"workspace/executeCommand\",\r\n  params = {\r\n    kind = \"reference\",\r\n    name = \"ExecuteCommandParams\"\r\n  },\r\n  registrationOptions = {\r\n    kind = \"reference\",\r\n    name = \"ExecuteCommandRegistrationOptions\"\r\n  },\r\n  result = {\r\n    items = { {\r\n        kind = \"reference\",\r\n        name = \"LSPAny\"\r\n      }, {\r\n        kind = \"base\",\r\n        name = \"null\"\r\n      } },\r\n    kind = \"or\"\r\n  }\r\n}\r\n```\r\n",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-31T11:15:32Z",
            "diff_hunk": "@@ -18,19 +19,82 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return\n+  end\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  for _, item in ipairs(protocol.requests) do",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1279151556",
            "id": 1279151556,
            "in_reply_to_id": 1278573080,
            "line": 54,
            "node_id": "PRRC_kwDOAPphoM5MPk3E",
            "original_commit_id": "7692a87717d826aefbe95ceb452c12b9b91ea921",
            "original_line": 54,
            "original_position": 38,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 53,
            "pull_request_review_id": 1554537313,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279151556/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-31T11:15:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279151556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1279159605"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279159605"
                }
            },
            "author_association": "MEMBER",
            "body": ">  {t}  (table) List-like table\r\n\r\nwill fix in docs PR.\r\n\r\n> and what is the meaning of sort in there every item struct in `protocol.request` like\r\n\r\nsort by the `method` field\r\n\r\n```\r\ntable.sort(protocol.requests, function(a,b) return a.method < b.method end)\r\n```",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-31T11:23:53Z",
            "diff_hunk": "@@ -18,19 +19,82 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return\n+  end\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  for _, item in ipairs(protocol.requests) do",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1279159605",
            "id": 1279159605,
            "in_reply_to_id": 1278573080,
            "line": 54,
            "node_id": "PRRC_kwDOAPphoM5MPm01",
            "original_commit_id": "7692a87717d826aefbe95ceb452c12b9b91ea921",
            "original_line": 54,
            "original_position": 38,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 53,
            "pull_request_review_id": 1554550154,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279159605/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-31T11:32:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279159605",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1279161133"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279161133"
                }
            },
            "author_association": "MEMBER",
            "body": "right. so I tried use `find:(textDocument)` before. but some method does not have prefix or have other prefix like `$` if sort they should in first. so I removed it .if you want this I will do it again.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-31T11:25:37Z",
            "diff_hunk": "@@ -18,19 +19,82 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return\n+  end\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  for _, item in ipairs(protocol.requests) do",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1279161133",
            "id": 1279161133,
            "in_reply_to_id": 1278573080,
            "line": 54,
            "node_id": "PRRC_kwDOAPphoM5MPnMt",
            "original_commit_id": "7692a87717d826aefbe95ceb452c12b9b91ea921",
            "original_line": 54,
            "original_position": 38,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 53,
            "pull_request_review_id": 1554552500,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279161133/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-31T11:25:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279161133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1279169301"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279169301"
                }
            },
            "author_association": "MEMBER",
            "body": "extract the name cleanup logic (which is needed below, anyway) to a function and use that in the sort\r\n\r\n    table.sort(protocol.requests, function(a,b) return scrub(a.method) < scrub(b.method) end)",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-31T11:34:51Z",
            "diff_hunk": "@@ -18,19 +19,82 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return\n+  end\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  for _, item in ipairs(protocol.requests) do",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1279169301",
            "id": 1279169301,
            "in_reply_to_id": 1278573080,
            "line": 54,
            "node_id": "PRRC_kwDOAPphoM5MPpMV",
            "original_commit_id": "7692a87717d826aefbe95ceb452c12b9b91ea921",
            "original_line": 54,
            "original_position": 38,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 53,
            "pull_request_review_id": 1554565623,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279169301/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-31T11:35:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279169301",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1279230209"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279230209"
                }
            },
            "author_association": "MEMBER",
            "body": "how about now ?",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-07-31T12:34:16Z",
            "diff_hunk": "@@ -18,19 +19,82 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return\n+  end\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output =\n+    { '--- LSP methods. Generated by lsp_types.lua, keep at end of file.', 'protocol.Methods = {' }\n+  local indent = (' '):rep(2)\n+\n+  for _, item in ipairs(protocol.requests) do",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1279230209",
            "id": 1279230209,
            "in_reply_to_id": 1278573080,
            "line": 54,
            "node_id": "PRRC_kwDOAPphoM5MP4EB",
            "original_commit_id": "7692a87717d826aefbe95ceb452c12b9b91ea921",
            "original_line": 54,
            "original_position": 38,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": 53,
            "pull_request_review_id": 1554668821,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279230209/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-31T12:34:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1279230209",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1280657024"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280657024"
                }
            },
            "author_association": "MEMBER",
            "body": "I think Nvim LSP client is currently targeting 3.17, at least that's what lsp_types.lua last used.\r\n\r\nLet's stick with 3.17 and discuss updating to a newer version in a future PR.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-08-01T13:34:56Z",
            "diff_hunk": "@@ -923,4 +923,274 @@ function protocol.resolve_capabilities(server_capabilities)\n   return server_capabilities\n end\n \n+-- Generated by lsp_types.lua, keep at end of file.\n+--- LSP method names.\n+---\n+---@see https://microsoft.github.io/language-server-protocol/specifications/specification-current/#metaModel\n+protocol.Methods = {\n+  --- The initialize request is sent from the client to the server.\n+  --- It is sent once as the request after starting up the server.\n+  --- The requests parameter is of type {@link InitializeParams}\n+  --- the response if of type {@link InitializeResult} of a Thenable that\n+  --- resolves to such.\n+  initialize = 'initialize',\n+  --- A shutdown request is sent from the client to the server.\n+  --- It is sent once when the client decides to shutdown the\n+  --- server. The only notification that is sent after a shutdown request\n+  --- is the exit event.\n+  shutdown = 'shutdown',\n+  --- The `client/registerCapability` request is sent from the server to the client to register a new capability\n+  --- handler on the client side.\n+  client_registerCapability = 'client/registerCapability',\n+  --- The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability\n+  --- handler on the client side.\n+  client_unregisterCapability = 'client/unregisterCapability',\n+  --- A request to resolve the implementation locations of a symbol at a given text\n+  --- document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --- (#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --- Thenable that resolves to such.\n+  textDocument_implementation = 'textDocument/implementation',\n+  --- A request to resolve the type definition locations of a symbol at a given text\n+  --- document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --- (#TextDocumentPositionParams) the response is of type {@link Definition} or a\n+  --- Thenable that resolves to such.\n+  textDocument_typeDefinition = 'textDocument/typeDefinition',\n+  --- A request to list all color symbols found in a given text document. The request's\n+  --- parameter is of type {@link DocumentColorParams} the\n+  --- response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --- that resolves to such.\n+  textDocument_documentColor = 'textDocument/documentColor',\n+  --- A request to list all presentation for a color. The request's\n+  --- parameter is of type {@link ColorPresentationParams} the\n+  --- response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n+  --- that resolves to such.\n+  textDocument_colorPresentation = 'textDocument/colorPresentation',\n+  --- A request to provide folding ranges in a document. The request's\n+  --- parameter is of type {@link FoldingRangeParams}, the\n+  --- response is of type {@link FoldingRangeList} or a Thenable\n+  --- that resolves to such.\n+  textDocument_foldingRange = 'textDocument/foldingRange',\n+  --- A request to resolve the type definition locations of a symbol at a given text\n+  --- document position. The request's parameter is of type [TextDocumentPositionParams]\n+  --- (#TextDocumentPositionParams) the response is of type {@link Declaration}\n+  --- or a typed array of {@link DeclarationLink} or a Thenable that resolves\n+  --- to such.\n+  textDocument_declaration = 'textDocument/declaration',\n+  --- A request to provide selection ranges in a document. The request's\n+  --- parameter is of type {@link SelectionRangeParams}, the\n+  --- response is of type {@link SelectionRange SelectionRange[]} or a Thenable\n+  --- that resolves to such.\n+  textDocument_selectionRange = 'textDocument/selectionRange',\n+  --- A request to result a `CallHierarchyItem` in a document at a given position.\n+  --- Can be used as an input to an incoming or outgoing call hierarchy.\n+  --- @since 3.16.0\n+  textDocument_prepareCallHierarchy = 'textDocument/prepareCallHierarchy',\n+  --- @since 3.16.0\n+  textDocument_semanticTokens_full = 'textDocument/semanticTokens/full',\n+  --- @since 3.16.0\n+  textDocument_semanticTokens_full_delta = 'textDocument/semanticTokens/full/delta',\n+  --- @since 3.16.0\n+  textDocument_semanticTokens_range = 'textDocument/semanticTokens/range',\n+  --- A request to provide ranges that can be edited together.\n+  --- @since 3.16.0\n+  textDocument_linkedEditingRange = 'textDocument/linkedEditingRange',\n+  --- A request to get the moniker of a symbol at a given text document position.\n+  --- The request parameter is of type {@link TextDocumentPositionParams}.\n+  --- The response is of type {@link Moniker Moniker[]} or `null`.\n+  textDocument_moniker = 'textDocument/moniker',\n+  --- A request to result a `TypeHierarchyItem` in a document at a given position.\n+  --- Can be used as an input to a subtypes or supertypes type hierarchy.\n+  --- @since 3.17.0\n+  textDocument_prepareTypeHierarchy = 'textDocument/prepareTypeHierarchy',\n+  --- A request to provide inline values in a document. The request's parameter is of\n+  --- type {@link InlineValueParams}, the response is of type\n+  --- {@link InlineValue InlineValue[]} or a Thenable that resolves to such.\n+  --- @since 3.17.0\n+  textDocument_inlineValue = 'textDocument/inlineValue',\n+  --- A request to provide inlay hints in a document. The request's parameter is of\n+  --- type {@link InlayHintsParams}, the response is of type\n+  --- {@link InlayHint InlayHint[]} or a Thenable that resolves to such.\n+  --- @since 3.17.0\n+  textDocument_inlayHint = 'textDocument/inlayHint',\n+  --- The document diagnostic request definition.\n+  --- @since 3.17.0\n+  textDocument_diagnostic = 'textDocument/diagnostic',\n+  --- A request to provide inline completions in a document. The request's parameter is of\n+  --- type {@link InlineCompletionParams}, the response is of type\n+  --- {@link InlineCompletion InlineCompletion[]} or a Thenable that resolves to such.\n+  --- @since 3.18.0\n+  textDocument_inlineCompletion = 'textDocument/inlineCompletion',\n+  --- A document will save request is sent from the client to the server before\n+  --- the document is actually saved. The request can return an array of TextEdits\n+  --- which will be applied to the text document before it is saved. Please note that\n+  --- clients might drop results if computing the text edits took too long or if a\n+  --- server constantly fails on this request. This is done to keep the save fast and\n+  --- reliable.\n+  textDocument_willSaveWaitUntil = 'textDocument/willSaveWaitUntil',\n+  --- Request to request completion at a given text document position. The request's\n+  --- parameter is of type {@link TextDocumentPosition} the response\n+  --- is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}\n+  --- or a Thenable that resolves to such.\n+  --- The request can delay the computation of the {@link CompletionItem.detail `detail`}\n+  --- and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`\n+  --- request. However, properties that are needed for the initial sorting and filtering, like `sortText`,\n+  --- `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.\n+  textDocument_completion = 'textDocument/completion',\n+  --- Request to request hover information at a given text document position. The request's\n+  --- parameter is of type {@link TextDocumentPosition} the response is of\n+  --- type {@link Hover} or a Thenable that resolves to such.\n+  textDocument_hover = 'textDocument/hover',\n+  textDocument_signatureHelp = 'textDocument/signatureHelp',\n+  --- A request to resolve the definition location of a symbol at a given text\n+  --- document position. The request's parameter is of type [TextDocumentPosition]\n+  --- (#TextDocumentPosition) the response is of either type {@link Definition}\n+  --- or a typed array of {@link DefinitionLink} or a Thenable that resolves\n+  --- to such.\n+  textDocument_definition = 'textDocument/definition',\n+  --- A request to resolve project-wide references for the symbol denoted\n+  --- by the given text document position. The request's parameter is of\n+  --- type {@link ReferenceParams} the response is of type\n+  --- {@link Location Location[]} or a Thenable that resolves to such.\n+  textDocument_references = 'textDocument/references',\n+  --- Request to resolve a {@link DocumentHighlight} for a given\n+  --- text document position. The request's parameter is of type [TextDocumentPosition]\n+  --- (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]\n+  --- (#DocumentHighlight) or a Thenable that resolves to such.\n+  textDocument_documentHighlight = 'textDocument/documentHighlight',\n+  --- A request to list all symbols found in a given text document. The request's\n+  --- parameter is of type {@link TextDocumentIdentifier} the\n+  --- response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable\n+  --- that resolves to such.\n+  textDocument_documentSymbol = 'textDocument/documentSymbol',\n+  --- A request to provide commands for the given text document and range.\n+  textDocument_codeAction = 'textDocument/codeAction',\n+  --- A request to provide code lens for the given text document.\n+  textDocument_codeLens = 'textDocument/codeLens',\n+  --- A request to provide document links\n+  textDocument_documentLink = 'textDocument/documentLink',\n+  --- A request to to format a whole document.\n+  textDocument_formatting = 'textDocument/formatting',\n+  --- A request to format a range in a document.\n+  textDocument_rangeFormatting = 'textDocument/rangeFormatting',\n+  --- A request to format ranges in a document.\n+  --- @since 3.18.0",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1280657024",
            "id": 1280657024,
            "line": 1077,
            "node_id": "PRRC_kwDOAPphoM5MVUaA",
            "original_commit_id": "374fded77610c37e449e7f2595a6e2b4d0682ff0",
            "original_line": 1077,
            "original_position": 154,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": 155,
            "pull_request_review_id": 1557024202,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280657024/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-01T13:57:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280657024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1280660730"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280660730"
                }
            },
            "author_association": "MEMBER",
            "body": "This is unnecessarily complicated. Just sort by the _generated_ name.\r\n\r\nI pushed an update that does that.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-08-01T13:37:29Z",
            "diff_hunk": "@@ -18,24 +19,117 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function sort_by_method(tbl)",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1280660730",
            "id": 1280660730,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MVVT6",
            "original_commit_id": "374fded77610c37e449e7f2595a6e2b4d0682ff0",
            "original_line": 22,
            "original_position": 19,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1557024202,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280660730/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-01T13:57:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280660730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1280661553"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280661553"
                }
            },
            "author_association": "MEMBER",
            "body": "This doesn't fail on 404. Always test failure modes.\r\n\r\nPushed an update that tries to handle this.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-08-01T13:38:05Z",
            "diff_hunk": "@@ -18,24 +19,117 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function sort_by_method(tbl)\n+  local single, client, textD, workspace, others = {}, {}, {}, {}, {}\n+  for _, item in ipairs(tbl) do\n+    local parts = vim.split(item.method, '/', { trimempty = true })\n+    if #parts == 1 then\n+      single[#single + 1] = item\n+    elseif parts[1] == 'textDocument' then\n+      textD[#textD + 1] = item\n+    elseif parts[1] == 'client' then\n+      client[#client + 1] = item\n+    elseif parts[1] == 'workspace' then\n+      workspace[#workspace + 1] = item\n+    else\n+      others[#others + 1] = item\n+    end\n+  end\n+\n+  local res = {}\n+  for _, item in ipairs({ single, client, textD, workspace, others }) do\n+    res = vim.list_extend(res, item)\n   end\n-  vim.fn.system({\n-    'curl',\n-    'https://raw.githubusercontent.com/microsoft/lsprotocol/' .. opt.ref .. '/generator/lsp.json',\n-    '-o',\n-    './lsp.json',\n+  return res\n+end\n+\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1280661553",
            "id": 1280661553,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MVVgx",
            "original_commit_id": "374fded77610c37e449e7f2595a6e2b4d0682ff0",
            "original_line": 55,
            "original_position": 57,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1557024202,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280661553/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-01T13:57:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280661553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1280664359"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280664359"
                }
            },
            "author_association": "MEMBER",
            "body": "We should use string:format() to format strings. I don't know why we do this `..` stuff all over the place.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-08-01T13:40:12Z",
            "diff_hunk": "@@ -18,24 +19,117 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function sort_by_method(tbl)\n+  local single, client, textD, workspace, others = {}, {}, {}, {}, {}\n+  for _, item in ipairs(tbl) do\n+    local parts = vim.split(item.method, '/', { trimempty = true })\n+    if #parts == 1 then\n+      single[#single + 1] = item\n+    elseif parts[1] == 'textDocument' then\n+      textD[#textD + 1] = item\n+    elseif parts[1] == 'client' then\n+      client[#client + 1] = item\n+    elseif parts[1] == 'workspace' then\n+      workspace[#workspace + 1] = item\n+    else\n+      others[#others + 1] = item\n+    end\n+  end\n+\n+  local res = {}\n+  for _, item in ipairs({ single, client, textD, workspace, others }) do\n+    res = vim.list_extend(res, item)\n   end\n-  vim.fn.system({\n-    'curl',\n-    'https://raw.githubusercontent.com/microsoft/lsprotocol/' .. opt.ref .. '/generator/lsp.json',\n-    '-o',\n-    './lsp.json',\n+  return res\n+end\n+\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return\n+  end\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output = {\n+    '-- Generated by lsp_types.lua, keep at end of file.',\n+    '--- LSP method names.',\n+    '---',\n+    '---@see https://microsoft.github.io/language-server-protocol/specifications/specification-current/#metaModel',\n+    'protocol.Methods = {',\n+  }\n+  local indent = (' '):rep(2)\n+\n+  for _, item in ipairs(sort_by_method(protocol.requests)) do\n+    if item.method then\n+      local name = item.method:gsub('/', '_', 3)\n+      if item.documentation then\n+        local document = vim.split(item.documentation, '\\n?\\n', { trimempty = true })\n+        for _, docstring in ipairs(document) do\n+          output[#output + 1] = indent .. '--- ' .. docstring\n+        end\n+      end\n+      output[#output + 1] = indent .. name .. \" = '\" .. item.method .. \"',\"",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1280664359",
            "id": 1280664359,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MVWMn",
            "original_commit_id": "374fded77610c37e449e7f2595a6e2b4d0682ff0",
            "original_line": 79,
            "original_position": 81,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1557024202,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280664359/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-01T13:57:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280664359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1280664575"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280664575"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is `3` specified?",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-08-01T13:40:21Z",
            "diff_hunk": "@@ -18,24 +19,117 @@ local function tofile(fname, text)\n   end\n end\n \n-function M.gen(opt)\n-  if vim.uv.fs_stat('./lsp.json') then\n-    vim.fn.delete('./lsp.json')\n+local function sort_by_method(tbl)\n+  local single, client, textD, workspace, others = {}, {}, {}, {}, {}\n+  for _, item in ipairs(tbl) do\n+    local parts = vim.split(item.method, '/', { trimempty = true })\n+    if #parts == 1 then\n+      single[#single + 1] = item\n+    elseif parts[1] == 'textDocument' then\n+      textD[#textD + 1] = item\n+    elseif parts[1] == 'client' then\n+      client[#client + 1] = item\n+    elseif parts[1] == 'workspace' then\n+      workspace[#workspace + 1] = item\n+    else\n+      others[#others + 1] = item\n+    end\n+  end\n+\n+  local res = {}\n+  for _, item in ipairs({ single, client, textD, workspace, others }) do\n+    res = vim.list_extend(res, item)\n   end\n-  vim.fn.system({\n-    'curl',\n-    'https://raw.githubusercontent.com/microsoft/lsprotocol/' .. opt.ref .. '/generator/lsp.json',\n-    '-o',\n-    './lsp.json',\n+  return res\n+end\n+\n+local function read_json(opt)\n+  local uri = 'https://raw.githubusercontent.com/microsoft/language-server-protocol/gh-pages/_specifications/lsp/'\n+    .. opt.version\n+    .. '/metaModel/metaModel.json'\n+\n+  local res = vim.system({ 'curl', uri, '-o', '-' }):wait()\n+\n+  if res.code ~= 0 then\n+    io.write(res.stderr)\n+    return\n+  end\n+  return vim.json.decode(res.stdout)\n+end\n+\n+local function gen_methods(protocol)\n+  local output = {\n+    '-- Generated by lsp_types.lua, keep at end of file.',\n+    '--- LSP method names.',\n+    '---',\n+    '---@see https://microsoft.github.io/language-server-protocol/specifications/specification-current/#metaModel',\n+    'protocol.Methods = {',\n+  }\n+  local indent = (' '):rep(2)\n+\n+  for _, item in ipairs(sort_by_method(protocol.requests)) do\n+    if item.method then\n+      local name = item.method:gsub('/', '_', 3)",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1280664575",
            "id": 1280664575,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MVWP_",
            "original_commit_id": "374fded77610c37e449e7f2595a6e2b4d0682ff0",
            "original_line": 72,
            "original_position": 74,
            "original_start_line": null,
            "path": "scripts/lsp_types.lua",
            "position": null,
            "pull_request_review_id": 1557024202,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280664575/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-01T13:57:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280664575",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24504#discussion_r1280703174"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24504"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280703174"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh it looks like we were using 3.18... hmm.",
            "commit_id": "f41496ce74fb30c18bb9a03027a172800b269643",
            "created_at": "2023-08-01T14:07:58Z",
            "diff_hunk": "@@ -608,43 +608,6 @@ nvim -l scripts/lsp_types.lua gen --runtime/lua/vim/lsp/types/protocol.lua\n ---of a notebook cell that got closed.\n ---@field cellTextDocuments lsp.TextDocumentIdentifier[]\n \n----A parameter literal used in inline completion requests.\n----\n----@since 3.18.0",
            "html_url": "https://github.com/neovim/neovim/pull/24504#discussion_r1280703174",
            "id": 1280703174,
            "line": 613,
            "node_id": "PRRC_kwDOAPphoM5MVfrG",
            "original_commit_id": "d42276e13d9c24672a79548820e15141d7c17453",
            "original_line": 613,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/types/protocol.lua",
            "position": 13,
            "pull_request_review_id": 1557102232,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280703174/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-01T14:07:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1280703174",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "NONE",
            "body": "When this gets merged, would you also accept a PR that uses these new constants in this codebase?",
            "created_at": "2023-07-28T16:26:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/24504#issuecomment-1655968013",
            "id": 1655968013,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24504",
            "node_id": "IC_kwDOAPphoM5itBEN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1655968013/reactions"
            },
            "updated_at": "2023-07-28T16:26:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1655968013",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Can we make it actually constant? If there are multiple users of this, I don't think we want anyone to call some function on it that unintentionally modifies the table in place, and changes it for everyone. Errors like this are hard to track down.\r\n\r\n```lua\r\nlocal function freeze(t)\r\n  return setmetatable({}, {\r\n    __index = t,\r\n    __newindex = function()\r\n      error('cannot modify immutable table')\r\n    end,\r\n  })\r\nend\r\n\r\nprotocol.Methods = freeze(protocol.Methods)\r\n```",
            "created_at": "2023-07-28T17:27:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/24504#issuecomment-1656060467",
            "id": 1656060467,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24504",
            "node_id": "IC_kwDOAPphoM5itXoz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656060467/reactions"
            },
            "updated_at": "2023-07-28T17:27:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656060467",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> When this gets merged, would you also accept a PR that uses these new constants in this codebase?\r\n\r\n@MariaSolOs yes",
            "created_at": "2023-08-01T12:46:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/24504#issuecomment-1660243553",
            "id": 1660243553,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24504",
            "node_id": "IC_kwDOAPphoM5i9U5h",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1660243553/reactions"
            },
            "updated_at": "2023-08-01T12:46:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1660243553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24504/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/24504/commits",
    "created_at": "2023-07-28T07:27:02Z",
    "diff_url": "https://github.com/neovim/neovim/pull/24504.diff",
    "draft": false,
    "head": {
        "label": "glepnir:methods",
        "ref": "methods",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/glepnir/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/glepnir/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/glepnir/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/glepnir/neovim/branches{/branch}",
            "clone_url": "https://github.com/glepnir/neovim.git",
            "collaborators_url": "https://api.github.com/repos/glepnir/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/glepnir/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/glepnir/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/glepnir/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/glepnir/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/glepnir/neovim/contributors",
            "created_at": "2022-07-17T05:15:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/glepnir/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/glepnir/neovim/downloads",
            "events_url": "https://api.github.com/repos/glepnir/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/glepnir/neovim/forks",
            "full_name": "glepnir/neovim",
            "git_commits_url": "https://api.github.com/repos/glepnir/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/glepnir/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/glepnir/neovim/git/tags{/sha}",
            "git_url": "git://github.com/glepnir/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/glepnir/neovim/hooks",
            "html_url": "https://github.com/glepnir/neovim",
            "id": 514752985,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/glepnir/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/glepnir/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/glepnir/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/glepnir/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/glepnir/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/glepnir/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/glepnir/neovim/merges",
            "milestones_url": "https://api.github.com/repos/glepnir/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHq6B2Q",
            "notifications_url": "https://api.github.com/repos/glepnir/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/glepnir/neovim/pulls{/number}",
            "pushed_at": "2023-08-01T14:13:33Z",
            "releases_url": "https://api.github.com/repos/glepnir/neovim/releases{/id}",
            "size": 244913,
            "ssh_url": "git@github.com:glepnir/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/glepnir/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/glepnir/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/glepnir/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/glepnir/neovim/subscription",
            "svn_url": "https://github.com/glepnir/neovim",
            "tags_url": "https://api.github.com/repos/glepnir/neovim/tags",
            "teams_url": "https://api.github.com/repos/glepnir/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/glepnir/neovim/git/trees{/sha}",
            "updated_at": "2023-06-29T15:12:56Z",
            "url": "https://api.github.com/repos/glepnir/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "f41496ce74fb30c18bb9a03027a172800b269643",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
            "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
            "followers_url": "https://api.github.com/users/glepnir/followers",
            "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
            "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/glepnir",
            "id": 41671631,
            "login": "glepnir",
            "node_id": "MDQ6VXNlcjQxNjcxNjMx",
            "organizations_url": "https://api.github.com/users/glepnir/orgs",
            "received_events_url": "https://api.github.com/users/glepnir/received_events",
            "repos_url": "https://api.github.com/users/glepnir/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/glepnir"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/24504",
    "id": 1453328466,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24504",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "dfe19d6e0047ea2a2a75dff0c57f4c4de1c0196a",
    "merged_at": "2023-08-01T14:36:57Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5WoAhS",
    "number": 24504,
    "patch_url": "https://github.com/neovim/neovim/pull/24504.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/24504/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/f41496ce74fb30c18bb9a03027a172800b269643",
    "title": "feat(lsp): protocol.Methods",
    "updated_at": "2023-08-01T14:37:17Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/24504",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
        "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
        "followers_url": "https://api.github.com/users/glepnir/followers",
        "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
        "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/glepnir",
        "id": 41671631,
        "login": "glepnir",
        "node_id": "MDQ6VXNlcjQxNjcxNjMx",
        "organizations_url": "https://api.github.com/users/glepnir/orgs",
        "received_events_url": "https://api.github.com/users/glepnir/received_events",
        "repos_url": "https://api.github.com/users/glepnir/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/glepnir"
    }
}