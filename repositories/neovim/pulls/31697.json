{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31697/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31697/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31697"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31697"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31697/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31697"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/8f47e1ab72f73e71c749a0f27b6d311cc44cccaa"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5782,
            "forks_count": 5782,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1833,
            "open_issues_count": 1833,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-12-31T00:41:55Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 300529,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 84725,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-12-31T02:01:23Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 84725,
            "watchers_count": 84725,
            "web_commit_signoff_required": false
        },
        "sha": "adcd9360dfefc7b1e1edb0e86df460e074991c8d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Similar to how there is a `GDB` environment variable to let the nvim\r\ntest instances to be run under `gdbserver` this adds a `OSV_PORT`\r\nvariable to start nvim test instances with `osv` in blocking mode to let\r\na debug client attach to it for debugging of `exec_lua` code blocks.\r\n\r\n\r\n![recording](https://github.com/user-attachments/assets/9f7c3d7a-69bf-4f57-91a7-239696dd2800)\r\n\r\n\r\n(I haven't really used this yet, so not sure what other limitations or caveats exist)",
    "closed_at": "2024-12-24T11:29:39Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31697#discussion_r1896835348"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31697"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896835348"
                }
            },
            "author_association": "MEMBER",
            "body": "Unless `--luamod-dev` is used? Should that be mentioned here?",
            "commit_id": "8f47e1ab72f73e71c749a0f27b6d311cc44cccaa",
            "created_at": "2024-12-24T15:40:47Z",
            "diff_hunk": "@@ -138,6 +138,163 @@ Debugging tests\n   Then put `screen:snapshot_util()` anywhere in your test. See the comments in\n   `test/functional/ui/screen.lua` for more info.\n \n+Debugging Lua test code\n+-----------------------\n+\n+Debugging Lua test code is a bit involved. Get your shopping list ready, you'll\n+need to install and configure:\n+\n+1. [nvim-dap](https://github.com/mfussenegger/nvim-dap)\n+2. [local-lua-debugger-vscode](https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation#local-lua-debugger-vscode)\n+3. [nlua](https://github.com/mfussenegger/nlua)\n+4. [one-small-step-for-vimkind](https://github.com/jbyuki/one-small-step-for-vimkind) (called `osv`)\n+5. A `nbusted` command in `$PATH`. This command can be a copy of `busted` with\n+   `exec '/usr/bin/lua5.1'\"` replaced with `\"exec '/usr/bin/nlua'\"` (or the\n+   path to your `nlua`)\n+\n+\n+The setup roughly looks like this:\n+\n+```\n+ ┌─────────────────────────┐\n+ │ nvim used for debugging │◄────┐\n+ └─────────────────────────┘     │\n+            │                    │\n+            ▼                    │\n+   ┌─────────────────┐           │\n+   │ local-lua-debug │           │\n+   └─────────────────┘           │\n+           │                     │\n+           ▼                     │\n+      ┌─────────┐                │\n+      │ nbusted │                │\n+      └─────────┘                │\n+           │                     │\n+           ▼                     │\n+      ┌───────────┐              │\n+      │ test-case │              │\n+      └───────────┘              │\n+           │                     │\n+           ▼                     │\n+   ┌────────────────────┐        │\n+   │ nvim test-instance │        │\n+   └────────────────────┘        │\n+     │   ┌─────┐                 │\n+     └──►│ osv │─────────────────┘\n+         └─────┘\n+```\n+\n+\n+With these installed you can use a configuration like this:\n+\n+\n+```lua\n+local dap = require(\"dap\")\n+\n+\n+local function free_port()\n+  local tcp = vim.loop.new_tcp()\n+  assert(tcp)\n+  tcp:bind('127.0.0.1', 0)\n+  local port = tcp:getsockname().port\n+  tcp:shutdown()\n+  tcp:close()\n+  return port\n+end\n+\n+\n+local name = \"nvim-test-case\" -- arbitrary name\n+local config = {\n+  name = name,\n+\n+  -- value of type must match the key used in `dap.adapters[\"local-lua\"] = ...` from step 2)\n+  type = \"local-lua\",\n+\n+  request = \"launch\",\n+  cwd = \"${workspaceFolder}\",\n+  program = {\n+    command = \"nbusted\",\n+  },\n+  args = {\n+    \"--ignore-lua\",\n+    \"--lazy\",\n+    \"--helper=test/functional/preload.lua\",\n+    \"--lpath=build/?.lua\",\n+    \"--lpath=?.lua\",\n+\n+    -- path to file to debug, could be replaced with a hardcoded string\n+    function()\n+      return vim.api.nvim_buf_get_name(0)\n+    end,\n+\n+    -- You can filter to specific test-case by adding:\n+    -- '--filter=\"' .. test_case_name .. '\"',\n+  },\n+  env = {\n+    OSV_PORT = free_port\n+  }\n+}\n+\n+-- Whenever the config is used it needs to launch a second debug session that attaches to `osv`\n+-- This makes it possible to step into `exec_lua` code blocks\n+setmetatable(config, {\n+\n+  __call = function(c)\n+    ---@param session dap.Session\n+    dap.listeners.after.event_initialized[\"nvim_debug\"] = function(session)\n+      if session.config.name ~= name then\n+        return\n+      end\n+      dap.listeners.after.event_initialized[\"nvim_debug\"] = nil\n+      vim.defer_fn(function()\n+        dap.run({\n+          name = \"attach-osv\",\n+          type = \"nlua\", -- value must match the `dap.adapters` definition key for osv\n+          request = \"attach\",\n+          port = session.config.env.OSV_PORT,\n+        })\n+      end, 500)\n+    end\n+\n+    return c\n+  end,\n+})\n+\n+```\n+\n+You can either add this configuration to your `dap.configurations.lua` list as\n+described in `:help dap-configuration` or create it dynamically in a\n+user-command or function and call it directly via `dap.run(config)`. The latter\n+is useful if you use tree-sitter to find the test case around a cursor location\n+with a query like the following and set the `--filter` property to it.\n+\n+```query\n+(function_call\n+  name: (identifier) @name (#any-of? @name \"describe\" \"it\")\n+  arguments: (arguments\n+    (string) @str\n+  )\n+)\n+```\n+\n+Limitations:\n+\n+- You need to add the following boilerplate to each spec file where you want to\n+  be able to stop at breakpoints within the test-case code:\n+\n+```\n+if os.getenv(\"LOCAL_LUA_DEBUGGER_VSCODE\") == \"1\" then\n+  require(\"lldebugger\").start()\n+end\n+```\n+\n+This is a [local-lua-debugger\n+limitation](https://github.com/tomblind/local-lua-debugger-vscode?tab=readme-ov-file#busted)\n+\n+- You cannot step into code of files which get baked into the nvim binary like\n+  the `shared.lua`.",
            "html_url": "https://github.com/neovim/neovim/pull/31697#discussion_r1896835348",
            "id": 1896835348,
            "line": 295,
            "node_id": "PRRC_kwDOAPphoM5xD2kU",
            "original_commit_id": "8f47e1ab72f73e71c749a0f27b6d311cc44cccaa",
            "original_line": 295,
            "original_position": 158,
            "original_start_line": null,
            "path": "test/README.md",
            "position": 158,
            "pull_request_review_id": 2522074325,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31697",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896835348/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T15:40:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896835348",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31697#discussion_r1897375282"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31697"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897375282"
                }
            },
            "author_association": "MEMBER",
            "body": "I wasn't aware of `--luamod-dev`. It should work but probably needs to be set for testnvim instance - could probably do that also automatically under the `OSV_PORT` env block?",
            "commit_id": "8f47e1ab72f73e71c749a0f27b6d311cc44cccaa",
            "created_at": "2024-12-25T13:45:59Z",
            "diff_hunk": "@@ -138,6 +138,163 @@ Debugging tests\n   Then put `screen:snapshot_util()` anywhere in your test. See the comments in\n   `test/functional/ui/screen.lua` for more info.\n \n+Debugging Lua test code\n+-----------------------\n+\n+Debugging Lua test code is a bit involved. Get your shopping list ready, you'll\n+need to install and configure:\n+\n+1. [nvim-dap](https://github.com/mfussenegger/nvim-dap)\n+2. [local-lua-debugger-vscode](https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation#local-lua-debugger-vscode)\n+3. [nlua](https://github.com/mfussenegger/nlua)\n+4. [one-small-step-for-vimkind](https://github.com/jbyuki/one-small-step-for-vimkind) (called `osv`)\n+5. A `nbusted` command in `$PATH`. This command can be a copy of `busted` with\n+   `exec '/usr/bin/lua5.1'\"` replaced with `\"exec '/usr/bin/nlua'\"` (or the\n+   path to your `nlua`)\n+\n+\n+The setup roughly looks like this:\n+\n+```\n+ ┌─────────────────────────┐\n+ │ nvim used for debugging │◄────┐\n+ └─────────────────────────┘     │\n+            │                    │\n+            ▼                    │\n+   ┌─────────────────┐           │\n+   │ local-lua-debug │           │\n+   └─────────────────┘           │\n+           │                     │\n+           ▼                     │\n+      ┌─────────┐                │\n+      │ nbusted │                │\n+      └─────────┘                │\n+           │                     │\n+           ▼                     │\n+      ┌───────────┐              │\n+      │ test-case │              │\n+      └───────────┘              │\n+           │                     │\n+           ▼                     │\n+   ┌────────────────────┐        │\n+   │ nvim test-instance │        │\n+   └────────────────────┘        │\n+     │   ┌─────┐                 │\n+     └──►│ osv │─────────────────┘\n+         └─────┘\n+```\n+\n+\n+With these installed you can use a configuration like this:\n+\n+\n+```lua\n+local dap = require(\"dap\")\n+\n+\n+local function free_port()\n+  local tcp = vim.loop.new_tcp()\n+  assert(tcp)\n+  tcp:bind('127.0.0.1', 0)\n+  local port = tcp:getsockname().port\n+  tcp:shutdown()\n+  tcp:close()\n+  return port\n+end\n+\n+\n+local name = \"nvim-test-case\" -- arbitrary name\n+local config = {\n+  name = name,\n+\n+  -- value of type must match the key used in `dap.adapters[\"local-lua\"] = ...` from step 2)\n+  type = \"local-lua\",\n+\n+  request = \"launch\",\n+  cwd = \"${workspaceFolder}\",\n+  program = {\n+    command = \"nbusted\",\n+  },\n+  args = {\n+    \"--ignore-lua\",\n+    \"--lazy\",\n+    \"--helper=test/functional/preload.lua\",\n+    \"--lpath=build/?.lua\",\n+    \"--lpath=?.lua\",\n+\n+    -- path to file to debug, could be replaced with a hardcoded string\n+    function()\n+      return vim.api.nvim_buf_get_name(0)\n+    end,\n+\n+    -- You can filter to specific test-case by adding:\n+    -- '--filter=\"' .. test_case_name .. '\"',\n+  },\n+  env = {\n+    OSV_PORT = free_port\n+  }\n+}\n+\n+-- Whenever the config is used it needs to launch a second debug session that attaches to `osv`\n+-- This makes it possible to step into `exec_lua` code blocks\n+setmetatable(config, {\n+\n+  __call = function(c)\n+    ---@param session dap.Session\n+    dap.listeners.after.event_initialized[\"nvim_debug\"] = function(session)\n+      if session.config.name ~= name then\n+        return\n+      end\n+      dap.listeners.after.event_initialized[\"nvim_debug\"] = nil\n+      vim.defer_fn(function()\n+        dap.run({\n+          name = \"attach-osv\",\n+          type = \"nlua\", -- value must match the `dap.adapters` definition key for osv\n+          request = \"attach\",\n+          port = session.config.env.OSV_PORT,\n+        })\n+      end, 500)\n+    end\n+\n+    return c\n+  end,\n+})\n+\n+```\n+\n+You can either add this configuration to your `dap.configurations.lua` list as\n+described in `:help dap-configuration` or create it dynamically in a\n+user-command or function and call it directly via `dap.run(config)`. The latter\n+is useful if you use tree-sitter to find the test case around a cursor location\n+with a query like the following and set the `--filter` property to it.\n+\n+```query\n+(function_call\n+  name: (identifier) @name (#any-of? @name \"describe\" \"it\")\n+  arguments: (arguments\n+    (string) @str\n+  )\n+)\n+```\n+\n+Limitations:\n+\n+- You need to add the following boilerplate to each spec file where you want to\n+  be able to stop at breakpoints within the test-case code:\n+\n+```\n+if os.getenv(\"LOCAL_LUA_DEBUGGER_VSCODE\") == \"1\" then\n+  require(\"lldebugger\").start()\n+end\n+```\n+\n+This is a [local-lua-debugger\n+limitation](https://github.com/tomblind/local-lua-debugger-vscode?tab=readme-ov-file#busted)\n+\n+- You cannot step into code of files which get baked into the nvim binary like\n+  the `shared.lua`.",
            "html_url": "https://github.com/neovim/neovim/pull/31697#discussion_r1897375282",
            "id": 1897375282,
            "in_reply_to_id": 1896835348,
            "line": 295,
            "node_id": "PRRC_kwDOAPphoM5xF6Yy",
            "original_commit_id": "8f47e1ab72f73e71c749a0f27b6d311cc44cccaa",
            "original_line": 295,
            "original_position": 158,
            "original_start_line": null,
            "path": "test/README.md",
            "position": 158,
            "pull_request_review_id": 2522597954,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31697",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897375282/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-25T13:45:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897375282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31697#discussion_r1897461790"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31697"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897461790"
                }
            },
            "author_association": "MEMBER",
            "body": "I have not yet tried this out, but yes that seems appropriate to me. Making sure we can step into all of our runtime when `OSV_PORT` is set sounds reasonable.\r\n\r\nAnd yeah I have at times forgot about `--luamod-dev` and then found it to be missing from our manpage. Should it be added there, or was it omitted on purpose?",
            "commit_id": "8f47e1ab72f73e71c749a0f27b6d311cc44cccaa",
            "created_at": "2024-12-25T19:52:11Z",
            "diff_hunk": "@@ -138,6 +138,163 @@ Debugging tests\n   Then put `screen:snapshot_util()` anywhere in your test. See the comments in\n   `test/functional/ui/screen.lua` for more info.\n \n+Debugging Lua test code\n+-----------------------\n+\n+Debugging Lua test code is a bit involved. Get your shopping list ready, you'll\n+need to install and configure:\n+\n+1. [nvim-dap](https://github.com/mfussenegger/nvim-dap)\n+2. [local-lua-debugger-vscode](https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation#local-lua-debugger-vscode)\n+3. [nlua](https://github.com/mfussenegger/nlua)\n+4. [one-small-step-for-vimkind](https://github.com/jbyuki/one-small-step-for-vimkind) (called `osv`)\n+5. A `nbusted` command in `$PATH`. This command can be a copy of `busted` with\n+   `exec '/usr/bin/lua5.1'\"` replaced with `\"exec '/usr/bin/nlua'\"` (or the\n+   path to your `nlua`)\n+\n+\n+The setup roughly looks like this:\n+\n+```\n+ ┌─────────────────────────┐\n+ │ nvim used for debugging │◄────┐\n+ └─────────────────────────┘     │\n+            │                    │\n+            ▼                    │\n+   ┌─────────────────┐           │\n+   │ local-lua-debug │           │\n+   └─────────────────┘           │\n+           │                     │\n+           ▼                     │\n+      ┌─────────┐                │\n+      │ nbusted │                │\n+      └─────────┘                │\n+           │                     │\n+           ▼                     │\n+      ┌───────────┐              │\n+      │ test-case │              │\n+      └───────────┘              │\n+           │                     │\n+           ▼                     │\n+   ┌────────────────────┐        │\n+   │ nvim test-instance │        │\n+   └────────────────────┘        │\n+     │   ┌─────┐                 │\n+     └──►│ osv │─────────────────┘\n+         └─────┘\n+```\n+\n+\n+With these installed you can use a configuration like this:\n+\n+\n+```lua\n+local dap = require(\"dap\")\n+\n+\n+local function free_port()\n+  local tcp = vim.loop.new_tcp()\n+  assert(tcp)\n+  tcp:bind('127.0.0.1', 0)\n+  local port = tcp:getsockname().port\n+  tcp:shutdown()\n+  tcp:close()\n+  return port\n+end\n+\n+\n+local name = \"nvim-test-case\" -- arbitrary name\n+local config = {\n+  name = name,\n+\n+  -- value of type must match the key used in `dap.adapters[\"local-lua\"] = ...` from step 2)\n+  type = \"local-lua\",\n+\n+  request = \"launch\",\n+  cwd = \"${workspaceFolder}\",\n+  program = {\n+    command = \"nbusted\",\n+  },\n+  args = {\n+    \"--ignore-lua\",\n+    \"--lazy\",\n+    \"--helper=test/functional/preload.lua\",\n+    \"--lpath=build/?.lua\",\n+    \"--lpath=?.lua\",\n+\n+    -- path to file to debug, could be replaced with a hardcoded string\n+    function()\n+      return vim.api.nvim_buf_get_name(0)\n+    end,\n+\n+    -- You can filter to specific test-case by adding:\n+    -- '--filter=\"' .. test_case_name .. '\"',\n+  },\n+  env = {\n+    OSV_PORT = free_port\n+  }\n+}\n+\n+-- Whenever the config is used it needs to launch a second debug session that attaches to `osv`\n+-- This makes it possible to step into `exec_lua` code blocks\n+setmetatable(config, {\n+\n+  __call = function(c)\n+    ---@param session dap.Session\n+    dap.listeners.after.event_initialized[\"nvim_debug\"] = function(session)\n+      if session.config.name ~= name then\n+        return\n+      end\n+      dap.listeners.after.event_initialized[\"nvim_debug\"] = nil\n+      vim.defer_fn(function()\n+        dap.run({\n+          name = \"attach-osv\",\n+          type = \"nlua\", -- value must match the `dap.adapters` definition key for osv\n+          request = \"attach\",\n+          port = session.config.env.OSV_PORT,\n+        })\n+      end, 500)\n+    end\n+\n+    return c\n+  end,\n+})\n+\n+```\n+\n+You can either add this configuration to your `dap.configurations.lua` list as\n+described in `:help dap-configuration` or create it dynamically in a\n+user-command or function and call it directly via `dap.run(config)`. The latter\n+is useful if you use tree-sitter to find the test case around a cursor location\n+with a query like the following and set the `--filter` property to it.\n+\n+```query\n+(function_call\n+  name: (identifier) @name (#any-of? @name \"describe\" \"it\")\n+  arguments: (arguments\n+    (string) @str\n+  )\n+)\n+```\n+\n+Limitations:\n+\n+- You need to add the following boilerplate to each spec file where you want to\n+  be able to stop at breakpoints within the test-case code:\n+\n+```\n+if os.getenv(\"LOCAL_LUA_DEBUGGER_VSCODE\") == \"1\" then\n+  require(\"lldebugger\").start()\n+end\n+```\n+\n+This is a [local-lua-debugger\n+limitation](https://github.com/tomblind/local-lua-debugger-vscode?tab=readme-ov-file#busted)\n+\n+- You cannot step into code of files which get baked into the nvim binary like\n+  the `shared.lua`.",
            "html_url": "https://github.com/neovim/neovim/pull/31697#discussion_r1897461790",
            "id": 1897461790,
            "in_reply_to_id": 1896835348,
            "line": 295,
            "node_id": "PRRC_kwDOAPphoM5xGPge",
            "original_commit_id": "8f47e1ab72f73e71c749a0f27b6d311cc44cccaa",
            "original_line": 295,
            "original_position": 158,
            "original_start_line": null,
            "path": "test/README.md",
            "position": 158,
            "pull_request_review_id": 2522655058,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31697",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897461790/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-25T19:52:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897461790",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31697/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31697/commits",
    "created_at": "2024-12-23T11:43:10Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31697.diff",
    "draft": false,
    "head": {
        "label": "mfussenegger:lua-test-debug",
        "ref": "lua-test-debug",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/mfussenegger/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/mfussenegger/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/mfussenegger/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/mfussenegger/neovim/branches{/branch}",
            "clone_url": "https://github.com/mfussenegger/neovim.git",
            "collaborators_url": "https://api.github.com/repos/mfussenegger/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/mfussenegger/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/mfussenegger/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/mfussenegger/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/mfussenegger/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/mfussenegger/neovim/contributors",
            "created_at": "2020-01-25T15:44:28Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/mfussenegger/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/mfussenegger/neovim/downloads",
            "events_url": "https://api.github.com/repos/mfussenegger/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/mfussenegger/neovim/forks",
            "full_name": "mfussenegger/neovim",
            "git_commits_url": "https://api.github.com/repos/mfussenegger/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/mfussenegger/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/mfussenegger/neovim/git/tags{/sha}",
            "git_url": "git://github.com/mfussenegger/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/mfussenegger/neovim/hooks",
            "html_url": "https://github.com/mfussenegger/neovim",
            "id": 236190222,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/mfussenegger/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/mfussenegger/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/mfussenegger/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/mfussenegger/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/mfussenegger/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/mfussenegger/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/mfussenegger/neovim/merges",
            "milestones_url": "https://api.github.com/repos/mfussenegger/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMzYxOTAyMjI=",
            "notifications_url": "https://api.github.com/repos/mfussenegger/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/mfussenegger/neovim/pulls{/number}",
            "pushed_at": "2024-12-29T12:49:30Z",
            "releases_url": "https://api.github.com/repos/mfussenegger/neovim/releases{/id}",
            "size": 293441,
            "ssh_url": "git@github.com:mfussenegger/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/mfussenegger/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/mfussenegger/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/mfussenegger/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/mfussenegger/neovim/subscription",
            "svn_url": "https://github.com/mfussenegger/neovim",
            "tags_url": "https://api.github.com/repos/mfussenegger/neovim/tags",
            "teams_url": "https://api.github.com/repos/mfussenegger/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/mfussenegger/neovim/git/trees{/sha}",
            "updated_at": "2024-01-03T04:13:43Z",
            "url": "https://api.github.com/repos/mfussenegger/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "8f47e1ab72f73e71c749a0f27b6d311cc44cccaa",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
            "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
            "followers_url": "https://api.github.com/users/mfussenegger/followers",
            "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
            "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mfussenegger",
            "id": 38700,
            "login": "mfussenegger",
            "node_id": "MDQ6VXNlcjM4NzAw",
            "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
            "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
            "repos_url": "https://api.github.com/users/mfussenegger/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mfussenegger",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31697",
    "id": 2249372640,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31697",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 110418643,
            "name": "test",
            "node_id": "MDU6TGFiZWwxMTA0MTg2NDM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/test"
        },
        {
            "color": "0052CC",
            "default": false,
            "description": "",
            "id": 6664957181,
            "name": "ci:skip-news",
            "node_id": "LA_kwDOAPphoM8AAAABjUMs_Q",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ci:skip-news"
        }
    ],
    "locked": false,
    "merge_commit_sha": "34cd94812d42bb6b9ddd54229eb497f660736b4d",
    "merged_at": "2024-12-24T11:29:39Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6GErPg",
    "number": 31697,
    "patch_url": "https://github.com/neovim/neovim/pull/31697.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31697/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/8f47e1ab72f73e71c749a0f27b6d311cc44cccaa",
    "title": "feat(test): support and document lua test case debugging",
    "updated_at": "2024-12-25T19:52:11Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31697",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
        "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
        "followers_url": "https://api.github.com/users/mfussenegger/followers",
        "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
        "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mfussenegger",
        "id": 38700,
        "login": "mfussenegger",
        "node_id": "MDQ6VXNlcjM4NzAw",
        "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
        "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
        "repos_url": "https://api.github.com/users/mfussenegger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mfussenegger",
        "user_view_type": "public"
    }
}