{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24703/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24703/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/24703"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24703"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24703/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/06adc102f9ea2a433e49cd9595688bd3442616e8"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4861,
            "forks_count": 4861,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1675,
            "open_issues_count": 1675,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-09-13T01:16:05Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 240992,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 69307,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-09-12T23:39:31Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 69307,
            "watchers_count": 69307,
            "web_commit_signoff_required": false
        },
        "sha": "ecd99e7dd7383b708d9235e5b3d398b0216d65c7",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Closes #24678. I've implemented the 3 basic requirements of the issue + being able to open the editor from the inspector.\r\n\r\nHowever, I still have a couple of implementation questions for y'all experienced maintainers:\r\n<s> \n- Should we add a `title` option such as the one that `inspect_tree` accepts?\r\n- I kept it simple for now and I'm only highlighting the matches of the entire query, not specific captures like the `playground` plugin does. Are you okay with that?\r\n- I feel like there's quite a bit of code repetition in the inspector and editor methods. Do we want to create a shared helper function or just leave the 2 separate for now?\r\n- Should I mention this in `news.txt`?</s> (All questions answered!)\r\n\r\nAlso this is my first significant contribution to this repo so lmk if I missed an important step :)",
    "closed_at": "2023-08-25T18:17:36Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1293588920"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293588920"
                }
            },
            "author_association": "MEMBER",
            "body": "Include `TextChanged` here too\r\n\r\n```suggestion\r\n  api.nvim_create_autocmd({ 'InsertLeave', 'TextChanged' }, {\r\n```",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-14T14:58:26Z",
            "diff_hunk": "@@ -443,4 +454,129 @@ function M.inspect_tree(opts)\n   })\n end\n \n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    local w = vim.b[buf].dev_edit\n+    if api.nvim_win_is_valid(w) then\n+      api.nvim_win_close(w, true)\n+    end\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  -- TODO: Also add title option?\n+\n+  vim.b[buf].dev_edit = w\n+  vim.wo[w].scrolloff = 5\n+  vim.wo[w].wrap = false\n+  vim.wo[w].foldmethod = 'manual' -- disable folding\n+  vim.bo[b].buflisted = false\n+  vim.bo[b].buftype = 'nofile'\n+  vim.bo[b].bufhidden = 'wipe'\n+  vim.bo[b].filetype = 'query'\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-edit', {})\n+  api.nvim_create_autocmd('InsertLeave', {",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1293588920",
            "id": 1293588920,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NGpm4",
            "original_commit_id": "2473b0316fa9f6841a88aaaa0603e511a67f8a48",
            "original_line": 527,
            "original_position": 119,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1577041857,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293588920/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-14T15:04:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293588920",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1293593271"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293593271"
                }
            },
            "author_association": "MEMBER",
            "body": "Idea: also show the capture name as virtual text, in addition to highlighting in the buffer.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-14T15:01:29Z",
            "diff_hunk": "@@ -443,4 +454,129 @@ function M.inspect_tree(opts)\n   })\n end\n \n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    local w = vim.b[buf].dev_edit\n+    if api.nvim_win_is_valid(w) then\n+      api.nvim_win_close(w, true)\n+    end\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  -- TODO: Also add title option?\n+\n+  vim.b[buf].dev_edit = w\n+  vim.wo[w].scrolloff = 5\n+  vim.wo[w].wrap = false\n+  vim.wo[w].foldmethod = 'manual' -- disable folding\n+  vim.bo[b].buflisted = false\n+  vim.bo[b].buftype = 'nofile'\n+  vim.bo[b].bufhidden = 'wipe'\n+  vim.bo[b].filetype = 'query'\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-edit', {})\n+  api.nvim_create_autocmd('InsertLeave', {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      vim.treesitter.query.lint(b, { langs = lang, clear = false })\n+\n+      api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+      local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+      local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+      if ok_query then\n+        for _, node, _ in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = end_col,\n+            hl_group = 'Visual',\n+          })\n+        end",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1293593271",
            "id": 1293593271,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NGqq3",
            "original_commit_id": "2473b0316fa9f6841a88aaaa0603e511a67f8a48",
            "original_line": 555,
            "original_position": 136,
            "original_start_line": 539,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1577041857,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293593271/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-14T15:04:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293593271",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1293596018"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293596018"
                }
            },
            "author_association": "MEMBER",
            "body": "Needs a `BufEnter` autocommand to re-enable the highlights after entering the buffer again. Right now, the highlights are only applied on `InsertLeave`. If you leave the query editor, the highlights go away.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-14T15:03:14Z",
            "diff_hunk": "@@ -443,4 +454,129 @@ function M.inspect_tree(opts)\n   })\n end\n \n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    local w = vim.b[buf].dev_edit\n+    if api.nvim_win_is_valid(w) then\n+      api.nvim_win_close(w, true)\n+    end\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  -- TODO: Also add title option?\n+\n+  vim.b[buf].dev_edit = w\n+  vim.wo[w].scrolloff = 5\n+  vim.wo[w].wrap = false\n+  vim.wo[w].foldmethod = 'manual' -- disable folding\n+  vim.bo[b].buflisted = false\n+  vim.bo[b].buftype = 'nofile'\n+  vim.bo[b].bufhidden = 'wipe'\n+  vim.bo[b].filetype = 'query'\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-edit', {})\n+  api.nvim_create_autocmd('InsertLeave', {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      vim.treesitter.query.lint(b, { langs = lang, clear = false })\n+\n+      api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+      local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+      local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+      if ok_query then\n+        for _, node, _ in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = end_col,\n+            hl_group = 'Visual',\n+          })\n+        end\n+      end\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = buf,\n+    callback = function()\n+      if not api.nvim_buf_is_loaded(b) then\n+        return true\n+      end\n+\n+      api.nvim_buf_clear_namespace(b, ns, 0, -1)\n+    end,\n+  })",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1293596018",
            "id": 1293596018,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NGrVy",
            "original_commit_id": "2473b0316fa9f6841a88aaaa0603e511a67f8a48",
            "original_line": 585,
            "original_position": 157,
            "original_start_line": 548,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1577041857,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293596018/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-14T15:04:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293596018",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296615733"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296615733"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure if this is the right place to document this highlight group. I don't want it to be confusing with the other highlighting section...",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-17T02:47:45Z",
            "diff_hunk": "@@ -1206,4 +1223,10 @@ LanguageTree:trees()                                    *LanguageTree:trees()*\n     Returns all trees this language tree contains. Does not include child\n     languages.\n \n+==============================================================================\n+QUERY EDITOR HIGHLIGHT GROUPS                          query-highlight-groups\n+\n+                                                  *hl-TsQueryEditorCapture*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296615733",
            "id": 1296615733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSMk1",
            "original_commit_id": "36c0c60bc8822fdcb2505b74e242c486d03b20e3",
            "original_line": 1229,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1581678641,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296615733/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T02:48:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296615733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296693325"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296693325"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd use the same logic as for the tree view: just use one of the default search highlights (`CurSearch`?) No need for a separate highlight (for now).",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-17T05:29:08Z",
            "diff_hunk": "@@ -1206,4 +1223,10 @@ LanguageTree:trees()                                    *LanguageTree:trees()*\n     Returns all trees this language tree contains. Does not include child\n     languages.\n \n+==============================================================================\n+QUERY EDITOR HIGHLIGHT GROUPS                          query-highlight-groups\n+\n+                                                  *hl-TsQueryEditorCapture*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296693325",
            "id": 1296693325,
            "in_reply_to_id": 1296615733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSfhN",
            "original_commit_id": "36c0c60bc8822fdcb2505b74e242c486d03b20e3",
            "original_line": 1229,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1581805978,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296693325/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T05:29:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296693325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296699218"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296699218"
                }
            },
            "author_association": "MEMBER",
            "body": "I think `NonText` is more appropriate, since it's a virtual text thing and `CurSearch` is usually a very bright highlight.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-17T05:39:16Z",
            "diff_hunk": "@@ -1206,4 +1223,10 @@ LanguageTree:trees()                                    *LanguageTree:trees()*\n     Returns all trees this language tree contains. Does not include child\n     languages.\n \n+==============================================================================\n+QUERY EDITOR HIGHLIGHT GROUPS                          query-highlight-groups\n+\n+                                                  *hl-TsQueryEditorCapture*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296699218",
            "id": 1296699218,
            "in_reply_to_id": 1296615733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSg9S",
            "original_commit_id": "36c0c60bc8822fdcb2505b74e242c486d03b20e3",
            "original_line": 1229,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1581814668,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296699218/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T05:39:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296699218",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296704136"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296704136"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh, sorry, this is for the capture name virtual text, not the highlight; I didn't read properly. Then I'd use the same one that the tree view uses for the language names (if you press `I`)?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-17T05:47:21Z",
            "diff_hunk": "@@ -1206,4 +1223,10 @@ LanguageTree:trees()                                    *LanguageTree:trees()*\n     Returns all trees this language tree contains. Does not include child\n     languages.\n \n+==============================================================================\n+QUERY EDITOR HIGHLIGHT GROUPS                          query-highlight-groups\n+\n+                                                  *hl-TsQueryEditorCapture*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296704136",
            "id": 1296704136,
            "in_reply_to_id": 1296615733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSiKI",
            "original_commit_id": "36c0c60bc8822fdcb2505b74e242c486d03b20e3",
            "original_line": 1229,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1581821715,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296704136/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T05:47:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296704136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296706528"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296706528"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh that's `Title`. I'll change it then.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-17T05:51:29Z",
            "diff_hunk": "@@ -1206,4 +1223,10 @@ LanguageTree:trees()                                    *LanguageTree:trees()*\n     Returns all trees this language tree contains. Does not include child\n     languages.\n \n+==============================================================================\n+QUERY EDITOR HIGHLIGHT GROUPS                          query-highlight-groups\n+\n+                                                  *hl-TsQueryEditorCapture*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296706528",
            "id": 1296706528,
            "in_reply_to_id": 1296615733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSivg",
            "original_commit_id": "36c0c60bc8822fdcb2505b74e242c486d03b20e3",
            "original_line": 1229,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1581825418,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296706528/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T05:51:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296706528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296735196"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296735196"
                }
            },
            "author_association": "MEMBER",
            "body": "While debugging this I noticed that `cursor_word` seems to include preceding whitespace. That is, if I have something like `) @func` then `cursor_word` will expand to `@func` when the cursor is just after the `)` or the space after it.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-17T06:31:19Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296735196",
            "id": 1296735196,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSpvc",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 536,
            "original_position": 169,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1581869211,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296735196/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T06:31:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296735196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1297080780"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297080780"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim.F.npcall`  instead of `pcall` could be used (query will be null in case of failure, `ok_query` no longer needed)",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-17T11:21:31Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1297080780",
            "id": 1297080780,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NT-HM",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 532,
            "original_position": 167,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1582397595,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297080780/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T11:21:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297080780",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7189118?v=4",
                "events_url": "https://api.github.com/users/theHamsta/events{/privacy}",
                "followers_url": "https://api.github.com/users/theHamsta/followers",
                "following_url": "https://api.github.com/users/theHamsta/following{/other_user}",
                "gists_url": "https://api.github.com/users/theHamsta/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theHamsta",
                "id": 7189118,
                "login": "theHamsta",
                "node_id": "MDQ6VXNlcjcxODkxMTg=",
                "organizations_url": "https://api.github.com/users/theHamsta/orgs",
                "received_events_url": "https://api.github.com/users/theHamsta/received_events",
                "repos_url": "https://api.github.com/users/theHamsta/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theHamsta/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theHamsta/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theHamsta"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1297368439"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297368439"
                }
            },
            "author_association": "MEMBER",
            "body": "It looks like a personal preference though. Would you like me to change line 94 as well then? ",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-17T15:11:56Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1297368439",
            "id": 1297368439,
            "in_reply_to_id": 1297080780,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NVEV3",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 532,
            "original_position": 167,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1582855802,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297368439/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T15:11:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297368439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1297373260"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297373260"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's avoid using `vim.F` for now. Its future is tenuous and there's little gain in this case.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-17T15:15:48Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1297373260",
            "id": 1297373260,
            "in_reply_to_id": 1297080780,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NVFhM",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 532,
            "original_position": 167,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1582864597,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297373260/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T15:15:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297373260",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1298008338"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1298008338"
                }
            },
            "author_association": "MEMBER",
            "body": "That's fine; better to highlight when not expected (as long as it's clear from context _what_ is highlighted) than not to highlight when it should.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-18T05:05:29Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1298008338",
            "id": 1298008338,
            "in_reply_to_id": 1296735196,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NXgkS",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 536,
            "original_position": 169,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1583855611,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1298008338/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-18T05:05:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1298008338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1299286797"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299286797"
                }
            },
            "author_association": "MEMBER",
            "body": "\r\nSuggestion: add an `opts` field with `lang` to `query.omnifunc` that is used instead of `guess_lang` if set, and create a closure here to set `vim.bo.omnifunc` to.\r\n\r\n(Could do the same in the query ftplugin; that'd save the constant lookup.)\r\n",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-20T01:32:43Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1299286797",
            "id": 1299286797,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NcYsN",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 519,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1585772739,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299286797/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-20T01:32:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299286797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1299414252"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414252"
                }
            },
            "author_association": "MEMBER",
            "body": "Thanks for the hint @clason! I'm having some trouble creating such closure though. I've tried:\r\n```lua\r\n-- Attempt 1\r\nlocal omnifunc_opts = { lang = lang }\r\nvim.bo[b].omnifunc =\r\n  '{findstart, base -> v:lua.vim.treesitter.query.omnifunc(findstart, base, omnifunc_opts)}'\r\n\r\n-- Attempt 2\r\n-- Inside M.edit_query\r\nM.omnifunc = function(findstart, base)\r\n  return vim.treesitter.query.omnifunc(findstart, base, { lang = lang })\r\nend\r\nvim.bo[b].omnifunc = 'v:lua.vim.treesitter.dev.omnifunc'\r\n```\r\n\r\nIs this the right syntax?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-20T17:52:17Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1299414252",
            "id": 1299414252,
            "in_reply_to_id": 1299286797,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nc3zs",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 519,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1585944166,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414252/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-20T17:52:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1299414589"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414589"
                }
            },
            "author_association": "MEMBER",
            "body": "Alternatively I can just add a buffer property to the query editor buffer, do not introduce a new parameter in `omnifunc`, and instead use that new buffer property as a fallback if `guess_query_lang` fails.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-20T17:55:24Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1299414589",
            "id": 1299414589,
            "in_reply_to_id": 1299286797,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nc349",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 519,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1585944446,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414589/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-20T17:55:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414589",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1299425373"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299425373"
                }
            },
            "author_association": "MEMBER",
            "body": "Okay I came up with another hack. Let me know what you think :)",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-20T19:34:31Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1299425373",
            "id": 1299425373,
            "in_reply_to_id": 1299286797,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nc6hd",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 519,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1585953596,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299425373/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-20T19:34:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299425373",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300160706"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300160706"
                }
            },
            "author_association": "MEMBER",
            "body": "That certainly works, and I can't think of any downsides off the top of my head.\r\n\r\n(Closure -- variant 2 of course; no need to do it in vimscript -- needs to be in global scope, which makes it a bit trickier.)\r\n\r\n",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-21T14:04:25Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300160706",
            "id": 1300160706,
            "in_reply_to_id": 1299286797,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NfuDC",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 519,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1587073369,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300160706/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T14:04:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300160706",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300226016"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300226016"
                }
            },
            "author_association": "MEMBER",
            "body": "Bikeshed: should this be `vim.treesitter.query.edit()` instead? We already have the `.query` namespace.\r\n\r\ncc @clason @lewis6991 @justinmk ",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-21T14:53:18Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300226016",
            "id": 1300226016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nf9_g",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 551,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1587181609,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300226016/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T14:53:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300226016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300240663"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300240663"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, I was starting to say \"no strong feelings either way\", but I worry that this gives the wrong impression (editing the _current_ query). \r\n\r\nMaybe `preview` (`vim.treesitter.query.preview()` and `:PreviewQuery`)?\r\n ",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-21T15:04:30Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300240663",
            "id": 1300240663,
            "in_reply_to_id": 1300226016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NgBkX",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 551,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1587208059,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300240663/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T15:04:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300240663",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300253157"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300253157"
                }
            },
            "author_association": "MEMBER",
            "body": "@clason Yeah so the global closure felt weird, and I was also a bit afraid of the impact of adding an extra parameter to a function meant to only have 2 (`findstart` and `base`). I can use that approach though if you prefer.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-21T15:10:22Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300253157",
            "id": 1300253157,
            "in_reply_to_id": 1299286797,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NgEnl",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 519,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1587231186,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300253157/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T15:10:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300253157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300264496"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300264496"
                }
            },
            "author_association": "MEMBER",
            "body": "No, it's fine, your trick is good for now (at least). We can still revisit if it turns out there are problems with it -- and if not, it clearly works fine ;)",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-21T15:15:21Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300264496",
            "id": 1300264496,
            "in_reply_to_id": 1299286797,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NgHYw",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 519,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1587252879,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300264496/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T15:15:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300264496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300269162"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300269162"
                }
            },
            "author_association": "MEMBER",
            "body": "I would find it a bit odd to have the editor and inspector in different namespaces, but if there are plans to expand the editor beyond the playground then maybe it makes sense…",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-21T15:17:31Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300269162",
            "id": 1300269162,
            "in_reply_to_id": 1300226016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NgIhq",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 551,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1587261833,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300269162/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T15:17:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300269162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300277451"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300277451"
                }
            },
            "author_association": "MEMBER",
            "body": "To be honest, I would have preferred to have everything under the same namespace -- be it `dev`, `playground`, `console`, whatever. (No need to have top-level exposed Lua functions if the main entry point is supposed to be the Ex commands.) But I'm in the minority here with my penchant for categorization. \r\n\r\nMy main point here is just that I don't think `vim.treesitter.query.edit()` is a good choice, as it has nothing to do with the \"real\" queries that are handled by the rest of the module.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-21T15:22:24Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300277451",
            "id": 1300277451,
            "in_reply_to_id": 1300226016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NgKjL",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 551,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1587271141,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300277451/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T15:22:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300277451",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300503365"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300503365"
                }
            },
            "author_association": "MEMBER",
            "body": "Sounds good :)",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-21T18:29:29Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300503365",
            "id": 1300503365,
            "in_reply_to_id": 1299286797,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NhBtF",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 519,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1587637893,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300503365/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T18:29:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300503365",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1301127480"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1301127480"
                }
            },
            "author_association": "MEMBER",
            "body": "Alright I don't have a strong opinion about this, so someone that please tell me what to do lol 😅",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-22T07:10:34Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1301127480",
            "id": 1301127480,
            "in_reply_to_id": 1300226016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NjaE4",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 551,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1588616119,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1301127480/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-22T07:10:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1301127480",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303678702"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303678702"
                }
            },
            "author_association": "MEMBER",
            "body": "What happened to this sentence?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:06:05Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303678702",
            "id": 1303678702,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtI7u",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 465,
            "original_position": 103,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592602700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303678702/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T01:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303678702",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303678816"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303678816"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nfunction M.edit_query(opts)\r\n```",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:06:21Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303678816",
            "id": 1303678816,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtI9g",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 477,
            "original_position": 115,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592602700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303678816/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T01:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303678816",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303679632"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303679632"
                }
            },
            "author_association": "MEMBER",
            "body": "We should probably do this check before creating windows and messing with buffer state. I suggest moving this near the top of the function (right after `local buf = ...`).",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:08:34Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303679632",
            "id": 1303679632,
            "line": 534,
            "node_id": "PRRC_kwDOAPphoM5NtJKQ",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 534,
            "original_position": 158,
            "original_start_line": 517,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 178,
            "pull_request_review_id": 1592602700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303679632/reactions"
            },
            "side": "RIGHT",
            "start_line": 531,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T01:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303679632",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303680223"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303680223"
                }
            },
            "author_association": "MEMBER",
            "body": "I won't die on this hill or block this PR over this, but I would _prefer_ to not leave generic `HACK` comments like this. If something needs to change, but it's out of scope of this PR, create an issue and leave a `TODO(#issue)` comment so that it's (1) captured, and (2) cross referenced.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:10:06Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303680223",
            "id": 1303680223,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtJTf",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 525,
            "original_position": 163,
            "original_start_line": 523,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592602700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303680223/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T01:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303680223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303683712"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303683712"
                }
            },
            "author_association": "MEMBER",
            "body": "Anonymous namespaces don't show up in `nvim_get_namespaces()` and can make debugging/introspection more difficult.\r\n\r\n```suggestion\r\n  local ns = api.nvim_create_namespace('treesitter/dev-edit')\r\n```\r\n\r\nI did not do this myself when creating the namespace for the tree view, but I wish I had (and might go back and change that).",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:18:58Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303683712",
            "id": 1303683712,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtKKA",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 527,
            "original_position": 165,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592602700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303683712/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T01:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303683712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303686249"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303686249"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: you don't need `else` after `return`.\r\n\r\n```suggestion\r\n      if\r\n        string.find(cursor_word --[[@as string]], '^@') == nil\r\n      then\r\n        return\r\n      end\r\n\r\n      -- Remove the '@' from the cursor word\r\n      cursor_word = string.sub(cursor_word --[[@as string]], 2)\r\n```",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:21:07Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      else\n+        -- Remove the '@' from the cursor word\n+        cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      end",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303686249",
            "id": 1303686249,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtKxp",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 540,
            "original_position": 181,
            "original_start_line": 536,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592602700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303686249/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T01:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303686249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303686914"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303686914"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: omit `_` if it's the last value\r\n\r\n```suggestion\r\n      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\r\n```",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:21:31Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      else\n+        -- Remove the '@' from the cursor word\n+        cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      end\n+      for id, node, _ in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303686914",
            "id": 1303686914,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtK8C",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 544,
            "original_position": 182,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592602700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303686914/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T01:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303686914",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303688745"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303688745"
                }
            },
            "author_association": "MEMBER",
            "body": "Any reason to use `<cWORD>` over `<cword>`?\r\n\r\nIf I have the following query:\r\n\r\n```\r\n(variable_declaration (variable_list) @foo))\r\n```\r\n\r\nand my cursor is over `@foo`, then `<cWORD>` returns `@foo)` while `<cword>` returns `@foo`. The latter highlights correctly, but the former does not.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:25:43Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303688745",
            "id": 1303688745,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtLYp",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 534,
            "original_position": 172,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592602700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303688745/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T01:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303688745",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303689161"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303689161"
                }
            },
            "author_association": "MEMBER",
            "body": "These highlight groups should probably be configurable, but we can do that in a follow up.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:26:40Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      else\n+        -- Remove the '@' from the cursor word\n+        cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      end\n+      for id, node, _ in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+        local capture_name = query.captures[id]\n+        if capture_name == cursor_word then\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = end_col,\n+            hl_group = 'Visual',\n+            virt_text = {\n+              { capture_name, 'Title' },\n+            },",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303689161",
            "id": 1303689161,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtLfJ",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 553,
            "original_position": 192,
            "original_start_line": 551,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592602700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303689161/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T01:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303689161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303690579"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303690579"
                }
            },
            "author_association": "MEMBER",
            "body": "Suggestion: when the query editor opens, add extra newlines and automatically put the user in insert mode so they can start writing their query right away:\r\n\r\n```suggestion\r\n  api.nvim_buf_set_lines(b, 0, -1, false, {\r\n    ';; Write your query here',\r\n    '',\r\n    '',\r\n  })\r\n  \r\n  vim.cmd \"normal! G\"\r\n  vim.cmd.startinsert()\r\n```",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:30:09Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      else\n+        -- Remove the '@' from the cursor word\n+        cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      end\n+      for id, node, _ in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+        local capture_name = query.captures[id]\n+        if capture_name == cursor_word then\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = end_col,\n+            hl_group = 'Visual',\n+            virt_text = {\n+              { capture_name, 'Title' },\n+            },\n+          })\n+        end\n+      end\n+    end\n+  end\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-edit', {})\n+  api.nvim_create_autocmd({ 'TextChanged', 'InsertLeave' }, {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      vim.treesitter.query.lint(b, { langs = lang, clear = false })\n+      update_highlights()\n+    end,\n+  })\n+  api.nvim_create_autocmd({ 'CursorMoved', 'BufEnter' }, {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      update_highlights()\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = buf,\n+    callback = function()\n+      if not api.nvim_buf_is_loaded(b) then\n+        return true\n       end\n+\n+      api.nvim_buf_clear_namespace(b, ns, 0, -1)\n     end,\n   })\n+  api.nvim_create_autocmd('BufHidden', {\n+    group = group,\n+    buffer = buf,\n+    once = true,\n+    callback = function()\n+      close_win(w)\n+    end,\n+  })\n+\n+  api.nvim_buf_set_lines(b, 0, -1, false, {\n+    ';; Write your query here',\n+  })",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303690579",
            "id": 1303690579,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtL1T",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 601,
            "original_position": 244,
            "original_start_line": 604,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592620698,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303690579/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T01:30:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303690579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303691635"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303691635"
                }
            },
            "author_association": "MEMBER",
            "body": "Also maybe include some simple help text that says that only captures are highlighted (and hint about 'omnifunc'?)\r\n\r\n```\r\n;; Write your query here. Use @captures to highlight matches in the source buffer.\r\n;; Completion for grammar nodes is available (see :h compl-omni)\r\n```",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:32:38Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      else\n+        -- Remove the '@' from the cursor word\n+        cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      end\n+      for id, node, _ in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+        local capture_name = query.captures[id]\n+        if capture_name == cursor_word then\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = end_col,\n+            hl_group = 'Visual',\n+            virt_text = {\n+              { capture_name, 'Title' },\n+            },\n+          })\n+        end\n+      end\n+    end\n+  end\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-edit', {})\n+  api.nvim_create_autocmd({ 'TextChanged', 'InsertLeave' }, {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      vim.treesitter.query.lint(b, { langs = lang, clear = false })\n+      update_highlights()\n+    end,\n+  })\n+  api.nvim_create_autocmd({ 'CursorMoved', 'BufEnter' }, {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      update_highlights()\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = buf,\n+    callback = function()\n+      if not api.nvim_buf_is_loaded(b) then\n+        return true\n       end\n+\n+      api.nvim_buf_clear_namespace(b, ns, 0, -1)\n     end,\n   })\n+  api.nvim_create_autocmd('BufHidden', {\n+    group = group,\n+    buffer = buf,\n+    once = true,\n+    callback = function()\n+      close_win(w)\n+    end,\n+  })\n+\n+  api.nvim_buf_set_lines(b, 0, -1, false, {\n+    ';; Write your query here',\n+  })",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303691635",
            "id": 1303691635,
            "in_reply_to_id": 1303690579,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtMFz",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 601,
            "original_position": 244,
            "original_start_line": 604,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592622138,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303691635/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T01:32:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303691635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303694531"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303694531"
                }
            },
            "author_association": "MEMBER",
            "body": "Oops this was part of a (now gone) `TODO`: 1e6da4ad1e6112cb964267e69132fecce098ae35",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:39:32Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303694531",
            "id": 1303694531,
            "in_reply_to_id": 1303678702,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtMzD",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 465,
            "original_position": 103,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592626122,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303694531/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T01:39:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303694531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303695506"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303695506"
                }
            },
            "author_association": "MEMBER",
            "body": "This was how I fixed the missing highlights for captures like `@foo.bar`: https://github.com/neovim/neovim/pull/24703#issuecomment-1684917085",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:41:41Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303695506",
            "id": 1303695506,
            "in_reply_to_id": 1303688745,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtNCS",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 534,
            "original_position": 172,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592627446,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303695506/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T01:41:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303695506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303696294"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303696294"
                }
            },
            "author_association": "MEMBER",
            "body": "I had initially made it configurable. See this conversation: https://github.com/neovim/neovim/pull/24703#discussion_r1296615733",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:43:31Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      else\n+        -- Remove the '@' from the cursor word\n+        cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      end\n+      for id, node, _ in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+        local capture_name = query.captures[id]\n+        if capture_name == cursor_word then\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = end_col,\n+            hl_group = 'Visual',\n+            virt_text = {\n+              { capture_name, 'Title' },\n+            },",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303696294",
            "id": 1303696294,
            "in_reply_to_id": 1303689161,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtNOm",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 553,
            "original_position": 192,
            "original_start_line": 551,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592628537,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303696294/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T01:43:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303696294",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303703394"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303703394"
                }
            },
            "author_association": "MEMBER",
            "body": "I'll piggy-back the change as part of this PR :)",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T01:58:11Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303703394",
            "id": 1303703394,
            "in_reply_to_id": 1303683712,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtO9i",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 527,
            "original_position": 165,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592643666,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303703394/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T01:58:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303703394",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303704427"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303704427"
                }
            },
            "author_association": "MEMBER",
            "body": "They match the one in the tree inspector; I think we should tackle this for all the dev modules together (consistent highlight group naming schemes).",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T02:00:22Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      else\n+        -- Remove the '@' from the cursor word\n+        cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      end\n+      for id, node, _ in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+        local capture_name = query.captures[id]\n+        if capture_name == cursor_word then\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = end_col,\n+            hl_group = 'Visual',\n+            virt_text = {\n+              { capture_name, 'Title' },\n+            },",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303704427",
            "id": 1303704427,
            "in_reply_to_id": 1303689161,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtPNr",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 553,
            "original_position": 192,
            "original_start_line": 551,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592645012,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303704427/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T02:00:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303704427",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303704720"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303704720"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmmm, sounds like we need to do this in a smarter way using gsub/match.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T02:01:06Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303704720",
            "id": 1303704720,
            "in_reply_to_id": 1303688745,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtPSQ",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 534,
            "original_position": 172,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592645431,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303704720/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T02:01:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303704720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303705015"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303705015"
                }
            },
            "author_association": "MEMBER",
            "body": "Again, maybe enough to have a common ts-dev namespace?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T02:01:43Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303705015",
            "id": 1303705015,
            "in_reply_to_id": 1303683712,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtPW3",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 527,
            "original_position": 165,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592645810,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303705015/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T02:01:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303705015",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303705908"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303705908"
                }
            },
            "author_association": "MEMBER",
            "body": "Agree on avoiding HACK; but here it's not clear that it needs to change. We probably don't even need a comment (if problems arise, it'll be clear what needs changing).",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T02:03:45Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303705908",
            "id": 1303705908,
            "in_reply_to_id": 1303680223,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtPk0",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 525,
            "original_position": 163,
            "original_start_line": 523,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592648486,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303705908/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T02:03:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303705908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303705988"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303705988"
                }
            },
            "author_association": "MEMBER",
            "body": "Try adding `.` to `'iskeyword'` for `query` filetypes.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T02:03:55Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303705988",
            "id": 1303705988,
            "in_reply_to_id": 1303688745,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtPmE",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 534,
            "original_position": 172,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592648578,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303705988/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T02:03:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303705988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303706199"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303706199"
                }
            },
            "author_association": "MEMBER",
            "body": "That's fair, I wasn't sure of the codebase convention about these. I'll leave the comment since I believe it's important (removing the `HACK`) and given that this solution does the work, I won't create the issue for now.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T02:04:31Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303706199",
            "id": 1303706199,
            "in_reply_to_id": 1303680223,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtPpX",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 525,
            "original_position": 163,
            "original_start_line": 523,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592648908,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303706199/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T02:04:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303706199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303710340"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303710340"
                }
            },
            "author_association": "MEMBER",
            "body": "@gpanders pardon my ignorance, but where exactly do I do that? In [here](https://github.com/neovim/neovim/blob/c6ec7fa8d741d6301701067ecd095bf02e7a741a/runtime/ftplugin/query.lua) or [here](https://github.com/neovim/neovim/blob/c6ec7fa8d741d6301701067ecd095bf02e7a741a/runtime/syntax/query.lua)?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T02:14:01Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303710340",
            "id": 1303710340,
            "in_reply_to_id": 1303688745,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtQqE",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 534,
            "original_position": 172,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592655201,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303710340/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T02:14:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303710340",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303713248"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303713248"
                }
            },
            "author_association": "MEMBER",
            "body": "the former (`ftplugin`)\r\n",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T02:19:44Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  -- HACK: omnifunc guesses the language based on the containing folder,\n+  -- so add the parser's language to the buffer's name.\n+  api.nvim_buf_set_name(b, string.format('%s/query_editor.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cWORD>')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303713248",
            "id": 1303713248,
            "in_reply_to_id": 1303688745,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtRXg",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 534,
            "original_position": 172,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1592658896,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303713248/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T02:19:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303713248",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303724342"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303724342"
                }
            },
            "author_association": "MEMBER",
            "body": "I moved it a bit below since when coming from the tree inspector, `buf` isn't the inspected buffer so I need to do some window/buffer handling beforehand.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T02:45:14Z",
            "diff_hunk": "@@ -436,11 +457,153 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303724342",
            "id": 1303724342,
            "in_reply_to_id": 1303679632,
            "line": 534,
            "node_id": "PRRC_kwDOAPphoM5NtUE2",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 534,
            "original_position": 158,
            "original_start_line": 517,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 178,
            "pull_request_review_id": 1592675048,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303724342/reactions"
            },
            "side": "RIGHT",
            "start_line": 531,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T02:45:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303724342",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303729723"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303729723"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's keep it in the top module for now. I prefer `preview_query` over edit (and same for the ex command), but won't die on that hill.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T02:57:00Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303729723",
            "id": 1303729723,
            "in_reply_to_id": 1300226016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtVY7",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 551,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1592682556,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303729723/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T02:57:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303729723",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303764304"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303764304"
                }
            },
            "author_association": "MEMBER",
            "body": "@clason Now that I think more about it I agree that `preview_query` makes it clear that this isn't tied to \"real\" query files but mainly serves as a visualizer. I'll change it.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T03:58:22Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303764304",
            "id": 1303764304,
            "in_reply_to_id": 1300226016,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ntd1Q",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 551,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1592739471,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303764304/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T03:58:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303764304",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303813760"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303813760"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "wouldn't that change user settiongs after they once opened the query editor?\r\nand I think especially `.` is problematic because `word.another` is one of the biggest usecases of `w` imo\r\n\r\nperhaps make this buffer local?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T05:18:20Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303813760",
            "id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ntp6A",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592795154,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303813760/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T05:18:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303813760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303815009"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303815009"
                }
            },
            "author_association": "MEMBER",
            "body": "This needs to be buffer-local, of course. I would recommend using vim.bo with an explicit list.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T05:20:44Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303815009",
            "id": 1303815009,
            "in_reply_to_id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtqNh",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592796969,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303815009/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T05:20:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303815009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303819106"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303819106"
                }
            },
            "author_association": "MEMBER",
            "body": "In that case should I move this code to `dev.lua`? Else wouldn't it continue affecting all query buffers?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T05:28:24Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303819106",
            "id": 1303819106,
            "in_reply_to_id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtrNi",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592803262,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303819106/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T05:28:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303819106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303822695"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303822695"
                }
            },
            "author_association": "MEMBER",
            "body": "I think the iskeyword should be consistent, unless that's not possible. (As this setting will affect a number of features.)",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T05:34:49Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303822695",
            "id": 1303822695,
            "in_reply_to_id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtsFn",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592808709,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303822695/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T05:35:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303822695",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303833757"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303833757"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry if I'm being slow but how do I set it explicitly? Doesn't that require a nontrivial check like [this](https://github.com/neovim/neovim/blob/cbadb39d16c15b2a3d4f9a122644b3d61ba2d494/runtime/syntax/lisp.vim#L17C1-L23C6)? Why not just append the `.` to the existing `iskeyword` setting?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T05:52:43Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303833757",
            "id": 1303833757,
            "in_reply_to_id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ntuyd",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592825065,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303833757/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T05:52:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303833757",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303835124"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303835124"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`vim.bo` doesn't have the methods like `append` iirc\r\nhttps://neovim.io/doc/user/lua-guide.html#lua-guide-options",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T05:54:47Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303835124",
            "id": 1303835124,
            "in_reply_to_id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtvH0",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592826992,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303835124/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T05:55:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303835124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303836375"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303836375"
                }
            },
            "author_association": "MEMBER",
            "body": "@max397574 I was thinking of just replacing line 18 by `vim.cmd([[ setlocal iskeyword+=. ]])`",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T05:56:34Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303836375",
            "id": 1303836375,
            "in_reply_to_id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtvbX",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592828745,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303836375/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T05:56:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303836375",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303836615"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303836615"
                }
            },
            "author_association": "MEMBER",
            "body": "Either look at the current iskeyword in a query buffer and hard code that list (with . added), or use vim.opt_local:append.\r\n\r\n(The former is more future proof, but the latter is acceptable in a pinch.)",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T05:56:57Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303836615",
            "id": 1303836615,
            "in_reply_to_id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtvfH",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592829072,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303836615/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T05:56:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303836615",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303837806"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303837806"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "would also work\r\nnot sure @clason do you have a convention of how `vim.cmd` is used? (indexing vs not indexing and [[]] vs \"\") \r\nBecause I'd have used `vim.cmd.setlocal(\"iskeyword+=.\")`\r\n\r\nor just `vim.opt_local.iskeyword:append(\".\")`",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T05:58:43Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303837806",
            "id": 1303837806,
            "in_reply_to_id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ntvxu",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592830827,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303837806/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T05:59:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303837806",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303838035"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303838035"
                }
            },
            "author_association": "MEMBER",
            "body": "@clason I would have thought that the former was more prone to breaking because you know, hardcoded stuff (not sure how often `iskeyword` changes though).",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T05:59:01Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303838035",
            "id": 1303838035,
            "in_reply_to_id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ntv1T",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592831154,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303838035/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T05:59:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303838035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303844029"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303844029"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "this additional comment (`in the query editor`) isn't needed and actually wrong\r\nthis changes the settings for the `query` filetype so in all query files. And there is no need to write this because it's obvious since it's in the ftplugin",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T06:08:05Z",
            "diff_hunk": "@@ -14,8 +14,8 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n--- recognize @foo.bar as a single word\n-vim.opt.iskeyword:append('.')\n+-- recognize @foo.bar as a single word in the query previewer",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303844029",
            "id": 1303844029,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtxS9",
            "original_commit_id": "9c4d3ebf11d0df3a24809999ac7d82a776b5d854",
            "original_line": 17,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592840407,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303844029/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T06:08:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303844029",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1303854281"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303854281"
                }
            },
            "author_association": "MEMBER",
            "body": "Pretty much never, because that would bring out pitchforks....",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T06:22:24Z",
            "diff_hunk": "@@ -14,6 +14,9 @@ vim.treesitter.start()\n -- set omnifunc\n vim.bo.omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n \n+-- recognize @foo.bar as a single word\n+vim.opt.iskeyword:append('.')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1303854281",
            "id": 1303854281,
            "in_reply_to_id": 1303813760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NtzzJ",
            "original_commit_id": "6e7fbd19830a12087c17ca22c4289ef78dfd7048",
            "original_line": 18,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/ftplugin/query.lua",
            "position": null,
            "pull_request_review_id": 1592856169,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303854281/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T06:22:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1303854281",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304526090"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304526090"
                }
            },
            "author_association": "MEMBER",
            "body": "This function is a bit big. Can the `update_highlights()` function be moved out?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T15:43:43Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304526090",
            "id": 1304526090,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NwX0K",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 478,
            "original_position": 122,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1593914726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304526090/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T16:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304526090",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304531448"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304531448"
                }
            },
            "author_association": "MEMBER",
            "body": "Do these need to be options?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T15:45:48Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304531448",
            "id": 1304531448,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NwZH4",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 471,
            "original_position": 115,
            "original_start_line": 468,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1593914726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304531448/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T16:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304531448",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304545087"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304545087"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        cursor_word:find('^@') == nil\r\n```\r\n\r\nAnd move the cast to line 536.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T15:49:32Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304545087",
            "id": 1304545087,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nwcc_",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 539,
            "original_position": 183,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1593914726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304545087/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T16:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304545087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304547426"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304547426"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      cursor_word = cursor_word:sub(2)\r\n```",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T15:51:38Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304547426",
            "id": 1304547426,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NwdBi",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 544,
            "original_position": 188,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1593914726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304547426/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T16:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304547426",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304548700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304548700"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is `math.max` needed? Can `end_col` be negative?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T15:52:43Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+        local capture_name = query.captures[id]\n+        if capture_name == cursor_word then\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = math.max(0, end_col),",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304548700",
            "id": 1304548700,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NwdVc",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 551,
            "original_position": 195,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1593914726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304548700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T16:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304548700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304553778"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304553778"
                }
            },
            "author_association": "MEMBER",
            "body": "A quick comment explaining each of these autocmds would help. E.g.: \"Clear highlights in the query editor when leaving the tree view\".",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T15:56:12Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+        local capture_name = query.captures[id]\n+        if capture_name == cursor_word then\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = math.max(0, end_col),\n+            hl_group = 'Visual',\n+            virt_text = {\n+              { capture_name, 'Title' },\n+            },\n+          })\n+        end\n+      end\n+    end\n+  end\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-preview', {})\n+  api.nvim_create_autocmd({ 'TextChanged', 'InsertLeave' }, {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      vim.treesitter.query.lint(b, { langs = lang, clear = false })\n+      update_highlights()\n+    end,\n+  })\n+  api.nvim_create_autocmd({ 'CursorMoved', 'BufEnter' }, {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      update_highlights()\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = buf,\n+    callback = function()\n+      if not api.nvim_buf_is_loaded(b) then\n+        return true\n       end\n+\n+      api.nvim_buf_clear_namespace(b, ns, 0, -1)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304553778",
            "id": 1304553778,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nweky",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 593,
            "original_position": 237,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1593914726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304553778/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T16:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304553778",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304555089"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304555089"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this and `w` need slightly more descriptive names since there is also `buf` and `base_buf`. Maybe `query_buf`?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T15:57:19Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304555089",
            "id": 1304555089,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nwe5R",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 513,
            "original_position": 157,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1593914726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304555089/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T16:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304555089",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304558248"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304558248"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  api.nvim_create_autocmd({ 'TextChanged', 'InsertLeave' }, {\r\n    group = group,\r\n    buffer = b,\r\n    callback = function()\r\n      vim.treesitter.query.lint(b, { langs = lang, clear = false })\r\n    end,\r\n  })\r\n  api.nvim_create_autocmd({ 'TextChanged', 'InsertLeave', 'CursorMoved', 'BufEnter' }, {\r\n    group = group,\r\n    buffer = b,\r\n    callback = update_highlights,\r\n  })\r\n```\r\n\r\nIs this any better? So highlight updating is triggered in one place?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T15:59:46Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+        local capture_name = query.captures[id]\n+        if capture_name == cursor_word then\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = math.max(0, end_col),\n+            hl_group = 'Visual',\n+            virt_text = {\n+              { capture_name, 'Title' },\n+            },\n+          })\n+        end\n+      end\n+    end\n+  end\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-preview', {})\n+  api.nvim_create_autocmd({ 'TextChanged', 'InsertLeave' }, {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      vim.treesitter.query.lint(b, { langs = lang, clear = false })\n+      update_highlights()\n+    end,\n+  })\n+  api.nvim_create_autocmd({ 'CursorMoved', 'BufEnter' }, {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      update_highlights()\n+    end,\n+  })",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304558248",
            "id": 1304558248,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nwfqo",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 565,
            "original_position": 221,
            "original_start_line": 563,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1593914726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304558248/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T16:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304558248",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304567273"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304567273"
                }
            },
            "author_association": "MEMBER",
            "body": "This is setting highlights for the entire buffer which can be very slow.\r\n\r\nIdeally we should use the decoration provider so we only highlight lines which are drawn.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T16:08:05Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304567273",
            "id": 1304567273,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nwh3p",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 545,
            "original_position": 189,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1593914726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304567273/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T16:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304567273",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304594919"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304594919"
                }
            },
            "author_association": "MEMBER",
            "body": "Even better, use the \"desc\" field so the description can be seen at runtime.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T16:31:56Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+        local capture_name = query.captures[id]\n+        if capture_name == cursor_word then\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = math.max(0, end_col),\n+            hl_group = 'Visual',\n+            virt_text = {\n+              { capture_name, 'Title' },\n+            },\n+          })\n+        end\n+      end\n+    end\n+  end\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-preview', {})\n+  api.nvim_create_autocmd({ 'TextChanged', 'InsertLeave' }, {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      vim.treesitter.query.lint(b, { langs = lang, clear = false })\n+      update_highlights()\n+    end,\n+  })\n+  api.nvim_create_autocmd({ 'CursorMoved', 'BufEnter' }, {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      update_highlights()\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = buf,\n+    callback = function()\n+      if not api.nvim_buf_is_loaded(b) then\n+        return true\n       end\n+\n+      api.nvim_buf_clear_namespace(b, ns, 0, -1)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304594919",
            "id": 1304594919,
            "in_reply_to_id": 1304553778,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nwonn",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 593,
            "original_position": 237,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594021491,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304594919/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T16:31:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304594919",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304770513"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304770513"
                }
            },
            "author_association": "MEMBER",
            "body": "Thinking about this. We can probably just get away with limiting the query range here since we only place the highlights when the query editor is focused.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T19:26:42Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304770513",
            "id": 1304770513,
            "in_reply_to_id": 1304567273,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NxTfR",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 545,
            "original_position": 189,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594310333,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304770513/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T19:26:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304770513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304874868"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304874868"
                }
            },
            "author_association": "MEMBER",
            "body": "Are you suggesting I remove them?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T21:14:24Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304874868",
            "id": 1304874868,
            "in_reply_to_id": 1304531448,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nxs90",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 471,
            "original_position": 115,
            "original_start_line": 468,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594470287,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304874868/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T21:14:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304874868",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304875823"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304875823"
                }
            },
            "author_association": "MEMBER",
            "body": "Ehhh it's a closure and passing the captured variables is a bit annoying. It isn't bigger than `inspect_tree`...",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T21:15:39Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304875823",
            "id": 1304875823,
            "in_reply_to_id": 1304526090,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NxtMv",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 478,
            "original_position": 122,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594471775,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304875823/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T21:15:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304875823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304877802"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304877802"
                }
            },
            "author_association": "MEMBER",
            "body": "It isn't needed. This was something I added when I was getting a weird error yesterday but it was because I was using the wrong buffer. I'll remove it.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T21:18:00Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+        local capture_name = query.captures[id]\n+        if capture_name == cursor_word then\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = math.max(0, end_col),",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304877802",
            "id": 1304877802,
            "in_reply_to_id": 1304548700,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nxtrq",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 551,
            "original_position": 195,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594474414,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304877802/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T21:18:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304877802",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304893697"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304893697"
                }
            },
            "author_association": "MEMBER",
            "body": "I limited it to the visible range. Lmk what you think :)",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T21:34:39Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304893697",
            "id": 1304893697,
            "in_reply_to_id": 1304567273,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NxxkB",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 545,
            "original_position": 189,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594496570,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304893697/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T21:34:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304893697",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304894085"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304894085"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T21:35:17Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304894085",
            "id": 1304894085,
            "in_reply_to_id": 1304531448,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NxxqF",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 471,
            "original_position": 115,
            "original_start_line": 468,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594497195,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304894085/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-24T21:35:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304894085",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304916321"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304916321"
                }
            },
            "author_association": "MEMBER",
            "body": "Not the best reason to not improve the code. The function is well over 100 lines long and a closure depending on lots of upvars isn't great for maintenance or readability.\n\nI think it's _usually_ good practice to try and limit functions to around 50 lines (preferably less), and to minimise the amount of state a function needs to handle.\n\nThe autocmds at the bottom aren't too bad since they're mostly boilerplate.\n\nFrom what I can tell there's `buf`, `ns`, `parser`, `query_win`, `query_buf` and `lang`.\n\nYou get easily get `query_buf` from `query_win`, and you can get `parser` and `lang` from `buf`. No need to validate them. So you only need to pass 3 variables at minimum.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T22:00:09Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304916321",
            "id": 1304916321,
            "in_reply_to_id": 1304526090,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nx3Fh",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 478,
            "original_position": 122,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594531096,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304916321/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T22:00:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304916321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304920302"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304920302"
                }
            },
            "author_association": "MEMBER",
            "body": "Minor: You can early return if you invert the condition.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T22:05:45Z",
            "diff_hunk": "@@ -436,11 +459,135 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @private\n+function M.preview_query()\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local cmd = '60vnew'\n+  -- If the inspector is open, place the previewer above it.\n+  local base_buf = vim.b[buf].dev_base ---@type integer?\n+  local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+  if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+    vim.api.nvim_set_current_win(inspect_buf)\n+    buf = base_buf\n+    cmd = 'new'\n+  end\n+  vim.cmd(cmd)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local query_win = api.nvim_get_current_win()\n+  local query_buf = api.nvim_win_get_buf(query_win)\n+\n+  vim.b[buf].dev_preview = query_win\n+  vim.bo[query_buf].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(query_win, query_buf)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(query_buf, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local topline, botline = vim.fn.line('w0', query_win), vim.fn.line('w$', query_win)\n+    local query_content =\n+      table.concat(api.nvim_buf_get_lines(query_buf, topline, botline, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304920302",
            "id": 1304920302,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nx4Du",
            "original_commit_id": "be09e576b1c59c0b64ab1850e7a806174565caf4",
            "original_line": 513,
            "original_position": 157,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594535994,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304920302/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T22:07:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304920302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304927938"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304927938"
                }
            },
            "author_association": "MEMBER",
            "body": "Fair enough. I've created a separate function.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T22:18:33Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304927938",
            "id": 1304927938,
            "in_reply_to_id": 1304526090,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nx57C",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 478,
            "original_position": 122,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594546969,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304927938/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T22:18:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304927938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304932395"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304932395"
                }
            },
            "author_association": "MEMBER",
            "body": "I thought you said you limited the query range. Did it not work?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T22:25:13Z",
            "diff_hunk": "@@ -436,11 +459,145 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+local preview_ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+---@param query_win integer\n+---@param buf integer\n+local function update_preview_highlights(query_win, buf)\n+  local parser = vim.treesitter.get_parser(buf)\n+  local lang = parser:lang()\n+  local query_buf = api.nvim_win_get_buf(query_win)\n+  api.nvim_buf_clear_namespace(buf, preview_ns, 0, -1)\n+  local topline, botline = vim.fn.line('w0', query_win), vim.fn.line('w$', query_win)\n+  local query_content =\n+    table.concat(api.nvim_buf_get_lines(query_buf, topline, botline, false), '\\n')\n+\n+  local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+  if not ok_query then\n+    return\n+  end\n+\n+  local cursor_word = vim.fn.expand('<cword>') --[[@as string]]\n+  -- Only highlight captures if the cursor is on a capture name\n+  if cursor_word:find('^@') == nil then\n+    return\n+  end\n+  -- Remove the '@' from the cursor word\n+  cursor_word = cursor_word:sub(2)\n+  for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304932395",
            "id": 1304932395,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nx7Ar",
            "original_commit_id": "bcf2059389d876922e8824e49d1b1abc45c334d7",
            "original_line": 492,
            "original_position": 136,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594553196,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304932395/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T22:25:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304932395",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304933398"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304933398"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, I think you misunderstood me. I meant the highlights in the main buffer. ",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T22:27:03Z",
            "diff_hunk": "@@ -436,11 +459,145 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+local preview_ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+---@param query_win integer\n+---@param buf integer\n+local function update_preview_highlights(query_win, buf)\n+  local parser = vim.treesitter.get_parser(buf)\n+  local lang = parser:lang()\n+  local query_buf = api.nvim_win_get_buf(query_win)\n+  api.nvim_buf_clear_namespace(buf, preview_ns, 0, -1)\n+  local topline, botline = vim.fn.line('w0', query_win), vim.fn.line('w$', query_win)\n+  local query_content =\n+    table.concat(api.nvim_buf_get_lines(query_buf, topline, botline, false), '\\n')\n+\n+  local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+  if not ok_query then\n+    return\n+  end\n+\n+  local cursor_word = vim.fn.expand('<cword>') --[[@as string]]\n+  -- Only highlight captures if the cursor is on a capture name\n+  if cursor_word:find('^@') == nil then\n+    return\n+  end\n+  -- Remove the '@' from the cursor word\n+  cursor_word = cursor_word:sub(2)\n+  for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304933398",
            "id": 1304933398,
            "in_reply_to_id": 1304932395,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nx7QW",
            "original_commit_id": "bcf2059389d876922e8824e49d1b1abc45c334d7",
            "original_line": 492,
            "original_position": 136,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594554627,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304933398/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T22:27:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304933398",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304934747"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304934747"
                }
            },
            "author_association": "MEMBER",
            "body": "AHHH I'm silly. I restricted the wrong thing. I'll fix it.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T22:29:34Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304934747",
            "id": 1304934747,
            "in_reply_to_id": 1304567273,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nx7lb",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 545,
            "original_position": 189,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594556620,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304934747/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T22:29:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304934747",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304934966"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304934966"
                }
            },
            "author_association": "MEMBER",
            "body": "No it's okay, I understood what you meant but my brain melted for a second. Fixing it.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T22:29:58Z",
            "diff_hunk": "@@ -436,11 +459,145 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+local preview_ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+---@param query_win integer\n+---@param buf integer\n+local function update_preview_highlights(query_win, buf)\n+  local parser = vim.treesitter.get_parser(buf)\n+  local lang = parser:lang()\n+  local query_buf = api.nvim_win_get_buf(query_win)\n+  api.nvim_buf_clear_namespace(buf, preview_ns, 0, -1)\n+  local topline, botline = vim.fn.line('w0', query_win), vim.fn.line('w$', query_win)\n+  local query_content =\n+    table.concat(api.nvim_buf_get_lines(query_buf, topline, botline, false), '\\n')\n+\n+  local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+  if not ok_query then\n+    return\n+  end\n+\n+  local cursor_word = vim.fn.expand('<cword>') --[[@as string]]\n+  -- Only highlight captures if the cursor is on a capture name\n+  if cursor_word:find('^@') == nil then\n+    return\n+  end\n+  -- Remove the '@' from the cursor word\n+  cursor_word = cursor_word:sub(2)\n+  for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304934966",
            "id": 1304934966,
            "in_reply_to_id": 1304932395,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nx7o2",
            "original_commit_id": "bcf2059389d876922e8824e49d1b1abc45c334d7",
            "original_line": 492,
            "original_position": 136,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594556883,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304934966/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T22:29:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304934966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304947673"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304947673"
                }
            },
            "author_association": "MEMBER",
            "body": "Okay I think I got it now.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T22:53:14Z",
            "diff_hunk": "@@ -436,11 +459,157 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+--- @class PreviewQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts PreviewQueryOpts?\n+function M.preview_query(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing previewer window\n+  if vim.b[buf].dev_preview then\n+    close_win(vim.b[buf].dev_preview)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the previewer above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_preview = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  -- Note that omnifunc guesses the language based on the containing folder,\n+  -- so we add the parser's language to the buffer's name so that omnifunc\n+  -- can infer the language later.\n+  api.nvim_buf_set_name(b, string.format('%s/query_previewer.scm', lang))\n+\n+  local ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')\n+      -- Only highlight captures if the cursor is on a capture name\n+      if\n+        string.find(cursor_word --[[@as string]], '^@') == nil\n+      then\n+        return\n+      end\n+      -- Remove the '@' from the cursor word\n+      cursor_word = string.sub(cursor_word --[[@as string]], 2)\n+      for id, node in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304947673",
            "id": 1304947673,
            "in_reply_to_id": 1304567273,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Nx-vZ",
            "original_commit_id": "ded93f625049024cc9396ef1533f380ce945681e",
            "original_line": 545,
            "original_position": 189,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594574029,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304947673/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T22:53:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304947673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304956129"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304956129"
                }
            },
            "author_association": "MEMBER",
            "body": "topline and botline are 1-based, but this function takes 0-based rows so you need to subtract 1 from `topline`. I'm not sure about `botline` since ts ranges are end-exclusive, so it's probably safer to leave that one as it is.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T23:11:03Z",
            "diff_hunk": "@@ -436,11 +459,148 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+local preview_ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+---@param query_win integer\n+---@param base_win integer\n+local function update_preview_highlights(query_win, base_win)\n+  local base_buf = api.nvim_win_get_buf(base_win)\n+  local query_buf = api.nvim_win_get_buf(query_win)\n+  local parser = vim.treesitter.get_parser(base_buf)\n+  local lang = parser:lang()\n+  api.nvim_buf_clear_namespace(base_buf, preview_ns, 0, -1)\n+  local query_content = table.concat(api.nvim_buf_get_lines(query_buf, 0, -1, false), '\\n')\n+\n+  local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+  if not ok_query then\n+    return\n+  end\n+\n+  local cursor_word = vim.fn.expand('<cword>') --[[@as string]]\n+  -- Only highlight captures if the cursor is on a capture name\n+  if cursor_word:find('^@') == nil then\n+    return\n+  end\n+  -- Remove the '@' from the cursor word\n+  cursor_word = cursor_word:sub(2)\n+  local topline, botline = vim.fn.line('w0', base_win), vim.fn.line('w$', base_win)\n+  for id, node in query:iter_captures(parser:trees()[1]:root(), base_buf, topline, botline) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304956129",
            "id": 1304956129,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NyAzh",
            "original_commit_id": "2cc827129de42754af6b79adf4d312ee5889dceb",
            "original_line": 492,
            "original_position": 136,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594585511,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304956129/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T23:11:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304956129",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1304960724"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304960724"
                }
            },
            "author_association": "MEMBER",
            "body": "Off-by-1 errors will forever haunt us hahaha.\r\n\r\nThank you for the careful review! <3",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-08-24T23:21:30Z",
            "diff_hunk": "@@ -436,11 +459,148 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+local preview_ns = api.nvim_create_namespace('treesitter/dev-preview')\n+\n+---@param query_win integer\n+---@param base_win integer\n+local function update_preview_highlights(query_win, base_win)\n+  local base_buf = api.nvim_win_get_buf(base_win)\n+  local query_buf = api.nvim_win_get_buf(query_win)\n+  local parser = vim.treesitter.get_parser(base_buf)\n+  local lang = parser:lang()\n+  api.nvim_buf_clear_namespace(base_buf, preview_ns, 0, -1)\n+  local query_content = table.concat(api.nvim_buf_get_lines(query_buf, 0, -1, false), '\\n')\n+\n+  local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+  if not ok_query then\n+    return\n+  end\n+\n+  local cursor_word = vim.fn.expand('<cword>') --[[@as string]]\n+  -- Only highlight captures if the cursor is on a capture name\n+  if cursor_word:find('^@') == nil then\n+    return\n+  end\n+  -- Remove the '@' from the cursor word\n+  cursor_word = cursor_word:sub(2)\n+  local topline, botline = vim.fn.line('w0', base_win), vim.fn.line('w$', base_win)\n+  for id, node in query:iter_captures(parser:trees()[1]:root(), base_buf, topline, botline) do",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1304960724",
            "id": 1304960724,
            "in_reply_to_id": 1304956129,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NyB7U",
            "original_commit_id": "2cc827129de42754af6b79adf4d312ee5889dceb",
            "original_line": 492,
            "original_position": 136,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1594592125,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304960724/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-24T23:21:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1304960724",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321719133"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321719133"
                }
            },
            "author_association": "MEMBER",
            "body": "I saw the [discussion](https://github.com/neovim/neovim/pull/24703#discussion_r1303729723) but I don't agree that \"preview\" is a new verb worth introducing. \r\n\r\n- Even this news item mentions \"editing\".\r\n- `:edit` in vim opens a buffer, it doesn't mean we are saving anything to storage\r\n- \"preview\" implies something that is _not_ editable, yet the purpose of this feature is to try things out and change them",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T15:22:18Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321719133",
            "id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5Ox9Vd",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620270834,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321719133/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T15:22:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321719133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321723740"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321723740"
                }
            },
            "author_association": "MEMBER",
            "body": "\"preview\" was also shot down previously in the diagnostics API: https://github.com/neovim/neovim/pull/16057#issuecomment-945192362",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T15:25:45Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321723740",
            "id": 1321723740,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5Ox-dc",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620277935,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321723740/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T15:25:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321723740",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321732024"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321732024"
                }
            },
            "author_association": "MEMBER",
            "body": "It's not too late to change (including the news item), but I vehemently veto `edit` here. It's the wrong connotation **in this context**.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T15:31:49Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321732024",
            "id": 1321732024,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5OyAe4",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620290472,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321732024/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T15:32:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321732024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321734598"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321734598"
                }
            },
            "author_association": "MEMBER",
            "body": ".... `playground` ... \r\n\r\n...🍿 ",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T15:33:37Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321734598",
            "id": 1321734598,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5OyBHG",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620294524,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321734598/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T15:33:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321734598",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321737481"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321737481"
                }
            },
            "author_association": "MEMBER",
            "body": "Serious suggestion... `scratch`/`scratch_query`?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T15:35:54Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321737481",
            "id": 1321737481,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5OyB0J",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620298870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321737481/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T15:35:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321737481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321823411"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321823411"
                }
            },
            "author_association": "MEMBER",
            "body": "> but I vehemently veto `edit` here. It's the wrong connotation **in this context**.\r\n\r\nI understand the objection. But I don't understand why it's so strong.  `:edit` in vim is the general entrypoint for many plugins with temporary scratch buffers, including `:Gedit` (fugitive). Introducing new concepts leads to jargon forking, that should be very rare. \r\n\r\nI guess \"scratch\" at least draws from precedent. But still, if `:edit` is so bad, we need something long-term that describes the general case of a REPL/prompt use-case. \"debug\" is another idea.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T16:49:10Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321823411",
            "id": 1321823411,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5OyWyz",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620431463,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321823411/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T16:50:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321823411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321827762"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321827762"
                }
            },
            "author_association": "MEMBER",
            "body": "The objection comes from the context here, since we already have a bunch of functions acting on `query` -- which is always understood to be _the_ query loaded and applied to the buffer. \r\n\r\nThis is a very different kind of query here, as it's ephemeral and not part of the \"global state\". (You can have `edit`, but then you can't have `query`.) The same objection applies to `debug_query`.\r\n\r\n`query_repl` would be suitable (even though it's technically not a REPL).\r\n\r\n`open_query_live_editor` would also be fine (but a mouthful).",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T16:53:38Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321827762",
            "id": 1321827762,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5OyX2y",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620438408,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321827762/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T16:55:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321827762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321840542"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321840542"
                }
            },
            "author_association": "MEMBER",
            "body": "FWIW I also prefer \"edit\" as the verb here. After all, the feature itself is the query _editor_. I'm trying to understand your objection @clason. \r\n\r\n>The objection comes from the context here, since we already have a bunch of functions acting on `query` -- which is always understood to be _the_ query loaded and applied to the buffer.\r\n\r\nI am not sure what you mean by this. A buffer can have multiple queries.\r\n\r\n>This is a very different kind of query here, as it's ephemeral and not part of the \"global state\". (You can have edit, but then you can't have query.) The same objection applies to debug_query.\r\n\r\nCan you explain why you think the ephemeral nature of the query precludes `edit`? Whether a query is associated with a file on disk or lives in memory does not seem very relevant to me. It's still a query in every sense that matters (if it walks like a duck...).\r\n\r\nThe `vim.treesitter.query` module has methods both for \"runtime queries\" (those which exist as files on `'runtimepath'`) and for \"ephemeral\" queries (e.g. `vim.treesitter.query.parse` or `vim.treesitter.query.set`). So I don't think there is a strong precedent for \"vim.treesitter.query implies a pre-existing, runtime query\".",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T17:06:42Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321840542",
            "id": 1321840542,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5Oya-e",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620458841,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321840542/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T17:06:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321840542",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321845237"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321845237"
                }
            },
            "author_association": "MEMBER",
            "body": "Simple: `vim.treesitter.edit_query` implies (to me, obviously) that this will allow me to edit **the** (currently loaded, no matter where from) query.\r\n\r\n(Also, why is it not called `vim.treesitter.query.edit()` then -- with even stronger connotations in this regard?)\r\n\r\nMaybe to drive home the point better: why don't `query.edit()` and `query.get()` apply to the same query?\r\n\r\n",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T17:11:43Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321845237",
            "id": 1321845237,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5OycH1",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620466207,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321845237/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T17:15:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321845237",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321847919"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321847919"
                }
            },
            "author_association": "MEMBER",
            "body": "I have no preference here so just ping me when y'all have decided on the name and I'll change it 🙃 ",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T17:14:36Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321847919",
            "id": 1321847919,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5Oycxv",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620470437,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321847919/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T17:14:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321847919",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321855432"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321855432"
                }
            },
            "author_association": "MEMBER",
            "body": "> Simple: `vim.treesitter.edit_query` implies (to me, obviously) that this will allow me to edit **the** (currently loaded, no matter where from) query.\r\n> \r\n> \r\n> Maybe to drive home the point better: why don't `query.edit()` and `query.get()` apply to the same query?\r\n\r\nThere is no singular query though. It is incorrect to refer to \"**the** query\" for a buffer, because a buffer can have multiple active queries. `vim.treesitter.query.get()` has a required argument for the query name (e.g. `vim.treesitter.query.get(\"c\", \"highlights\")`. So a theoretical `vim.treesitter.query.edit` would have a similar interface. And the interface is extensible to \"if `{query_name}` is omitted, edits a new, unnamed query\".\r\n\r\nFor the purpose of this PR that is the only functionality that would be supported, because editing an existing query quickly runs into the difficulty of _which_ query should be edited (i.e. which file does `vim.treesitter.query.edit(\"c\", \"highlights\")` actually edit?). But that can be solved another time.\r\n\r\n> (Also, why is it not called `vim.treesitter.query.edit()` then -- with even stronger connotations in this regard?)\r\n\r\nIf you'll recall, [I proposed exactly this](https://github.com/neovim/neovim/pull/24703#discussion_r1300226016) 😇 .",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T17:22:20Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321855432",
            "id": 1321855432,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5OyenI",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620482097,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321855432/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T17:22:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321855432",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321857291"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321857291"
                }
            },
            "author_association": "MEMBER",
            "body": "> If you'll recall, https://github.com/neovim/neovim/pull/24703#discussion_r1300226016 😇 .\r\n\r\nYes, and I liked this even less ;)\r\n\r\n> editing an existing query quickly runs into the difficulty of which query should be edited (i.e. which file does vim.treesitter.query.edit(\"c\", \"highlights\") actually edit?)\r\n\r\nYes, and that's why I want to steer as far away from that idea as possible.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T17:24:17Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321857291",
            "id": 1321857291,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5OyfEL",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620485018,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321857291/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T17:24:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321857291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321860691"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321860691"
                }
            },
            "author_association": "MEMBER",
            "body": ">Yes, and that's why I want to steer as far away from that idea as possible.\r\n\r\nThe ability to edit an existing query would be very useful, I would like to see that added Someday™️, but I agree that the \"how\" is unclear. But I do not agree that this is a use case we should never support, so taking baby steps _now_ to align us in that direction in the future makes sense to me.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T17:28:05Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321860691",
            "id": 1321860691,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5Oyf5T",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620491195,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321860691/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T17:28:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321860691",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1321873823"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321873823"
                }
            },
            "author_association": "MEMBER",
            "body": "Well, that's now a different argument. If you envision **this** function to (eventually) do what I described as \"false expectation\", then the objection no longer applies.\r\n\r\nAs to how: The first step would be to simply `query.get()` the current effective query, put it in a scratch buffer, and load that as new query. You could add the information which files it was concatenated from -- if still available -- as a top comment, but I don't see how you could expect that simply `:w`riting it should work (without providing a path you are expected to have figured out).\r\n\r\nThe bigger question is how this should work with non-highlight queries...",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-11T17:42:19Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1321873823",
            "id": 1321873823,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5OyjGf",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1620512363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321873823/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-11T17:42:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1321873823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1322834520"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322834520"
                }
            },
            "author_association": "MEMBER",
            "body": "> `open_query_live_editor` would also be fine (but a mouthful).\r\n\r\n\"editor\" is in that name :)\r\n\r\nDoes \"inspect query\" work? Either \"edit query\" or \"inspect query\" must work. There is no point in hyper-describing stuff in command names, that is not useful to users. Having generic verbs that _generally_ are understood to generally either \"open stuff\" or \"develop stuff\" is the main bifurcation. Over-specifying command names like `open_query_live_editor` kills discoverability. Users don't care about the pedantic details of whether \"edit foo\" precisely matches the case of \"edit bar\". They just want common entrypoints.\r\n\r\nOur common entrypoints are \"inspect\" and \"edit\". If we identify a new, common paradigm that needs a name then we can introduce a new verb. But that isn't the case here.\r\n\r\nI prefer \"edit\" but \"inspect\" is acceptable. Are there any objections to `inspect_query` ?",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-12T10:27:57Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1322834520",
            "id": 1322834520,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5O2NpY",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1621916368,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322834520/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-12T10:27:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322834520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1322861443"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322861443"
                }
            },
            "author_association": "MEMBER",
            "body": "`inspect_query` to me means look at some representation of the query so I'm not a fan of it.\r\n\r\nI'm not against `edit_query` and I think this can be extended to also edit actual query files in the future with somethig like `edit_query({what})` where by default `{what}` means a scratch buffer, but could take the arguments: `highlights`, `injections`, `folds`, ...\r\n\r\nSo basically what @gpanders proposed.",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-12T10:52:03Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1322861443",
            "id": 1322861443,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5O2UOD",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1621963435,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322861443/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-12T10:59:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322861443",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1322863757"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322863757"
                }
            },
            "author_association": "MEMBER",
            "body": "If the goal is to extend this function to editing the \"actual\" queries (i.e., those returned by `query.get()`), then it should be `vim.treesitter.query.edit()`.\r\n\r\n",
            "commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "created_at": "2023-09-12T10:54:24Z",
            "diff_hunk": "@@ -133,6 +133,8 @@ The following new APIs and features were added.\n     `vim.treesitter.language.register`.\n   • The `#set!` directive now supports `injection.self` and `injection.parent` for injecting either the current node's language\n     or the parent LanguageTree's language, respectively.\n+  • Added `vim.treesitter.preview_query()`, for live editing of treesitter",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1322863757",
            "id": 1322863757,
            "in_reply_to_id": 1321719133,
            "line": 136,
            "node_id": "PRRC_kwDOAPphoM5O2UyN",
            "original_commit_id": "06adc102f9ea2a433e49cd9595688bd3442616e8",
            "original_line": 136,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 1621967300,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322863757/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-12T10:54:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1322863757",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "In my opinion this would be much more powerful when it would highlight specific captures and not the whole query like playground.",
            "created_at": "2023-08-14T05:32:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1676705987",
            "id": 1676705987,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j8IDD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676705987/reactions"
            },
            "updated_at": "2023-08-14T05:32:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676705987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In my opinion this would be much more powerful when it would highlight specific captures and not the whole query like playground.\r\n\r\n@max397574 Agreed. I'll learn how to do it :) \r\n\r\nWhat do you think of keeping the `playground`'s behaviour of highlighting the capture when the cursor is on an `@` character, and highlighting the entire query otherwise?",
            "created_at": "2023-08-14T06:19:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1676743524",
            "id": 1676743524,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j8RNk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676743524/reactions"
            },
            "updated_at": "2023-08-14T06:19:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676743524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think it should also highlight things when it's on the capture name and not just the @",
            "created_at": "2023-08-14T06:27:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1676750303",
            "id": 1676750303,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j8S3f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676750303/reactions"
            },
            "updated_at": "2023-08-14T06:27:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676750303",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Nice, thank you!\r\n\r\n> Should we add a title option such as the one that inspect_tree accepts?\r\n\r\nNot a priority.\r\n\r\n> I kept it simple for now and I'm only highlighting the matches of the entire query, not specific captures like the playground plugin does. Are you okay with that?\r\n\r\nI think we need to add that before merging; the expectation is that people can have multiple query stanzas to test how they interact (precedence etc.)\r\n\r\n> I feel like there's quite a bit of code repetition in the inspector and editor methods. Do we want to create a shared helper function and just leave the 2 separate for now?\r\n\r\nYes, please; that was the whole point of including it in the `dev` module. (Not necessarily a blocker for this PR, but please at least mark possible refactor as \"todo\".)\r\n\r\n> Should I mention this in news.txt?\r\n\r\nDefinitely! This is worth bragging about.",
            "created_at": "2023-08-14T08:08:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1676878515",
            "id": 1676878515,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j8yKz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676878515/reactions"
            },
            "updated_at": "2023-08-14T08:08:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676878515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Haven't had a chance to test it yet, so just making a note here: The query linter (and omnicomplete) should attach in the query editor.",
            "created_at": "2023-08-14T08:11:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1676881580",
            "id": 1676881580,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j8y6s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676881580/reactions"
            },
            "updated_at": "2023-08-14T08:11:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676881580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This looks great so far, I'm excited for this feature and am looking forward to using it!\r\n\r\n>What do you think of keeping the playground's behaviour of highlighting the capture when the cursor is on an @ character, and highlighting the entire query otherwise?\r\n\r\nTo quickly clarify terminology, a _query_ is everything in the query editor buffer. A query is made up of individual _patterns_, and _patterns_ can contain zero or more _captures_.\r\n\r\nI do not think it is very useful to highlight the entire query. Trying out the editor just now, my intuition was that the _pattern_ that my cursor is hovering over would be highlighted. If my cursor is over a _capture_ name instead, then just the capture is highlighted. That way I don't have to include a capture if I'm experimenting with patterns.",
            "created_at": "2023-08-14T15:10:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1677519567",
            "id": 1677519567,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j_OrP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1677519567/reactions"
            },
            "updated_at": "2023-08-14T15:11:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1677519567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@gpanders thank you for the review and explanation! I'm working on incorporating your feedback :)\r\n\r\nI'm struggling with finding a way to get the patterns from the query though. From the docs it seems like `Query:iter_matches` should help me highlight the patterns, but I cannot find a way to obtain the pattern from the pattern ID and the query. `query.captures`/`query.info.captures` have the captures and `query.info.patterns` has the predicates, but how to obtain the position information of the matches?\r\n\r\nIdk if this is part of the challenge, and if so I'll continue digging into it. I just want to make sure I'm not missing something.",
            "created_at": "2023-08-15T01:50:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1678315326",
            "id": 1678315326,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kCQ8-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678315326/reactions"
            },
            "updated_at": "2023-08-15T01:50:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678315326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmm I think you're right, I'm not aware of a way to iterate over patterns. AFAIK the API only provides methods for iterating over captures.\r\n\r\nOne way to get around this would be to add an implicit capture to each pattern, but I don't really like that idea.\r\n\r\nOk then let's modify what I suggested above. When the user's cursor is on a pattern, highlight all of the captures from that pattern in the buffer (along with virtual text in the buffer showing the name of the capture so they can be distinguished. We could maybe also use different highlight colors for different captures? There's a lot of design space here).\r\n\r\nThe `Query:iter_matches` API should give you the pattern that a capture is associated with. So the only remaining piece is to determine which pattern the user's cursor is over. I don't know of any off-the-shelf way to do this, but since Tree-sitter queries are basically just Scheme, rolling an extremely simple query parser would not be too difficult (you're essentially just counting parens).",
            "created_at": "2023-08-15T13:52:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1678968980",
            "id": 1678968980,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kEwiU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678968980/reactions"
            },
            "updated_at": "2023-08-15T13:52:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678968980",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think we should focus on getting an MVP merged and then iterating. So my vote would be to start with highlighting captures only (which is all that nvim-treesitter/playground did) for now. (Tree-sitter 0.20.9 will come with a set of shiny new APIs, including Tree Cursors, which might make this easier.)\r\n\r\nIf there's room for extra points in this PR, I'd rather take the refactor of common functionality ;)\r\n",
            "created_at": "2023-08-15T13:56:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1678974867",
            "id": 1678974867,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kEx-T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 6,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678974867/reactions"
            },
            "updated_at": "2023-08-15T14:05:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678974867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason +1. I got a bit carried away with imagining 😄.\r\n\r\nHighlighting only captures is a great first step. Let's get there first and do more later.",
            "created_at": "2023-08-15T14:25:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1679021887",
            "id": 1679021887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kE9c_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679021887/reactions"
            },
            "updated_at": "2023-08-15T14:25:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679021887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No worries, it's a good idea! Follow-up PRs very welcome; we can summarize ideas for some when merging.",
            "created_at": "2023-08-15T14:34:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1679036623",
            "id": 1679036623,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kFBDP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679036623/reactions"
            },
            "updated_at": "2023-08-15T14:34:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679036623",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@gpanders @clason sounds like a plan! Thank you both for the hints :)",
            "created_at": "2023-08-16T03:43:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1679914413",
            "id": 1679914413,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kIXWt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679914413/reactions"
            },
            "updated_at": "2023-08-16T03:43:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679914413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Okay amigos. I think this is a solid MVP and that I've addressed everyone's comments. Lmk if you would like me to change something :)",
            "created_at": "2023-08-19T04:00:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1684766813",
            "id": 1684766813,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5ka4Bd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684766813/reactions"
            },
            "updated_at": "2023-08-19T04:00:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684766813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Some small nibbles:\r\n\r\n* Highlighting does not work with `@ham.spam.eggs` captures.\r\n* The `vim.treesitter.omnifunc` doesn't seem to work properly (no results for something that works fine in a coresponding `highlights.scm`).\r\n\r\nOtherwise looks great!",
            "created_at": "2023-08-19T10:49:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1684917085",
            "id": 1684917085,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kbctd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684917085/reactions"
            },
            "updated_at": "2023-08-19T10:53:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684917085",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> * The `vim.treesitter.omnifunc` doesn't seem to work properly (no results for something that works fine in a coresponding `highlights.scm`).\r\n\r\n@clason yeah I noticed this earlier but I just assumed I was not correctly triggering completion (not exactly sure what the vanilla omnifunc experience is like). I'll look into it.",
            "created_at": "2023-08-19T16:44:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1685042509",
            "id": 1685042509,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kb7VN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685042509/reactions"
            },
            "updated_at": "2023-08-19T16:44:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685042509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @clason yeah I noticed this earlier but I just assumed I was not correctly triggering completion (not exactly sure what the vanilla omnifunc experience is like). I'll look into it.\r\n\r\nIt should complete node names on `<c-x><c-o>`, e.g., in Lua `(iden<c-x><c-o>` should complete `(identifier`.\r\n\r\nThe issue is that `guess_query_lang` fails, since that looks at the path of the file (e.g., `queries/lua/highlights.scm` is guessed as \"Lua\"). And different from the query linter, you cannot override the language when calling it.\r\n\r\n",
            "created_at": "2023-08-20T01:30:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1685148439",
            "id": 1685148439,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kcVMX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685148439/reactions"
            },
            "updated_at": "2023-08-20T01:30:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685148439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Found a bug:\r\n\r\n1. Open `:InspectTree`\r\n2. Press `o` to open the query editor\r\n3. Close the query editor\r\n4. In the `:InspectTree` window, press `o` again\r\n5. The query editor does not open",
            "created_at": "2023-08-24T01:28:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1690852025",
            "id": 1690852025,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kyFq5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1690852025/reactions"
            },
            "updated_at": "2023-08-24T01:28:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1690852025",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Found a bug:\r\n> \r\n> 1. Open `:InspectTree`\r\n> 2. Press `o` to open the query editor\r\n> 3. Close the query editor\r\n> 4. In the `:InspectTree` window, press `o` again\r\n> 5. The query editor does not open\r\n\r\nGood catch. Should be fixed now!",
            "created_at": "2023-08-24T02:51:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1690911276",
            "id": 1690911276,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kyUIs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1690911276/reactions"
            },
            "updated_at": "2023-08-24T02:51:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1690911276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@MariaSolOs Nicely done!\r\n\r\nSquashy McSquashface?",
            "created_at": "2023-08-25T12:12:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1693260597",
            "id": 1693260597,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5k7Rs1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1693260597/reactions"
            },
            "updated_at": "2023-08-25T12:12:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1693260597",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @MariaSolOs Nicely done!\r\n> \r\n> Squashy McSquashface?\r\n\r\nI thought we could just merge squash the PR, but sure I can do the squashing in here.",
            "created_at": "2023-08-25T15:09:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1693517598",
            "id": 1693517598,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5k8Qce",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1693517598/reactions"
            },
            "updated_at": "2023-08-25T15:09:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1693517598",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason squashed :)\r\n\r\nNow that I'm approaching the end, I also wanted to thank you (together with @gpanders, @lewis6991 and @max397574) for the reviews and guiding me through this! I learned a lot from y'all <3",
            "created_at": "2023-08-25T16:28:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1693622961",
            "id": 1693622961,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5k8qKx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 3,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1693622961/reactions"
            },
            "updated_at": "2023-08-25T16:28:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1693622961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@MariaSolOs Nicely done! Thank you for this fine contribution, and for your patience with us!",
            "created_at": "2023-08-26T00:12:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1694060410",
            "id": 1694060410,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5k-U96",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 7,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1694060410/reactions"
            },
            "updated_at": "2023-08-26T00:12:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1694060410",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24703/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/24703/commits",
    "created_at": "2023-08-13T17:30:44Z",
    "diff_url": "https://github.com/neovim/neovim/pull/24703.diff",
    "draft": false,
    "head": {
        "label": "MariaSolOs:query-editor",
        "ref": "query-editor",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/MariaSolOs/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/MariaSolOs/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/MariaSolOs/neovim/branches{/branch}",
            "clone_url": "https://github.com/MariaSolOs/neovim.git",
            "collaborators_url": "https://api.github.com/repos/MariaSolOs/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/MariaSolOs/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/MariaSolOs/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/MariaSolOs/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/MariaSolOs/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/MariaSolOs/neovim/contributors",
            "created_at": "2023-08-05T17:10:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/MariaSolOs/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/MariaSolOs/neovim/downloads",
            "events_url": "https://api.github.com/repos/MariaSolOs/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/MariaSolOs/neovim/forks",
            "full_name": "MariaSolOs/neovim",
            "git_commits_url": "https://api.github.com/repos/MariaSolOs/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/MariaSolOs/neovim/git/tags{/sha}",
            "git_url": "git://github.com/MariaSolOs/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/MariaSolOs/neovim/hooks",
            "html_url": "https://github.com/MariaSolOs/neovim",
            "id": 675070403,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/MariaSolOs/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/MariaSolOs/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/MariaSolOs/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/MariaSolOs/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/MariaSolOs/neovim/merges",
            "milestones_url": "https://api.github.com/repos/MariaSolOs/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOKDzBww",
            "notifications_url": "https://api.github.com/repos/MariaSolOs/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/MariaSolOs/neovim/pulls{/number}",
            "pushed_at": "2023-09-13T01:16:00Z",
            "releases_url": "https://api.github.com/repos/MariaSolOs/neovim/releases{/id}",
            "size": 235739,
            "ssh_url": "git@github.com:MariaSolOs/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/MariaSolOs/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/MariaSolOs/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/MariaSolOs/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/MariaSolOs/neovim/subscription",
            "svn_url": "https://github.com/MariaSolOs/neovim",
            "tags_url": "https://api.github.com/repos/MariaSolOs/neovim/tags",
            "teams_url": "https://api.github.com/repos/MariaSolOs/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/MariaSolOs/neovim/git/trees{/sha}",
            "updated_at": "2023-08-09T04:34:06Z",
            "url": "https://api.github.com/repos/MariaSolOs/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "06adc102f9ea2a433e49cd9595688bd3442616e8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/24703",
    "id": 1473443212,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "5d8ab32f3871b0232972cac1116ac7cba98389e5",
    "merged_at": "2023-08-25T18:17:36Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5X0vWM",
    "number": 24703,
    "patch_url": "https://github.com/neovim/neovim/pull/24703.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/24703/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/06adc102f9ea2a433e49cd9595688bd3442616e8",
    "title": "feat(treesitter): add a query editor",
    "updated_at": "2023-09-12T10:54:25Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
        "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
        "followers_url": "https://api.github.com/users/MariaSolOs/followers",
        "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
        "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MariaSolOs",
        "id": 62502207,
        "login": "MariaSolOs",
        "node_id": "MDQ6VXNlcjYyNTAyMjA3",
        "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
        "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
        "repos_url": "https://api.github.com/users/MariaSolOs/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MariaSolOs"
    }
}