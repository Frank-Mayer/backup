{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24703/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24703/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/24703"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24703"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24703/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/1e6da4ad1e6112cb964267e69132fecce098ae35"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4830,
            "forks_count": 4830,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1676,
            "open_issues_count": 1676,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-08-23T01:12:34Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 251340,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 68752,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-08-23T01:27:12Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 68752,
            "watchers_count": 68752,
            "web_commit_signoff_required": false
        },
        "sha": "fc0ee871de2f56dbb80879c912203a6372c54e1c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Closes #24678. I've implemented the 3 basic requirements of the issue + being able to open the editor from the inspector.\r\n\r\nHowever, I still have a couple of implementation questions for y'all experienced maintainers:\r\n<s> \n- Should we add a `title` option such as the one that `inspect_tree` accepts?\r\n- I kept it simple for now and I'm only highlighting the matches of the entire query, not specific captures like the `playground` plugin does. Are you okay with that?\r\n- I feel like there's quite a bit of code repetition in the inspector and editor methods. Do we want to create a shared helper function or just leave the 2 separate for now?\r\n- Should I mention this in `news.txt`?</s> (All questions answered!)\r\n\r\nAlso this is my first significant contribution to this repo so lmk if I missed an important step :)",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1293588920"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293588920"
                }
            },
            "author_association": "MEMBER",
            "body": "Include `TextChanged` here too\r\n\r\n```suggestion\r\n  api.nvim_create_autocmd({ 'InsertLeave', 'TextChanged' }, {\r\n```",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-14T14:58:26Z",
            "diff_hunk": "@@ -443,4 +454,129 @@ function M.inspect_tree(opts)\n   })\n end\n \n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    local w = vim.b[buf].dev_edit\n+    if api.nvim_win_is_valid(w) then\n+      api.nvim_win_close(w, true)\n+    end\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  -- TODO: Also add title option?\n+\n+  vim.b[buf].dev_edit = w\n+  vim.wo[w].scrolloff = 5\n+  vim.wo[w].wrap = false\n+  vim.wo[w].foldmethod = 'manual' -- disable folding\n+  vim.bo[b].buflisted = false\n+  vim.bo[b].buftype = 'nofile'\n+  vim.bo[b].bufhidden = 'wipe'\n+  vim.bo[b].filetype = 'query'\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-edit', {})\n+  api.nvim_create_autocmd('InsertLeave', {",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1293588920",
            "id": 1293588920,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NGpm4",
            "original_commit_id": "2473b0316fa9f6841a88aaaa0603e511a67f8a48",
            "original_line": 527,
            "original_position": 119,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1577041857,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293588920/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-14T15:04:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293588920",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1293593271"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293593271"
                }
            },
            "author_association": "MEMBER",
            "body": "Idea: also show the capture name as virtual text, in addition to highlighting in the buffer.",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-14T15:01:29Z",
            "diff_hunk": "@@ -443,4 +454,129 @@ function M.inspect_tree(opts)\n   })\n end\n \n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    local w = vim.b[buf].dev_edit\n+    if api.nvim_win_is_valid(w) then\n+      api.nvim_win_close(w, true)\n+    end\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  -- TODO: Also add title option?\n+\n+  vim.b[buf].dev_edit = w\n+  vim.wo[w].scrolloff = 5\n+  vim.wo[w].wrap = false\n+  vim.wo[w].foldmethod = 'manual' -- disable folding\n+  vim.bo[b].buflisted = false\n+  vim.bo[b].buftype = 'nofile'\n+  vim.bo[b].bufhidden = 'wipe'\n+  vim.bo[b].filetype = 'query'\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-edit', {})\n+  api.nvim_create_autocmd('InsertLeave', {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      vim.treesitter.query.lint(b, { langs = lang, clear = false })\n+\n+      api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+      local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+      local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+      if ok_query then\n+        for _, node, _ in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = end_col,\n+            hl_group = 'Visual',\n+          })\n+        end",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1293593271",
            "id": 1293593271,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NGqq3",
            "original_commit_id": "2473b0316fa9f6841a88aaaa0603e511a67f8a48",
            "original_line": 544,
            "original_position": 136,
            "original_start_line": 539,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1577041857,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293593271/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-14T15:04:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293593271",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1293596018"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293596018"
                }
            },
            "author_association": "MEMBER",
            "body": "Needs a `BufEnter` autocommand to re-enable the highlights after entering the buffer again. Right now, the highlights are only applied on `InsertLeave`. If you leave the query editor, the highlights go away.",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-14T15:03:14Z",
            "diff_hunk": "@@ -443,4 +454,129 @@ function M.inspect_tree(opts)\n   })\n end\n \n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    local w = vim.b[buf].dev_edit\n+    if api.nvim_win_is_valid(w) then\n+      api.nvim_win_close(w, true)\n+    end\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  -- TODO: Also add title option?\n+\n+  vim.b[buf].dev_edit = w\n+  vim.wo[w].scrolloff = 5\n+  vim.wo[w].wrap = false\n+  vim.wo[w].foldmethod = 'manual' -- disable folding\n+  vim.bo[b].buflisted = false\n+  vim.bo[b].buftype = 'nofile'\n+  vim.bo[b].bufhidden = 'wipe'\n+  vim.bo[b].filetype = 'query'\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local group = api.nvim_create_augroup('treesitter/dev-edit', {})\n+  api.nvim_create_autocmd('InsertLeave', {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      vim.treesitter.query.lint(b, { langs = lang, clear = false })\n+\n+      api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+      local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+      local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+      if ok_query then\n+        for _, node, _ in query:iter_captures(parser:trees()[1]:root(), buf, 0, -1) do\n+          local lnum, col, end_lnum, end_col = node:range()\n+          api.nvim_buf_set_extmark(buf, ns, lnum, col, {\n+            end_row = end_lnum,\n+            end_col = end_col,\n+            hl_group = 'Visual',\n+          })\n+        end\n+      end\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = b,\n+    callback = function()\n+      api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    end,\n+  })\n+  api.nvim_create_autocmd('BufLeave', {\n+    group = group,\n+    buffer = buf,\n+    callback = function()\n+      if not api.nvim_buf_is_loaded(b) then\n+        return true\n+      end\n+\n+      api.nvim_buf_clear_namespace(b, ns, 0, -1)\n+    end,\n+  })",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1293596018",
            "id": 1293596018,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NGrVy",
            "original_commit_id": "2473b0316fa9f6841a88aaaa0603e511a67f8a48",
            "original_line": 565,
            "original_position": 157,
            "original_start_line": 548,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1577041857,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293596018/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-08-14T15:04:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1293596018",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296615733"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296615733"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure if this is the right place to document this highlight group. I don't want it to be confusing with the other highlighting section...",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-17T02:47:45Z",
            "diff_hunk": "@@ -1206,4 +1223,10 @@ LanguageTree:trees()                                    *LanguageTree:trees()*\n     Returns all trees this language tree contains. Does not include child\n     languages.\n \n+==============================================================================\n+QUERY EDITOR HIGHLIGHT GROUPS                          query-highlight-groups\n+\n+                                                  *hl-TsQueryEditorCapture*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296615733",
            "id": 1296615733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSMk1",
            "original_commit_id": "36c0c60bc8822fdcb2505b74e242c486d03b20e3",
            "original_line": 1229,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1581678641,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296615733/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T02:48:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296615733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296693325"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296693325"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd use the same logic as for the tree view: just use one of the default search highlights (`CurSearch`?) No need for a separate highlight (for now).",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-17T05:29:08Z",
            "diff_hunk": "@@ -1206,4 +1223,10 @@ LanguageTree:trees()                                    *LanguageTree:trees()*\n     Returns all trees this language tree contains. Does not include child\n     languages.\n \n+==============================================================================\n+QUERY EDITOR HIGHLIGHT GROUPS                          query-highlight-groups\n+\n+                                                  *hl-TsQueryEditorCapture*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296693325",
            "id": 1296693325,
            "in_reply_to_id": 1296615733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSfhN",
            "original_commit_id": "36c0c60bc8822fdcb2505b74e242c486d03b20e3",
            "original_line": 1229,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1581805978,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296693325/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T05:29:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296693325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296699218"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296699218"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think `NonText` is more appropriate, since it's a virtual text thing and `CurSearch` is usually a very bright highlight.",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-17T05:39:16Z",
            "diff_hunk": "@@ -1206,4 +1223,10 @@ LanguageTree:trees()                                    *LanguageTree:trees()*\n     Returns all trees this language tree contains. Does not include child\n     languages.\n \n+==============================================================================\n+QUERY EDITOR HIGHLIGHT GROUPS                          query-highlight-groups\n+\n+                                                  *hl-TsQueryEditorCapture*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296699218",
            "id": 1296699218,
            "in_reply_to_id": 1296615733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSg9S",
            "original_commit_id": "36c0c60bc8822fdcb2505b74e242c486d03b20e3",
            "original_line": 1229,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1581814668,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296699218/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T05:39:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296699218",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296704136"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296704136"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh, sorry, this is for the capture name virtual text, not the highlight; I didn't read properly. Then I'd use the same one that the tree view uses for the language names (if you press `I`)?",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-17T05:47:21Z",
            "diff_hunk": "@@ -1206,4 +1223,10 @@ LanguageTree:trees()                                    *LanguageTree:trees()*\n     Returns all trees this language tree contains. Does not include child\n     languages.\n \n+==============================================================================\n+QUERY EDITOR HIGHLIGHT GROUPS                          query-highlight-groups\n+\n+                                                  *hl-TsQueryEditorCapture*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296704136",
            "id": 1296704136,
            "in_reply_to_id": 1296615733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSiKI",
            "original_commit_id": "36c0c60bc8822fdcb2505b74e242c486d03b20e3",
            "original_line": 1229,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1581821715,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296704136/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T05:47:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296704136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296706528"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296706528"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Oh that's `Title`. I'll change it then.",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-17T05:51:29Z",
            "diff_hunk": "@@ -1206,4 +1223,10 @@ LanguageTree:trees()                                    *LanguageTree:trees()*\n     Returns all trees this language tree contains. Does not include child\n     languages.\n \n+==============================================================================\n+QUERY EDITOR HIGHLIGHT GROUPS                          query-highlight-groups\n+\n+                                                  *hl-TsQueryEditorCapture*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296706528",
            "id": 1296706528,
            "in_reply_to_id": 1296615733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSivg",
            "original_commit_id": "36c0c60bc8822fdcb2505b74e242c486d03b20e3",
            "original_line": 1229,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1581825418,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296706528/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T05:51:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296706528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1296735196"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296735196"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "While debugging this I noticed that `cursor_word` seems to include preceding whitespace. That is, if I have something like `) @func` then `cursor_word` will expand to `@func` when the cursor is just after the `)` or the space after it.",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-17T06:31:19Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1296735196",
            "id": 1296735196,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NSpvc",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 531,
            "original_position": 169,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1581869211,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296735196/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T06:31:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1296735196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1297080780"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297080780"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim.F.npcall`  instead of `pcall` could be used (query will be null in case of failure, `ok_query` no longer needed)",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-17T11:21:31Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1297080780",
            "id": 1297080780,
            "line": 532,
            "node_id": "PRRC_kwDOAPphoM5NT-HM",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 529,
            "original_position": 167,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 170,
            "pull_request_review_id": 1582397595,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297080780/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T11:21:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297080780",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7189118?v=4",
                "events_url": "https://api.github.com/users/theHamsta/events{/privacy}",
                "followers_url": "https://api.github.com/users/theHamsta/followers",
                "following_url": "https://api.github.com/users/theHamsta/following{/other_user}",
                "gists_url": "https://api.github.com/users/theHamsta/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theHamsta",
                "id": 7189118,
                "login": "theHamsta",
                "node_id": "MDQ6VXNlcjcxODkxMTg=",
                "organizations_url": "https://api.github.com/users/theHamsta/orgs",
                "received_events_url": "https://api.github.com/users/theHamsta/received_events",
                "repos_url": "https://api.github.com/users/theHamsta/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theHamsta/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theHamsta/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theHamsta"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1297368439"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297368439"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It looks like a personal preference though. Would you like me to change line 94 as well then? ",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-17T15:11:56Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1297368439",
            "id": 1297368439,
            "in_reply_to_id": 1297080780,
            "line": 532,
            "node_id": "PRRC_kwDOAPphoM5NVEV3",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 529,
            "original_position": 167,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 170,
            "pull_request_review_id": 1582855802,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297368439/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T15:11:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297368439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1297373260"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297373260"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's avoid using `vim.F` for now. Its future is tenuous and there's little gain in this case.",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-17T15:15:48Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1297373260",
            "id": 1297373260,
            "in_reply_to_id": 1297080780,
            "line": 532,
            "node_id": "PRRC_kwDOAPphoM5NVFhM",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 529,
            "original_position": 167,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 170,
            "pull_request_review_id": 1582864597,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297373260/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-17T15:15:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1297373260",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1298008338"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1298008338"
                }
            },
            "author_association": "MEMBER",
            "body": "That's fine; better to highlight when not expected (as long as it's clear from context _what_ is highlighted) than not to highlight when it should.",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-18T05:05:29Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'\n+  set_dev_properties(w, b)\n+\n+  local ok, parser = pcall(vim.treesitter.get_parser, buf)\n+  if not ok then\n+    return nil, 'No parser available for the given buffer'\n+  end\n+  local lang = parser:lang()\n+\n+  local ns = api.nvim_create_namespace('')\n+\n+  local function update_highlights()\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    local query_content = table.concat(api.nvim_buf_get_lines(b, 0, -1, false), '\\n')\n+    local ok_query, query = pcall(vim.treesitter.query.parse, lang, query_content)\n+    if ok_query then\n+      local cursor_word = vim.fn.expand('<cword>')",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1298008338",
            "id": 1298008338,
            "in_reply_to_id": 1296735196,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5NXgkS",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 531,
            "original_position": 169,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": null,
            "pull_request_review_id": 1583855611,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1298008338/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-18T05:05:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1298008338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1299286797"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299286797"
                }
            },
            "author_association": "MEMBER",
            "body": "\r\nSuggestion: add an `opts` field with `lang` to `query.omnifunc` that is used instead of `guess_lang` if set, and create a closure here to set `vim.bo.omnifunc` to.\r\n\r\n(Could do the same in the query ftplugin; that'd save the constant lookup.)\r\n",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-20T01:32:43Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1299286797",
            "id": 1299286797,
            "line": 514,
            "node_id": "PRRC_kwDOAPphoM5NcYsN",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 515,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 152,
            "pull_request_review_id": 1585772739,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299286797/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-20T01:32:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299286797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1299414252"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414252"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the hint @clason! I'm having some trouble creating such closure though. I've tried:\r\n```lua\r\n-- Attempt 1\r\nlocal omnifunc_opts = { lang = lang }\r\nvim.bo[b].omnifunc =\r\n  '{findstart, base -> v:lua.vim.treesitter.query.omnifunc(findstart, base, omnifunc_opts)}'\r\n\r\n-- Attempt 2\r\n-- Inside M.edit_query\r\nM.omnifunc = function(findstart, base)\r\n  return vim.treesitter.query.omnifunc(findstart, base, { lang = lang })\r\nend\r\nvim.bo[b].omnifunc = 'v:lua.vim.treesitter.dev.omnifunc'\r\n```\r\n\r\nIs this the right syntax?",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-20T17:52:17Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1299414252",
            "id": 1299414252,
            "in_reply_to_id": 1299286797,
            "line": 514,
            "node_id": "PRRC_kwDOAPphoM5Nc3zs",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 515,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 152,
            "pull_request_review_id": 1585944166,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414252/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-20T17:52:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1299414589"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414589"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Alternatively I can just add a buffer property to the query editor buffer, do not introduce a new parameter in `omnifunc`, and instead use that new buffer property as a fallback if `guess_query_lang` fails.",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-20T17:55:24Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1299414589",
            "id": 1299414589,
            "in_reply_to_id": 1299286797,
            "line": 514,
            "node_id": "PRRC_kwDOAPphoM5Nc349",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 515,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 152,
            "pull_request_review_id": 1585944446,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414589/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-20T17:55:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299414589",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1299425373"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299425373"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Okay I came up with another hack. Let me know what you think :)",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-20T19:34:31Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1299425373",
            "id": 1299425373,
            "in_reply_to_id": 1299286797,
            "line": 514,
            "node_id": "PRRC_kwDOAPphoM5Nc6hd",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 515,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 152,
            "pull_request_review_id": 1585953596,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299425373/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-20T19:34:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1299425373",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300160706"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300160706"
                }
            },
            "author_association": "MEMBER",
            "body": "That certainly works, and I can't think of any downsides off the top of my head.\r\n\r\n(Closure -- variant 2 of course; no need to do it in vimscript -- needs to be in global scope, which makes it a bit trickier.)\r\n\r\n",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-21T14:04:25Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300160706",
            "id": 1300160706,
            "in_reply_to_id": 1299286797,
            "line": 514,
            "node_id": "PRRC_kwDOAPphoM5NfuDC",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 515,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 152,
            "pull_request_review_id": 1587073369,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300160706/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T14:04:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300160706",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300226016"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300226016"
                }
            },
            "author_association": "MEMBER",
            "body": "Bikeshed: should this be `vim.treesitter.query.edit()` instead? We already have the `.query` namespace.\r\n\r\ncc @clason @lewis6991 @justinmk ",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-21T14:53:18Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300226016",
            "id": 1300226016,
            "line": 547,
            "node_id": "PRRC_kwDOAPphoM5Nf9_g",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 547,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": 4,
            "pull_request_review_id": 1587181609,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300226016/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T14:53:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300226016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300240663"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300240663"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, I was starting to say \"no strong feelings either way\", but I worry that this gives the wrong impression (editing the _current_ query). \r\n\r\nMaybe `preview` (`vim.treesitter.query.preview()` and `:PreviewQuery`)?\r\n ",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-21T15:04:30Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300240663",
            "id": 1300240663,
            "in_reply_to_id": 1300226016,
            "line": 547,
            "node_id": "PRRC_kwDOAPphoM5NgBkX",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 547,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": 4,
            "pull_request_review_id": 1587208059,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300240663/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T15:04:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300240663",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300253157"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300253157"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@clason Yeah so the global closure felt weird, and I was also a bit afraid of the impact of adding an extra parameter to a function meant to only have 2 (`findstart` and `base`). I can use that approach though if you prefer.",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-21T15:10:22Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300253157",
            "id": 1300253157,
            "in_reply_to_id": 1299286797,
            "line": 514,
            "node_id": "PRRC_kwDOAPphoM5NgEnl",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 515,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 152,
            "pull_request_review_id": 1587231186,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300253157/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T15:10:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300253157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300264496"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300264496"
                }
            },
            "author_association": "MEMBER",
            "body": "No, it's fine, your trick is good for now (at least). We can still revisit if it turns out there are problems with it -- and if not, it clearly works fine ;)",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-21T15:15:21Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300264496",
            "id": 1300264496,
            "in_reply_to_id": 1299286797,
            "line": 514,
            "node_id": "PRRC_kwDOAPphoM5NgHYw",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 515,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 152,
            "pull_request_review_id": 1587252879,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300264496/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T15:15:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300264496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300269162"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300269162"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I would find it a bit odd to have the editor and inspector in different namespaces, but if there are plans to expand the editor beyond the playground then maybe it makes sense…",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-21T15:17:31Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300269162",
            "id": 1300269162,
            "in_reply_to_id": 1300226016,
            "line": 547,
            "node_id": "PRRC_kwDOAPphoM5NgIhq",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 547,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": 4,
            "pull_request_review_id": 1587261833,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300269162/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T15:17:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300269162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300277451"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300277451"
                }
            },
            "author_association": "MEMBER",
            "body": "To be honest, I would have preferred to have everything under the same namespace -- be it `dev`, `playground`, `console`, whatever. (No need to have top-level exposed Lua functions if the main entry point is supposed to be the Ex commands.) But I'm in the minority here with my penchant for categorization. \r\n\r\nMy main point here is just that I don't think `vim.treesitter.query.edit()` is a good choice, as it has nothing to do with the \"real\" queries that are handled by the rest of the module.",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-21T15:22:24Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300277451",
            "id": 1300277451,
            "in_reply_to_id": 1300226016,
            "line": 547,
            "node_id": "PRRC_kwDOAPphoM5NgKjL",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 547,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": 4,
            "pull_request_review_id": 1587271141,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300277451/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T15:22:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300277451",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1300503365"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300503365"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Sounds good :)",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-21T18:29:29Z",
            "diff_hunk": "@@ -436,11 +457,150 @@ function M.inspect_tree(opts)\n     buffer = buf,\n     once = true,\n     callback = function()\n-      if api.nvim_win_is_valid(w) then\n-        api.nvim_win_close(w, true)\n+      close_win(w)\n+    end,\n+  })\n+end\n+\n+-- TODO(MariaSolOs): Add helper functions for common code\n+-- between the query editor and the tree inspector.\n+--- @class EditQueryOpts\n+--- @field bufnr integer? Buffer to draw the editor into. If omitted, a new\n+---                       buffer is created.\n+--- @field winid integer? Window id to display the editor buffer in. If omitted,\n+---                       a new window is created with {command}.\n+--- @field command string? Vimscript command to create the window. Default\n+---                        value is \"60vnew\" or \"new\" if the inspector is open.\n+---                        Only used when {winid} is nil.\n+\n+--- @private\n+--- @param opts EditQueryOpts?\n+M.edit_query = function(opts)\n+  vim.validate({\n+    opts = { opts, 't', true },\n+  })\n+\n+  opts = opts or {}\n+\n+  local buf = api.nvim_get_current_buf()\n+\n+  -- Close any existing editor window\n+  if vim.b[buf].dev_edit then\n+    close_win(vim.b[buf].dev_edit)\n+  end\n+\n+  local w = opts.winid\n+  if not w then\n+    local cmd = opts.command or '60vnew'\n+    -- If the inspector is open, place the editor above it.\n+    local base_buf = vim.b[buf].dev_base ---@type integer?\n+    local inspect_buf = base_buf and vim.b[base_buf].dev_inspect\n+    if base_buf and api.nvim_win_is_valid(inspect_buf) then\n+      vim.api.nvim_set_current_win(inspect_buf)\n+      buf = base_buf\n+      cmd = 'new'\n+    end\n+    vim.cmd(cmd)\n+    w = api.nvim_get_current_win()\n+  end\n+\n+  local b = opts.bufnr\n+  if b then\n+    api.nvim_win_set_buf(w, b)\n+  else\n+    b = api.nvim_win_get_buf(w)\n+  end\n+\n+  vim.b[buf].dev_edit = w\n+  vim.bo[b].omnifunc = 'v:lua.vim.treesitter.query.omnifunc'",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1300503365",
            "id": 1300503365,
            "in_reply_to_id": 1299286797,
            "line": 514,
            "node_id": "PRRC_kwDOAPphoM5NhBtF",
            "original_commit_id": "4d6de9ae7d79136c14b4c9f2a05f3ae46a12b847",
            "original_line": 515,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/dev.lua",
            "position": 152,
            "pull_request_review_id": 1587637893,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300503365/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-21T18:29:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1300503365",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24703#discussion_r1301127480"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24703"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1301127480"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Alright I don't have a strong opinion about this, so someone that please tell me what to do lol 😅",
            "commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "created_at": "2023-08-22T07:10:34Z",
            "diff_hunk": "@@ -544,6 +544,22 @@ library.\n ==============================================================================\n Lua module: vim.treesitter                               *lua-treesitter-core*\n \n+edit_query({opts})                               *vim.treesitter.edit_query()*",
            "html_url": "https://github.com/neovim/neovim/pull/24703#discussion_r1301127480",
            "id": 1301127480,
            "in_reply_to_id": 1300226016,
            "line": 547,
            "node_id": "PRRC_kwDOAPphoM5NjaE4",
            "original_commit_id": "1e6da4ad1e6112cb964267e69132fecce098ae35",
            "original_line": 547,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": 4,
            "pull_request_review_id": 1588616119,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1301127480/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-22T07:10:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1301127480",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "In my opinion this would be much more powerful when it would highlight specific captures and not the whole query like playground.",
            "created_at": "2023-08-14T05:32:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1676705987",
            "id": 1676705987,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j8IDD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676705987/reactions"
            },
            "updated_at": "2023-08-14T05:32:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676705987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> In my opinion this would be much more powerful when it would highlight specific captures and not the whole query like playground.\r\n\r\n@max397574 Agreed. I'll learn how to do it :) \r\n\r\nWhat do you think of keeping the `playground`'s behaviour of highlighting the capture when the cursor is on an `@` character, and highlighting the entire query otherwise?",
            "created_at": "2023-08-14T06:19:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1676743524",
            "id": 1676743524,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j8RNk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676743524/reactions"
            },
            "updated_at": "2023-08-14T06:19:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676743524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think it should also highlight things when it's on the capture name and not just the @",
            "created_at": "2023-08-14T06:27:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1676750303",
            "id": 1676750303,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j8S3f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676750303/reactions"
            },
            "updated_at": "2023-08-14T06:27:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676750303",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Nice, thank you!\r\n\r\n> Should we add a title option such as the one that inspect_tree accepts?\r\n\r\nNot a priority.\r\n\r\n> I kept it simple for now and I'm only highlighting the matches of the entire query, not specific captures like the playground plugin does. Are you okay with that?\r\n\r\nI think we need to add that before merging; the expectation is that people can have multiple query stanzas to test how they interact (precedence etc.)\r\n\r\n> I feel like there's quite a bit of code repetition in the inspector and editor methods. Do we want to create a shared helper function and just leave the 2 separate for now?\r\n\r\nYes, please; that was the whole point of including it in the `dev` module. (Not necessarily a blocker for this PR, but please at least mark possible refactor as \"todo\".)\r\n\r\n> Should I mention this in news.txt?\r\n\r\nDefinitely! This is worth bragging about.",
            "created_at": "2023-08-14T08:08:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1676878515",
            "id": 1676878515,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j8yKz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676878515/reactions"
            },
            "updated_at": "2023-08-14T08:08:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676878515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Haven't had a chance to test it yet, so just making a note here: The query linter (and omnicomplete) should attach in the query editor.",
            "created_at": "2023-08-14T08:11:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1676881580",
            "id": 1676881580,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j8y6s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676881580/reactions"
            },
            "updated_at": "2023-08-14T08:11:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676881580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This looks great so far, I'm excited for this feature and am looking forward to using it!\r\n\r\n>What do you think of keeping the playground's behaviour of highlighting the capture when the cursor is on an @ character, and highlighting the entire query otherwise?\r\n\r\nTo quickly clarify terminology, a _query_ is everything in the query editor buffer. A query is made up of individual _patterns_, and _patterns_ can contain zero or more _captures_.\r\n\r\nI do not think it is very useful to highlight the entire query. Trying out the editor just now, my intuition was that the _pattern_ that my cursor is hovering over would be highlighted. If my cursor is over a _capture_ name instead, then just the capture is highlighted. That way I don't have to include a capture if I'm experimenting with patterns.",
            "created_at": "2023-08-14T15:10:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1677519567",
            "id": 1677519567,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5j_OrP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1677519567/reactions"
            },
            "updated_at": "2023-08-14T15:11:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1677519567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@gpanders thank you for the review and explanation! I'm working on incorporating your feedback :)\r\n\r\nI'm struggling with finding a way to get the patterns from the query though. From the docs it seems like `Query:iter_matches` should help me highlight the patterns, but I cannot find a way to obtain the pattern from the pattern ID and the query. `query.captures`/`query.info.captures` have the captures and `query.info.patterns` has the predicates, but how to obtain the position information of the matches?\r\n\r\nIdk if this is part of the challenge, and if so I'll continue digging into it. I just want to make sure I'm not missing something.",
            "created_at": "2023-08-15T01:50:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1678315326",
            "id": 1678315326,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kCQ8-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678315326/reactions"
            },
            "updated_at": "2023-08-15T01:50:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678315326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmm I think you're right, I'm not aware of a way to iterate over patterns. AFAIK the API only provides methods for iterating over captures.\r\n\r\nOne way to get around this would be to add an implicit capture to each pattern, but I don't really like that idea.\r\n\r\nOk then let's modify what I suggested above. When the user's cursor is on a pattern, highlight all of the captures from that pattern in the buffer (along with virtual text in the buffer showing the name of the capture so they can be distinguished. We could maybe also use different highlight colors for different captures? There's a lot of design space here).\r\n\r\nThe `Query:iter_matches` API should give you the pattern that a capture is associated with. So the only remaining piece is to determine which pattern the user's cursor is over. I don't know of any off-the-shelf way to do this, but since Tree-sitter queries are basically just Scheme, rolling an extremely simple query parser would not be too difficult (you're essentially just counting parens).",
            "created_at": "2023-08-15T13:52:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1678968980",
            "id": 1678968980,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kEwiU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678968980/reactions"
            },
            "updated_at": "2023-08-15T13:52:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678968980",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think we should focus on getting an MVP merged and then iterating. So my vote would be to start with highlighting captures only (which is all that nvim-treesitter/playground did) for now. (Tree-sitter 0.20.9 will come with a set of shiny new APIs, including Tree Cursors, which might make this easier.)\r\n\r\nIf there's room for extra points in this PR, I'd rather take the refactor of common functionality ;)\r\n",
            "created_at": "2023-08-15T13:56:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1678974867",
            "id": 1678974867,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kEx-T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 5,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678974867/reactions"
            },
            "updated_at": "2023-08-15T14:05:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1678974867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason +1. I got a bit carried away with imagining 😄.\r\n\r\nHighlighting only captures is a great first step. Let's get there first and do more later.",
            "created_at": "2023-08-15T14:25:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1679021887",
            "id": 1679021887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kE9c_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679021887/reactions"
            },
            "updated_at": "2023-08-15T14:25:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679021887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No worries, it's a good idea! Follow-up PRs very welcome; we can summarize ideas for some when merging.",
            "created_at": "2023-08-15T14:34:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1679036623",
            "id": 1679036623,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kFBDP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679036623/reactions"
            },
            "updated_at": "2023-08-15T14:34:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679036623",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@gpanders @clason sounds like a plan! Thank you both for the hints :)",
            "created_at": "2023-08-16T03:43:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1679914413",
            "id": 1679914413,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kIXWt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679914413/reactions"
            },
            "updated_at": "2023-08-16T03:43:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1679914413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Okay amigos. I think this is a solid MVP and that I've addressed everyone's comments. Lmk if you would like me to change something :)",
            "created_at": "2023-08-19T04:00:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1684766813",
            "id": 1684766813,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5ka4Bd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684766813/reactions"
            },
            "updated_at": "2023-08-19T04:00:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684766813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Some small nibbles:\r\n\r\n* Highlighting does not work with `@ham.spam.eggs` captures.\r\n* The `vim.treesitter.omnifunc` doesn't seem to work properly (no results for something that works fine in a coresponding `highlights.scm`).\r\n\r\nOtherwise looks great!",
            "created_at": "2023-08-19T10:49:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1684917085",
            "id": 1684917085,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kbctd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684917085/reactions"
            },
            "updated_at": "2023-08-19T10:53:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1684917085",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> * The `vim.treesitter.omnifunc` doesn't seem to work properly (no results for something that works fine in a coresponding `highlights.scm`).\r\n\r\n@clason yeah I noticed this earlier but I just assumed I was not correctly triggering completion (not exactly sure what the vanilla omnifunc experience is like). I'll look into it.",
            "created_at": "2023-08-19T16:44:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1685042509",
            "id": 1685042509,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kb7VN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685042509/reactions"
            },
            "updated_at": "2023-08-19T16:44:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685042509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @clason yeah I noticed this earlier but I just assumed I was not correctly triggering completion (not exactly sure what the vanilla omnifunc experience is like). I'll look into it.\r\n\r\nIt should complete node names on `<c-x><c-o>`, e.g., in Lua `(iden<c-x><c-o>` should complete `(identifier`.\r\n\r\nThe issue is that `guess_query_lang` fails, since that looks at the path of the file (e.g., `queries/lua/highlights.scm` is guessed as \"Lua\"). And different from the query linter, you cannot override the language when calling it.\r\n\r\n",
            "created_at": "2023-08-20T01:30:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/24703#issuecomment-1685148439",
            "id": 1685148439,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
            "node_id": "IC_kwDOAPphoM5kcVMX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685148439/reactions"
            },
            "updated_at": "2023-08-20T01:30:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685148439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24703/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/24703/commits",
    "created_at": "2023-08-13T17:30:44Z",
    "diff_url": "https://github.com/neovim/neovim/pull/24703.diff",
    "draft": false,
    "head": {
        "label": "MariaSolOs:query-editor",
        "ref": "query-editor",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/MariaSolOs/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/MariaSolOs/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/MariaSolOs/neovim/branches{/branch}",
            "clone_url": "https://github.com/MariaSolOs/neovim.git",
            "collaborators_url": "https://api.github.com/repos/MariaSolOs/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/MariaSolOs/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/MariaSolOs/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/MariaSolOs/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/MariaSolOs/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/MariaSolOs/neovim/contributors",
            "created_at": "2023-08-05T17:10:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/MariaSolOs/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/MariaSolOs/neovim/downloads",
            "events_url": "https://api.github.com/repos/MariaSolOs/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/MariaSolOs/neovim/forks",
            "full_name": "MariaSolOs/neovim",
            "git_commits_url": "https://api.github.com/repos/MariaSolOs/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/MariaSolOs/neovim/git/tags{/sha}",
            "git_url": "git://github.com/MariaSolOs/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/MariaSolOs/neovim/hooks",
            "html_url": "https://github.com/MariaSolOs/neovim",
            "id": 675070403,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/MariaSolOs/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/MariaSolOs/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/MariaSolOs/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/MariaSolOs/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/MariaSolOs/neovim/merges",
            "milestones_url": "https://api.github.com/repos/MariaSolOs/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOKDzBww",
            "notifications_url": "https://api.github.com/repos/MariaSolOs/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/MariaSolOs/neovim/pulls{/number}",
            "pushed_at": "2023-08-20T19:33:41Z",
            "releases_url": "https://api.github.com/repos/MariaSolOs/neovim/releases{/id}",
            "size": 243710,
            "ssh_url": "git@github.com:MariaSolOs/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/MariaSolOs/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/MariaSolOs/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/MariaSolOs/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/MariaSolOs/neovim/subscription",
            "svn_url": "https://github.com/MariaSolOs/neovim",
            "tags_url": "https://api.github.com/repos/MariaSolOs/neovim/tags",
            "teams_url": "https://api.github.com/repos/MariaSolOs/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/MariaSolOs/neovim/git/trees{/sha}",
            "updated_at": "2023-08-09T04:34:06Z",
            "url": "https://api.github.com/repos/MariaSolOs/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "1e6da4ad1e6112cb964267e69132fecce098ae35",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/24703",
    "id": 1473443212,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24703",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "a2c0279afd74af3f5fea5808b77e63abce4cdf13",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5X0vWM",
    "number": 24703,
    "patch_url": "https://github.com/neovim/neovim/pull/24703.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/24703/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/1e6da4ad1e6112cb964267e69132fecce098ae35",
    "title": "feat(treesitter): add a query editor",
    "updated_at": "2023-08-22T07:15:41Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/24703",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
        "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
        "followers_url": "https://api.github.com/users/MariaSolOs/followers",
        "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
        "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MariaSolOs",
        "id": 62502207,
        "login": "MariaSolOs",
        "node_id": "MDQ6VXNlcjYyNTAyMjA3",
        "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
        "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
        "repos_url": "https://api.github.com/users/MariaSolOs/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MariaSolOs"
    }
}