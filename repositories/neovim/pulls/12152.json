{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/12152/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/12152/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/12152"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/12152"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/12152/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/12152"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/392e4ce331e86a1117de45075aebdf2159d21d31"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5766,
            "forks_count": 5766,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1818,
            "open_issues_count": 1818,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-12-23T21:39:36Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 300480,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 84495,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-12-24T02:11:47Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 84495,
            "watchers_count": 84495,
            "web_commit_signoff_required": false
        },
        "sha": "c5466ba6ef8333183e1c43c7e762e44539fb2358",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Branch for implementing asynchronous writes in neovim. ",
    "closed_at": "2024-12-17T12:42:32Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12152#discussion_r410820521"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12152"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/410820521"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@teto, A question:\r\n\r\nOver here, if we fail copying the original file, we still try to set atime and mtime on the backup file. Is that intentional? What is the point of this if there is no file yet? If this isn't the case then I must have misunderstood something.",
            "commit_id": "392e4ce331e86a1117de45075aebdf2159d21d31",
            "created_at": "2020-04-19T05:23:57Z",
            "diff_hunk": "@@ -2736,156 +2736,172 @@ buf_write(\n       backup_ext = p_bex;\n \n     if (backup_copy) {\n-      char_u *wp;\n-      int some_error = false;\n-      char_u      *dirp;\n-      char_u      *rootname;\n-      char_u      *p;\n-\n-      /*\n-       * Try to make the backup in each directory in the 'bdir' option.\n-       *\n-       * Unix semantics has it, that we may have a writable file,\n-       * that cannot be recreated with a simple open(..., O_CREAT, ) e.g:\n-       *  - the directory is not writable,\n-       *  - the file may be a symbolic link,\n-       *  - the file may belong to another user/group, etc.\n-       *\n-       * For these reasons, the existing writable file must be truncated\n-       * and reused. Creation of a backup COPY will be attempted.\n-       */\n-      dirp = p_bdir;\n-      while (*dirp) {\n-        /*\n-         * Isolate one directory name, using an entry in 'bdir'.\n-         */\n-        (void)copy_option_part(&dirp, IObuff, IOSIZE, \",\");\n-        p = IObuff + STRLEN(IObuff);\n-        if (after_pathsep((char *)IObuff, (char *)p) && p[-1] == p[-2]) {\n-          // Ends with '//', Use Full path\n-          if ((p = (char_u *)make_percent_swname((char *)IObuff, (char *)fname))\n-              != NULL) {\n-            backup = (char_u *)modname((char *)p, (char *)backup_ext,\n-                                       no_prepend_dot);\n-            xfree(p);\n-          }\n-        }\n-\n-        rootname = get_file_in_dir(fname, IObuff);\n-        if (rootname == NULL) {\n-          some_error = TRUE;                /* out of memory */\n-          goto nobackup;\n-        }\n-\n-        FileInfo file_info_new;\n-        {\n-          //\n-          // Make the backup file name.\n-          //\n-          if (backup == NULL) {\n-            backup = (char_u *)modname((char *)rootname, (char *)backup_ext,\n-                                       no_prepend_dot);\n-          }\n-\n-          if (backup == NULL) {\n-            xfree(rootname);\n-            some_error = TRUE;                          /* out of memory */\n-            goto nobackup;\n-          }\n-\n-          /*\n-           * Check if backup file already exists.\n-           */\n-          if (os_fileinfo((char *)backup, &file_info_new)) {\n-            if (os_fileinfo_id_equal(&file_info_new, &file_info_old)) {\n-              //\n-              // Backup file is same as original file.\n-              // May happen when modname() gave the same file back (e.g. silly\n-              // link). If we don't check here, we either ruin the file when\n-              // copying or erase it after writing.\n-              //\n-              XFREE_CLEAR(backup);              // no backup file to delete\n-            } else if (!p_bk) {\n-              // We are not going to keep the backup file, so don't\n-              // delete an existing one, and try to use another name instead.\n-              // Change one character, just before the extension.\n-              //\n-              wp = backup + STRLEN(backup) - 1 - STRLEN(backup_ext);\n-              if (wp < backup) {                // empty file name ???\n-                wp = backup;\n-              }\n-              *wp = 'z';\n-              while (*wp > 'a'\n-                     && os_fileinfo((char *)backup, &file_info_new)) {\n-                --*wp;\n-              }\n-              // They all exist??? Must be something wrong.\n-              if (*wp == 'a') {\n-                XFREE_CLEAR(backup);\n-              }\n-            }\n-          }\n-        }\n-        xfree(rootname);\n-\n-        /*\n-         * Try to create the backup file\n-         */\n-        if (backup != NULL) {\n-          /* remove old backup, if present */\n-          os_remove((char *)backup);\n-\n-          // set file protection same as original file, but\n-          // strip s-bit.\n-          (void)os_setperm((const char *)backup, perm & 0777);\n-\n-#ifdef UNIX\n-          //\n-          // Try to set the group of the backup same as the original file. If\n-          // this fails, set the protection bits for the group same as the\n-          // protection bits for others.\n-          //\n-          if (file_info_new.stat.st_gid != file_info_old.stat.st_gid\n-              && os_chown((char *)backup, -1, file_info_old.stat.st_gid) != 0) {\n-            os_setperm((const char *)backup,\n-                       (perm & 0707) | ((perm & 07) << 3));\n-          }\n-#endif\n-\n-          // copy the file\n-          if (os_copy((char *)fname, (char *)backup, UV_FS_COPYFILE_FICLONE)\n-              != 0) {\n-            SET_ERRMSG(_(\"E506: Can't write to backup file \"\n-                         \"(add ! to override)\"));\n-          }\n-\n-#ifdef UNIX\n-          os_file_settime((char *)backup,\n-                          file_info_old.stat.st_atim.tv_sec,\n-                          file_info_old.stat.st_mtim.tv_sec);\n-#endif",
            "html_url": "https://github.com/neovim/neovim/pull/12152#discussion_r410820521",
            "id": 410820521,
            "line": 2866,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyMDUyMQ==",
            "original_commit_id": "2b2ffdc6a003252a19197bec8421d83aff9205cb",
            "original_line": 2866,
            "original_position": 131,
            "original_start_line": 2855,
            "path": "src/nvim/fileio.c",
            "position": 131,
            "pull_request_review_id": 395978348,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12152",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/410820521/reactions"
            },
            "side": "LEFT",
            "start_line": 2855,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2020-04-19T16:35:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/410820521",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12152#discussion_r411510506"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12152"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/411510506"
                }
            },
            "author_association": "MEMBER",
            "body": "It does seem weird. I tried a git blame on neovim source code but with little success. Checking against the vim source code (grep for buf_write), it seems to do the same (does not check against vim_rename success). This seems wrong.",
            "commit_id": "392e4ce331e86a1117de45075aebdf2159d21d31",
            "created_at": "2020-04-20T16:17:17Z",
            "diff_hunk": "@@ -2736,156 +2736,172 @@ buf_write(\n       backup_ext = p_bex;\n \n     if (backup_copy) {\n-      char_u *wp;\n-      int some_error = false;\n-      char_u      *dirp;\n-      char_u      *rootname;\n-      char_u      *p;\n-\n-      /*\n-       * Try to make the backup in each directory in the 'bdir' option.\n-       *\n-       * Unix semantics has it, that we may have a writable file,\n-       * that cannot be recreated with a simple open(..., O_CREAT, ) e.g:\n-       *  - the directory is not writable,\n-       *  - the file may be a symbolic link,\n-       *  - the file may belong to another user/group, etc.\n-       *\n-       * For these reasons, the existing writable file must be truncated\n-       * and reused. Creation of a backup COPY will be attempted.\n-       */\n-      dirp = p_bdir;\n-      while (*dirp) {\n-        /*\n-         * Isolate one directory name, using an entry in 'bdir'.\n-         */\n-        (void)copy_option_part(&dirp, IObuff, IOSIZE, \",\");\n-        p = IObuff + STRLEN(IObuff);\n-        if (after_pathsep((char *)IObuff, (char *)p) && p[-1] == p[-2]) {\n-          // Ends with '//', Use Full path\n-          if ((p = (char_u *)make_percent_swname((char *)IObuff, (char *)fname))\n-              != NULL) {\n-            backup = (char_u *)modname((char *)p, (char *)backup_ext,\n-                                       no_prepend_dot);\n-            xfree(p);\n-          }\n-        }\n-\n-        rootname = get_file_in_dir(fname, IObuff);\n-        if (rootname == NULL) {\n-          some_error = TRUE;                /* out of memory */\n-          goto nobackup;\n-        }\n-\n-        FileInfo file_info_new;\n-        {\n-          //\n-          // Make the backup file name.\n-          //\n-          if (backup == NULL) {\n-            backup = (char_u *)modname((char *)rootname, (char *)backup_ext,\n-                                       no_prepend_dot);\n-          }\n-\n-          if (backup == NULL) {\n-            xfree(rootname);\n-            some_error = TRUE;                          /* out of memory */\n-            goto nobackup;\n-          }\n-\n-          /*\n-           * Check if backup file already exists.\n-           */\n-          if (os_fileinfo((char *)backup, &file_info_new)) {\n-            if (os_fileinfo_id_equal(&file_info_new, &file_info_old)) {\n-              //\n-              // Backup file is same as original file.\n-              // May happen when modname() gave the same file back (e.g. silly\n-              // link). If we don't check here, we either ruin the file when\n-              // copying or erase it after writing.\n-              //\n-              XFREE_CLEAR(backup);              // no backup file to delete\n-            } else if (!p_bk) {\n-              // We are not going to keep the backup file, so don't\n-              // delete an existing one, and try to use another name instead.\n-              // Change one character, just before the extension.\n-              //\n-              wp = backup + STRLEN(backup) - 1 - STRLEN(backup_ext);\n-              if (wp < backup) {                // empty file name ???\n-                wp = backup;\n-              }\n-              *wp = 'z';\n-              while (*wp > 'a'\n-                     && os_fileinfo((char *)backup, &file_info_new)) {\n-                --*wp;\n-              }\n-              // They all exist??? Must be something wrong.\n-              if (*wp == 'a') {\n-                XFREE_CLEAR(backup);\n-              }\n-            }\n-          }\n-        }\n-        xfree(rootname);\n-\n-        /*\n-         * Try to create the backup file\n-         */\n-        if (backup != NULL) {\n-          /* remove old backup, if present */\n-          os_remove((char *)backup);\n-\n-          // set file protection same as original file, but\n-          // strip s-bit.\n-          (void)os_setperm((const char *)backup, perm & 0777);\n-\n-#ifdef UNIX\n-          //\n-          // Try to set the group of the backup same as the original file. If\n-          // this fails, set the protection bits for the group same as the\n-          // protection bits for others.\n-          //\n-          if (file_info_new.stat.st_gid != file_info_old.stat.st_gid\n-              && os_chown((char *)backup, -1, file_info_old.stat.st_gid) != 0) {\n-            os_setperm((const char *)backup,\n-                       (perm & 0707) | ((perm & 07) << 3));\n-          }\n-#endif\n-\n-          // copy the file\n-          if (os_copy((char *)fname, (char *)backup, UV_FS_COPYFILE_FICLONE)\n-              != 0) {\n-            SET_ERRMSG(_(\"E506: Can't write to backup file \"\n-                         \"(add ! to override)\"));\n-          }\n-\n-#ifdef UNIX\n-          os_file_settime((char *)backup,\n-                          file_info_old.stat.st_atim.tv_sec,\n-                          file_info_old.stat.st_mtim.tv_sec);\n-#endif",
            "html_url": "https://github.com/neovim/neovim/pull/12152#discussion_r411510506",
            "id": 411510506,
            "in_reply_to_id": 410820521,
            "line": 2866,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMDUwNg==",
            "original_commit_id": "2b2ffdc6a003252a19197bec8421d83aff9205cb",
            "original_line": 2866,
            "original_position": 131,
            "original_start_line": 2855,
            "path": "src/nvim/fileio.c",
            "position": 131,
            "pull_request_review_id": 396607887,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12152",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/411510506/reactions"
            },
            "side": "LEFT",
            "start_line": 2855,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2020-04-20T16:17:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/411510506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "@teto, all the commmits from my previous PR were also added, can this be avoided?\r\n\r\n**EDIT:** precious->previous",
            "created_at": "2020-04-18T19:07:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-615928403",
            "id": 615928403,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTkyODQwMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615928403/reactions"
            },
            "updated_at": "2020-04-18T19:08:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615928403",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "prefix the pr with [WIP]. Yes you can create another branch and `git cherry-pick` a range of commits.\r\n\r\nEDIT: and then force push this same branch with `git push -f`",
            "created_at": "2020-04-18T19:09:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-615928921",
            "id": 615928921,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTkyODkyMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615928921/reactions"
            },
            "updated_at": "2020-04-18T19:10:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615928921",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Yes you can create another branch and `git cherry-pick` a range of commits.\r\n\r\nI will fix it and make another PR asap.\r\n\r\n**EDIT:** Also sorry for the mess earlier :sweat_smile: ",
            "created_at": "2020-04-18T19:11:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-615929189",
            "id": 615929189,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTkyOTE4OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615929189/reactions"
            },
            "updated_at": "2020-04-18T19:37:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615929189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The code is working, I have to add the error display parts and fix the error messages, I can either add it to backup_utils or move those functions back to fileio.c",
            "created_at": "2020-04-18T19:37:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-615933233",
            "id": 615933233,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTkzMzIzMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615933233/reactions"
            },
            "updated_at": "2020-04-18T19:41:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615933233",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "There's another thing that needs to be done, since for restoring backups, we would need the backup name, I can make the backup global in the backup_utils.c file and use the restore function over there. That's what I have thought of for now. \r\nWhat are your opinions on this?\r\n\r\n**EDIT:** But that might end up polluting the global namespace, just like the error variables are doing right now. I think I should do something else for it.",
            "created_at": "2020-04-18T19:49:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-615934789",
            "id": 615934789,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTkzNDc4OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615934789/reactions"
            },
            "updated_at": "2020-04-18T19:53:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615934789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@teto, Well, I will be working on the error reporting and the restore function now. What would then remain would be the final write function and calling them all asynchronously.\r\n\r\n**PS:** Also this isn't the final code that would be merged, this is just what's working for now, it requires cleanup for the unnecessary headers and the global namespace along with proper error reporting. I just wanted to get your views on the functions created and if something else is required. \r\n\r\nAnd thanks a lot for taking a look! :) ",
            "created_at": "2020-04-18T21:00:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-615948614",
            "id": 615948614,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTk0ODYxNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615948614/reactions"
            },
            "updated_at": "2020-04-18T21:04:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/615948614",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@teto, for the async write, should I use an async flag in the `buf_write` function and use it to call the functions asynchronously? That could be done either by making more functions for `buf_write` and queuing them (using `uv_work_queue` or making a wrapper function that simply calls `buf_write` asynchronously if async flag is set. What would you suggest?\r\n\r\nIMO, just creating a wrapper around `buf_write` to call it asynchronously would be a bit 'hacky', but doing that is pretty easy and there are very little chances of different behavior. Creating more functions and breaking down `buf_write` further would help with refactoring, but it would take some time.",
            "created_at": "2020-04-19T18:41:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-616204815",
            "id": 616204815,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjIwNDgxNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/616204815/reactions"
            },
            "updated_at": "2020-04-19T18:41:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/616204815",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "we can adjust the API later, make sure the behavior is correct first.",
            "created_at": "2020-04-20T16:19:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-616659647",
            "id": 616659647,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjY1OTY0Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/616659647/reactions"
            },
            "updated_at": "2020-04-20T16:19:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/616659647",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@teto, a status update. I am making functions for asynchronous call right now. I will push as soon as a few of them are callable from a new thread. Also I am looking for better ways of implementing this if possible, since it still isn't too late for that.\r\n\r\nUpon trying to implement my approach of libuv work queues I realized that a huge baton would have to be passed around between multiple threads and the entire write function would be executed partly via the functions on a separate thread and partly via the callbacks passed to the work queue.\r\nI currently am working on the callbacks.\r\n\r\nAlso I think I should use a new loop for this?\r\n\r\n**EDIT:** Breaking down the write function into such chunks is proving to be a rather daunting task, so it might take some more time before I push a commit. I hope that's not a problem. :)",
            "created_at": "2020-04-23T17:33:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-618537937",
            "id": 618537937,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxODUzNzkzNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/618537937/reactions"
            },
            "updated_at": "2020-04-23T17:47:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/618537937",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "what do you mean a `huge baton` ?\r\n\r\n> Also I think I should use a new loop for this?\r\n\r\nIs the added complexity worth the gain ? we need to make sure what is saved is the content of the buffer when starting to save. Make sure to write some tests if needed and iterate while keeping the tests green.",
            "created_at": "2020-04-23T18:25:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-618570857",
            "id": 618570857,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxODU3MDg1Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/618570857/reactions"
            },
            "updated_at": "2020-04-23T18:25:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/618570857",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> what do you mean a `huge baton` ?\r\n> \r\n@teto, by the baton I mean the struct that must be maintained for transferring necessary values in\r\nbetween threads. I think it can be reduced by a bit of careful in place calculation but I am not yet too sure of how much can it be reduced.\r\n\r\n> \r\n> Is the added complexity worth the gain ? we need to make sure what is saved is the content of the buffer when starting to save. Make sure to write some tests if needed and iterate while keeping the tests green.\r\n\r\nI'll make sure to write a few tests, also for the loop, in which loop should I queue these functions then? I thought having a separate loop for this would work better. I don't think it should be too complex. Just a `write_loop` containing the work queue for the relevant functions? But I might be misunderstanding something regarding the complexity.\r\n\r\n**EDIT:** I think we should discuss the implementation details once again. Can I DM you? I'd like to discuss the current strategy and what better ways there could be if you're free? I will later comment the approach over here too for anyone else interested in following up. I believe that a discussion would be very helpful for the both of us, as in I'd have a better idea of how to do stuff without increasing the complexity too much, and reviewing this PR would be easier for you. :)\r\n",
            "created_at": "2020-04-23T19:19:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-618607343",
            "id": 618607343,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxODYwNzM0Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/618607343/reactions"
            },
            "updated_at": "2020-04-23T19:53:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/618607343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@teto, here is a broad overview of the current implementation plan:\r\nFirst, make a backup asynchronously using a new thread. If the backup is successful, initialize `write_info` and call write. If the backup is not successful, display the error messages and return.\r\nIf the backup was successful, write should be called in a new thread. If the write is successful, do whatever we do at the end of write and return. If write isn't successful, restore the backup, display the error messages and return.\r\n\r\nThis implementation plan requires a struct to pass things around in various threads. Which is what I referred to as the `baton`. There are some other complications arising in implementing this. The biggest being separating the code into several callable functions that can be called asynchronously.  And then there is the question: which loop to use for these functions? I guess we cannot block the main event loop during the I/O, and honestly I am not aware of all the loops being used in neovim. I do know about the existence of the `fs_loop`, but I think blocking that would mean that we cannot read a new file until the old file is written.\r\n\r\nSo I am open to any suggestions regarding the loop or even the implementation plan.\r\n\r\n**EDIT:** All the checks regarding the asynchronous calls would have to be done in their respective callbacks. Which mean that the write itself would be split into two parts, the functions executed asynchronously and the callbacks provided to them. So the synchronous write function would be a series of interleaved function and callback calls.",
            "created_at": "2020-04-25T17:17:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-619412320",
            "id": 619412320,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTQxMjMyMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/619412320/reactions"
            },
            "updated_at": "2020-04-27T12:37:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/619412320",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Looks like this is very much WIP",
            "created_at": "2024-12-17T12:42:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/12152#issuecomment-2548360330",
            "id": 2548360330,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
            "node_id": "IC_kwDOAPphoM6X5OSK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2548360330/reactions"
            },
            "updated_at": "2024-12-17T12:42:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2548360330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/12152/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/12152/commits",
    "created_at": "2020-04-18T19:06:23Z",
    "diff_url": "https://github.com/neovim/neovim/pull/12152.diff",
    "draft": false,
    "head": {
        "label": "BK1603:asynchronous-writes",
        "ref": "asynchronous-writes",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/BK1603/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/BK1603/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/BK1603/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/BK1603/neovim/branches{/branch}",
            "clone_url": "https://github.com/BK1603/neovim.git",
            "collaborators_url": "https://api.github.com/repos/BK1603/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/BK1603/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/BK1603/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/BK1603/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/BK1603/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/BK1603/neovim/contributors",
            "created_at": "2020-01-31T08:50:18Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/BK1603/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/BK1603/neovim/downloads",
            "events_url": "https://api.github.com/repos/BK1603/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/BK1603/neovim/forks",
            "full_name": "BK1603/neovim",
            "git_commits_url": "https://api.github.com/repos/BK1603/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/BK1603/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/BK1603/neovim/git/tags{/sha}",
            "git_url": "git://github.com/BK1603/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/BK1603/neovim/hooks",
            "html_url": "https://github.com/BK1603/neovim",
            "id": 237392279,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/BK1603/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/BK1603/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/BK1603/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/BK1603/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/BK1603/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/BK1603/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/BK1603/neovim/merges",
            "milestones_url": "https://api.github.com/repos/BK1603/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMzczOTIyNzk=",
            "notifications_url": "https://api.github.com/repos/BK1603/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/BK1603/neovim/pulls{/number}",
            "pushed_at": "2022-11-19T03:51:16Z",
            "releases_url": "https://api.github.com/repos/BK1603/neovim/releases{/id}",
            "size": 210690,
            "ssh_url": "git@github.com:BK1603/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/BK1603/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/BK1603/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/BK1603/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/BK1603/neovim/subscription",
            "svn_url": "https://github.com/BK1603/neovim",
            "tags_url": "https://api.github.com/repos/BK1603/neovim/tags",
            "teams_url": "https://api.github.com/repos/BK1603/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/BK1603/neovim/git/trees{/sha}",
            "updated_at": "2020-07-19T17:39:53Z",
            "url": "https://api.github.com/repos/BK1603/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "392e4ce331e86a1117de45075aebdf2159d21d31",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
            "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
            "followers_url": "https://api.github.com/users/BK1603/followers",
            "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
            "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/BK1603",
            "id": 29245744,
            "login": "BK1603",
            "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
            "organizations_url": "https://api.github.com/users/BK1603/orgs",
            "received_events_url": "https://api.github.com/users/BK1603/received_events",
            "repos_url": "https://api.github.com/users/BK1603/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/BK1603",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/12152",
    "id": 405545527,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12152",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 378639615,
            "name": "io",
            "node_id": "MDU6TGFiZWwzNzg2Mzk2MTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/io"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA1NTQ1NTI3",
    "number": 12152,
    "patch_url": "https://github.com/neovim/neovim/pull/12152.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/12152/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/392e4ce331e86a1117de45075aebdf2159d21d31",
    "title": "Asynchronous writes",
    "updated_at": "2024-12-17T12:42:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/12152",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
        "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
        "followers_url": "https://api.github.com/users/BK1603/followers",
        "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
        "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/BK1603",
        "id": 29245744,
        "login": "BK1603",
        "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
        "organizations_url": "https://api.github.com/users/BK1603/orgs",
        "received_events_url": "https://api.github.com/users/BK1603/received_events",
        "repos_url": "https://api.github.com/users/BK1603/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/BK1603",
        "user_view_type": "public"
    }
}