{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29134/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29134/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/29134"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29134"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29134/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29134"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5451,
            "forks_count": 5451,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1738,
            "open_issues_count": 1738,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-06-11T01:59:06Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 272256,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 79008,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-06-11T00:39:49Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 79008,
            "watchers_count": 79008,
            "web_commit_signoff_required": false
        },
        "sha": "230bc34ca541cfe109cd44241eb588d2a8fdda66",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "This fixes two bugs with the diagnostic float popup.\r\n\r\nThe first is simple, the fix in #28301 only changed the behaviour of the default `scope = \"line\"`, if `scope = \"cursor\"` then hovering on multi-line diagnostics doesn't work.\r\n\r\nThe second is that the filtering treats the end of the range as being inclusive, when it should be exclusive (well this is what is used everywhere else, it doesn't seem to be strictly specified in the docs...).\r\nThis is easy to see when using `scope = \"cursor\"` - just open the popup with the cursor on the character directly after the end of the underline.\r\nWhen `scope = \"line\"`, the easiest way to see it is to add a multi-line diagnostic that has `end_col = 0`:\r\n```\r\n:lua vim.diagnostic.set(vim.api.nvim_create_namespace(\"test\"), 0, { { lnum = 1, col = 0, end_lnum = 2, end_col = 0, message = \"test\" } })\r\n```\r\nthen open the popup with the cursor on the line below the underline.\r\n\r\n\r\nA corner case that I came across was how to deal with zero-width diagnostics, where `lnum == end_lnum` and `col == end_col`. Currently, underlining treats these as having width 1, so I've made both `scope = \"cursor\"` and `scope = \"line\"` do the same. However this behaviour seems to have been deemed a bug due to #28986, and #29022 will remove underlines for zero-width diagnostics again. \r\n\r\nSo might it be better to treat zero-width diagnostics as spanning the whole line? Meaning that opening the popup will work from anywhere in the line even when `scope = \"cursor\"` ? The reasoning being that since there's no underline, a user wouldn't know where to put the cursor for the popup to work, so it should just work anywhere.",
    "closed_at": "2024-06-04T21:35:44Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29134#discussion_r1626028852"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29134"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626028852"
                }
            },
            "author_association": "MEMBER",
            "body": "This comment changes `end_col` to `col`. Was this intentional? Was the old comment incorrect?\r\n\r\nIf the server can send both `col` and `end_col` past the end of the line we should mention both here.\r\n\r\nDo you have an example of a server sending `col` (not `end_col`) past the end of the line? That seems very peculiar to me.",
            "commit_id": "a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
            "created_at": "2024-06-04T13:38:28Z",
            "diff_hunk": "@@ -1857,16 +1857,37 @@ function M.open_float(opts, ...)\n   if scope == 'line' then\n     --- @param d vim.Diagnostic\n     diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum and lnum <= d.end_lnum\n+      if lnum < d.lnum or lnum > d.end_lnum then\n+        return false\n+      end\n+      if d.lnum == d.end_lnum then\n+        -- if diagnostic only spans one line, always show\n+        -- allows showing diagnostics with zero width (where lnum == end_lnum and col == end_col)\n+        return true\n+      else\n+        -- end-exclusive range, don't show if on end_lnum and end_col == 0\n+        return lnum ~= d.end_lnum or d.end_col ~= 0\n+      end\n     end, diagnostics)\n   elseif scope == 'cursor' then\n-    -- LSP servers can send diagnostics with `end_col` past the length of the line\n-    local line_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]\n+    -- LSP servers can send diagnostics with `col` past the end of the line\n+    local lnum_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]",
            "html_url": "https://github.com/neovim/neovim/pull/29134#discussion_r1626028852",
            "id": 1626028852,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g6zs0",
            "original_commit_id": "b695831a229c4b91ffc8bcb08654335915c82211",
            "original_line": 1874,
            "original_position": 21,
            "original_start_line": 1873,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2096436067,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29134",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626028852/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-04T13:38:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626028852",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29134#discussion_r1626029883"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29134"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626029883"
                }
            },
            "author_association": "MEMBER",
            "body": "Any reason to rename this variable? The old name `line_length` was fine, the new name `lnum_length` is more confusing (`lnum` is the line number, so `lnum_length` doesn't really make sense).",
            "commit_id": "a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
            "created_at": "2024-06-04T13:39:07Z",
            "diff_hunk": "@@ -1857,16 +1857,37 @@ function M.open_float(opts, ...)\n   if scope == 'line' then\n     --- @param d vim.Diagnostic\n     diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum and lnum <= d.end_lnum\n+      if lnum < d.lnum or lnum > d.end_lnum then\n+        return false\n+      end\n+      if d.lnum == d.end_lnum then\n+        -- if diagnostic only spans one line, always show\n+        -- allows showing diagnostics with zero width (where lnum == end_lnum and col == end_col)\n+        return true\n+      else\n+        -- end-exclusive range, don't show if on end_lnum and end_col == 0\n+        return lnum ~= d.end_lnum or d.end_col ~= 0\n+      end\n     end, diagnostics)\n   elseif scope == 'cursor' then\n-    -- LSP servers can send diagnostics with `end_col` past the length of the line\n-    local line_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]\n+    -- LSP servers can send diagnostics with `col` past the end of the line\n+    local lnum_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]",
            "html_url": "https://github.com/neovim/neovim/pull/29134#discussion_r1626029883",
            "id": 1626029883,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g6z87",
            "original_commit_id": "b695831a229c4b91ffc8bcb08654335915c82211",
            "original_line": 1874,
            "original_position": 21,
            "original_start_line": 1873,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2096437756,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29134",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626029883/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-04T13:39:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626029883",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29134#discussion_r1626066021"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29134"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626066021"
                }
            },
            "author_association": "MEMBER",
            "body": "It looks like the logic here is the same as before, except for the addition of the end-exclusive range. I find the refactored logic here hard to follow (multiple returns and if statements), we can keep the original structure and just add the new condition:\r\n\r\n```suggestion\r\n      return lnum >= d.lnum\r\n        and lnum <= d.end_lnum\r\n        and (d.lnum == d.end_lnum or lnum < d.end_lnum or d.end_col ~= 0)\r\n```\r\n",
            "commit_id": "a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
            "created_at": "2024-06-04T13:55:56Z",
            "diff_hunk": "@@ -1857,16 +1857,37 @@ function M.open_float(opts, ...)\n   if scope == 'line' then\n     --- @param d vim.Diagnostic\n     diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum and lnum <= d.end_lnum\n+      if lnum < d.lnum or lnum > d.end_lnum then\n+        return false\n+      end\n+      if d.lnum == d.end_lnum then\n+        -- if diagnostic only spans one line, always show\n+        -- allows showing diagnostics with zero width (where lnum == end_lnum and col == end_col)\n+        return true\n+      else\n+        -- end-exclusive range, don't show if on end_lnum and end_col == 0\n+        return lnum ~= d.end_lnum or d.end_col ~= 0\n+      end",
            "html_url": "https://github.com/neovim/neovim/pull/29134#discussion_r1626066021",
            "id": 1626066021,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g68xl",
            "original_commit_id": "b695831a229c4b91ffc8bcb08654335915c82211",
            "original_line": 1870,
            "original_position": 15,
            "original_start_line": 1860,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2096499577,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29134",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626066021/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-04T14:11:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626066021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29134#discussion_r1626072967"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29134"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626072967"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This was intentional yes - the issue that was meant to fix (#16062) gives this example, where `col` is past the end of the line:\r\n\r\n> The easiest way to reproduce the issue is to directly create diagnostics using `vim.diagnostic.set`. Open a buffer with the following content:\r\n> \r\n> ```\r\n> hello\r\n> hello\r\n> ```\r\n> \r\n> Then run the following Lua code to set a diagnostic at the end of the first line:\r\n> \r\n> ```lua\r\n> vim.diagnostic.set( vim.api.nvim_create_namespace(\"test\"), 0, { { lnum = 0, end_lnum = 1, col = 5, end_col = 0, message = \"test\" } })\r\n> ```\r\n> \r\n> (Note that the range is meant to specifically denote the end of the first line, not including the final `o` in `hello`. More on this below.)\r\n\r\nEverything is zero-based, so `col = 5` is past the end of the line. `end_col` can also be past the end of the line, but that doesn't need special treatment - the condition `col < d.end_col` will always be true and the float will just _always_ be shown. `col` past the end of the line does need special treatment, because in that case the condition `col < d.col` will always be true and the float will _never_ be shown.\r\n\r\nAs for an actual example, the #16062 mentions `tsserver`, but \"didn't have an example handy\", and neither do I :( I can try and find one if you'd like.",
            "commit_id": "a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
            "created_at": "2024-06-04T14:00:04Z",
            "diff_hunk": "@@ -1857,16 +1857,37 @@ function M.open_float(opts, ...)\n   if scope == 'line' then\n     --- @param d vim.Diagnostic\n     diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum and lnum <= d.end_lnum\n+      if lnum < d.lnum or lnum > d.end_lnum then\n+        return false\n+      end\n+      if d.lnum == d.end_lnum then\n+        -- if diagnostic only spans one line, always show\n+        -- allows showing diagnostics with zero width (where lnum == end_lnum and col == end_col)\n+        return true\n+      else\n+        -- end-exclusive range, don't show if on end_lnum and end_col == 0\n+        return lnum ~= d.end_lnum or d.end_col ~= 0\n+      end\n     end, diagnostics)\n   elseif scope == 'cursor' then\n-    -- LSP servers can send diagnostics with `end_col` past the length of the line\n-    local line_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]\n+    -- LSP servers can send diagnostics with `col` past the end of the line\n+    local lnum_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]",
            "html_url": "https://github.com/neovim/neovim/pull/29134#discussion_r1626072967",
            "id": 1626072967,
            "in_reply_to_id": 1626028852,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g6-eH",
            "original_commit_id": "b695831a229c4b91ffc8bcb08654335915c82211",
            "original_line": 1874,
            "original_position": 21,
            "original_start_line": 1873,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2096511398,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29134",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626072967/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-04T14:00:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626072967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49614525?v=4",
                "events_url": "https://api.github.com/users/AThePeanut4/events{/privacy}",
                "followers_url": "https://api.github.com/users/AThePeanut4/followers",
                "following_url": "https://api.github.com/users/AThePeanut4/following{/other_user}",
                "gists_url": "https://api.github.com/users/AThePeanut4/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AThePeanut4",
                "id": 49614525,
                "login": "AThePeanut4",
                "node_id": "MDQ6VXNlcjQ5NjE0NTI1",
                "organizations_url": "https://api.github.com/users/AThePeanut4/orgs",
                "received_events_url": "https://api.github.com/users/AThePeanut4/received_events",
                "repos_url": "https://api.github.com/users/AThePeanut4/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AThePeanut4/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AThePeanut4/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AThePeanut4"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29134#discussion_r1626078172"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29134"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626078172"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The reasoning behind that was that the length is for the line referred to by `d.lnum`, if the diagnostic was multiple lines long. But now that I think about it, that is more confusing - I'll revert it back.",
            "commit_id": "a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
            "created_at": "2024-06-04T14:03:13Z",
            "diff_hunk": "@@ -1857,16 +1857,37 @@ function M.open_float(opts, ...)\n   if scope == 'line' then\n     --- @param d vim.Diagnostic\n     diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum and lnum <= d.end_lnum\n+      if lnum < d.lnum or lnum > d.end_lnum then\n+        return false\n+      end\n+      if d.lnum == d.end_lnum then\n+        -- if diagnostic only spans one line, always show\n+        -- allows showing diagnostics with zero width (where lnum == end_lnum and col == end_col)\n+        return true\n+      else\n+        -- end-exclusive range, don't show if on end_lnum and end_col == 0\n+        return lnum ~= d.end_lnum or d.end_col ~= 0\n+      end\n     end, diagnostics)\n   elseif scope == 'cursor' then\n-    -- LSP servers can send diagnostics with `end_col` past the length of the line\n-    local line_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]\n+    -- LSP servers can send diagnostics with `col` past the end of the line\n+    local lnum_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]",
            "html_url": "https://github.com/neovim/neovim/pull/29134#discussion_r1626078172",
            "id": 1626078172,
            "in_reply_to_id": 1626029883,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g6_vc",
            "original_commit_id": "b695831a229c4b91ffc8bcb08654335915c82211",
            "original_line": 1874,
            "original_position": 21,
            "original_start_line": 1873,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2096520270,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29134",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626078172/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-04T14:03:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626078172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49614525?v=4",
                "events_url": "https://api.github.com/users/AThePeanut4/events{/privacy}",
                "followers_url": "https://api.github.com/users/AThePeanut4/followers",
                "following_url": "https://api.github.com/users/AThePeanut4/following{/other_user}",
                "gists_url": "https://api.github.com/users/AThePeanut4/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AThePeanut4",
                "id": 49614525,
                "login": "AThePeanut4",
                "node_id": "MDQ6VXNlcjQ5NjE0NTI1",
                "organizations_url": "https://api.github.com/users/AThePeanut4/orgs",
                "received_events_url": "https://api.github.com/users/AThePeanut4/received_events",
                "repos_url": "https://api.github.com/users/AThePeanut4/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AThePeanut4/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AThePeanut4/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AThePeanut4"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29134#discussion_r1626097820"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29134"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626097820"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "That condition isn't the same - if the diagnostic is `{ lnum = 0, end_lnum = 0, col = 0, end_col = 0 }` (zero width) then that will return `false` when the cursor is on line 0, meaning the diagnostic will never be \"hoverable\".",
            "commit_id": "a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
            "created_at": "2024-06-04T14:15:02Z",
            "diff_hunk": "@@ -1857,16 +1857,37 @@ function M.open_float(opts, ...)\n   if scope == 'line' then\n     --- @param d vim.Diagnostic\n     diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum and lnum <= d.end_lnum\n+      if lnum < d.lnum or lnum > d.end_lnum then\n+        return false\n+      end\n+      if d.lnum == d.end_lnum then\n+        -- if diagnostic only spans one line, always show\n+        -- allows showing diagnostics with zero width (where lnum == end_lnum and col == end_col)\n+        return true\n+      else\n+        -- end-exclusive range, don't show if on end_lnum and end_col == 0\n+        return lnum ~= d.end_lnum or d.end_col ~= 0\n+      end",
            "html_url": "https://github.com/neovim/neovim/pull/29134#discussion_r1626097820",
            "id": 1626097820,
            "in_reply_to_id": 1626066021,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g7Eic",
            "original_commit_id": "b695831a229c4b91ffc8bcb08654335915c82211",
            "original_line": 1870,
            "original_position": 15,
            "original_start_line": 1860,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2096552749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29134",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626097820/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-04T14:15:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626097820",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49614525?v=4",
                "events_url": "https://api.github.com/users/AThePeanut4/events{/privacy}",
                "followers_url": "https://api.github.com/users/AThePeanut4/followers",
                "following_url": "https://api.github.com/users/AThePeanut4/following{/other_user}",
                "gists_url": "https://api.github.com/users/AThePeanut4/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AThePeanut4",
                "id": 49614525,
                "login": "AThePeanut4",
                "node_id": "MDQ6VXNlcjQ5NjE0NTI1",
                "organizations_url": "https://api.github.com/users/AThePeanut4/orgs",
                "received_events_url": "https://api.github.com/users/AThePeanut4/received_events",
                "repos_url": "https://api.github.com/users/AThePeanut4/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AThePeanut4/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AThePeanut4/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AThePeanut4"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29134#discussion_r1626101774"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29134"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626101774"
                }
            },
            "author_association": "MEMBER",
            "body": "I did make an edit, so it should be the same now. I ran it against your test cases and they all pass.",
            "commit_id": "a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
            "created_at": "2024-06-04T14:17:28Z",
            "diff_hunk": "@@ -1857,16 +1857,37 @@ function M.open_float(opts, ...)\n   if scope == 'line' then\n     --- @param d vim.Diagnostic\n     diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum and lnum <= d.end_lnum\n+      if lnum < d.lnum or lnum > d.end_lnum then\n+        return false\n+      end\n+      if d.lnum == d.end_lnum then\n+        -- if diagnostic only spans one line, always show\n+        -- allows showing diagnostics with zero width (where lnum == end_lnum and col == end_col)\n+        return true\n+      else\n+        -- end-exclusive range, don't show if on end_lnum and end_col == 0\n+        return lnum ~= d.end_lnum or d.end_col ~= 0\n+      end",
            "html_url": "https://github.com/neovim/neovim/pull/29134#discussion_r1626101774",
            "id": 1626101774,
            "in_reply_to_id": 1626066021,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g7FgO",
            "original_commit_id": "b695831a229c4b91ffc8bcb08654335915c82211",
            "original_line": 1870,
            "original_position": 15,
            "original_start_line": 1860,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2096559297,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29134",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626101774/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-04T14:17:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626101774",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29134#discussion_r1626106994"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29134"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626106994"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm realizing that we already have all of this logic in our `_range` module, but that is currently namespaced under `vim.treesitter` so wouldn't be appropriate to use here. A follow up PR would be to move `_range.lua` into a higher-level/more generic namespace, and refactor some of the diagnostics code to use that instead.",
            "commit_id": "a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
            "created_at": "2024-06-04T14:20:44Z",
            "diff_hunk": "@@ -1857,16 +1857,37 @@ function M.open_float(opts, ...)\n   if scope == 'line' then\n     --- @param d vim.Diagnostic\n     diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum and lnum <= d.end_lnum\n+      if lnum < d.lnum or lnum > d.end_lnum then\n+        return false\n+      end\n+      if d.lnum == d.end_lnum then\n+        -- if diagnostic only spans one line, always show\n+        -- allows showing diagnostics with zero width (where lnum == end_lnum and col == end_col)\n+        return true\n+      else\n+        -- end-exclusive range, don't show if on end_lnum and end_col == 0\n+        return lnum ~= d.end_lnum or d.end_col ~= 0\n+      end\n     end, diagnostics)\n   elseif scope == 'cursor' then\n-    -- LSP servers can send diagnostics with `end_col` past the length of the line\n-    local line_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]\n+    -- LSP servers can send diagnostics with `col` past the end of the line\n+    local lnum_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]\n     --- @param d vim.Diagnostic\n     diagnostics = vim.tbl_filter(function(d)\n-      return d.lnum == lnum\n-        and math.min(d.col, line_length - 1) <= col\n-        and (d.end_col >= col or d.end_lnum > lnum)\n+      if lnum < d.lnum or lnum > d.end_lnum then\n+        return false\n+      end\n+      if lnum == d.lnum and col < math.min(d.col, lnum_length - 1) then\n+        return false\n+      end\n+      if d.lnum == d.end_lnum and d.col == d.end_col then\n+        -- treat zero-width diagnostics as having width 1\n+        -- condition is effectively this:\n+        -- return lnum ~= d.end_lnum or col < (d.col + 1)\n+        return col == d.col\n+      else\n+        return lnum ~= d.end_lnum or col < d.end_col\n+      end",
            "html_url": "https://github.com/neovim/neovim/pull/29134#discussion_r1626106994",
            "id": 1626106994,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g7Gxy",
            "original_commit_id": "b695831a229c4b91ffc8bcb08654335915c82211",
            "original_line": 1882,
            "original_position": 40,
            "original_start_line": 1877,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2096568059,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29134",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626106994/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-04T14:20:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626106994",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29134#discussion_r1626118229"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29134"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626118229"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Originally I tried to keep both branches as one big conditional statement, but the `scope = 'cursor'` case was too complex for that, so I decided to change both to use if-then-returns for consistency. But it's certainly not a big deal - I don't mind changing it.",
            "commit_id": "a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
            "created_at": "2024-06-04T14:27:20Z",
            "diff_hunk": "@@ -1857,16 +1857,37 @@ function M.open_float(opts, ...)\n   if scope == 'line' then\n     --- @param d vim.Diagnostic\n     diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum and lnum <= d.end_lnum\n+      if lnum < d.lnum or lnum > d.end_lnum then\n+        return false\n+      end\n+      if d.lnum == d.end_lnum then\n+        -- if diagnostic only spans one line, always show\n+        -- allows showing diagnostics with zero width (where lnum == end_lnum and col == end_col)\n+        return true\n+      else\n+        -- end-exclusive range, don't show if on end_lnum and end_col == 0\n+        return lnum ~= d.end_lnum or d.end_col ~= 0\n+      end",
            "html_url": "https://github.com/neovim/neovim/pull/29134#discussion_r1626118229",
            "id": 1626118229,
            "in_reply_to_id": 1626066021,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g7JhV",
            "original_commit_id": "b695831a229c4b91ffc8bcb08654335915c82211",
            "original_line": 1870,
            "original_position": 15,
            "original_start_line": 1860,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2096586614,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29134",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626118229/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-04T14:27:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1626118229",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49614525?v=4",
                "events_url": "https://api.github.com/users/AThePeanut4/events{/privacy}",
                "followers_url": "https://api.github.com/users/AThePeanut4/followers",
                "following_url": "https://api.github.com/users/AThePeanut4/following{/other_user}",
                "gists_url": "https://api.github.com/users/AThePeanut4/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AThePeanut4",
                "id": 49614525,
                "login": "AThePeanut4",
                "node_id": "MDQ6VXNlcjQ5NjE0NTI1",
                "organizations_url": "https://api.github.com/users/AThePeanut4/orgs",
                "received_events_url": "https://api.github.com/users/AThePeanut4/received_events",
                "repos_url": "https://api.github.com/users/AThePeanut4/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AThePeanut4/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AThePeanut4/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AThePeanut4"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "@gpanders Thoughts on this?\r\n> So might it be better to treat zero-width diagnostics as spanning the whole line? Meaning that opening the popup will work from anywhere in the line even when scope = \"cursor\" ? The reasoning being that since there's no underline, a user wouldn't know where to put the cursor for the popup to work, so it should just work anywhere.\r\n\r\nThe change would just be to replace `return col == d.col` with `return true` here:\r\nhttps://github.com/neovim/neovim/blob/036b8e1fb8002d986fef8a2c62ac7a1914aa7bf2/runtime/lua/vim/diagnostic.lua#L1876-L1883\r\nIt might also then be possible to make a big conditional statement rather than if-returns.",
            "created_at": "2024-06-04T14:39:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/29134#issuecomment-2147709402",
            "id": 2147709402,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29134",
            "node_id": "IC_kwDOAPphoM6AA3Ha",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2147709402/reactions"
            },
            "updated_at": "2024-06-04T14:39:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2147709402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49614525?v=4",
                "events_url": "https://api.github.com/users/AThePeanut4/events{/privacy}",
                "followers_url": "https://api.github.com/users/AThePeanut4/followers",
                "following_url": "https://api.github.com/users/AThePeanut4/following{/other_user}",
                "gists_url": "https://api.github.com/users/AThePeanut4/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AThePeanut4",
                "id": 49614525,
                "login": "AThePeanut4",
                "node_id": "MDQ6VXNlcjQ5NjE0NTI1",
                "organizations_url": "https://api.github.com/users/AThePeanut4/orgs",
                "received_events_url": "https://api.github.com/users/AThePeanut4/received_events",
                "repos_url": "https://api.github.com/users/AThePeanut4/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AThePeanut4/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AThePeanut4/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AThePeanut4"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @gpanders Thoughts on this?\r\n> \r\n> > So might it be better to treat zero-width diagnostics as spanning the whole line? Meaning that opening the popup will work from anywhere in the line even when scope = \"cursor\" ? The reasoning being that since there's no underline, a user wouldn't know where to put the cursor for the popup to work, so it should just work anywhere.\r\n\r\n\r\nWhat are some examples of zero-width diagnostics? Should we even treat those as valid at all? The LSP specification doesn't mention anything about this that I could find, and I am not sure that zero-width diagnostics makes sense outside of LSP either. cc @mfussenegger.\r\n\r\nEven if zero-width diagnostics are considered valid, they are still navigable with `vim.diagnostic.jump()` (maybe?). But to answer the quoted question, I think I need to first understand what these zero-width diagnostics even are.",
            "created_at": "2024-06-04T16:32:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/29134#issuecomment-2147956926",
            "id": 2147956926,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29134",
            "node_id": "IC_kwDOAPphoM6ABzi-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2147956926/reactions"
            },
            "updated_at": "2024-06-04T16:32:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2147956926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What are some examples of zero-width diagnostics? Should we even treat those as valid at all? The LSP specification doesn't mention anything about this that I could find, and I am not sure that zero-width diagnostics makes sense outside of LSP either. cc @mfussenegger.\r\n\r\nnvim-lint has quite a few linters with error formats like `'%f:%l: %m'` which leads to diagnostics like:\r\n\r\n```\r\n    message: fqcn[action-core]: Use FQCN for builtin module actions (command).\r\n    end_col: 0\r\n    lnum: 30\r\n    col: 0\r\n    bufnr: 1\r\n    namespace: 6\r\n    end_lnum: 30\r\n    source: ansible-lint\r\n    severity: 3\r\n```\r\n\r\nThe current behavior that the float works on the whole line for them makes sense to me.\r\n\r\nHaving end-lnum/end-col is in some ways a newer trend. ",
            "created_at": "2024-06-04T17:26:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/29134#issuecomment-2148051899",
            "id": 2148051899,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29134",
            "node_id": "IC_kwDOAPphoM6ACKu7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2148051899/reactions"
            },
            "updated_at": "2024-06-04T17:26:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2148051899",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sounds good. @AThePeanut4 go ahead and proceed with that then.\r\n\r\n>It might also then be possible to make a big conditional statement rather than if-returns.\r\n\r\nLet's see how this looks and make a decision.",
            "created_at": "2024-06-04T17:33:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/29134#issuecomment-2148062489",
            "id": 2148062489,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29134",
            "node_id": "IC_kwDOAPphoM6ACNUZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2148062489/reactions"
            },
            "updated_at": "2024-06-04T17:33:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2148062489",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@gpanders Done. It's a fairly big conditional, but I think it's fine.",
            "created_at": "2024-06-04T18:55:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/29134#issuecomment-2148198704",
            "id": 2148198704,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29134",
            "node_id": "IC_kwDOAPphoM6ACukw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2148198704/reactions"
            },
            "updated_at": "2024-06-04T18:55:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2148198704",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49614525?v=4",
                "events_url": "https://api.github.com/users/AThePeanut4/events{/privacy}",
                "followers_url": "https://api.github.com/users/AThePeanut4/followers",
                "following_url": "https://api.github.com/users/AThePeanut4/following{/other_user}",
                "gists_url": "https://api.github.com/users/AThePeanut4/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AThePeanut4",
                "id": 49614525,
                "login": "AThePeanut4",
                "node_id": "MDQ6VXNlcjQ5NjE0NTI1",
                "organizations_url": "https://api.github.com/users/AThePeanut4/orgs",
                "received_events_url": "https://api.github.com/users/AThePeanut4/received_events",
                "repos_url": "https://api.github.com/users/AThePeanut4/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AThePeanut4/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AThePeanut4/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AThePeanut4"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@gpanders Oh and yes zero-width diagnostics are still navigable with `vim.diagnostic.jump()`. They also have virtual text and signs of course, but after #29022 they won't have any underlining.",
            "created_at": "2024-06-04T18:59:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/29134#issuecomment-2148204348",
            "id": 2148204348,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29134",
            "node_id": "IC_kwDOAPphoM6ACv88",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2148204348/reactions"
            },
            "updated_at": "2024-06-04T18:59:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2148204348",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49614525?v=4",
                "events_url": "https://api.github.com/users/AThePeanut4/events{/privacy}",
                "followers_url": "https://api.github.com/users/AThePeanut4/followers",
                "following_url": "https://api.github.com/users/AThePeanut4/following{/other_user}",
                "gists_url": "https://api.github.com/users/AThePeanut4/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AThePeanut4",
                "id": 49614525,
                "login": "AThePeanut4",
                "node_id": "MDQ6VXNlcjQ5NjE0NTI1",
                "organizations_url": "https://api.github.com/users/AThePeanut4/orgs",
                "received_events_url": "https://api.github.com/users/AThePeanut4/received_events",
                "repos_url": "https://api.github.com/users/AThePeanut4/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AThePeanut4/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AThePeanut4/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AThePeanut4"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @gpanders Done. It's a fairly big conditional, but I think it's fine.\r\n\r\nI agree, looks good to me. Thanks!",
            "created_at": "2024-06-04T19:00:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/29134#issuecomment-2148206443",
            "id": 2148206443,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29134",
            "node_id": "IC_kwDOAPphoM6ACwdr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2148206443/reactions"
            },
            "updated_at": "2024-06-04T19:00:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2148206443",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29134/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/29134/commits",
    "created_at": "2024-06-01T22:59:12Z",
    "diff_url": "https://github.com/neovim/neovim/pull/29134.diff",
    "draft": false,
    "head": {
        "label": "AThePeanut4:diagnostic-float-scope",
        "ref": "diagnostic-float-scope",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/AThePeanut4/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/AThePeanut4/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/AThePeanut4/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/AThePeanut4/neovim/branches{/branch}",
            "clone_url": "https://github.com/AThePeanut4/neovim.git",
            "collaborators_url": "https://api.github.com/repos/AThePeanut4/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/AThePeanut4/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/AThePeanut4/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/AThePeanut4/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/AThePeanut4/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/AThePeanut4/neovim/contributors",
            "created_at": "2024-05-16T23:01:05Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/AThePeanut4/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/AThePeanut4/neovim/downloads",
            "events_url": "https://api.github.com/repos/AThePeanut4/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/AThePeanut4/neovim/forks",
            "full_name": "AThePeanut4/neovim",
            "git_commits_url": "https://api.github.com/repos/AThePeanut4/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/AThePeanut4/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/AThePeanut4/neovim/git/tags{/sha}",
            "git_url": "git://github.com/AThePeanut4/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/AThePeanut4/neovim/hooks",
            "html_url": "https://github.com/AThePeanut4/neovim",
            "id": 801784716,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/AThePeanut4/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/AThePeanut4/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/AThePeanut4/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/AThePeanut4/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/AThePeanut4/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/AThePeanut4/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/AThePeanut4/neovim/merges",
            "milestones_url": "https://api.github.com/repos/AThePeanut4/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOL8pDjA",
            "notifications_url": "https://api.github.com/repos/AThePeanut4/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49614525?v=4",
                "events_url": "https://api.github.com/users/AThePeanut4/events{/privacy}",
                "followers_url": "https://api.github.com/users/AThePeanut4/followers",
                "following_url": "https://api.github.com/users/AThePeanut4/following{/other_user}",
                "gists_url": "https://api.github.com/users/AThePeanut4/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AThePeanut4",
                "id": 49614525,
                "login": "AThePeanut4",
                "node_id": "MDQ6VXNlcjQ5NjE0NTI1",
                "organizations_url": "https://api.github.com/users/AThePeanut4/orgs",
                "received_events_url": "https://api.github.com/users/AThePeanut4/received_events",
                "repos_url": "https://api.github.com/users/AThePeanut4/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AThePeanut4/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AThePeanut4/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AThePeanut4"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/AThePeanut4/neovim/pulls{/number}",
            "pushed_at": "2024-06-09T14:13:09Z",
            "releases_url": "https://api.github.com/repos/AThePeanut4/neovim/releases{/id}",
            "size": 265881,
            "ssh_url": "git@github.com:AThePeanut4/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/AThePeanut4/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/AThePeanut4/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/AThePeanut4/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/AThePeanut4/neovim/subscription",
            "svn_url": "https://github.com/AThePeanut4/neovim",
            "tags_url": "https://api.github.com/repos/AThePeanut4/neovim/tags",
            "teams_url": "https://api.github.com/repos/AThePeanut4/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/AThePeanut4/neovim/git/trees{/sha}",
            "updated_at": "2024-06-01T14:50:24Z",
            "url": "https://api.github.com/repos/AThePeanut4/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/49614525?v=4",
            "events_url": "https://api.github.com/users/AThePeanut4/events{/privacy}",
            "followers_url": "https://api.github.com/users/AThePeanut4/followers",
            "following_url": "https://api.github.com/users/AThePeanut4/following{/other_user}",
            "gists_url": "https://api.github.com/users/AThePeanut4/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/AThePeanut4",
            "id": 49614525,
            "login": "AThePeanut4",
            "node_id": "MDQ6VXNlcjQ5NjE0NTI1",
            "organizations_url": "https://api.github.com/users/AThePeanut4/orgs",
            "received_events_url": "https://api.github.com/users/AThePeanut4/received_events",
            "repos_url": "https://api.github.com/users/AThePeanut4/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/AThePeanut4/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AThePeanut4/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/AThePeanut4"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/29134",
    "id": 1899310234,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29134",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f69937fdbd162630c35e119e67bbbf052558c0e0",
    "merged_at": "2024-06-04T21:35:44Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5xNSya",
    "number": 29134,
    "patch_url": "https://github.com/neovim/neovim/pull/29134.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/29134/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/a67d59a1aa9076fe5731dc2a7b84e5ea7aa41b79",
    "title": "fix(diagnostic): fix float scope filtering",
    "updated_at": "2024-06-09T14:13:09Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/29134",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/49614525?v=4",
        "events_url": "https://api.github.com/users/AThePeanut4/events{/privacy}",
        "followers_url": "https://api.github.com/users/AThePeanut4/followers",
        "following_url": "https://api.github.com/users/AThePeanut4/following{/other_user}",
        "gists_url": "https://api.github.com/users/AThePeanut4/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/AThePeanut4",
        "id": 49614525,
        "login": "AThePeanut4",
        "node_id": "MDQ6VXNlcjQ5NjE0NTI1",
        "organizations_url": "https://api.github.com/users/AThePeanut4/orgs",
        "received_events_url": "https://api.github.com/users/AThePeanut4/received_events",
        "repos_url": "https://api.github.com/users/AThePeanut4/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/AThePeanut4/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AThePeanut4/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/AThePeanut4"
    }
}