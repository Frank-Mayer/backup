{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26458/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26458/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26458"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26458"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26458/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/a34cc1a44de75eff4c6b43f983dc983eb283119d"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5055,
            "forks_count": 5055,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1715,
            "open_issues_count": 1715,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-12-12T01:44:46Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 244566,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 71715,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-12-12T01:56:57Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 71715,
            "watchers_count": 71715,
            "web_commit_signoff_required": false
        },
        "sha": "096211a87b1649e9a7408ce159072a6236195eea",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Follow-up to #26429.\r\n\r\nProblem: Many places in the code use `findoption()` to access an option using its name, even if the option index is available. This is very slow because it requires looping through the options array over and over.\r\n\r\nSolution: Use option index instead of name wherever possible. Also introduce an `OptIndex` enum which contains the index for every option as enum constants, this eliminates the need to pass static option names as strings.\r\n",
    "closed_at": "2023-12-10T15:26:09Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1419514836"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419514836"
                }
            },
            "author_association": "MEMBER",
            "body": "we have `kOptVal*` and `kOptReq*`, and conflicts aren't possible because of the CamelCasing. shorter is better (as long as it's readable) :)\r\n\r\n```suggestion\r\n  w(('  kOpt%s = %u,'):format(title_case(o.full_name), i - 1))\r\n```",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-07T19:32:34Z",
            "diff_hunk": "@@ -229,4 +236,15 @@ w('')\n for _, v in ipairs(defines) do\n   w('#define ' .. v[1] .. ' ' .. v[2])\n end\n+\n+-- Generate options enum file\n+opt_fd = assert(io.open(options_enum_file, 'w'))\n+\n+w('typedef enum {')\n+w('  kOptionInvalid = -1,')\n+for i, o in ipairs(options.options) do\n+  w(('  kOption%s = %u,'):format(title_case(o.full_name), i - 1))",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1419514836",
            "id": 1419514836,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UnBPU",
            "original_commit_id": "c319abb086b97246788b2ff97e468aea0dd454d1",
            "original_line": 246,
            "original_position": 30,
            "original_start_line": null,
            "path": "src/nvim/generators/gen_options.lua",
            "position": null,
            "pull_request_review_id": 1770902281,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419514836/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T19:32:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419514836",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1419532140"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419532140"
                }
            },
            "author_association": "MEMBER",
            "body": "Should also probably replace `OptionIndex` with `OptIndex`",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-07T19:48:36Z",
            "diff_hunk": "@@ -229,4 +236,15 @@ w('')\n for _, v in ipairs(defines) do\n   w('#define ' .. v[1] .. ' ' .. v[2])\n end\n+\n+-- Generate options enum file\n+opt_fd = assert(io.open(options_enum_file, 'w'))\n+\n+w('typedef enum {')\n+w('  kOptionInvalid = -1,')\n+for i, o in ipairs(options.options) do\n+  w(('  kOption%s = %u,'):format(title_case(o.full_name), i - 1))",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1419532140",
            "id": 1419532140,
            "in_reply_to_id": 1419514836,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UnFds",
            "original_commit_id": "c319abb086b97246788b2ff97e468aea0dd454d1",
            "original_line": 246,
            "original_position": 30,
            "original_start_line": null,
            "path": "src/nvim/generators/gen_options.lua",
            "position": null,
            "pull_request_review_id": 1770925640,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419532140/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T19:48:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419532140",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1419807690"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419807690"
                }
            },
            "author_association": "MEMBER",
            "body": "It seems that an assertion is also needed here.",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-08T00:53:45Z",
            "diff_hunk": "@@ -3482,7 +3466,7 @@ OptVal get_option_value(int opt_idx, int scope)\n }\n \n /// Return information for option at 'opt_idx'\n-vimoption_T *get_option(int opt_idx)\n+vimoption_T *get_option(OptIndex opt_idx)\n {\n   return &options[opt_idx];",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1419807690",
            "id": 1419807690,
            "line": 3481,
            "node_id": "PRRC_kwDOAPphoM5UoIvK",
            "original_commit_id": "222c0827dec6e814332214d3c82a4c2fe49d9e14",
            "original_line": 3481,
            "original_position": 704,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": 788,
            "pull_request_review_id": 1771350827,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419807690/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-08T00:53:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419807690",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1419808156"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419808156"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this change should be reverted, because `OptIndex` doesn't include the index of the final `NULL` option.",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-08T00:54:42Z",
            "diff_hunk": "@@ -1700,33 +1689,33 @@ static void didset_options2(void)\n /// Check for string options that are NULL (normally only termcap options).\n void check_options(void)\n {\n-  for (int opt_idx = 0; options[opt_idx].fullname != NULL; opt_idx++) {\n+  for (OptIndex opt_idx = 0; options[opt_idx].fullname != NULL; opt_idx++) {",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1419808156",
            "id": 1419808156,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UoI2c",
            "original_commit_id": "222c0827dec6e814332214d3c82a4c2fe49d9e14",
            "original_line": 1692,
            "original_position": 473,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1771351473,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419808156/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-08T00:59:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419808156",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1419808305"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419808305"
                }
            },
            "author_association": "MEMBER",
            "body": "ditto",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-08T00:55:00Z",
            "diff_hunk": "@@ -4851,19 +4846,19 @@ void didset_window_options(win_T *wp, bool valid_cursor)\n }\n \n /// Index into the options table for a buffer-local option enum.\n-static int buf_opt_idx[BV_COUNT];\n+static OptIndex buf_opt_idx[BV_COUNT];\n #define COPY_OPT_SCTX(buf, bv) buf->b_p_script_ctx[bv] = options[buf_opt_idx[bv]].last_set\n \n /// Initialize buf_opt_idx[] if not done already.\n static void init_buf_opt_idx(void)\n {\n-  static int did_init_buf_opt_idx = false;\n+  static bool did_init_buf_opt_idx = false;\n \n   if (did_init_buf_opt_idx) {\n     return;\n   }\n   did_init_buf_opt_idx = true;\n-  for (int i = 0; options[i].fullname != NULL; i++) {\n+  for (OptIndex i = 0; options[i].fullname != NULL; i++) {",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1419808305",
            "id": 1419808305,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UoI4x",
            "original_commit_id": "222c0827dec6e814332214d3c82a4c2fe49d9e14",
            "original_line": 4861,
            "original_position": 893,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1771351473,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419808305/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-08T00:59:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419808305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1419809573"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419809573"
                }
            },
            "author_association": "MEMBER",
            "body": "ditto",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-08T00:56:51Z",
            "diff_hunk": "@@ -3054,10 +3038,10 @@ int findoption_len(const char *const arg, const size_t len)\n \n   // Check for name starting with an illegal character.\n   if (len == 0 || arg[0] < 'a' || arg[0] > 'z') {\n-    return -1;\n+    return kOptInvalid;\n   }\n \n-  int opt_idx;\n+  OptIndex opt_idx;",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1419809573",
            "id": 1419809573,
            "line": 3046,
            "node_id": "PRRC_kwDOAPphoM5UoJMl",
            "original_commit_id": "222c0827dec6e814332214d3c82a4c2fe49d9e14",
            "original_line": 3046,
            "original_position": 589,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": 640,
            "pull_request_review_id": 1771351473,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419809573/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-08T00:59:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419809573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1419809785"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419809785"
                }
            },
            "author_association": "MEMBER",
            "body": "ditto",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-08T00:57:14Z",
            "diff_hunk": "@@ -288,7 +288,7 @@ static void set_init_default_cdpath(void)\n /// default.\n static void set_init_expand_env(void)\n {\n-  for (int opt_idx = 0; options[opt_idx].fullname; opt_idx++) {\n+  for (OptIndex opt_idx = 0; options[opt_idx].fullname; opt_idx++) {",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1419809785",
            "id": 1419809785,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UoJP5",
            "original_commit_id": "222c0827dec6e814332214d3c82a4c2fe49d9e14",
            "original_line": 291,
            "original_position": 73,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1771351473,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419809785/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-08T00:59:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419809785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1419810485"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419810485"
                }
            },
            "author_association": "MEMBER",
            "body": "ditto",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-08T00:58:42Z",
            "diff_hunk": "@@ -4005,7 +4000,7 @@ static int optval_default(vimoption_T *p, const void *varp)\n /// Send update to UIs with values of UI relevant options\n void ui_refresh_options(void)\n {\n-  for (int opt_idx = 0; options[opt_idx].fullname; opt_idx++) {\n+  for (OptIndex opt_idx = 0; options[opt_idx].fullname; opt_idx++) {",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1419810485",
            "id": 1419810485,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UoJa1",
            "original_commit_id": "222c0827dec6e814332214d3c82a4c2fe49d9e14",
            "original_line": 4003,
            "original_position": 861,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1771351473,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419810485/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-08T00:59:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419810485",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1419810828"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419810828"
                }
            },
            "author_association": "MEMBER",
            "body": "ditto",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-08T00:59:27Z",
            "diff_hunk": "@@ -6158,7 +6132,7 @@ dict_T *get_winbuf_options(const int bufopt)\n {\n   dict_T *const d = tv_dict_alloc();\n \n-  for (int opt_idx = 0; options[opt_idx].fullname; opt_idx++) {\n+  for (OptIndex opt_idx = 0; options[opt_idx].fullname; opt_idx++) {",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1419810828",
            "id": 1419810828,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UoJgM",
            "original_commit_id": "222c0827dec6e814332214d3c82a4c2fe49d9e14",
            "original_line": 6135,
            "original_position": 1082,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1771351473,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419810828/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-08T00:59:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419810828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1419989399"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419989399"
                }
            },
            "author_association": "MEMBER",
            "body": "@zeertzjq Instead of reverting it, I instead added a `kOptIndexCount` and removed the `NULL` option. That way we can use `kOptIndexCount` to iterate through the `options[]` array instead.",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-08T06:41:47Z",
            "diff_hunk": "@@ -1700,33 +1689,33 @@ static void didset_options2(void)\n /// Check for string options that are NULL (normally only termcap options).\n void check_options(void)\n {\n-  for (int opt_idx = 0; options[opt_idx].fullname != NULL; opt_idx++) {\n+  for (OptIndex opt_idx = 0; options[opt_idx].fullname != NULL; opt_idx++) {",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1419989399",
            "id": 1419989399,
            "in_reply_to_id": 1419808156,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Uo1GX",
            "original_commit_id": "222c0827dec6e814332214d3c82a4c2fe49d9e14",
            "original_line": 1692,
            "original_position": 473,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1771625704,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419989399/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-08T06:41:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419989399",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26458#discussion_r1421394332"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26458"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1421394332"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't all options lowercase anyway so only the `:upper()` part is needed here? Also, if we ever were to add cased option names (which we will not, but if we would), it would be fine to hypothetically preserve that.",
            "commit_id": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
            "created_at": "2023-12-09T10:34:55Z",
            "diff_hunk": "@@ -41,6 +42,12 @@ local list_flags = {\n   flagscomma = 'P_COMMA|P_FLAGLIST',\n }\n \n+--- @param s string\n+--- @return string\n+local title_case = function(s)\n+  return s:sub(1, 1):upper() .. s:sub(2):lower()",
            "html_url": "https://github.com/neovim/neovim/pull/26458#discussion_r1421394332",
            "id": 1421394332,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UuMGc",
            "original_commit_id": "bb9e1a471495a116c7d1027514f4b17d2ce3d26c",
            "original_line": 48,
            "original_position": 13,
            "original_start_line": null,
            "path": "src/nvim/generators/gen_options.lua",
            "position": null,
            "pull_request_review_id": 1773668095,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1421394332/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-09T10:34:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1421394332",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "You misspelled the function name.",
            "created_at": "2023-12-07T21:08:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/26458#issuecomment-1846115725",
            "id": 1846115725,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26458",
            "node_id": "IC_kwDOAPphoM5uCX2N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1846115725/reactions"
            },
            "updated_at": "2023-12-07T21:08:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1846115725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Are these new coverity issues related to this PR (or the other options refactors)? Even if they are false positives, there's an increasing number of them so hopefully we can satisfy coverity via a small code change.\r\n\r\n```\r\n8 new defect(s) introduced to neovim/neovim found with Coverity Scan.\r\n\r\n*** CID 470408:  Memory - illegal accesses  (STRING_NULL)\r\n/src/nvim/ex_cmds.c: 4668 in show_sub()\r\n4662         }\r\n4663         bufhl_add_hl_pos_offset(orig_buf, cmdpreview_ns, hl_id, match.start, match.end, 0);\r\n4664       }\r\n4665     \r\n4666       xfree(str);\r\n4667     \r\n>>>     CID 470408:  Memory - illegal accesses  (STRING_NULL)\r\n>>>     Passing unterminated string \"save_shm_p\" to \"set_string_option_direct\", which expects a null-terminated string.\r\n4668       set_string_option_direct(kOptShortmess, save_shm_p, OPT_FREE, SID_NONE);\r\n4669       xfree(save_shm_p);\r\n4670     \r\n4671       return preview ? 2 : 1;\r\n4672     }\r\n4673     \r\n\r\n** CID 470407:  Memory - illegal accesses  (STRING_NULL)\r\n\r\n\r\n________________________________________________________________________________________________________\r\n*** CID 470407:  Memory - illegal accesses  (STRING_NULL)\r\n/src/nvim/ex_getln.c: 908 in command_line_enter()\r\n902     \r\n903       // When the command line was typed, no need for a wait-return prompt.\r\n904       if (s->some_key_typed && tl_ret) {\r\n905         need_wait_return = false;\r\n906       }\r\n907     \r\n>>>     CID 470407:  Memory - illegal accesses  (STRING_NULL)\r\n>>>     Passing unterminated string \"s->save_p_icm\" to \"set_string_option_direct\", which expects a null-terminated string.\r\n908       set_string_option_direct(kOptInccommand, s->save_p_icm, OPT_FREE, SID_NONE);\r\n909       State = s->save_State;\r\n910       if (cmdpreview != save_cmdpreview) {\r\n911         cmdpreview = save_cmdpreview;  // restore preview state\r\n912         redraw_all_later(UPD_SOME_VALID);\r\n913       }\r\n\r\n** CID 470406:  Control flow issues  (DEADCODE)\r\n/src/nvim/option.c: 277 in set_init_default_cdpath()\r\n\r\n\r\n________________________________________________________________________________________________________\r\n*** CID 470406:  Control flow issues  (DEADCODE)\r\n/src/nvim/option.c: 277 in set_init_default_cdpath()\r\n271       buf[j] = NUL;\r\n272       OptIndex opt_idx = kOptCdpath;\r\n273       if (opt_idx != kOptInvalid) {\r\n274         options[opt_idx].def_val = buf;\r\n275         options[opt_idx].flags |= P_DEF_ALLOCED;\r\n276       } else {\r\n>>>     CID 470406:  Control flow issues  (DEADCODE)\r\n>>>     Execution cannot reach this statement: \"xfree(buf);\".\r\n277         xfree(buf);           // cannot happen\r\n278       }\r\n279       xfree(cdpath);\r\n280     }\r\n281     \r\n282     /// Expand environment variables and things like \"~\" for the defaults.\r\n\r\n** CID 470405:  Memory - illegal accesses  (STRING_NULL)\r\n\r\n\r\n________________________________________________________________________________________________________\r\n*** CID 470405:  Memory - illegal accesses  (STRING_NULL)\r\n/src/nvim/window.c: 544 in do_window()\r\n538     \r\n539           // If 'switchbuf' is set to 'useopen' or 'usetab' and the\r\n540           // file is already opened in a window, then jump to it.\r\n541           win_T *wp = NULL;\r\n542           if ((swb_flags & (SWB_USEOPEN | SWB_USETAB))\r\n543               && cmdmod.cmod_tab == 0) {\r\n>>>     CID 470405:  Memory - illegal accesses  (STRING_NULL)\r\n>>>     Passing unterminated string \"ptr\" to \"buflist_findname_exp\", which expects a null-terminated string.\r\n544             wp = swbuf_goto_win_with_buf(buflist_findname_exp(ptr));\r\n545           }\r\n546     \r\n547           if (wp == NULL && win_split(0, 0) == OK) {\r\n548             RESET_BINDING(curwin);\r\n549             if (do_ecmd(0, ptr, NULL, NULL, ECMD_LASTL, ECMD_HIDE, NULL) == FAIL) {\r\n\r\n** CID 470404:  Memory - illegal accesses  (STRING_NULL)\r\n\r\n\r\n________________________________________________________________________________________________________\r\n*** CID 470404:  Memory - illegal accesses  (STRING_NULL)\r\n/src/nvim/quickfix.c: 5219 in vgr_load_dummy_buf()\r\n5213     \r\n5214       // Load file into a buffer, so that 'fileencoding' is detected,\r\n5215       // autocommands applied, etc.\r\n5216       buf_T *buf = load_dummy_buffer(fname, dirname_start, dirname_now);\r\n5217     \r\n5218       p_mls = save_mls;\r\n>>>     CID 470404:  Memory - illegal accesses  (STRING_NULL)\r\n>>>     Passing unterminated string \"save_ei\" to \"au_event_restore\", which expects a null-terminated string.\r\n5219       au_event_restore(save_ei);\r\n5220     \r\n5221       return buf;\r\n5222     }\r\n5223     \r\n5224     /// Check whether a quickfix/location list is valid. Autocmds may remove or\r\n\r\n** CID 470403:  Memory - illegal accesses  (STRING_NULL)\r\n\r\n\r\n________________________________________________________________________________________________________\r\n*** CID 470403:  Memory - illegal accesses  (STRING_NULL)\r\n/src/nvim/ex_docmd.c: 2341 in do_one_cmd()\r\n2335         emsg(errormsg);\r\n2336       }\r\n2337       do_errthrow(cstack,\r\n2338                   (ea.cmdidx != CMD_SIZE\r\n2339                    && !IS_USER_CMDIDX(ea.cmdidx)) ? cmdnames[(int)ea.cmdidx].cmd_name : NULL);\r\n2340     \r\n>>>     CID 470403:  Memory - illegal accesses  (STRING_NULL)\r\n>>>     Passing unterminated string \"cmdmod.cmod_save_ei\" to \"undo_cmdmod\", which expects a null-terminated string.\r\n2341       undo_cmdmod(&cmdmod);\r\n2342       cmdmod = save_cmdmod;\r\n2343       reg_executing = save_reg_executing;\r\n2344       pending_end_reg_executing = save_pending_end_reg_executing;\r\n2345     \r\n2346       if (ea.nextcmd && *ea.nextcmd == NUL) {       // not really a next command\r\n\r\n** CID 470402:  Memory - illegal accesses  (STRING_NULL)\r\n\r\n\r\n________________________________________________________________________________________________________\r\n*** CID 470402:  Memory - illegal accesses  (STRING_NULL)\r\n/src/nvim/ex_docmd.c: 1725 in execute_cmd()\r\n1719     \r\n1720     end:\r\n1721       if (errormsg != NULL && *errormsg != NUL) {\r\n1722         emsg(errormsg);\r\n1723       }\r\n1724       // Undo command modifiers\r\n>>>     CID 470402:  Memory - illegal accesses  (STRING_NULL)\r\n>>>     Passing unterminated string \"cmdmod.cmod_save_ei\" to \"undo_cmdmod\", which expects a null-terminated string.\r\n1725       undo_cmdmod(&cmdmod);\r\n1726       cmdmod = save_cmdmod;\r\n1727       return retv;\r\n1728     #undef ERROR\r\n1729     }\r\n1730     \r\n\r\n** CID 470401:  Memory - illegal accesses  (STRING_NULL)\r\n\r\n\r\n________________________________________________________________________________________________________\r\n*** CID 470401:  Memory - illegal accesses  (STRING_NULL)\r\n/src/nvim/fileio.c: 1968 in set_forced_fenc()\r\n1962     {\r\n1963       if (eap->force_enc == 0) {\r\n1964         return;\r\n1965       }\r\n1966     \r\n1967       char *fenc = enc_canonize(eap->cmd + eap->force_enc);\r\n>>>     CID 470401:  Memory - illegal accesses  (STRING_NULL)\r\n>>>     Passing unterminated string \"fenc\" to \"set_string_option_direct\", which expects a null-terminated string.\r\n1968       set_string_option_direct(kOptFileencoding, fenc, OPT_FREE|OPT_LOCAL, 0);\r\n1969       xfree(fenc);\r\n1970     }\r\n1971     \r\n1972     /// Find next fileencoding to use from 'fileencodings'.\r\n1973     /// \"pp\" points to fenc_next.  It's advanced to the next item.\r\n```",
            "created_at": "2023-12-11T14:03:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/26458#issuecomment-1850145035",
            "id": 1850145035,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26458",
            "node_id": "IC_kwDOAPphoM5uRvkL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1850145035/reactions"
            },
            "updated_at": "2023-12-11T14:03:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1850145035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Are these new coverity issues related to this PR (or the other options refactors)? Even if they are false positives, there's an increasing number of them so hopefully we can satisfy coverity via a small code change.\r\n> \r\n> ```\r\n> 8 new defect(s) introduced to neovim/neovim found with Coverity Scan.\r\n> \r\n> *** CID 470408:  Memory - illegal accesses  (STRING_NULL)\r\n> /src/nvim/ex_cmds.c: 4668 in show_sub()\r\n> 4662         }\r\n> 4663         bufhl_add_hl_pos_offset(orig_buf, cmdpreview_ns, hl_id, match.start, match.end, 0);\r\n> 4664       }\r\n> 4665     \r\n> 4666       xfree(str);\r\n> 4667     \r\n> >>>     CID 470408:  Memory - illegal accesses  (STRING_NULL)\r\n> >>>     Passing unterminated string \"save_shm_p\" to \"set_string_option_direct\", which expects a null-terminated string.\r\n> 4668       set_string_option_direct(kOptShortmess, save_shm_p, OPT_FREE, SID_NONE);\r\n> 4669       xfree(save_shm_p);\r\n> 4670     \r\n> 4671       return preview ? 2 : 1;\r\n> 4672     }\r\n> 4673     \r\n> \r\n> ** CID 470407:  Memory - illegal accesses  (STRING_NULL)\r\n> \r\n> \r\n> ________________________________________________________________________________________________________\r\n> *** CID 470407:  Memory - illegal accesses  (STRING_NULL)\r\n> /src/nvim/ex_getln.c: 908 in command_line_enter()\r\n> 902     \r\n> 903       // When the command line was typed, no need for a wait-return prompt.\r\n> 904       if (s->some_key_typed && tl_ret) {\r\n> 905         need_wait_return = false;\r\n> 906       }\r\n> 907     \r\n> >>>     CID 470407:  Memory - illegal accesses  (STRING_NULL)\r\n> >>>     Passing unterminated string \"s->save_p_icm\" to \"set_string_option_direct\", which expects a null-terminated string.\r\n> 908       set_string_option_direct(kOptInccommand, s->save_p_icm, OPT_FREE, SID_NONE);\r\n> 909       State = s->save_State;\r\n> 910       if (cmdpreview != save_cmdpreview) {\r\n> 911         cmdpreview = save_cmdpreview;  // restore preview state\r\n> 912         redraw_all_later(UPD_SOME_VALID);\r\n> 913       }\r\n> \r\n> ** CID 470406:  Control flow issues  (DEADCODE)\r\n> /src/nvim/option.c: 277 in set_init_default_cdpath()\r\n> \r\n> \r\n> ________________________________________________________________________________________________________\r\n> *** CID 470406:  Control flow issues  (DEADCODE)\r\n> /src/nvim/option.c: 277 in set_init_default_cdpath()\r\n> 271       buf[j] = NUL;\r\n> 272       OptIndex opt_idx = kOptCdpath;\r\n> 273       if (opt_idx != kOptInvalid) {\r\n> 274         options[opt_idx].def_val = buf;\r\n> 275         options[opt_idx].flags |= P_DEF_ALLOCED;\r\n> 276       } else {\r\n> >>>     CID 470406:  Control flow issues  (DEADCODE)\r\n> >>>     Execution cannot reach this statement: \"xfree(buf);\".\r\n> 277         xfree(buf);           // cannot happen\r\n> 278       }\r\n> 279       xfree(cdpath);\r\n> 280     }\r\n> 281     \r\n> 282     /// Expand environment variables and things like \"~\" for the defaults.\r\n> \r\n> ** CID 470405:  Memory - illegal accesses  (STRING_NULL)\r\n> \r\n> \r\n> ________________________________________________________________________________________________________\r\n> *** CID 470405:  Memory - illegal accesses  (STRING_NULL)\r\n> /src/nvim/window.c: 544 in do_window()\r\n> 538     \r\n> 539           // If 'switchbuf' is set to 'useopen' or 'usetab' and the\r\n> 540           // file is already opened in a window, then jump to it.\r\n> 541           win_T *wp = NULL;\r\n> 542           if ((swb_flags & (SWB_USEOPEN | SWB_USETAB))\r\n> 543               && cmdmod.cmod_tab == 0) {\r\n> >>>     CID 470405:  Memory - illegal accesses  (STRING_NULL)\r\n> >>>     Passing unterminated string \"ptr\" to \"buflist_findname_exp\", which expects a null-terminated string.\r\n> 544             wp = swbuf_goto_win_with_buf(buflist_findname_exp(ptr));\r\n> 545           }\r\n> 546     \r\n> 547           if (wp == NULL && win_split(0, 0) == OK) {\r\n> 548             RESET_BINDING(curwin);\r\n> 549             if (do_ecmd(0, ptr, NULL, NULL, ECMD_LASTL, ECMD_HIDE, NULL) == FAIL) {\r\n> \r\n> ** CID 470404:  Memory - illegal accesses  (STRING_NULL)\r\n> \r\n> \r\n> ________________________________________________________________________________________________________\r\n> *** CID 470404:  Memory - illegal accesses  (STRING_NULL)\r\n> /src/nvim/quickfix.c: 5219 in vgr_load_dummy_buf()\r\n> 5213     \r\n> 5214       // Load file into a buffer, so that 'fileencoding' is detected,\r\n> 5215       // autocommands applied, etc.\r\n> 5216       buf_T *buf = load_dummy_buffer(fname, dirname_start, dirname_now);\r\n> 5217     \r\n> 5218       p_mls = save_mls;\r\n> >>>     CID 470404:  Memory - illegal accesses  (STRING_NULL)\r\n> >>>     Passing unterminated string \"save_ei\" to \"au_event_restore\", which expects a null-terminated string.\r\n> 5219       au_event_restore(save_ei);\r\n> 5220     \r\n> 5221       return buf;\r\n> 5222     }\r\n> 5223     \r\n> 5224     /// Check whether a quickfix/location list is valid. Autocmds may remove or\r\n> \r\n> ** CID 470403:  Memory - illegal accesses  (STRING_NULL)\r\n> \r\n> \r\n> ________________________________________________________________________________________________________\r\n> *** CID 470403:  Memory - illegal accesses  (STRING_NULL)\r\n> /src/nvim/ex_docmd.c: 2341 in do_one_cmd()\r\n> 2335         emsg(errormsg);\r\n> 2336       }\r\n> 2337       do_errthrow(cstack,\r\n> 2338                   (ea.cmdidx != CMD_SIZE\r\n> 2339                    && !IS_USER_CMDIDX(ea.cmdidx)) ? cmdnames[(int)ea.cmdidx].cmd_name : NULL);\r\n> 2340     \r\n> >>>     CID 470403:  Memory - illegal accesses  (STRING_NULL)\r\n> >>>     Passing unterminated string \"cmdmod.cmod_save_ei\" to \"undo_cmdmod\", which expects a null-terminated string.\r\n> 2341       undo_cmdmod(&cmdmod);\r\n> 2342       cmdmod = save_cmdmod;\r\n> 2343       reg_executing = save_reg_executing;\r\n> 2344       pending_end_reg_executing = save_pending_end_reg_executing;\r\n> 2345     \r\n> 2346       if (ea.nextcmd && *ea.nextcmd == NUL) {       // not really a next command\r\n> \r\n> ** CID 470402:  Memory - illegal accesses  (STRING_NULL)\r\n> \r\n> \r\n> ________________________________________________________________________________________________________\r\n> *** CID 470402:  Memory - illegal accesses  (STRING_NULL)\r\n> /src/nvim/ex_docmd.c: 1725 in execute_cmd()\r\n> 1719     \r\n> 1720     end:\r\n> 1721       if (errormsg != NULL && *errormsg != NUL) {\r\n> 1722         emsg(errormsg);\r\n> 1723       }\r\n> 1724       // Undo command modifiers\r\n> >>>     CID 470402:  Memory - illegal accesses  (STRING_NULL)\r\n> >>>     Passing unterminated string \"cmdmod.cmod_save_ei\" to \"undo_cmdmod\", which expects a null-terminated string.\r\n> 1725       undo_cmdmod(&cmdmod);\r\n> 1726       cmdmod = save_cmdmod;\r\n> 1727       return retv;\r\n> 1728     #undef ERROR\r\n> 1729     }\r\n> 1730     \r\n> \r\n> ** CID 470401:  Memory - illegal accesses  (STRING_NULL)\r\n> \r\n> \r\n> ________________________________________________________________________________________________________\r\n> *** CID 470401:  Memory - illegal accesses  (STRING_NULL)\r\n> /src/nvim/fileio.c: 1968 in set_forced_fenc()\r\n> 1962     {\r\n> 1963       if (eap->force_enc == 0) {\r\n> 1964         return;\r\n> 1965       }\r\n> 1966     \r\n> 1967       char *fenc = enc_canonize(eap->cmd + eap->force_enc);\r\n> >>>     CID 470401:  Memory - illegal accesses  (STRING_NULL)\r\n> >>>     Passing unterminated string \"fenc\" to \"set_string_option_direct\", which expects a null-terminated string.\r\n> 1968       set_string_option_direct(kOptFileencoding, fenc, OPT_FREE|OPT_LOCAL, 0);\r\n> 1969       xfree(fenc);\r\n> 1970     }\r\n> 1971     \r\n> 1972     /// Find next fileencoding to use from 'fileencodings'.\r\n> 1973     /// \"pp\" points to fenc_next.  It's advanced to the next item.\r\n> ```\r\n\r\nDoesn't seem related to the PR",
            "created_at": "2023-12-11T17:55:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/26458#issuecomment-1850588027",
            "id": 1850588027,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26458",
            "node_id": "IC_kwDOAPphoM5uTbt7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1850588027/reactions"
            },
            "updated_at": "2023-12-11T17:55:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1850588027",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26458/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26458/commits",
    "created_at": "2023-12-07T19:26:46Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26458.diff",
    "draft": false,
    "head": {
        "label": "famiu:refactor/options/optionindex",
        "ref": "refactor/options/optionindex",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/famiu/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/famiu/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/famiu/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/famiu/neovim/branches{/branch}",
            "clone_url": "https://github.com/famiu/neovim.git",
            "collaborators_url": "https://api.github.com/repos/famiu/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/famiu/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/famiu/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/famiu/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/famiu/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/famiu/neovim/contributors",
            "created_at": "2021-10-11T04:58:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/famiu/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/famiu/neovim/downloads",
            "events_url": "https://api.github.com/repos/famiu/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/famiu/neovim/forks",
            "full_name": "famiu/neovim",
            "git_commits_url": "https://api.github.com/repos/famiu/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/famiu/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/famiu/neovim/git/tags{/sha}",
            "git_url": "git://github.com/famiu/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/famiu/neovim/hooks",
            "html_url": "https://github.com/famiu/neovim",
            "id": 415783665,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/famiu/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/famiu/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/famiu/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/famiu/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/famiu/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/famiu/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/famiu/neovim/merges",
            "milestones_url": "https://api.github.com/repos/famiu/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGMha8Q",
            "notifications_url": "https://api.github.com/repos/famiu/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/famiu/neovim/pulls{/number}",
            "pushed_at": "2023-12-11T12:56:19Z",
            "releases_url": "https://api.github.com/repos/famiu/neovim/releases{/id}",
            "size": 239826,
            "ssh_url": "git@github.com:famiu/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/famiu/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/famiu/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/famiu/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/famiu/neovim/subscription",
            "svn_url": "https://github.com/famiu/neovim",
            "tags_url": "https://api.github.com/repos/famiu/neovim/tags",
            "teams_url": "https://api.github.com/repos/famiu/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/famiu/neovim/git/trees{/sha}",
            "updated_at": "2022-08-29T10:09:33Z",
            "url": "https://api.github.com/repos/famiu/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "a34cc1a44de75eff4c6b43f983dc983eb283119d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26458",
    "id": 1635052124,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26458",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "locked": false,
    "merge_commit_sha": "529498685bbcd4783bc0e816d6247118c9ffb9a7",
    "merged_at": "2023-12-10T15:26:09Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5hdOpc",
    "number": 26458,
    "patch_url": "https://github.com/neovim/neovim/pull/26458.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26458/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/a34cc1a44de75eff4c6b43f983dc983eb283119d",
    "title": "refactor(options): reduce `findoption()` usage",
    "updated_at": "2023-12-11T17:55:36Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26458",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu"
    }
}