{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26827/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26827/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26827"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26827"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26827/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/058d79cf7464732fc4fa5400994c614b49293c70"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5277,
            "forks_count": 5277,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1705,
            "open_issues_count": 1705,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-04-23T00:28:51Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 267079,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 76421,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-04-23T01:19:16Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 76421,
            "watchers_count": 76421,
            "web_commit_signoff_required": false
        },
        "sha": "4c31a1b807f1c38203661e35059305d63fd0e9f7",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "The two main bottlenecks in editing big files with many injections are (1) parsing and (2) processing the injection queries. This PR resolves (2) by applying injection query to only visible regions.\r\n\r\n<!--\r\nStatus:\r\n* Seems to work, but probably needs more testing.\r\n* There are some TODOs regarding changes that may affect API users (maybe related to failing test cases).\r\n-->\r\n\r\nBenchmark:\r\n1. download <https://raw.githubusercontent.com/torvalds/linux/master/drivers/gpu/drm/amd/include/asic_reg/dcn/dcn_3_2_0_sh_mask.h>\r\n1. setup nvim-treesitter for `cpp` (`.h` file is recognized as `cpp` filetype by default)\r\n1. `:let g:__ts_debug = 1`\r\n1. `:e dcn_3_2_0_sh_mask.h`, `:lua vim.treesitter.start()`\r\n1. go to the last comment in the file (`G?//<CR>`), then append a space (`A<Space><Esc>`)\r\n1. go to the next line (`j`) and append 0 (`A0<Esc>`)\r\n1. see log at `~/.local/state/nvim/treesitter.log`\r\n\r\n<details>\r\n<summary>before</summary>\r\n\r\n```\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 2923.453483, query_time = 0, regions_parsed = 1 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, regions_parsed = 0 }\r\n1:comment:(nvim) new:145: (#regions=1)  START\r\n1:cpp:(nvim) new:145: (#regions=1)  START\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 1004.06346, range = { 0, 56 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 1.506477, query_time = 0.17726, range = { 0, 56 }, regions_parsed = 25 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 1.215564, query_time = 0.001373, range = { 0, 56 }, regions_parsed = 5 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 2.845539, query_time = 0.450294, range = { 222837, 222893 }, regions_parsed = 50 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0.266351, query_time = 0.001112, range = { 222837, 222893 }, regions_parsed = 4 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) _on_bytes:984: (#regions=1)  on_bytes 1 4 222884 62 23943921 0 0 0 0 1 1\r\n1:cpp:(nvim) _iter_regions:571: (#regions=1)  was valid true\r\n1:cpp:(nvim) _iter_regions:581: (#regions=1)  invalidating region 1 []\r\n1:comment:(nvim) _iter_regions:581: (#regions=9)  invalidating region 27859 [222884:0-222884:63]\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 366.826656, query_time = 1008.172019, range = { 222837, 222893 }, regions_parsed = 1 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 3.726473, query_time = 0.987651, range = { 222837, 222893 }, regions_parsed = 50 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0.193249, query_time = 0.006221, range = { 222837, 222893 }, regions_parsed = 4 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) _on_bytes:984: (#regions=1)  on_bytes 1 5 222885 113 23944036 0 0 0 0 1 1\r\n1:cpp:(nvim) _iter_regions:571: (#regions=1)  was valid true\r\n1:cpp:(nvim) _iter_regions:581: (#regions=1)  invalidating region 1 []\r\n1:cpp:(nvim) _iter_regions:581: (#regions=50)  invalidating region 194397 [222885:110-222885:114]\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 391.276224, query_time = 1176.385789, range = { 222837, 222893 }, regions_parsed = 1 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 3.136393, query_time = 0.262249, range = { 222837, 222893 }, regions_parsed = 50 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0.135404, query_time = 0.000935, range = { 222837, 222893 }, regions_parsed = 4 }\r\n1:cpp:(nvim) parse:450: (#regions=1)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:450: (#regions=194402)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:450: (#regions=27859)  { parse_time = 0, query_time = 0, range = { 222837, 222893 }, regions_parsed = 0 }\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>after</summary>\r\n\r\n```\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 2782.294202, query_time = 0, regions_parsed = 1 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 0, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 0, regions_parsed = 0 }\r\n1:comment:(nvim) new:162: (#regions=1)  START\r\n1:cpp:(nvim) new:162: (#regions=1)  START\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 0.38573, range = { 0, 56 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:484: (#regions=5)  { parse_time = 0.725387, query_time = 0.000461, range = { 0, 56 }, regions_parsed = 5 }\r\n1:cpp:(nvim) parse:484: (#regions=25)  { parse_time = 0.898121, query_time = 0.061065, range = { 0, 56 }, regions_parsed = 25 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 1.598029, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:484: (#regions=9)  { parse_time = 0.354243, query_time = 0.001245, range = { 222837, 222893 }, regions_parsed = 4 }\r\n1:cpp:(nvim) parse:484: (#regions=75)  { parse_time = 10.392799, query_time = 0.823553, range = { 222837, 222893 }, regions_parsed = 50 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 0.96193, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:484: (#regions=4)  { parse_time = 0, query_time = 0.003102, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=50)  { parse_time = 0, query_time = 0.720424, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 1.32763, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:484: (#regions=4)  { parse_time = 0, query_time = 0.0019, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=50)  { parse_time = 0, query_time = 0.661419, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 1.424348, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:484: (#regions=4)  { parse_time = 0, query_time = 0.001834, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=50)  { parse_time = 0, query_time = 0.769533, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 1.261363, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:484: (#regions=4)  { parse_time = 0, query_time = 0.001738, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=50)  { parse_time = 0, query_time = 0.596901, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) _on_bytes:1144: (#regions=1)  on_bytes 1 4 222884 62 23943921 0 0 0 0 1 1\r\n1:cpp:(nvim) _iter_regions:606: (#regions=1)  was valid true\r\n1:cpp:(nvim) _iter_regions:616: (#regions=1)  invalidating region 1 []\r\n1:comment:(nvim) _iter_regions:606: (#regions=4)  was valid true\r\n1:comment:(nvim) _iter_regions:616: (#regions=4)  invalidating region 9 [222884:0-222884:63]\r\n1:cpp:(nvim) _iter_regions:606: (#regions=50)  was valid true\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 399.244173, query_time = 0.407459, range = { 222837, 222893 }, regions_parsed = 1 }\r\n1:comment:(nvim) parse:484: (#regions=4)  { changes = { { 222884, 62, 23943921, 222884, 63, 23943922 } }, parse_time = 0.046848, query_time = 0.00045, range = { 222837, 222893 }, regions_parsed = 1 }\r\n1:cpp:(nvim) parse:484: (#regions=50)  { parse_time = 0, query_time = 0.197181, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 0.976214, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:484: (#regions=4)  { parse_time = 0, query_time = 0.002079, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=50)  { parse_time = 0, query_time = 0.655016, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 1.166834, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:484: (#regions=4)  { parse_time = 0, query_time = 0.00189, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=50)  { parse_time = 0, query_time = 0.893842, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 1.057452, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:484: (#regions=4)  { parse_time = 0, query_time = 0.001859, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=50)  { parse_time = 0, query_time = 0.650981, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) _on_bytes:1144: (#regions=1)  on_bytes 1 5 222885 113 23944036 0 0 0 0 1 1\r\n1:cpp:(nvim) _iter_regions:606: (#regions=1)  was valid true\r\n1:cpp:(nvim) _iter_regions:616: (#regions=1)  invalidating region 1 []\r\n1:comment:(nvim) _iter_regions:606: (#regions=4)  was valid true\r\n1:cpp:(nvim) _iter_regions:606: (#regions=50)  was valid true\r\n1:cpp:(nvim) _iter_regions:616: (#regions=50)  invalidating region 70 [222885:110-222885:114]\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 376.665228, query_time = 0.288334, range = { 222837, 222893 }, regions_parsed = 1 }\r\n1:comment:(nvim) parse:484: (#regions=4)  { parse_time = 0, query_time = 0.000528, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=50)  { parse_time = 0.076109, query_time = 0.217351, range = { 222837, 222893 }, regions_parsed = 1 }\r\n1:cpp:(nvim) parse:484: (#regions=1)  { parse_time = 0, query_time = 1.539355, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:comment:(nvim) parse:484: (#regions=4)  { parse_time = 0, query_time = 0.002121, range = { 222837, 222893 }, regions_parsed = 0 }\r\n1:cpp:(nvim) parse:484: (#regions=50)  { parse_time = 0, query_time = 0.945593, range = { 222837, 222893 }, regions_parsed = 0 }\r\n```\r\n</details>\r\n\r\nEvaluation\r\n* Major benefit: The query time becomes negligible. Now the only bottleneck is the parsing of the root cpp parser.\r\n* Minor additional benefit: less reparsing of injections\r\n* Minor downside: It runs the injection query more frequently, for example when scrolling and when multiple windows show the same buffer (not shown in the above logs). But the cost is negligible.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1438950516"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438950516"
                }
            },
            "author_association": "MEMBER",
            "body": "nit: what if `range == false`?",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-01T02:18:45Z",
            "diff_hunk": "@@ -822,30 +965,47 @@ end\n ---\n --- This is where most of the injection processing occurs.\n ---\n---- TODO: Allow for an offset predicate to tailor the injection range\n----       instead of using the entire nodes range.\n+--- @param range boolean|Range|nil\n --- @private\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n-  if not self._injection_query then\n+function LanguageTree:_get_injections(range)\n+  if not self._injection_query or not range then\n     return {}\n   end\n \n   ---@type table<integer,TSInjection>\n   local injections = {}\n \n+  local range_start_line, range_end_line ---@type integer, integer\n+  if range ~= true then\n+    range_start_line, _, range_end_line, _ = Range.unpack4(range)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1438950516",
            "id": 1438950516,
            "line": 1068,
            "node_id": "PRRC_kwDOAPphoM5VxKR0",
            "original_commit_id": "4dabf9a969d679d944ea387e98391dc3483eb607",
            "original_line": 1056,
            "original_position": 320,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 528,
            "pull_request_review_id": 1799709293,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438950516/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T18:45:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438950516",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1438950820"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438950820"
                }
            },
            "author_association": "MEMBER",
            "body": "Are `range_start_line`, `range_end_line` all non-nil? (`range = true`) possibly need a nil check.",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-01T02:22:42Z",
            "diff_hunk": "@@ -822,30 +965,47 @@ end\n ---\n --- This is where most of the injection processing occurs.\n ---\n---- TODO: Allow for an offset predicate to tailor the injection range\n----       instead of using the entire nodes range.\n+--- @param range boolean|Range|nil\n --- @private\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n-  if not self._injection_query then\n+function LanguageTree:_get_injections(range)\n+  if not self._injection_query or not range then\n     return {}\n   end\n \n   ---@type table<integer,TSInjection>\n   local injections = {}\n \n+  local range_start_line, range_end_line ---@type integer, integer\n+  if range ~= true then\n+    range_start_line, _, range_end_line, _ = Range.unpack4(range)\n+  end\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n-\n-    for pattern, match, metadata in\n-      self._injection_query:iter_matches(root_node, self._source, start_line, end_line + 1)\n-    do\n-      local lang, combined, ranges = self:_get_injection(match, metadata)\n-      if lang then\n-        add_injection(injections, index, pattern, lang, combined, ranges)\n-      else\n-        self:_log('match from injection query failed for pattern', pattern)\n+    local start_line, _, end_line, end_col = root_node:range()\n+    if end_col > 0 then\n+      end_line = end_line + 1\n+    end\n+\n+    -- If the query doesn't have combined injection, run the query on the given range. Combined\n+    -- injection must be run on the full range. Currently there is no simply way to selectively\n+    -- match each pattern separately.\n+    if not self._has_combined_injection and range ~= true then\n+      start_line = math.max(start_line, range_start_line)\n+      end_line = math.min(end_line, range_end_line)",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1438950820",
            "id": 1438950820,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5VxKWk",
            "original_commit_id": "4dabf9a969d679d944ea387e98391dc3483eb607",
            "original_line": 1070,
            "original_position": 344,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1799709293,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438950820/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T18:45:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438950820",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1438951003"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438951003"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      end_line = end_line + 1\r\n      end_col = 0\r\n```\r\n(defensive programming)",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-01T02:24:59Z",
            "diff_hunk": "@@ -822,30 +965,47 @@ end\n ---\n --- This is where most of the injection processing occurs.\n ---\n---- TODO: Allow for an offset predicate to tailor the injection range\n----       instead of using the entire nodes range.\n+--- @param range boolean|Range|nil\n --- @private\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n-  if not self._injection_query then\n+function LanguageTree:_get_injections(range)\n+  if not self._injection_query or not range then\n     return {}\n   end\n \n   ---@type table<integer,TSInjection>\n   local injections = {}\n \n+  local range_start_line, range_end_line ---@type integer, integer\n+  if range ~= true then\n+    range_start_line, _, range_end_line, _ = Range.unpack4(range)\n+  end\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n-\n-    for pattern, match, metadata in\n-      self._injection_query:iter_matches(root_node, self._source, start_line, end_line + 1)\n-    do\n-      local lang, combined, ranges = self:_get_injection(match, metadata)\n-      if lang then\n-        add_injection(injections, index, pattern, lang, combined, ranges)\n-      else\n-        self:_log('match from injection query failed for pattern', pattern)\n+    local start_line, _, end_line, end_col = root_node:range()\n+    if end_col > 0 then\n+      end_line = end_line + 1",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1438951003",
            "id": 1438951003,
            "line": 1075,
            "node_id": "PRRC_kwDOAPphoM5VxKZb",
            "original_commit_id": "4dabf9a969d679d944ea387e98391dc3483eb607",
            "original_line": 1062,
            "original_position": 336,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 551,
            "pull_request_review_id": 1799709293,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438951003/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T18:45:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438951003",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1438968263"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438968263"
                }
            },
            "author_association": "MEMBER",
            "body": "Q: Can `injection.combined` be extracted from `metadata` (see `LanguageTree:_get_injection`) or do we have to search all the predicates/directives by a for loop? If so, can you elaborate more on why?",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-01T06:15:19Z",
            "diff_hunk": "@@ -131,13 +134,27 @@ function LanguageTree.new(source, lang, opts, parent_lang)\n     _injection_query = injections[lang] and query.parse(lang, injections[lang])\n       or query.get(lang, 'injections'),\n     _has_regions = false,\n+    _has_combined_injection = false,\n     _injections_processed = false,\n     _valid = false,\n     _parser = vim._create_ts_parser(lang),\n     _callbacks = {},\n     _callbacks_rec = {},\n   }\n \n+  if self._injection_query then\n+    for _, preds in pairs(self._injection_query.info.patterns) do\n+      if\n+        vim.tbl_contains(preds, function(pred)\n+          return vim.deep_equal(pred, { 'set!', 'injection.combined' })\n+        end, { predicate = true })",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1438968263",
            "id": 1438968263,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5VxOnH",
            "original_commit_id": "4dabf9a969d679d944ea387e98391dc3483eb607",
            "original_line": 151,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1799709293,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438968263/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T18:45:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438968263",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1439723973"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439723973"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "There is a guard on `range == false` and `range == nil` cases at the top of this function: don't run injection query at all.",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-02T18:51:04Z",
            "diff_hunk": "@@ -822,30 +965,47 @@ end\n ---\n --- This is where most of the injection processing occurs.\n ---\n---- TODO: Allow for an offset predicate to tailor the injection range\n----       instead of using the entire nodes range.\n+--- @param range boolean|Range|nil\n --- @private\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n-  if not self._injection_query then\n+function LanguageTree:_get_injections(range)\n+  if not self._injection_query or not range then\n     return {}\n   end\n \n   ---@type table<integer,TSInjection>\n   local injections = {}\n \n+  local range_start_line, range_end_line ---@type integer, integer\n+  if range ~= true then\n+    range_start_line, _, range_end_line, _ = Range.unpack4(range)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1439723973",
            "id": 1439723973,
            "in_reply_to_id": 1438950516,
            "line": 1068,
            "node_id": "PRRC_kwDOAPphoM5V0HHF",
            "original_commit_id": "4dabf9a969d679d944ea387e98391dc3483eb607",
            "original_line": 1056,
            "original_position": 320,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 528,
            "pull_request_review_id": 1800864509,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439723973/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T18:51:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439723973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1439725506"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439725506"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "In this branch `range` must have type `Range`, so `range_start_line`, `range_end_line` must've been set.",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-02T18:53:18Z",
            "diff_hunk": "@@ -822,30 +965,47 @@ end\n ---\n --- This is where most of the injection processing occurs.\n ---\n---- TODO: Allow for an offset predicate to tailor the injection range\n----       instead of using the entire nodes range.\n+--- @param range boolean|Range|nil\n --- @private\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n-  if not self._injection_query then\n+function LanguageTree:_get_injections(range)\n+  if not self._injection_query or not range then\n     return {}\n   end\n \n   ---@type table<integer,TSInjection>\n   local injections = {}\n \n+  local range_start_line, range_end_line ---@type integer, integer\n+  if range ~= true then\n+    range_start_line, _, range_end_line, _ = Range.unpack4(range)\n+  end\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n-\n-    for pattern, match, metadata in\n-      self._injection_query:iter_matches(root_node, self._source, start_line, end_line + 1)\n-    do\n-      local lang, combined, ranges = self:_get_injection(match, metadata)\n-      if lang then\n-        add_injection(injections, index, pattern, lang, combined, ranges)\n-      else\n-        self:_log('match from injection query failed for pattern', pattern)\n+    local start_line, _, end_line, end_col = root_node:range()\n+    if end_col > 0 then\n+      end_line = end_line + 1\n+    end\n+\n+    -- If the query doesn't have combined injection, run the query on the given range. Combined\n+    -- injection must be run on the full range. Currently there is no simply way to selectively\n+    -- match each pattern separately.\n+    if not self._has_combined_injection and range ~= true then\n+      start_line = math.max(start_line, range_start_line)\n+      end_line = math.min(end_line, range_end_line)",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1439725506",
            "id": 1439725506,
            "in_reply_to_id": 1438950820,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5V0HfC",
            "original_commit_id": "4dabf9a969d679d944ea387e98391dc3483eb607",
            "original_line": 1070,
            "original_position": 344,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1800866808,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439725506/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T18:53:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439725506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1439730203"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439730203"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It's too late at that point. `_get_injection` is invoked after `iter_matches`, but we need to check the existence of combined injection before calling `iter_matches` to compute the `start_line`/`end_line` arguments.   \r\n",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-02T18:59:46Z",
            "diff_hunk": "@@ -131,13 +134,27 @@ function LanguageTree.new(source, lang, opts, parent_lang)\n     _injection_query = injections[lang] and query.parse(lang, injections[lang])\n       or query.get(lang, 'injections'),\n     _has_regions = false,\n+    _has_combined_injection = false,\n     _injections_processed = false,\n     _valid = false,\n     _parser = vim._create_ts_parser(lang),\n     _callbacks = {},\n     _callbacks_rec = {},\n   }\n \n+  if self._injection_query then\n+    for _, preds in pairs(self._injection_query.info.patterns) do\n+      if\n+        vim.tbl_contains(preds, function(pred)\n+          return vim.deep_equal(pred, { 'set!', 'injection.combined' })\n+        end, { predicate = true })",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1439730203",
            "id": 1439730203,
            "in_reply_to_id": 1438968263,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5V0Iob",
            "original_commit_id": "4dabf9a969d679d944ea387e98391dc3483eb607",
            "original_line": 151,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1800873962,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439730203/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T18:59:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439730203",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1439737631"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439737631"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```\r\nlanguagetree.lua:983:7: value assigned to variable end_col is unused\r\n```\r\n:/",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-02T19:10:46Z",
            "diff_hunk": "@@ -822,30 +965,47 @@ end\n ---\n --- This is where most of the injection processing occurs.\n ---\n---- TODO: Allow for an offset predicate to tailor the injection range\n----       instead of using the entire nodes range.\n+--- @param range boolean|Range|nil\n --- @private\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n-  if not self._injection_query then\n+function LanguageTree:_get_injections(range)\n+  if not self._injection_query or not range then\n     return {}\n   end\n \n   ---@type table<integer,TSInjection>\n   local injections = {}\n \n+  local range_start_line, range_end_line ---@type integer, integer\n+  if range ~= true then\n+    range_start_line, _, range_end_line, _ = Range.unpack4(range)\n+  end\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n-\n-    for pattern, match, metadata in\n-      self._injection_query:iter_matches(root_node, self._source, start_line, end_line + 1)\n-    do\n-      local lang, combined, ranges = self:_get_injection(match, metadata)\n-      if lang then\n-        add_injection(injections, index, pattern, lang, combined, ranges)\n-      else\n-        self:_log('match from injection query failed for pattern', pattern)\n+    local start_line, _, end_line, end_col = root_node:range()\n+    if end_col > 0 then\n+      end_line = end_line + 1",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1439737631",
            "id": 1439737631,
            "in_reply_to_id": 1438951003,
            "line": 1075,
            "node_id": "PRRC_kwDOAPphoM5V0Kcf",
            "original_commit_id": "4dabf9a969d679d944ea387e98391dc3483eb607",
            "original_line": 1062,
            "original_position": 336,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 551,
            "pull_request_review_id": 1800885387,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439737631/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T19:10:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439737631",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1439739934"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439739934"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'd appreciate some opinion on this. Some test failures are related to this.",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-02T19:14:25Z",
            "diff_hunk": "@@ -277,6 +291,10 @@ function LanguageTree:is_valid(exclude_children)\n   end\n \n   if not exclude_children then\n+    -- TODO: what's the proper semantics of is_valid?\n+    -- * what doc says: \"is_valid() ↔ all trees in for_each_tree are up-to-date\"\n+    -- * how it's actually implementated and used: \"need to process something\".\n+    --   * if we really want this, then is_valid should take a range (nil ↔ exclude children)",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1439739934",
            "id": 1439739934,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5V0LAe",
            "original_commit_id": "96504558ae64cdd0fbec3d8ecb7508db67a29aee",
            "original_line": 297,
            "original_position": 55,
            "original_start_line": 294,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1800889169,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439739934/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-02T19:22:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439739934",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1439744770"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439744770"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It first adds new regions and then discards stale regions. So the behavior of region indices are different from the old version. Some test failures are related to this. Sticking to the old behavior would add some overhead and sometimes just impossible due to batched cleanup.",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-02T19:20:33Z",
            "diff_hunk": "@@ -623,26 +739,46 @@ function LanguageTree:set_included_regions(new_regions)\n         region[i] = { range:range(true) }\n       end\n     end\n-  end\n+    ---@cast region Range6[]\n+\n+    -- Lookup the region.\n+    local bucket = region_indices[region[1][3]]\n+    local i ---@type integer?\n+    if bucket then\n+      for e = 1, #bucket, 2 do\n+        if vim.deep_equal(bucket[e], region) then\n+          i = bucket[e + 1] --[[@as integer]]\n+          break\n+        end\n+      end\n+    end\n \n-  -- included_regions is not guaranteed to be list-like, but this is still sound, i.e. if\n-  -- new_regions is different from included_regions, then outdated regions in included_regions are\n-  -- invalidated. For example, if included_regions = new_regions ++ hole ++ outdated_regions, then\n-  -- outdated_regions is invalidated by _iter_regions in else branch.\n-  if #self:included_regions() ~= #new_regions then\n-    -- TODO(lewis6991): inefficient; invalidate trees incrementally\n-    for _, t in pairs(self._trees) do\n-      self:_do_callback('changedtree', t:included_ranges(true), t)\n+    -- If the region seems to be new, add it.\n+    if not i then\n+      i = #self._regions + 1 -- this always gives an unoccupied index even there are holes\n+      if self._valid == true then\n+        self._valid = {}\n+        for j, _ in pairs(self._regions) do\n+          self._valid[j] = true\n+        end\n+        self._valid[i] = false\n+      elseif type(self._valid) == 'table' then\n+        self._valid[i] = false\n+      end\n+      self._regions[i] = region\n     end\n-    self._trees = {}\n-    self:invalidate()\n-  else\n-    self:_iter_regions(function(i, region)\n-      return vim.deep_equal(new_regions[i], region)\n-    end)\n+\n+    touched[i] = true\n   end\n \n-  self._regions = new_regions\n+  -- Discard stale regions. If redrawing, defer it to _finish_batch.",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1439744770",
            "id": 1439744770,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5V0MMC",
            "original_commit_id": "96504558ae64cdd0fbec3d8ecb7508db67a29aee",
            "original_line": 805,
            "original_position": 267,
            "original_start_line": 756,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1800889169,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439744770/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-02T19:22:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439744770",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1440701679"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1440701679"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "modified the tests to not assume how indices behave",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-03T17:22:00Z",
            "diff_hunk": "@@ -623,26 +739,46 @@ function LanguageTree:set_included_regions(new_regions)\n         region[i] = { range:range(true) }\n       end\n     end\n-  end\n+    ---@cast region Range6[]\n+\n+    -- Lookup the region.\n+    local bucket = region_indices[region[1][3]]\n+    local i ---@type integer?\n+    if bucket then\n+      for e = 1, #bucket, 2 do\n+        if vim.deep_equal(bucket[e], region) then\n+          i = bucket[e + 1] --[[@as integer]]\n+          break\n+        end\n+      end\n+    end\n \n-  -- included_regions is not guaranteed to be list-like, but this is still sound, i.e. if\n-  -- new_regions is different from included_regions, then outdated regions in included_regions are\n-  -- invalidated. For example, if included_regions = new_regions ++ hole ++ outdated_regions, then\n-  -- outdated_regions is invalidated by _iter_regions in else branch.\n-  if #self:included_regions() ~= #new_regions then\n-    -- TODO(lewis6991): inefficient; invalidate trees incrementally\n-    for _, t in pairs(self._trees) do\n-      self:_do_callback('changedtree', t:included_ranges(true), t)\n+    -- If the region seems to be new, add it.\n+    if not i then\n+      i = #self._regions + 1 -- this always gives an unoccupied index even there are holes\n+      if self._valid == true then\n+        self._valid = {}\n+        for j, _ in pairs(self._regions) do\n+          self._valid[j] = true\n+        end\n+        self._valid[i] = false\n+      elseif type(self._valid) == 'table' then\n+        self._valid[i] = false\n+      end\n+      self._regions[i] = region\n     end\n-    self._trees = {}\n-    self:invalidate()\n-  else\n-    self:_iter_regions(function(i, region)\n-      return vim.deep_equal(new_regions[i], region)\n-    end)\n+\n+    touched[i] = true\n   end\n \n-  self._regions = new_regions\n+  -- Discard stale regions. If redrawing, defer it to _finish_batch.",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1440701679",
            "id": 1440701679,
            "in_reply_to_id": 1439744770,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5V31zv",
            "original_commit_id": "96504558ae64cdd0fbec3d8ecb7508db67a29aee",
            "original_line": 805,
            "original_position": 267,
            "original_start_line": 756,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1802768569,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1440701679/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-03T17:22:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1440701679",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1440702192"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1440702192"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "relaxed the guarantee provided by `is_valid()`",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-03T17:22:35Z",
            "diff_hunk": "@@ -277,6 +291,10 @@ function LanguageTree:is_valid(exclude_children)\n   end\n \n   if not exclude_children then\n+    -- TODO: what's the proper semantics of is_valid?\n+    -- * what doc says: \"is_valid() ↔ all trees in for_each_tree are up-to-date\"\n+    -- * how it's actually implementated and used: \"need to process something\".\n+    --   * if we really want this, then is_valid should take a range (nil ↔ exclude children)",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1440702192",
            "id": 1440702192,
            "in_reply_to_id": 1439739934,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5V317w",
            "original_commit_id": "96504558ae64cdd0fbec3d8ecb7508db67a29aee",
            "original_line": 297,
            "original_position": 55,
            "original_start_line": 294,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1802770067,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1440702192/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-03T17:22:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1440702192",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1441581721"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441581721"
                }
            },
            "author_association": "MEMBER",
            "body": "Can this block go into its own function that takes the query as an argument?\r\n\r\n```lua\r\nif self._injection_query then\r\n  self._has_combined_injection = query_has_combined(self._injection_query)\r\nend\r\n```",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-04T10:27:37Z",
            "diff_hunk": "@@ -131,13 +135,27 @@ function LanguageTree.new(source, lang, opts, parent_lang)\n     _injection_query = injections[lang] and query.parse(lang, injections[lang])\n       or query.get(lang, 'injections'),\n     _has_regions = false,\n+    _has_combined_injection = false,\n     _injections_processed = false,\n     _valid = false,\n     _parser = vim._create_ts_parser(lang),\n     _callbacks = {},\n     _callbacks_rec = {},\n   }\n \n+  if self._injection_query then\n+    for _, preds in pairs(self._injection_query.info.patterns) do\n+      if\n+        vim.tbl_contains(preds, function(pred)\n+          return vim.deep_equal(pred, { 'set!', 'injection.combined' })\n+        end, { predicate = true })\n+      then\n+        self._has_combined_injection = true\n+        break\n+      end\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1441581721",
            "id": 1441581721,
            "line": 170,
            "node_id": "PRRC_kwDOAPphoM5V7MqZ",
            "original_commit_id": "f53817ae261d9ccf6957a23a0665d3c3269fe944",
            "original_line": 170,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 73,
            "pull_request_review_id": 1803885060,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441581721/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-04T10:34:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441581721",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1441606214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441606214"
                }
            },
            "author_association": "MEMBER",
            "body": "This documenting bugs and defining it has a part of the API. \r\n\r\n`is_valid(false)` should always return true if the languagetree is valid.",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-04T10:53:52Z",
            "diff_hunk": "@@ -263,7 +278,10 @@ end\n \n --- Returns whether this LanguageTree is valid, i.e., |LanguageTree:trees()| reflects the latest\n --- state of the source. If invalid, user should call |LanguageTree:parse()|.\n----@param exclude_children boolean|nil whether to ignore the validity of children (default `false`)\n+---@param exclude_children boolean|nil whether to ignore the validity of children (default `false`).\n+--- `is_valid(false)` is sound but not complete, i.e.,\n+--- * if it returns `true`, this LanguageTree is actually valid; but\n+--- * even if this LanguageTree is actually valid, it may return `false`.",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1441606214",
            "id": 1441606214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5V7SpG",
            "original_commit_id": "f53817ae261d9ccf6957a23a0665d3c3269fe944",
            "original_line": 307,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1803926457,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441606214/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-04T10:56:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441606214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1443685732"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1443685732"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "making it complete is possible but that would incur quite a bit of overhead (see note below), and i thought that kinda defeats the purpose of this function (quickly and soundly check necessity of `parse(true)`). i will implement it when i return",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-01-06T10:23:46Z",
            "diff_hunk": "@@ -263,7 +278,10 @@ end\n \n --- Returns whether this LanguageTree is valid, i.e., |LanguageTree:trees()| reflects the latest\n --- state of the source. If invalid, user should call |LanguageTree:parse()|.\n----@param exclude_children boolean|nil whether to ignore the validity of children (default `false`)\n+---@param exclude_children boolean|nil whether to ignore the validity of children (default `false`).\n+--- `is_valid(false)` is sound but not complete, i.e.,\n+--- * if it returns `true`, this LanguageTree is actually valid; but\n+--- * even if this LanguageTree is actually valid, it may return `false`.",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1443685732",
            "id": 1443685732,
            "in_reply_to_id": 1441606214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WDOVk",
            "original_commit_id": "f53817ae261d9ccf6957a23a0665d3c3269fe944",
            "original_line": 307,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1807335698,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1443685732/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-06T10:23:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1443685732",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1563991381"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1563991381"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "fixed by running full injection in `is_valid(false)`\r\n\r\nhttps://github.com/neovim/neovim/pull/26827/commits/3d1560bc8101a6e6cc4d641f7726bb1a4d1c951f#diff-70b0f3fa7d6baf9e605400a9f0e10431183df821ec4096e8097eaa5f4d5531baR310-R314",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-04-13T12:24:03Z",
            "diff_hunk": "@@ -263,7 +278,10 @@ end\n \n --- Returns whether this LanguageTree is valid, i.e., |LanguageTree:trees()| reflects the latest\n --- state of the source. If invalid, user should call |LanguageTree:parse()|.\n----@param exclude_children boolean|nil whether to ignore the validity of children (default `false`)\n+---@param exclude_children boolean|nil whether to ignore the validity of children (default `false`).\n+--- `is_valid(false)` is sound but not complete, i.e.,\n+--- * if it returns `true`, this LanguageTree is actually valid; but\n+--- * even if this LanguageTree is actually valid, it may return `false`.",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1563991381",
            "id": 1563991381,
            "in_reply_to_id": 1441606214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dOJ1V",
            "original_commit_id": "f53817ae261d9ccf6957a23a0665d3c3269fe944",
            "original_line": 307,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 1999252516,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1563991381/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-13T12:24:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1563991381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1564073972"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564073972"
                }
            },
            "author_association": "MEMBER",
            "body": "And this? I think that belongs to the top-level docs, not the parameter?",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-04-13T14:47:08Z",
            "diff_hunk": "@@ -1321,7 +1321,9 @@ LanguageTree:is_valid({exclude_children})            *LanguageTree:is_valid()*\n \n     Parameters: ~\n       • {exclude_children}  (`boolean?`) whether to ignore the validity of\n-                            children (default `false`)\n+                            children (default `false`). `is_valid(false)` can\n+                            be slow because it runs injection on the full\n+                            source.",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1564073972",
            "id": 1564073972,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dOd_0",
            "original_commit_id": "3d1560bc8101a6e6cc4d641f7726bb1a4d1c951f",
            "original_line": 1326,
            "original_position": 7,
            "original_start_line": 1324,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1999275987,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564073972/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-13T14:47:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564073972",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26827#discussion_r1564080987"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564080987"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "fixed",
            "commit_id": "058d79cf7464732fc4fa5400994c614b49293c70",
            "created_at": "2024-04-13T14:59:08Z",
            "diff_hunk": "@@ -1321,7 +1321,9 @@ LanguageTree:is_valid({exclude_children})            *LanguageTree:is_valid()*\n \n     Parameters: ~\n       • {exclude_children}  (`boolean?`) whether to ignore the validity of\n-                            children (default `false`)\n+                            children (default `false`). `is_valid(false)` can\n+                            be slow because it runs injection on the full\n+                            source.",
            "html_url": "https://github.com/neovim/neovim/pull/26827#discussion_r1564080987",
            "id": 1564080987,
            "in_reply_to_id": 1564073972,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dOftb",
            "original_commit_id": "3d1560bc8101a6e6cc4d641f7726bb1a4d1c951f",
            "original_line": 1326,
            "original_position": 7,
            "original_start_line": 1324,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1999277857,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564080987/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-13T14:59:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564080987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "note: I'll be offline for the next 3 weeks. I think it's working pretty well, but if anyone finds a problem and is interested in fixing it, please feel free to take over.",
            "created_at": "2024-01-03T18:40:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-1875803638",
            "id": 1875803638,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM5vzn32",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1875803638/reactions"
            },
            "updated_at": "2024-02-23T15:04:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1875803638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I suspect it is very uncommon for a buffer to be visible in multiple windows at once and thus this isn't something we should be optimizing for.\r\n\r\nI don't think it's _that_ uncommon -- having the the definition of a (local) function and its calling site visible at the same time seems like something people do regularly (at least I do). I'd expect this to be more common the longer the file (and thus the more expensive the parsing), too. \r\n\r\nWhether that warrants specific optimization (you'll probably only editing one site) is another question, of course.",
            "created_at": "2024-01-04T10:39:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-1876875040",
            "id": 1876875040,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM5v3tcg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1876875040/reactions"
            },
            "updated_at": "2024-01-04T10:39:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1876875040",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I don't think it's that uncommon -- having the the definition of a (local) function and its calling site visible at the same time seems like something people do regularly (at least I do). I'd expect this to be more common the longer the file (and thus the more expensive the parsing), too.\r\n>\r\n> Whether that warrants specific optimization (you'll probably only editing one site) is another question, of course.\r\n\r\nSure, I do this all the time. However, at the very most this is in a split with the buffer in at most 2 windows. Each additional window is exponentially less likely.",
            "created_at": "2024-01-04T12:07:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-1876990821",
            "id": 1876990821,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM5v4Jtl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1876990821/reactions"
            },
            "updated_at": "2024-01-04T12:07:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1876990821",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "iiuc helix doesn't do paritial injection: https://github.com/helix-editor/helix/blob/0c81ef73e17a3d45cd6240fd5933ad99b3a60d01/helix-core/src/syntax.rs#L1097\r\nthough the idea of constructing lookup table from region to its index on each update is taken from helix.  \r\n\r\nthe batching is primarily for correcteness of highlights. without it the highlights will ficker when the buffer is shown in multiple windows as the regions created by on_win of a window are discarded by on_win of another window.\r\n\r\ni agree that better decoration api for batching is a more natural approach\r\n\r\n",
            "created_at": "2024-01-06T10:18:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-1879628860",
            "id": 1879628860,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM5wCNw8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1879628860/reactions"
            },
            "updated_at": "2024-01-06T10:18:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1879628860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the batching is primarily for correcteness of highlights. without it the highlights will ficker when the buffer is shown in multiple windows as the regions created by on_win of a window are discarded by on_win of another window.\n\nThat shouldn't be the root cause of the flicker. Once all the lines for a window have been drawn during a redraw cycle, subsequent windows shouldn't cause flicker in previous windows unless something else is invoking another redraw.\n\nBut also, the regions being discarded is just a bug in our highlighter we need to fix. We shouldn't be layering on API methods to work around this.\n\n> iiuc helix doesn't do paritial injection: https://github.com/helix-editor/helix/blob/0c81ef73e17a3d45cd6240fd5933ad99b3a60d01/helix-core/src/syntax.rs#L1097\nthough the idea of constructing lookup table from region to its index on each update is taken from helix.\n\nAh true, it's only the parsing that is incremental, but we already do that. However I think their invalidation logic is less buggy than ours, so that's probably what we should fix first.",
            "created_at": "2024-01-06T11:03:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-1879638005",
            "id": 1879638005,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM5wCP_1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1879638005/reactions"
            },
            "updated_at": "2024-01-06T11:07:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1879638005",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "\r\n> > the batching is primarily for correcteness of highlights. without it the highlights will ficker when the buffer is shown in multiple windows as the regions created by on_win of a window are discarded by on_win of another window.\r\n> \r\n> That shouldn't be the root cause of the flicker. Once all the lines for a window have been drawn during a redraw cycle, subsequent windows shouldn't cause flicker in previous windows unless something else is invoking another redraw.\r\n\r\nhmm in fact, I can't no longer reproduce this flicker.\r\n\r\nSo the only valid role of batching is optimization: prevention of discarding regions and adding/removing children.\r\n\r\n> But also, the regions being discarded is just a bug in our highlighter we need to fix. We shouldn't be layering on API methods to work around this.\r\n\r\nIn this PR, `set_included_regions(new_regions)` discards the existing regions (and the corresponding trees) that don't match a region in `new_regions`, where `new_regions` are the regions found by the injection query in the visible range.\r\nI think this is necessary for two reasons:\r\n* to clean up garbage regions: Regions deleted from the source should be deleted from LanguageTree. Also there can be \"false un-hits\" when matching the old and new regions (see comment in `set_included_regions`).\r\n* to keep number of regions low: LanguageTree would have to manage a large set of regions if the source is big, which adds non-trivial cost to `_edit`.\r\n\r\nSo there should be some mechanism to discard stale regions.\r\n\r\nThis PR eagerly removes stale region, which necessitates batching. But it can be avoided if we use less eager method such as assigning some lifespan to each region.\r\n\r\n> > iiuc helix doesn't do paritial injection: https://github.com/helix-editor/helix/blob/0c81ef73e17a3d45cd6240fd5933ad99b3a60d01/helix-core/src/syntax.rs#L1097\r\n> > though the idea of constructing lookup table from region to its index on each update is taken from helix.\r\n> \r\n> Ah true, it's only the parsing that is incremental, but we already do that. However I think their invalidation logic is less buggy than ours, so that's probably what we should fix first.\r\n\r\nIIUC Helix is not incremental in the sense that it doesn't care about what's visible on the screen. Also I think their invalidation logic isn't much different from this PR's.\r\n\r\nHere's a summary of their approach.\r\n\r\nTheir `Syntax` struct roughly corresponds to our `LanguageTree`. Like `LanguageTree`, `Syntax` maps an ID to to each `LanguageLayer` (region + tree for that region + various info), but it does not maintain the tree of parsers.\r\n\r\n`Syntax::update` is called after each edit.\r\n1.  Apply edits to each layer.\r\n    * update the ranges of affected layers\r\n        * I'm not sure why they do this. This can be delegated to treesitter (which is what nvim does).\r\n    * marks each layers: modified, moved\r\n1.  Construct layer value to layer ID mapping. This is used for checking if a discovered injection region already exists.\r\n1.  Parse layers, starting from the root layer\r\n    1. Edit the tree of the layer.\r\n    1. If the layer was modified by the edit, parse it.\r\n    1. Run the injection query of this layer in the full source.\r\n    1. Check if each injection region matches an existing layer. If so, get its ID, and otherwise, add a new layer.\r\n    1. Repeat the above for each injection layers.\r\n1.  Discard the layers that are not touched by the above process.\r\n\r\nA notable difference from nvim is that `Syntax::update` is called after each edit without info about visible range. So Helix is not incremental.\r\n\r\n",
            "created_at": "2024-02-11T12:24:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-1937678961",
            "id": 1937678961,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM5zfqJx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 4,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1937678961/reactions"
            },
            "updated_at": "2024-02-11T12:24:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1937678961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Since the last comment, I have fixed some bugs, refactored, and added some tests.\r\n\r\nAlso, I reorganized the commits:\r\n* **perf(treesitter)!: incremental invalidation**\r\n    * This improves how LanguageTree manages the regions. Specifically, it implements \"TODO(lewis6991): inefficient; invalidate trees incrementally\".\r\n* **perf(treesitter): run injection query only for visible lines**\r\n    * This reduces the injection query execution time, which is the most significant optimization in this PR.\r\n* ~~perf(treesitter): batched invalidation~~ dropped from this PR. commit: https://github.com/tomtomjhj/neovim/commit/fddf77638a8241d24c9250395626b3ad729c495a\r\n    * This improves region management for the partial injection + multi-window case.\r\n    * new solution: **perf(treesitter): allow parsing multiple ranges**  https://github.com/neovim/neovim/pull/26827#issuecomment-2053939377\r\n\r\nI think the only unresolved questions are:\r\n* Whether the optimization for the multi-window case is worth the complexity (https://github.com/neovim/neovim/pull/26827#issuecomment-1876875040). And similarly, whether incremental invalidation is worth the complexity (new question).\r\n    * It would actually make sense not to include these if the maintainers really want to avoid complexity. The performance improvement from these optimizations would be unnoticeable in most cases. Usually there are not too many visible regions, and each region isn't too big, thus reparsing them from scratch would be fast enough. But I think these optimizations aren't overly complex (after refactoring and commit reorg) and it seems a bit odd not to have them, given that Helix implements incremental invalidation.\r\n* ~~Whether batched invalidation is the best method for optimizing the multi-window case (alternatives: https://github.com/neovim/neovim/pull/26827#pullrequestreview-1803885060)~~\r\n    * ~~Batched invalidation appears to be the simplest solution. Other solutions would require modifying the decoration provider API, which I'm a bit hesitant to do as I'm not very familiar with the internals of redrawing process.~~\r\n    * Implemented an alternative solution https://github.com/neovim/neovim/pull/26827#issuecomment-2053939377\r\n",
            "created_at": "2024-04-13T13:50:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-2053652379",
            "id": 2053652379,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM56aD-b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053652379/reactions"
            },
            "updated_at": "2024-04-14T13:18:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053652379",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Can we remove the batching for now please? I think that over complicates the interface and isn't worth the benefit IMO",
            "created_at": "2024-04-13T14:06:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-2053656366",
            "id": 2053656366,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM56aE8u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053656366/reactions"
            },
            "updated_at": "2024-04-13T14:06:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053656366",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If the multi-window optimization can be separated out, I would strongly prefer to keep this out of _this_ PR and investigate it as a follow-up. The base PR is already a good improvement, and this way we can try getting _that_ into 0.10 already.\r\n\r\n(Also, some docs seem to be garbled?)",
            "created_at": "2024-04-13T14:13:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-2053657929",
            "id": 2053657929,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM56aFVJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053657929/reactions"
            },
            "updated_at": "2024-04-13T14:15:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053657929",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Dropped the batched invalidation commit (https://github.com/tomtomjhj/neovim/commit/fddf77638a8241d24c9250395626b3ad729c495a).\r\n\r\n> (Also, some docs seem to be garbled?)\r\n\r\nwhere?",
            "created_at": "2024-04-13T14:41:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-2053665827",
            "id": 2053665827,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM56aHQj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053665827/reactions"
            },
            "updated_at": "2024-04-19T17:55:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053665827",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The generated `treesitter.txt` changes.",
            "created_at": "2024-04-13T14:42:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-2053666108",
            "id": 2053666108,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM56aHU8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053666108/reactions"
            },
            "updated_at": "2024-04-13T14:42:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053666108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "looks fine to me. this was removed because it is no longer true. \r\n```diff\r\n-    child languages. The result is list-like if\r\n-    • this LanguageTree is the root, in which case the result is empty or a\r\n-      singleton list; or\r\n-    • the root LanguageTree is fully parsed.\r\n+    child languages.\r\n```",
            "created_at": "2024-04-13T14:45:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-2053666744",
            "id": 2053666744,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM56aHe4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053666744/reactions"
            },
            "updated_at": "2024-04-19T17:55:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053666744",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> [...] maybe we can rethink the parse() API to better handle multiple ranges due to multiple windows, [...]\r\n> \r\n> Another route (and potentially better) would be to make changes to the decoration provider API to better accommodate batch updates, i.e. by calling parse() once after all the on_wins have been invoked so we can collect the ranges.\r\n\r\nTurns out this is actually quite easy to implement. The last commit optimizes the multi-window scenarios by making `parse` take set of ranges and parsing all the visible stuff in decoration provider `on_start` callback (using `line('w0')` and `line('w$')`). No awkward batching stuff.\r\n",
            "created_at": "2024-04-14T07:06:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/26827#issuecomment-2053939377",
            "id": 2053939377,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
            "node_id": "IC_kwDOAPphoM56bKCx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053939377/reactions"
            },
            "updated_at": "2024-04-14T07:06:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053939377",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26827/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26827/commits",
    "created_at": "2023-12-31T17:51:58Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26827.diff",
    "draft": false,
    "head": {
        "label": "tomtomjhj:partial-injection",
        "ref": "partial-injection",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/tomtomjhj/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/tomtomjhj/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/tomtomjhj/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/tomtomjhj/neovim/branches{/branch}",
            "clone_url": "https://github.com/tomtomjhj/neovim.git",
            "collaborators_url": "https://api.github.com/repos/tomtomjhj/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/tomtomjhj/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/tomtomjhj/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/tomtomjhj/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/tomtomjhj/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/tomtomjhj/neovim/contributors",
            "created_at": "2019-10-25T13:17:48Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/tomtomjhj/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/tomtomjhj/neovim/downloads",
            "events_url": "https://api.github.com/repos/tomtomjhj/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/tomtomjhj/neovim/forks",
            "full_name": "tomtomjhj/neovim",
            "git_commits_url": "https://api.github.com/repos/tomtomjhj/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/tomtomjhj/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/tomtomjhj/neovim/git/tags{/sha}",
            "git_url": "git://github.com/tomtomjhj/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/tomtomjhj/neovim/hooks",
            "html_url": "https://github.com/tomtomjhj/neovim",
            "id": 217537573,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/tomtomjhj/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/tomtomjhj/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/tomtomjhj/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/tomtomjhj/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/tomtomjhj/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/tomtomjhj/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/tomtomjhj/neovim/merges",
            "milestones_url": "https://api.github.com/repos/tomtomjhj/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMTc1Mzc1NzM=",
            "notifications_url": "https://api.github.com/repos/tomtomjhj/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/tomtomjhj/neovim/pulls{/number}",
            "pushed_at": "2024-04-22T16:40:21Z",
            "releases_url": "https://api.github.com/repos/tomtomjhj/neovim/releases{/id}",
            "size": 260681,
            "ssh_url": "git@github.com:tomtomjhj/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/tomtomjhj/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/tomtomjhj/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/tomtomjhj/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/tomtomjhj/neovim/subscription",
            "svn_url": "https://github.com/tomtomjhj/neovim",
            "tags_url": "https://api.github.com/repos/tomtomjhj/neovim/tags",
            "teams_url": "https://api.github.com/repos/tomtomjhj/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/tomtomjhj/neovim/git/trees{/sha}",
            "updated_at": "2024-04-21T08:47:22Z",
            "url": "https://api.github.com/repos/tomtomjhj/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "058d79cf7464732fc4fa5400994c614b49293c70",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
            "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
            "followers_url": "https://api.github.com/users/tomtomjhj/followers",
            "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
            "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/tomtomjhj",
            "id": 19489738,
            "login": "tomtomjhj",
            "node_id": "MDQ6VXNlcjE5NDg5NzM4",
            "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
            "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
            "repos_url": "https://api.github.com/users/tomtomjhj/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/tomtomjhj"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26827",
    "id": 1660704149,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26827",
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "issues reporting performance problems",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "0cd58102550c7ed1229b31de8d8538393bb0ce61",
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 1,
        "created_at": "2023-12-07T23:09:35Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "",
        "due_on": "2024-10-31T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/41",
        "id": 10283236,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/41/labels",
        "node_id": "MI_kwDOAPphoM4AnOjk",
        "number": 41,
        "open_issues": 33,
        "state": "open",
        "title": "0.11",
        "updated_at": "2024-04-22T13:57:06Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/41"
    },
    "node_id": "PR_kwDOAPphoM5i_FWV",
    "number": 26827,
    "patch_url": "https://github.com/neovim/neovim/pull/26827.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26827/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/058d79cf7464732fc4fa5400994c614b49293c70",
    "title": "perf(treesitter): partial injection and incremental invalidation",
    "updated_at": "2024-04-22T13:57:06Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26827",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
        "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
        "followers_url": "https://api.github.com/users/tomtomjhj/followers",
        "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
        "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tomtomjhj",
        "id": 19489738,
        "login": "tomtomjhj",
        "node_id": "MDQ6VXNlcjE5NDg5NzM4",
        "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
        "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
        "repos_url": "https://api.github.com/users/tomtomjhj/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tomtomjhj"
    }
}