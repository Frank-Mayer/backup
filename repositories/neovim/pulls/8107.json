{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/8107/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/8107/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/8107"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/8107"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/8107/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ae409b5042abdbec67305a063cf921ddffcce0c8"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4789,
            "forks_count": 4789,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1652,
            "open_issues_count": 1652,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-08-05T01:34:12Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 246884,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 68006,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-08-04T23:49:51Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 68006,
            "watchers_count": 68006,
            "web_commit_signoff_required": false
        },
        "sha": "72e4c9d8e776790e40b2a5911bb702de897fbd12",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "closes #6530 \r\n\r\n- are PTY jobs being killed correctly?\r\n- ~~is #6891 related?~~\r\n- [x] win: iterate through children (`os_proc_tree_kill()`)\r\n- [x] implement new API function: `nvim_get_proc_children()`\r\n- [x] implement new API function: `nvim_get_proc()`\r\n- [x] tests\r\n\r\nDidn't fix this common test failure (maybe #7376 ?):\r\n\r\n```\r\nTermClose event reports the correct <abuf>: -- Output to stderr:\r\nVim: Caught deadly signal 'SIGHUP'\r\nVim: Finished.\r\nCMake Error at /home/travis/build/neovim/neovim/cmake/RunTests.cmake:53 (message):\r\n  Running functional tests failed with error: 1.\r\n...\r\n===============================================================================\r\nNVIM_LOG_FILE: /home/travis/build/neovim/neovim/build/.nvimlog\r\n2018/03/06 08:57:28 ERROR 11479 loop_close:133: uv_loop_close() hang?\r\n[--I] signal   0xa310e8\r\n[-AI] async    0xa30f30\r\n[R--] signal   0xa2a620\r\n```\r\n\r\nquickbuild failure is unrelated, `spell_spec.lua` #8102",
    "closed_at": "2018-03-18T17:36:03Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r172695881"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/172695881"
                }
            },
            "author_association": "MEMBER",
            "body": "Why a new session instead of a new process group? Would `setpgid(0,0);` also do the job?\r\n",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-06T23:28:06Z",
            "diff_hunk": "@@ -145,8 +145,12 @@ void pty_process_teardown(Loop *loop)\n   uv_signal_stop(&loop->children_watcher);\n }\n \n-static void init_child(PtyProcess *ptyproc) FUNC_ATTR_NONNULL_ALL\n+static void init_child(PtyProcess *ptyproc)\n+  FUNC_ATTR_NONNULL_ALL  // FUNC_ATTR_NORETURN ?\n {\n+  // New session and progress-group. #6530\n+  setsid();",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r172695881",
            "id": 172695881,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjY5NTg4MQ==",
            "original_commit_id": "d6a45daaaa63a68812e4b652916c226cb2d49b07",
            "original_line": 152,
            "original_position": 9,
            "original_start_line": null,
            "path": "src/nvim/os/pty_process_unix.c",
            "position": null,
            "pull_request_review_id": 101757797,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/172695881/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/172695881",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2077655?v=4",
                "events_url": "https://api.github.com/users/oni-link/events{/privacy}",
                "followers_url": "https://api.github.com/users/oni-link/followers",
                "following_url": "https://api.github.com/users/oni-link/following{/other_user}",
                "gists_url": "https://api.github.com/users/oni-link/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oni-link",
                "id": 2077655,
                "login": "oni-link",
                "node_id": "MDQ6VXNlcjIwNzc2NTU=",
                "organizations_url": "https://api.github.com/users/oni-link/orgs",
                "received_events_url": "https://api.github.com/users/oni-link/received_events",
                "repos_url": "https://api.github.com/users/oni-link/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oni-link/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oni-link/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oni-link"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r172919511"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/172919511"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't a new session customary in a terminal emulator?",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-07T17:23:30Z",
            "diff_hunk": "@@ -145,8 +145,12 @@ void pty_process_teardown(Loop *loop)\n   uv_signal_stop(&loop->children_watcher);\n }\n \n-static void init_child(PtyProcess *ptyproc) FUNC_ATTR_NONNULL_ALL\n+static void init_child(PtyProcess *ptyproc)\n+  FUNC_ATTR_NONNULL_ALL  // FUNC_ATTR_NORETURN ?\n {\n+  // New session and progress-group. #6530\n+  setsid();",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r172919511",
            "id": 172919511,
            "in_reply_to_id": 172695881,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjkxOTUxMQ==",
            "original_commit_id": "d6a45daaaa63a68812e4b652916c226cb2d49b07",
            "original_line": 152,
            "original_position": 9,
            "original_start_line": null,
            "path": "src/nvim/os/pty_process_unix.c",
            "position": null,
            "pull_request_review_id": 102020715,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/172919511/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/172919511",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r173648354"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/173648354"
                }
            },
            "author_association": "MEMBER",
            "body": "pid -> pgid and `-pid`?",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-11T09:23:40Z",
            "diff_hunk": "@@ -249,15 +250,15 @@ static void children_kill_cb(uv_timer_t *handle)\n     if (!proc->stopped_time) {\n       continue;\n     }\n+    int pid = -getpgid(proc->pid);\n     uint64_t elapsed = (now - proc->stopped_time) / 1000000 + 1;\n \n     if (elapsed >= KILL_TIMEOUT_MS) {\n       int sig = proc->type == kProcessTypePty && elapsed < KILL_TIMEOUT_MS * 2\n                     ? SIGTERM\n                     : SIGKILL;\n-      ILOG(\"Sending %s to pid %d\", sig == SIGTERM ? \"SIGTERM\" : \"SIGKILL\",\n-           proc->pid);\n-      uv_kill(proc->pid, sig);\n+      ILOG(\"sending %s to pid %d\", sig == SIGTERM ? \"SIGTERM\" : \"SIGKILL\", pid);",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r173648354",
            "id": 173648354,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0ODM1NA==",
            "original_commit_id": "d6a45daaaa63a68812e4b652916c226cb2d49b07",
            "original_line": 260,
            "original_position": 26,
            "original_start_line": null,
            "path": "src/nvim/event/process.c",
            "position": null,
            "pull_request_review_id": 102875928,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/173648354/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/173648354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2077655?v=4",
                "events_url": "https://api.github.com/users/oni-link/events{/privacy}",
                "followers_url": "https://api.github.com/users/oni-link/followers",
                "following_url": "https://api.github.com/users/oni-link/following{/other_user}",
                "gists_url": "https://api.github.com/users/oni-link/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oni-link",
                "id": 2077655,
                "login": "oni-link",
                "node_id": "MDQ6VXNlcjIwNzc2NTU=",
                "organizations_url": "https://api.github.com/users/oni-link/orgs",
                "received_events_url": "https://api.github.com/users/oni-link/received_events",
                "repos_url": "https://api.github.com/users/oni-link/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oni-link/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oni-link/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oni-link"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r174321094"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/174321094"
                }
            },
            "author_association": "MEMBER",
            "body": "Shouldn't this be\r\n\r\n```c\r\nexists ||= (p_list[i].ki_pid == ppid);\r\nif (p_list[i].ki_ppid == ppid) {\r\n  temp = xrealloc(temp, (*proc_count + 1) * sizeof(*temp));\r\n  temp[*proc_count] = p_list[i].ki_pid;\r\n```",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-14T00:03:36Z",
            "diff_hunk": "@@ -0,0 +1,168 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <uv.h>\n+#ifdef WIN32\n+# include <tlhelp32.h>  // for CreateToolhelp32Snapshot\n+#endif\n+\n+#if defined(__FreeBSD__)\n+# include <string.h>\n+# include <sys/types.h>\n+# include <sys/user.h>\n+#endif\n+\n+#if defined(__APPLE__) || defined(BSD)\n+# include <sys/sysctl.h>  // kinfo_proc on OpenBSD, NetBSD\n+# include <pwd.h>\n+#endif\n+\n+#include \"nvim/log.h\"\n+#include \"nvim/os/process.h\"\n+#include \"nvim/os/os.h\"\n+#include \"nvim/os/os_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/process.c.generated.h\"\n+#endif\n+\n+#ifdef WIN32\n+static bool os_proc_tree_kill_rec(HANDLE process, int sig)\n+{\n+  if (process == NULL) {\n+    return false;\n+  }\n+  PROCESSENTRY32 pe;\n+  DWORD pid = GetProcessId(process);\n+\n+  if (pid != 0) {\n+    HANDLE h = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n+    if (h != INVALID_HANDLE_VALUE) {\n+      pe.dwSize = sizeof(PROCESSENTRY32);\n+      if (!Process32First(h, &pe)) {\n+        goto theend;\n+      }\n+\n+      do {\n+        if (pe.th32ParentProcessID == pid) {\n+          HANDLE ph = OpenProcess(PROCESS_ALL_ACCESS, false, pe.th32ProcessID);\n+          if (ph != NULL) {\n+            os_proc_tree_kill_rec(ph, sig);\n+            CloseHandle(ph);\n+          }\n+        }\n+      } while (Process32Next(h, &pe));\n+\n+      CloseHandle(h);\n+    }\n+  }\n+\n+theend:\n+  return (bool)TerminateProcess(process, (unsigned int)sig);\n+}\n+/// Kills process `pid` and its descendants recursively.\n+bool os_proc_tree_kill(int pid, int sig)\n+{\n+  assert(sig >= 0);\n+  assert(sig == SIGTERM || sig == SIGKILL);\n+  if (pid > 0) {\n+    ILOG(\"terminating process tree: %d\", pid);\n+    HANDLE h = OpenProcess(PROCESS_ALL_ACCESS, false, (DWORD)pid);\n+    return os_proc_tree_kill_rec(h, sig);\n+  } else {\n+    ELOG(\"invalid pid: %d\", pid);\n+  }\n+  return false;\n+}\n+#else\n+/// Kills process group where `pid` is the process group leader.\n+bool os_proc_tree_kill(int pid, int sig)\n+{\n+  assert(sig == SIGTERM || sig == SIGKILL);\n+  int pgid = getpgid(pid);\n+  if (pgid > 0) {  // Ignore error. Never kill self (pid=0).\n+    if (pgid == pid) {\n+      ILOG(\"sending %s to process group: -%d\",\n+           sig == SIGTERM ? \"SIGTERM\" : \"SIGKILL\", pgid);\n+      int rv = uv_kill(-pgid, sig);\n+      return rv == 0;\n+    } else {\n+      // Should never happen, because process_spawn() did setsid() in the child.\n+      ELOG(\"pgid %d != pid %d\", pgid, pid);\n+    }\n+  } else {\n+    ELOG(\"getpgid(%d) returned %d\", pid, pgid);\n+  }\n+  return false;\n+}\n+#endif\n+\n+/// Gets the process ids of the immediate children of process `ppid`.\n+///\n+/// @param ppid Process to inspect.\n+/// @param[out,allocated] proc_list Child process ids.\n+/// @param[out] proc_count Number of child processes.\n+/// @return 0 on success, or error code.\n+int os_proc_children(int ppid, int **proc_list, size_t *proc_count)\n+{\n+  int *temp = NULL;\n+  *proc_list = NULL;\n+  *proc_count = 0;\n+\n+#if defined(__APPLE__) || defined(BSD)\n+  // ref: http://unix.superglobalmegacorp.com/Net2/newsrc/sys/kinfo_proc.h.html\n+  static int name[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL, 0 };\n+\n+  // Get total process count.\n+  size_t len = 0;\n+  int rv = sysctl(name, ARRAY_SIZE(name), NULL, &len, NULL, 0);\n+  if (rv) {\n+    return 1;\n+  }\n+\n+  // Get ALL processes.\n+  struct kinfo_proc *p_list = xmalloc(len);\n+  rv = sysctl(name, ARRAY_SIZE(name), p_list, &len, NULL, 0);\n+  if (rv) {\n+    xfree(p_list);\n+    return 1;\n+  }\n+\n+  // Collect processes whose parent matches `ppid`.\n+  bool exists = false;\n+  size_t p_count = len / sizeof(*p_list);\n+  for (size_t i = 0; i < p_count; i++) {\n+    exists |= (p_list[i].kp_proc.p_pid == ppid);",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r174321094",
            "id": 174321094,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDMyMTA5NA==",
            "original_commit_id": "2ad7eda4d7c7d6cefb58b197ec125da2abea2162",
            "original_line": 135,
            "original_position": 135,
            "original_start_line": null,
            "path": "src/nvim/os/process.c",
            "position": null,
            "pull_request_review_id": 103655764,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/174321094/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/174321094",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r174430334"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/174430334"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm missing the `children` entry under `proc`, because of an unset kernel option. Could one fallback to `pgrep -P ppid` or `ps --ppid ppid` in this case?",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-14T11:38:19Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <uv.h>\n+#ifdef WIN32\n+# include <tlhelp32.h>  // for CreateToolhelp32Snapshot\n+#endif\n+\n+#if defined(__FreeBSD__)\n+# include <string.h>\n+# include <sys/types.h>\n+# include <sys/user.h>\n+#endif\n+\n+#if defined(__APPLE__) || defined(BSD)\n+# include <sys/sysctl.h>  // kinfo_proc on OpenBSD, NetBSD\n+# include <pwd.h>\n+#endif\n+\n+#include \"nvim/log.h\"\n+#include \"nvim/os/process.h\"\n+#include \"nvim/os/os.h\"\n+#include \"nvim/os/os_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/process.c.generated.h\"\n+#endif\n+\n+#ifdef WIN32\n+static bool os_proc_tree_kill_rec(HANDLE process, int sig)\n+{\n+  if (process == NULL) {\n+    return false;\n+  }\n+  PROCESSENTRY32 pe;\n+  DWORD pid = GetProcessId(process);\n+\n+  if (pid != 0) {\n+    HANDLE h = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n+    if (h != INVALID_HANDLE_VALUE) {\n+      pe.dwSize = sizeof(PROCESSENTRY32);\n+      if (!Process32First(h, &pe)) {\n+        goto theend;\n+      }\n+\n+      do {\n+        if (pe.th32ParentProcessID == pid) {\n+          HANDLE ph = OpenProcess(PROCESS_ALL_ACCESS, false, pe.th32ProcessID);\n+          if (ph != NULL) {\n+            os_proc_tree_kill_rec(ph, sig);\n+            CloseHandle(ph);\n+          }\n+        }\n+      } while (Process32Next(h, &pe));\n+\n+      CloseHandle(h);\n+    }\n+  }\n+\n+theend:\n+  return (bool)TerminateProcess(process, (unsigned int)sig);\n+}\n+/// Kills process `pid` and its descendants recursively.\n+bool os_proc_tree_kill(int pid, int sig)\n+{\n+  assert(sig >= 0);\n+  assert(sig == SIGTERM || sig == SIGKILL);\n+  if (pid > 0) {\n+    ILOG(\"terminating process tree: %d\", pid);\n+    HANDLE h = OpenProcess(PROCESS_ALL_ACCESS, false, (DWORD)pid);\n+    return os_proc_tree_kill_rec(h, sig);\n+  } else {\n+    ELOG(\"invalid pid: %d\", pid);\n+  }\n+  return false;\n+}\n+#else\n+/// Kills process group where `pid` is the process group leader.\n+bool os_proc_tree_kill(int pid, int sig)\n+{\n+  assert(sig == SIGTERM || sig == SIGKILL);\n+  int pgid = getpgid(pid);\n+  if (pgid > 0) {  // Ignore error. Never kill self (pid=0).\n+    if (pgid == pid) {\n+      ILOG(\"sending %s to process group: -%d\",\n+           sig == SIGTERM ? \"SIGTERM\" : \"SIGKILL\", pgid);\n+      int rv = uv_kill(-pgid, sig);\n+      return rv == 0;\n+    } else {\n+      // Should never happen, because process_spawn() did setsid() in the child.\n+      ELOG(\"pgid %d != pid %d\", pgid, pid);\n+    }\n+  } else {\n+    ELOG(\"getpgid(%d) returned %d\", pid, pgid);\n+  }\n+  return false;\n+}\n+#endif\n+\n+/// Gets the process ids of the immediate children of process `ppid`.\n+///\n+/// @param ppid Process to inspect.\n+/// @param[out,allocated] proc_list Child process ids.\n+/// @param[out] proc_count Number of child processes.\n+/// @return 0 on success, 1 if process not found, 2 on other error.\n+int os_proc_children(int ppid, int **proc_list, size_t *proc_count)\n+{\n+  int *temp = NULL;\n+  *proc_list = NULL;\n+  *proc_count = 0;\n+\n+#if defined(__APPLE__) || defined(BSD)\n+# if defined(__APPLE__)\n+#  define KP_PID(o) o.kp_proc.p_pid\n+#  define KP_PPID(o) o.kp_eproc.e_ppid\n+# elif defined(__FreeBSD__)\n+#  define KP_PID(o) o.ki_pid\n+#  define KP_PPID(o) o.ki_ppid\n+# else\n+#  define KP_PID(o) o.p_pid\n+#  define KP_PPID(o) o.p_ppid\n+# endif\n+  // ref: http://unix.superglobalmegacorp.com/Net2/newsrc/sys/kinfo_proc.h.html\n+  static int name[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL, 0 };\n+\n+  // Get total process count.\n+  size_t len = 0;\n+  int rv = sysctl(name, ARRAY_SIZE(name), NULL, &len, NULL, 0);\n+  if (rv) {\n+    return 2;\n+  }\n+\n+  // Get ALL processes.\n+  struct kinfo_proc *p_list = xmalloc(len);\n+  rv = sysctl(name, ARRAY_SIZE(name), p_list, &len, NULL, 0);\n+  if (rv) {\n+    xfree(p_list);\n+    return 2;\n+  }\n+\n+  // Collect processes whose parent matches `ppid`.\n+  bool exists = false;\n+  size_t p_count = len / sizeof(*p_list);\n+  for (size_t i = 0; i < p_count; i++) {\n+    exists = exists || KP_PID(p_list[i]) == ppid;\n+    if (KP_PPID(p_list[i]) == ppid) {\n+      temp = xrealloc(temp, (*proc_count + 1) * sizeof(*temp));\n+      temp[*proc_count] = KP_PID(p_list[i]);\n+      (*proc_count)++;\n+    }\n+  }\n+  xfree(p_list);\n+  if (!exists) {\n+    return 1;  // Process not found.\n+  }\n+\n+#elif defined(__linux__)\n+  char proc_p[256] = { 0 };\n+  // Collect processes whose parent matches `ppid`.\n+  // Rationale: children are defined in thread with same ID of process.\n+  snprintf(proc_p, sizeof(proc_p), \"/proc/%d/task/%d/children\", ppid, ppid);\n+  FILE *fp = fopen(proc_p, \"r\");\n+  if (fp == NULL) {\n+    return 1;  // Process not found.",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r174430334",
            "id": 174430334,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDQzMDMzNA==",
            "original_commit_id": "9e89b4f2e3f6fd83999d893183885eb1b1bdc7d7",
            "original_line": 164,
            "original_position": 164,
            "original_start_line": null,
            "path": "src/nvim/os/process.c",
            "position": null,
            "pull_request_review_id": 103781876,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/174430334/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/174430334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2077655?v=4",
                "events_url": "https://api.github.com/users/oni-link/events{/privacy}",
                "followers_url": "https://api.github.com/users/oni-link/followers",
                "following_url": "https://api.github.com/users/oni-link/following{/other_user}",
                "gists_url": "https://api.github.com/users/oni-link/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oni-link",
                "id": 2077655,
                "login": "oni-link",
                "node_id": "MDQ6VXNlcjIwNzc2NTU=",
                "organizations_url": "https://api.github.com/users/oni-link/orgs",
                "received_events_url": "https://api.github.com/users/oni-link/received_events",
                "repos_url": "https://api.github.com/users/oni-link/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oni-link/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oni-link/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oni-link"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r174435872"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/174435872"
                }
            },
            "author_association": "MEMBER",
            "body": "@oni-link How does `ps` get this info without the kernel providing an API?",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-14T12:02:14Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <uv.h>\n+#ifdef WIN32\n+# include <tlhelp32.h>  // for CreateToolhelp32Snapshot\n+#endif\n+\n+#if defined(__FreeBSD__)\n+# include <string.h>\n+# include <sys/types.h>\n+# include <sys/user.h>\n+#endif\n+\n+#if defined(__APPLE__) || defined(BSD)\n+# include <sys/sysctl.h>  // kinfo_proc on OpenBSD, NetBSD\n+# include <pwd.h>\n+#endif\n+\n+#include \"nvim/log.h\"\n+#include \"nvim/os/process.h\"\n+#include \"nvim/os/os.h\"\n+#include \"nvim/os/os_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/process.c.generated.h\"\n+#endif\n+\n+#ifdef WIN32\n+static bool os_proc_tree_kill_rec(HANDLE process, int sig)\n+{\n+  if (process == NULL) {\n+    return false;\n+  }\n+  PROCESSENTRY32 pe;\n+  DWORD pid = GetProcessId(process);\n+\n+  if (pid != 0) {\n+    HANDLE h = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n+    if (h != INVALID_HANDLE_VALUE) {\n+      pe.dwSize = sizeof(PROCESSENTRY32);\n+      if (!Process32First(h, &pe)) {\n+        goto theend;\n+      }\n+\n+      do {\n+        if (pe.th32ParentProcessID == pid) {\n+          HANDLE ph = OpenProcess(PROCESS_ALL_ACCESS, false, pe.th32ProcessID);\n+          if (ph != NULL) {\n+            os_proc_tree_kill_rec(ph, sig);\n+            CloseHandle(ph);\n+          }\n+        }\n+      } while (Process32Next(h, &pe));\n+\n+      CloseHandle(h);\n+    }\n+  }\n+\n+theend:\n+  return (bool)TerminateProcess(process, (unsigned int)sig);\n+}\n+/// Kills process `pid` and its descendants recursively.\n+bool os_proc_tree_kill(int pid, int sig)\n+{\n+  assert(sig >= 0);\n+  assert(sig == SIGTERM || sig == SIGKILL);\n+  if (pid > 0) {\n+    ILOG(\"terminating process tree: %d\", pid);\n+    HANDLE h = OpenProcess(PROCESS_ALL_ACCESS, false, (DWORD)pid);\n+    return os_proc_tree_kill_rec(h, sig);\n+  } else {\n+    ELOG(\"invalid pid: %d\", pid);\n+  }\n+  return false;\n+}\n+#else\n+/// Kills process group where `pid` is the process group leader.\n+bool os_proc_tree_kill(int pid, int sig)\n+{\n+  assert(sig == SIGTERM || sig == SIGKILL);\n+  int pgid = getpgid(pid);\n+  if (pgid > 0) {  // Ignore error. Never kill self (pid=0).\n+    if (pgid == pid) {\n+      ILOG(\"sending %s to process group: -%d\",\n+           sig == SIGTERM ? \"SIGTERM\" : \"SIGKILL\", pgid);\n+      int rv = uv_kill(-pgid, sig);\n+      return rv == 0;\n+    } else {\n+      // Should never happen, because process_spawn() did setsid() in the child.\n+      ELOG(\"pgid %d != pid %d\", pgid, pid);\n+    }\n+  } else {\n+    ELOG(\"getpgid(%d) returned %d\", pid, pgid);\n+  }\n+  return false;\n+}\n+#endif\n+\n+/// Gets the process ids of the immediate children of process `ppid`.\n+///\n+/// @param ppid Process to inspect.\n+/// @param[out,allocated] proc_list Child process ids.\n+/// @param[out] proc_count Number of child processes.\n+/// @return 0 on success, 1 if process not found, 2 on other error.\n+int os_proc_children(int ppid, int **proc_list, size_t *proc_count)\n+{\n+  int *temp = NULL;\n+  *proc_list = NULL;\n+  *proc_count = 0;\n+\n+#if defined(__APPLE__) || defined(BSD)\n+# if defined(__APPLE__)\n+#  define KP_PID(o) o.kp_proc.p_pid\n+#  define KP_PPID(o) o.kp_eproc.e_ppid\n+# elif defined(__FreeBSD__)\n+#  define KP_PID(o) o.ki_pid\n+#  define KP_PPID(o) o.ki_ppid\n+# else\n+#  define KP_PID(o) o.p_pid\n+#  define KP_PPID(o) o.p_ppid\n+# endif\n+  // ref: http://unix.superglobalmegacorp.com/Net2/newsrc/sys/kinfo_proc.h.html\n+  static int name[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL, 0 };\n+\n+  // Get total process count.\n+  size_t len = 0;\n+  int rv = sysctl(name, ARRAY_SIZE(name), NULL, &len, NULL, 0);\n+  if (rv) {\n+    return 2;\n+  }\n+\n+  // Get ALL processes.\n+  struct kinfo_proc *p_list = xmalloc(len);\n+  rv = sysctl(name, ARRAY_SIZE(name), p_list, &len, NULL, 0);\n+  if (rv) {\n+    xfree(p_list);\n+    return 2;\n+  }\n+\n+  // Collect processes whose parent matches `ppid`.\n+  bool exists = false;\n+  size_t p_count = len / sizeof(*p_list);\n+  for (size_t i = 0; i < p_count; i++) {\n+    exists = exists || KP_PID(p_list[i]) == ppid;\n+    if (KP_PPID(p_list[i]) == ppid) {\n+      temp = xrealloc(temp, (*proc_count + 1) * sizeof(*temp));\n+      temp[*proc_count] = KP_PID(p_list[i]);\n+      (*proc_count)++;\n+    }\n+  }\n+  xfree(p_list);\n+  if (!exists) {\n+    return 1;  // Process not found.\n+  }\n+\n+#elif defined(__linux__)\n+  char proc_p[256] = { 0 };\n+  // Collect processes whose parent matches `ppid`.\n+  // Rationale: children are defined in thread with same ID of process.\n+  snprintf(proc_p, sizeof(proc_p), \"/proc/%d/task/%d/children\", ppid, ppid);\n+  FILE *fp = fopen(proc_p, \"r\");\n+  if (fp == NULL) {\n+    return 1;  // Process not found.",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r174435872",
            "id": 174435872,
            "in_reply_to_id": 174430334,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDQzNTg3Mg==",
            "original_commit_id": "9e89b4f2e3f6fd83999d893183885eb1b1bdc7d7",
            "original_line": 164,
            "original_position": 164,
            "original_start_line": null,
            "path": "src/nvim/os/process.c",
            "position": null,
            "pull_request_review_id": 103788646,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/174435872/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/174435872",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r174443631"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/174443631"
                }
            },
            "author_association": "MEMBER",
            "body": "Perhaps iterating through the entries (processes) under `/proc` and evaluating each entry `status` for `ppid`?",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-14T12:35:25Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <uv.h>\n+#ifdef WIN32\n+# include <tlhelp32.h>  // for CreateToolhelp32Snapshot\n+#endif\n+\n+#if defined(__FreeBSD__)\n+# include <string.h>\n+# include <sys/types.h>\n+# include <sys/user.h>\n+#endif\n+\n+#if defined(__APPLE__) || defined(BSD)\n+# include <sys/sysctl.h>  // kinfo_proc on OpenBSD, NetBSD\n+# include <pwd.h>\n+#endif\n+\n+#include \"nvim/log.h\"\n+#include \"nvim/os/process.h\"\n+#include \"nvim/os/os.h\"\n+#include \"nvim/os/os_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/process.c.generated.h\"\n+#endif\n+\n+#ifdef WIN32\n+static bool os_proc_tree_kill_rec(HANDLE process, int sig)\n+{\n+  if (process == NULL) {\n+    return false;\n+  }\n+  PROCESSENTRY32 pe;\n+  DWORD pid = GetProcessId(process);\n+\n+  if (pid != 0) {\n+    HANDLE h = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n+    if (h != INVALID_HANDLE_VALUE) {\n+      pe.dwSize = sizeof(PROCESSENTRY32);\n+      if (!Process32First(h, &pe)) {\n+        goto theend;\n+      }\n+\n+      do {\n+        if (pe.th32ParentProcessID == pid) {\n+          HANDLE ph = OpenProcess(PROCESS_ALL_ACCESS, false, pe.th32ProcessID);\n+          if (ph != NULL) {\n+            os_proc_tree_kill_rec(ph, sig);\n+            CloseHandle(ph);\n+          }\n+        }\n+      } while (Process32Next(h, &pe));\n+\n+      CloseHandle(h);\n+    }\n+  }\n+\n+theend:\n+  return (bool)TerminateProcess(process, (unsigned int)sig);\n+}\n+/// Kills process `pid` and its descendants recursively.\n+bool os_proc_tree_kill(int pid, int sig)\n+{\n+  assert(sig >= 0);\n+  assert(sig == SIGTERM || sig == SIGKILL);\n+  if (pid > 0) {\n+    ILOG(\"terminating process tree: %d\", pid);\n+    HANDLE h = OpenProcess(PROCESS_ALL_ACCESS, false, (DWORD)pid);\n+    return os_proc_tree_kill_rec(h, sig);\n+  } else {\n+    ELOG(\"invalid pid: %d\", pid);\n+  }\n+  return false;\n+}\n+#else\n+/// Kills process group where `pid` is the process group leader.\n+bool os_proc_tree_kill(int pid, int sig)\n+{\n+  assert(sig == SIGTERM || sig == SIGKILL);\n+  int pgid = getpgid(pid);\n+  if (pgid > 0) {  // Ignore error. Never kill self (pid=0).\n+    if (pgid == pid) {\n+      ILOG(\"sending %s to process group: -%d\",\n+           sig == SIGTERM ? \"SIGTERM\" : \"SIGKILL\", pgid);\n+      int rv = uv_kill(-pgid, sig);\n+      return rv == 0;\n+    } else {\n+      // Should never happen, because process_spawn() did setsid() in the child.\n+      ELOG(\"pgid %d != pid %d\", pgid, pid);\n+    }\n+  } else {\n+    ELOG(\"getpgid(%d) returned %d\", pid, pgid);\n+  }\n+  return false;\n+}\n+#endif\n+\n+/// Gets the process ids of the immediate children of process `ppid`.\n+///\n+/// @param ppid Process to inspect.\n+/// @param[out,allocated] proc_list Child process ids.\n+/// @param[out] proc_count Number of child processes.\n+/// @return 0 on success, 1 if process not found, 2 on other error.\n+int os_proc_children(int ppid, int **proc_list, size_t *proc_count)\n+{\n+  int *temp = NULL;\n+  *proc_list = NULL;\n+  *proc_count = 0;\n+\n+#if defined(__APPLE__) || defined(BSD)\n+# if defined(__APPLE__)\n+#  define KP_PID(o) o.kp_proc.p_pid\n+#  define KP_PPID(o) o.kp_eproc.e_ppid\n+# elif defined(__FreeBSD__)\n+#  define KP_PID(o) o.ki_pid\n+#  define KP_PPID(o) o.ki_ppid\n+# else\n+#  define KP_PID(o) o.p_pid\n+#  define KP_PPID(o) o.p_ppid\n+# endif\n+  // ref: http://unix.superglobalmegacorp.com/Net2/newsrc/sys/kinfo_proc.h.html\n+  static int name[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL, 0 };\n+\n+  // Get total process count.\n+  size_t len = 0;\n+  int rv = sysctl(name, ARRAY_SIZE(name), NULL, &len, NULL, 0);\n+  if (rv) {\n+    return 2;\n+  }\n+\n+  // Get ALL processes.\n+  struct kinfo_proc *p_list = xmalloc(len);\n+  rv = sysctl(name, ARRAY_SIZE(name), p_list, &len, NULL, 0);\n+  if (rv) {\n+    xfree(p_list);\n+    return 2;\n+  }\n+\n+  // Collect processes whose parent matches `ppid`.\n+  bool exists = false;\n+  size_t p_count = len / sizeof(*p_list);\n+  for (size_t i = 0; i < p_count; i++) {\n+    exists = exists || KP_PID(p_list[i]) == ppid;\n+    if (KP_PPID(p_list[i]) == ppid) {\n+      temp = xrealloc(temp, (*proc_count + 1) * sizeof(*temp));\n+      temp[*proc_count] = KP_PID(p_list[i]);\n+      (*proc_count)++;\n+    }\n+  }\n+  xfree(p_list);\n+  if (!exists) {\n+    return 1;  // Process not found.\n+  }\n+\n+#elif defined(__linux__)\n+  char proc_p[256] = { 0 };\n+  // Collect processes whose parent matches `ppid`.\n+  // Rationale: children are defined in thread with same ID of process.\n+  snprintf(proc_p, sizeof(proc_p), \"/proc/%d/task/%d/children\", ppid, ppid);\n+  FILE *fp = fopen(proc_p, \"r\");\n+  if (fp == NULL) {\n+    return 1;  // Process not found.",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r174443631",
            "id": 174443631,
            "in_reply_to_id": 174430334,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDQ0MzYzMQ==",
            "original_commit_id": "9e89b4f2e3f6fd83999d893183885eb1b1bdc7d7",
            "original_line": 164,
            "original_position": 164,
            "original_start_line": null,
            "path": "src/nvim/os/process.c",
            "position": null,
            "pull_request_review_id": 103798131,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/174443631/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/174443631",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2077655?v=4",
                "events_url": "https://api.github.com/users/oni-link/events{/privacy}",
                "followers_url": "https://api.github.com/users/oni-link/followers",
                "following_url": "https://api.github.com/users/oni-link/following{/other_user}",
                "gists_url": "https://api.github.com/users/oni-link/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oni-link",
                "id": 2077655,
                "login": "oni-link",
                "node_id": "MDQ6VXNlcjIwNzc2NTU=",
                "organizations_url": "https://api.github.com/users/oni-link/orgs",
                "received_events_url": "https://api.github.com/users/oni-link/received_events",
                "repos_url": "https://api.github.com/users/oni-link/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oni-link/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oni-link/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oni-link"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r174629710"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/174629710"
                }
            },
            "author_association": "MEMBER",
            "body": "@oni-link Added a fallback for `pgrep` since it seems to be available on linux/macOS/BSD.",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-14T22:28:29Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <uv.h>\n+#ifdef WIN32\n+# include <tlhelp32.h>  // for CreateToolhelp32Snapshot\n+#endif\n+\n+#if defined(__FreeBSD__)\n+# include <string.h>\n+# include <sys/types.h>\n+# include <sys/user.h>\n+#endif\n+\n+#if defined(__APPLE__) || defined(BSD)\n+# include <sys/sysctl.h>  // kinfo_proc on OpenBSD, NetBSD\n+# include <pwd.h>\n+#endif\n+\n+#include \"nvim/log.h\"\n+#include \"nvim/os/process.h\"\n+#include \"nvim/os/os.h\"\n+#include \"nvim/os/os_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/process.c.generated.h\"\n+#endif\n+\n+#ifdef WIN32\n+static bool os_proc_tree_kill_rec(HANDLE process, int sig)\n+{\n+  if (process == NULL) {\n+    return false;\n+  }\n+  PROCESSENTRY32 pe;\n+  DWORD pid = GetProcessId(process);\n+\n+  if (pid != 0) {\n+    HANDLE h = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n+    if (h != INVALID_HANDLE_VALUE) {\n+      pe.dwSize = sizeof(PROCESSENTRY32);\n+      if (!Process32First(h, &pe)) {\n+        goto theend;\n+      }\n+\n+      do {\n+        if (pe.th32ParentProcessID == pid) {\n+          HANDLE ph = OpenProcess(PROCESS_ALL_ACCESS, false, pe.th32ProcessID);\n+          if (ph != NULL) {\n+            os_proc_tree_kill_rec(ph, sig);\n+            CloseHandle(ph);\n+          }\n+        }\n+      } while (Process32Next(h, &pe));\n+\n+      CloseHandle(h);\n+    }\n+  }\n+\n+theend:\n+  return (bool)TerminateProcess(process, (unsigned int)sig);\n+}\n+/// Kills process `pid` and its descendants recursively.\n+bool os_proc_tree_kill(int pid, int sig)\n+{\n+  assert(sig >= 0);\n+  assert(sig == SIGTERM || sig == SIGKILL);\n+  if (pid > 0) {\n+    ILOG(\"terminating process tree: %d\", pid);\n+    HANDLE h = OpenProcess(PROCESS_ALL_ACCESS, false, (DWORD)pid);\n+    return os_proc_tree_kill_rec(h, sig);\n+  } else {\n+    ELOG(\"invalid pid: %d\", pid);\n+  }\n+  return false;\n+}\n+#else\n+/// Kills process group where `pid` is the process group leader.\n+bool os_proc_tree_kill(int pid, int sig)\n+{\n+  assert(sig == SIGTERM || sig == SIGKILL);\n+  int pgid = getpgid(pid);\n+  if (pgid > 0) {  // Ignore error. Never kill self (pid=0).\n+    if (pgid == pid) {\n+      ILOG(\"sending %s to process group: -%d\",\n+           sig == SIGTERM ? \"SIGTERM\" : \"SIGKILL\", pgid);\n+      int rv = uv_kill(-pgid, sig);\n+      return rv == 0;\n+    } else {\n+      // Should never happen, because process_spawn() did setsid() in the child.\n+      ELOG(\"pgid %d != pid %d\", pgid, pid);\n+    }\n+  } else {\n+    ELOG(\"getpgid(%d) returned %d\", pid, pgid);\n+  }\n+  return false;\n+}\n+#endif\n+\n+/// Gets the process ids of the immediate children of process `ppid`.\n+///\n+/// @param ppid Process to inspect.\n+/// @param[out,allocated] proc_list Child process ids.\n+/// @param[out] proc_count Number of child processes.\n+/// @return 0 on success, 1 if process not found, 2 on other error.\n+int os_proc_children(int ppid, int **proc_list, size_t *proc_count)\n+{\n+  int *temp = NULL;\n+  *proc_list = NULL;\n+  *proc_count = 0;\n+\n+#if defined(__APPLE__) || defined(BSD)\n+# if defined(__APPLE__)\n+#  define KP_PID(o) o.kp_proc.p_pid\n+#  define KP_PPID(o) o.kp_eproc.e_ppid\n+# elif defined(__FreeBSD__)\n+#  define KP_PID(o) o.ki_pid\n+#  define KP_PPID(o) o.ki_ppid\n+# else\n+#  define KP_PID(o) o.p_pid\n+#  define KP_PPID(o) o.p_ppid\n+# endif\n+  // ref: http://unix.superglobalmegacorp.com/Net2/newsrc/sys/kinfo_proc.h.html\n+  static int name[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL, 0 };\n+\n+  // Get total process count.\n+  size_t len = 0;\n+  int rv = sysctl(name, ARRAY_SIZE(name), NULL, &len, NULL, 0);\n+  if (rv) {\n+    return 2;\n+  }\n+\n+  // Get ALL processes.\n+  struct kinfo_proc *p_list = xmalloc(len);\n+  rv = sysctl(name, ARRAY_SIZE(name), p_list, &len, NULL, 0);\n+  if (rv) {\n+    xfree(p_list);\n+    return 2;\n+  }\n+\n+  // Collect processes whose parent matches `ppid`.\n+  bool exists = false;\n+  size_t p_count = len / sizeof(*p_list);\n+  for (size_t i = 0; i < p_count; i++) {\n+    exists = exists || KP_PID(p_list[i]) == ppid;\n+    if (KP_PPID(p_list[i]) == ppid) {\n+      temp = xrealloc(temp, (*proc_count + 1) * sizeof(*temp));\n+      temp[*proc_count] = KP_PID(p_list[i]);\n+      (*proc_count)++;\n+    }\n+  }\n+  xfree(p_list);\n+  if (!exists) {\n+    return 1;  // Process not found.\n+  }\n+\n+#elif defined(__linux__)\n+  char proc_p[256] = { 0 };\n+  // Collect processes whose parent matches `ppid`.\n+  // Rationale: children are defined in thread with same ID of process.\n+  snprintf(proc_p, sizeof(proc_p), \"/proc/%d/task/%d/children\", ppid, ppid);\n+  FILE *fp = fopen(proc_p, \"r\");\n+  if (fp == NULL) {\n+    return 1;  // Process not found.",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r174629710",
            "id": 174629710,
            "in_reply_to_id": 174430334,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYyOTcxMA==",
            "original_commit_id": "9e89b4f2e3f6fd83999d893183885eb1b1bdc7d7",
            "original_line": 164,
            "original_position": 164,
            "original_start_line": null,
            "path": "src/nvim/os/process.c",
            "position": null,
            "pull_request_review_id": 104021810,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/174629710/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/174629710",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r175252714"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/175252714"
                }
            },
            "author_association": "MEMBER",
            "body": "@neovim/core I'm considering documenting these Lua-flavored `systemlist()` and `system()` variants in `:help lua` as part of the `vim` module. The normal Lua idiom would be to return `status, rv` pair, where `status=false` on failure. But I think it's really useful to show the failed command with `error()`. Thoughts?",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-17T09:17:09Z",
            "diff_hunk": "@@ -1,3 +1,46 @@\n+local function system(cmd)\n+  local out = vim.api.nvim_call_function('system', { cmd })\n+  local err = vim.api.nvim_get_vvar('shell_error')\n+  local args_str = vim.api.nvim_call_function('string', { cmd })\n+  if 0 ~= err then\n+    error('command failed: '..args_str)\n+  end\n+  return out\n+end\n+\n+local function systemlist(...)",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r175252714",
            "id": 175252714,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1MjcxNA==",
            "original_commit_id": "8566bd1bb2564ae1939c2bb55a41a634a2a2b571",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 104761220,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175252714/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175252714",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r175254868"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254868"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we really want to commit a new system interface that mixes `stdout` and `stderr` togheter per default?",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-17T10:59:01Z",
            "diff_hunk": "@@ -1,3 +1,65 @@\n+local function system(cmd)\n+  local out = vim.api.nvim_call_function('system', { cmd })\n+  local err = vim.api.nvim_get_vvar('shell_error')\n+  local args_str = vim.api.nvim_call_function('string', { cmd })\n+  if 0 ~= err then\n+    error('command failed: '..args_str)\n+  end\n+  return out\n+end\n+\n+local function systemlist(cmd)",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r175254868",
            "id": 175254868,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDg2OA==",
            "original_commit_id": "5969f1a392fa86284c1fd56534e8bdb7226f9df5",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 104763306,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254868/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254868",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r175254916"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254916"
                }
            },
            "author_association": "MEMBER",
            "body": "Until we have lua native job control this should probably use `systemlist` (or even better viml job control to distinguish stderr) internally and do a safe conversion to lua binary string, so that this function handles binary data correctly (unlike vimL `system()` where this is impossible)",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-17T11:01:05Z",
            "diff_hunk": "@@ -1,3 +1,65 @@\n+local function system(cmd)",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r175254916",
            "id": 175254916,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDkxNg==",
            "original_commit_id": "5969f1a392fa86284c1fd56534e8bdb7226f9df5",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 104763344,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254916/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r175254950"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254950"
                }
            },
            "author_association": "MEMBER",
            "body": "@bfredl Thanks. I'll keep this internal for now, and revisit your comments later.",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-17T11:02:29Z",
            "diff_hunk": "@@ -1,3 +1,65 @@\n+local function system(cmd)\n+  local out = vim.api.nvim_call_function('system', { cmd })\n+  local err = vim.api.nvim_get_vvar('shell_error')\n+  local args_str = vim.api.nvim_call_function('string', { cmd })\n+  if 0 ~= err then\n+    error('command failed: '..args_str)\n+  end\n+  return out\n+end\n+\n+local function systemlist(cmd)",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r175254950",
            "id": 175254950,
            "in_reply_to_id": 175254868,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDk1MA==",
            "original_commit_id": "5969f1a392fa86284c1fd56534e8bdb7226f9df5",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 104763368,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254950/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r175254959"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254959"
                }
            },
            "author_association": "MEMBER",
            "body": "or even remove the function to force using systemlist which is better in every way.",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-17T11:02:47Z",
            "diff_hunk": "@@ -1,3 +1,65 @@\n+local function system(cmd)",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r175254959",
            "id": 175254959,
            "in_reply_to_id": 175254916,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDk1OQ==",
            "original_commit_id": "5969f1a392fa86284c1fd56534e8bdb7226f9df5",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 104763378,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254959/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175254959",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8107#discussion_r175255085"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8107"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/175255085"
                }
            },
            "author_association": "MEMBER",
            "body": "@teto this is not really true in Lua, the issue is just that vimL system() should not be used to define Lua system()",
            "commit_id": "ae409b5042abdbec67305a063cf921ddffcce0c8",
            "created_at": "2018-03-17T11:07:36Z",
            "diff_hunk": "@@ -1,3 +1,65 @@\n+local function system(cmd)",
            "html_url": "https://github.com/neovim/neovim/pull/8107#discussion_r175255085",
            "id": 175255085,
            "in_reply_to_id": 175254916,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NTA4NQ==",
            "original_commit_id": "5969f1a392fa86284c1fd56534e8bdb7226f9df5",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 104763482,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175255085/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-03-18T16:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/175255085",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "```vim\r\n:let id = jobstart('sleep 30 | sleep 30 | sleep 30')\r\n:call jobstop(id)\r\n```\r\n\r\n..finally works as expected after this patch. :+1:",
            "created_at": "2018-03-06T12:27:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/8107#issuecomment-370765726",
            "id": 370765726,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8107",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDc2NTcyNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/370765726/reactions"
            },
            "updated_at": "2018-03-06T12:27:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/370765726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/972014?v=4",
                "events_url": "https://api.github.com/users/mhinz/events{/privacy}",
                "followers_url": "https://api.github.com/users/mhinz/followers",
                "following_url": "https://api.github.com/users/mhinz/following{/other_user}",
                "gists_url": "https://api.github.com/users/mhinz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mhinz",
                "id": 972014,
                "login": "mhinz",
                "node_id": "MDQ6VXNlcjk3MjAxNA==",
                "organizations_url": "https://api.github.com/users/mhinz/orgs",
                "received_events_url": "https://api.github.com/users/mhinz/received_events",
                "repos_url": "https://api.github.com/users/mhinz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mhinz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mhinz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mhinz"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Will this fix the `invalid channel id` or the exit code for job tests for cat.exe on Windows?\r\nI'm using jobclose to get exit code 0 because jobstop can cause exit code 1.",
            "created_at": "2018-03-13T21:53:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/8107#issuecomment-372831527",
            "id": 372831527,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8107",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjgzMTUyNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/372831527/reactions"
            },
            "updated_at": "2018-03-13T21:55:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/372831527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Will this fix the invalid channel id or the exit code for job tests for cat.exe on Windows?\r\n\r\nI wouldn't expect this to fix \"invalid channel id\". And, I don't think it will change behavior of cat.exe unless cat.exe was running in a shell.\r\n\r\n> I'm using jobclose to get exit code 0 because jobstop can cause exit code 1.\r\n\r\nWe should probably keep that test \"pending\" then :)",
            "created_at": "2018-03-13T22:04:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/8107#issuecomment-372834560",
            "id": 372834560,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8107",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjgzNDU2MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/372834560/reactions"
            },
            "updated_at": "2018-03-13T22:04:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/372834560",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "## todo / future reference\r\n\r\nDiscussion of `vim.system[list]()` in public Lua module:\r\n\r\n- https://github.com/neovim/neovim/pull/8107#discussion_r175254868\r\n- https://github.com/neovim/neovim/pull/8107#discussion_r175254916",
            "created_at": "2018-03-17T13:29:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/8107#issuecomment-373920220",
            "id": 373920220,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8107",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzkyMDIyMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/373920220/reactions"
            },
            "updated_at": "2023-08-04T22:27:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/373920220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Which `ps` is os_proc_info using on Windows?\r\nI'm using tasklist to check for pid in https://github.com/neovim/neovim/pull/8120/commits/ca7d284a74df396fa599f34353bf2cd8950e61b1",
            "created_at": "2018-03-17T18:26:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/8107#issuecomment-373941944",
            "id": 373941944,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8107",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk0MTk0NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/373941944/reactions"
            },
            "updated_at": "2018-03-17T18:27:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/373941944",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Which ps is os_proc_info using on Windows?\r\n\r\nOn WIN32 it [uses the WIN32 API](https://github.com/neovim/neovim/pull/8107/commits/a034d4b69d6032b3431c10b8a11c998551700fc2#diff-043c9e95b8f25dfb8a404eaca0a1678eR218). No ps, no tasklist. ",
            "created_at": "2018-03-17T18:55:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/8107#issuecomment-373944158",
            "id": 373944158,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8107",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzk0NDE1OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/373944158/reactions"
            },
            "updated_at": "2018-03-17T23:14:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/373944158",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk `ping -n 1 -w 30000` exits within a second.",
            "created_at": "2018-03-18T19:55:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/8107#issuecomment-374039224",
            "id": 374039224,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8107",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDAzOTIyNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/374039224/reactions"
            },
            "updated_at": "2018-03-18T19:55:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/374039224",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@janlazo Gah, I changed that at the last minute to match https://github.com/neovim/neovim/blob/3bf57c117120327930fb39935d1672558f58d148/test/functional/terminal/ex_terminal_spec.lua#L51\r\n\r\nI will fix after #8120 , when https://github.com/neovim/neovim/pull/8107/commits/ae409b5042abdbec67305a063cf921ddffcce0c8 can be reverted.",
            "created_at": "2018-03-18T20:21:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/8107#issuecomment-374041724",
            "id": 374041724,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8107",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDA0MTcyNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/374041724/reactions"
            },
            "updated_at": "2018-03-18T20:21:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/374041724",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My bad on that commit. I used ping for <= 1 sec. timeout but any program that exits quickly would have sufficed because of how for loops work on cmd.exe. Powershell has a long startup (2-3 sec. to run `exit 4` for `jobwait()` test) so I couldn't use `Start-Sleep -Milliseconds 100`.",
            "created_at": "2018-03-18T23:41:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/8107#issuecomment-374067396",
            "id": 374067396,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8107",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDA2NzM5Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/374067396/reactions"
            },
            "updated_at": "2018-03-18T23:41:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/374067396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8740057?v=4",
                "events_url": "https://api.github.com/users/janlazo/events{/privacy}",
                "followers_url": "https://api.github.com/users/janlazo/followers",
                "following_url": "https://api.github.com/users/janlazo/following{/other_user}",
                "gists_url": "https://api.github.com/users/janlazo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/janlazo",
                "id": 8740057,
                "login": "janlazo",
                "node_id": "MDQ6VXNlcjg3NDAwNTc=",
                "organizations_url": "https://api.github.com/users/janlazo/orgs",
                "received_events_url": "https://api.github.com/users/janlazo/received_events",
                "repos_url": "https://api.github.com/users/janlazo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/janlazo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/janlazo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/janlazo"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/8107/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/8107/commits",
    "created_at": "2018-03-06T08:54:05Z",
    "diff_url": "https://github.com/neovim/neovim/pull/8107.diff",
    "draft": false,
    "head": {
        "label": "justinmk:job-setsid",
        "ref": "job-setsid",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/justinmk/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/justinmk/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/justinmk/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/justinmk/neovim/branches{/branch}",
            "clone_url": "https://github.com/justinmk/neovim.git",
            "collaborators_url": "https://api.github.com/repos/justinmk/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/justinmk/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/justinmk/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/justinmk/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/justinmk/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/justinmk/neovim/contributors",
            "created_at": "2014-02-28T23:17:54Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/justinmk/neovim/deployments",
            "description": "somewhere in todo.txt",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/justinmk/neovim/downloads",
            "events_url": "https://api.github.com/repos/justinmk/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/justinmk/neovim/forks",
            "full_name": "justinmk/neovim",
            "git_commits_url": "https://api.github.com/repos/justinmk/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/justinmk/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/justinmk/neovim/git/tags{/sha}",
            "git_url": "git://github.com/justinmk/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "http://neovim.io",
            "hooks_url": "https://api.github.com/repos/justinmk/neovim/hooks",
            "html_url": "https://github.com/justinmk/neovim",
            "id": 17302877,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/justinmk/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/justinmk/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/justinmk/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/justinmk/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/justinmk/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/justinmk/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/justinmk/neovim/merges",
            "milestones_url": "https://api.github.com/repos/justinmk/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNzMwMjg3Nw==",
            "notifications_url": "https://api.github.com/repos/justinmk/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/justinmk/neovim/pulls{/number}",
            "pushed_at": "2023-08-04T13:54:40Z",
            "releases_url": "https://api.github.com/repos/justinmk/neovim/releases{/id}",
            "size": 241958,
            "ssh_url": "git@github.com:justinmk/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/justinmk/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/justinmk/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/justinmk/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/justinmk/neovim/subscription",
            "svn_url": "https://github.com/justinmk/neovim",
            "tags_url": "https://api.github.com/repos/justinmk/neovim/tags",
            "teams_url": "https://api.github.com/repos/justinmk/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/justinmk/neovim/git/trees{/sha}",
            "updated_at": "2023-07-25T13:51:02Z",
            "url": "https://api.github.com/repos/justinmk/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "ae409b5042abdbec67305a063cf921ddffcce0c8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/8107",
    "id": 173092880,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8107",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 182884815,
            "name": "job-control",
            "node_id": "MDU6TGFiZWwxODI4ODQ4MTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/job-control"
        }
    ],
    "locked": false,
    "merge_commit_sha": "4e02f1ab871f30d80250537877924d522497493b",
    "merged_at": "2018-03-18T17:36:02Z",
    "milestone": {
        "closed_at": "2018-06-16T19:59:43Z",
        "closed_issues": 119,
        "created_at": "2017-11-13T01:08:52Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "",
        "due_on": "2018-06-10T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/18",
        "id": 2906664,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/18/labels",
        "node_id": "MDk6TWlsZXN0b25lMjkwNjY2NA==",
        "number": 18,
        "open_issues": 0,
        "state": "closed",
        "title": "0.3",
        "updated_at": "2018-06-26T14:51:16Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/18"
    },
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTczMDkyODgw",
    "number": 8107,
    "patch_url": "https://github.com/neovim/neovim/pull/8107.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/8107/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ae409b5042abdbec67305a063cf921ddffcce0c8",
    "title": "jobs: child proc must have a separate process-group",
    "updated_at": "2023-08-04T22:27:13Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/8107",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    }
}