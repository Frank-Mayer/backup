{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23827/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23827/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/23827"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23827"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23827/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/4ef48f1aba194949b1a0fc7338af2b767278daca"
        }
    },
    "active_lock_reason": "off-topic",
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4791,
            "forks_count": 4791,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1644,
            "open_issues_count": 1644,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-08-02T22:20:08Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 248042,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 67955,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-08-03T02:00:39Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 67955,
            "watchers_count": 67955,
            "web_commit_signoff_required": false
        },
        "sha": "5f4895200a49d92e636dea9c5474ab5b0882384d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "## Problem\r\n\r\nHandling system commands in Lua is tedious and error-prone:\r\n- `vim.fn.jobstart()` is vimscript and comes with all limitations attached to typval.\r\n- `vim.loop.spawn` is too low level\r\n\r\nAlso see: https://github.com/neovim/neovim/pull/17620#issuecomment-1060427777\r\n\r\n## Solution\r\n\r\nAdd `vim.system()`.\r\n\r\n- Partly inspired by [Python's subprocess module]( https://docs.python.org/3/library/subprocess.html)\r\n- Does not expose any libuv objects.\r\n- Supersedes #17620\r\n\r\n```lua\r\nlocal on_exit = function(code, signal, stdout, stderr)\r\n  print(code)\r\n  print(signal)\r\n  print(stdout)\r\n  print(stderr)\r\nend\r\n\r\n-- Asynchronous\r\nvim.system({'echo', 'hello'}, nil, on_exit)\r\n\r\n-- Synchronous\r\nlocal stdout = vim.system({'echo', 'hello'}):wait().stdout\r\n\r\n```\r\n\r\n```vimhelp\r\nsystem({cmd}, {opts}, {on_exit})                                *vim.system()*\r\n    Run a system command\r\n\r\n    See |uv.spawn()| for more details.\r\n\r\n    Parameters: ~\r\n      • {cmd}      (string[]) Command to execute\r\n      • {opts}     (SystemOpts|nil) Options:\r\n                   • cwd: (string) Set the current working directory for the\r\n                     sub-process.\r\n                   • env: table<string,string> Set environment variables for\r\n                     the new process. Inherits the current environment with\r\n                     `NVIM` set to |v:servername|.\r\n                   • clear_env: (boolean) `env` defines the job environment\r\n                     exactly, instead of merging current environment.\r\n                   • stdin: (string|string[]|boolean) If `true`, then a pipe\r\n                     to stdin is opened and can be written to via the\r\n                     `write()` method to SystemObj. If string or string[] then\r\n                     will be written to stdin and closed. Defaults to `false`.\r\n                   • stdout: (boolean|function) Handle output from stdout.\r\n                     When passed as a function must have the signature\r\n                     `fun(err: string, data: string)`. Defaults to `true`\r\n                   • stderr: (boolean|function) Handle output from stdout.\r\n                     When passed as a function must have the signature\r\n                     `fun(err: string, data: string)`. Defaults to `true`.\r\n                   • text: (boolean) Handle stdout and stderr as text.\r\n                     Replaces `\\r\\n` with `\\n`.\r\n                   • timeout: (integer)\r\n                   • detach: (boolean) If true, spawn the child process in a\r\n                     detached state - this will make it a process group\r\n                     leader, and will effectively enable the child to keep\r\n                     running after the parent exits. Note that the child\r\n                     process will still keep the parent's event loop alive\r\n                     unless the parent process calls |uv.unref()| on the\r\n                     child's process handle.\r\n      • {on_exit}  (function|nil) Called when subprocess exits. When provided,\r\n                   the command runs asynchronously. Receives SystemCompleted\r\n                   object, see return of SystemObj:wait().\r\n\r\n    Return: ~\r\n        SystemObj Object with the fields:\r\n        • pid (integer) Process ID\r\n        • wait (fun(timeout: integer|nil): SystemCompleted)\r\n          • SystemCompleted is an object with the fields:\r\n            • code: (integer)\r\n            • signal: (integer)\r\n            • stdout: (string), nil if stdout argument is passed\r\n            • stderr: (string), nil if stderr argument is passed\r\n\r\n        • kill (fun(signal: integer))\r\n        • write (fun(data: string|nil)) Requires `stdin=true`. Pass `nil` to\r\n          close the stream.\r\n        • is_closing (fun(): boolean)\r\n\r\n```\r\n\r\n## Todo\r\n- [x] Add tests\r\n\r\n## Future work\r\n- pty support\r\n- `/dev/null` support. (Can pass an empty handler for the same effect)\r\n- Execution via a shell",
    "closed_at": "2023-06-07T12:52:24Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1214217400"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1214217400"
                }
            },
            "author_association": "MEMBER",
            "body": "Nice shape! It's a good pattern for the callback to be the last arg because it tends to be lexically more noisy than other args.",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-02T10:47:43Z",
            "diff_hunk": "@@ -1571,6 +1571,75 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+system({spec}, {on_exit})                                       *vim.system()*\n+    Run a system command\n+\n+    Examples: >lua\n+\n+      local on_exit = function(code, signal, stdout, stderr)\n+        print(code)\n+        print(signal)\n+        print(stdout)\n+        print(stderr)\n+      end\n+\n+      -- Run asynchronously\n+      vim.system({'echo', 'hello'}, on_exit)\n+      vim.system({cmd = {'echo', 'hello'}}, on_exit)\n+      vim.system({cmd = 'echo', args = {'hello'}}, on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1214217400",
            "id": 1214217400,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5IX3y4",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 1584,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1457108258,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1214217400/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-02T10:47:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1214217400",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1214223424"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1214223424"
                }
            },
            "author_association": "MEMBER",
            "body": "- as @wsdjeg suggested, is the pid worth including as an arg?\r\n- probably worth passing these args as a dict (named `event` or `args`?) instead of order-sensitive parameters? that seems like a good pattern whenever we anticipate callbacks that have more than ~3 args",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-02T10:54:03Z",
            "diff_hunk": "@@ -1571,6 +1571,75 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+system({spec}, {on_exit})                                       *vim.system()*\n+    Run a system command\n+\n+    Examples: >lua\n+\n+      local on_exit = function(code, signal, stdout, stderr)",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1214223424",
            "id": 1214223424,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5IX5RA",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 1579,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1457117413,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1214223424/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-02T12:05:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1214223424",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1215676200"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215676200"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure there's much value in the pid, given that when the callback fires the process is gone,  so you can't really do anything with the pid.\r\n\r\nTo distinguish between callbacks one can use closures. ",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-03T17:29:48Z",
            "diff_hunk": "@@ -1571,6 +1571,75 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+system({spec}, {on_exit})                                       *vim.system()*\n+    Run a system command\n+\n+    Examples: >lua\n+\n+      local on_exit = function(code, signal, stdout, stderr)",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1215676200",
            "id": 1215676200,
            "in_reply_to_id": 1214223424,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Idb8o",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 1579,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1459877958,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215676200/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-03T17:29:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215676200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1215676490"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215676490"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't it necessary to keep the nil checks,  given that there's an early return further below in which case sysobj remains unassigned? ",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-03T17:32:41Z",
            "diff_hunk": "@@ -658,89 +632,84 @@ end\n --- - `is_closing()` returns a boolean indicating if the RPC is closing.\n --- - `terminate()` terminates the RPC client.\n local function start(cmd, cmd_args, dispatchers, extra_spawn_params)\n-  local _ = log.info()\n-    and log.info('Starting RPC client', { cmd = cmd, args = cmd_args, extra = extra_spawn_params })\n+  if log.info() then\n+    log.info('Starting RPC client', { cmd = cmd, args = cmd_args, extra = extra_spawn_params })\n+  end\n+\n   validate({\n     cmd = { cmd, 's' },\n     cmd_args = { cmd_args, 't' },\n     dispatchers = { dispatchers, 't', true },\n   })\n \n-  if extra_spawn_params and extra_spawn_params.cwd then\n+  extra_spawn_params = extra_spawn_params or {}\n+\n+  if extra_spawn_params.cwd then\n     assert(is_dir(extra_spawn_params.cwd), 'cwd must be a directory')\n   end\n \n   dispatchers = merge_dispatchers(dispatchers)\n-  local stdin = uv.new_pipe(false)\n-  local stdout = uv.new_pipe(false)\n-  local stderr = uv.new_pipe(false)\n-  local handle, pid\n+\n+  local sysobj ---@type SystemObj\n \n   local client = new_client(dispatchers, {\n     write = function(msg)\n-      stdin:write(msg)\n+      sysobj:write(msg)\n     end,\n     is_closing = function()\n-      return handle == nil or handle:is_closing()\n+      return sysobj:is_closing()",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1215676490",
            "id": 1215676490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5IdcBK",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 660,
            "original_position": 71,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/rpc.lua",
            "position": null,
            "pull_request_review_id": 1459881438,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215676490/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-03T17:32:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215676490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1215983199"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215983199"
                }
            },
            "author_association": "MEMBER",
            "body": "These are handlers so they should use the `on_` convention, no? That's also consistent with rather strongly-established tradition for e.g. `jobstart`, and unless there's strong reason to deviate we should strongly prefer to avoid unnecessary entropy.\r\n\r\n```suggestion\r\n                   • on_stdout: (function|false) when passed as a function must\r\n                     have the signature fun(err: string, data: string) Pass\r\n                     `false` to disable.\r\n                   • on_stderr: (function|false) when passed as a function must\r\n```",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-04T00:26:14Z",
            "diff_hunk": "@@ -1571,6 +1571,75 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+system({spec}, {on_exit})                                       *vim.system()*\n+    Run a system command\n+\n+    Examples: >lua\n+\n+      local on_exit = function(code, signal, stdout, stderr)\n+        print(code)\n+        print(signal)\n+        print(stdout)\n+        print(stderr)\n+      end\n+\n+      -- Run asynchronously\n+      vim.system({'echo', 'hello'}, on_exit)\n+      vim.system({cmd = {'echo', 'hello'}}, on_exit)\n+      vim.system({cmd = 'echo', args = {'hello'}}, on_exit)\n+\n+      -- Run synchronously\n+      local obj = vim.system({'echo', 'hello'}):wait()\n+      -- { code = 0, signal = 0, stdout = 'hello', stderr = '' }\n+<\n+\n+    See |uv.spawn()| for more details.\n+\n+    Parameters: ~\n+      • {spec}     (string[]|SystemSpec) When passed as a string array, the\n+                   argument is interpreted as a command. Accepts the options:\n+                   • cmd: (string|string[]) command to execute\n+                   • args: (string[]) Command line arguments. Ignored when cmd\n+                     is a string[]\n+                   • cwd: (string) Set the current working directory for the\n+                     sub-process.\n+                   • env: table<string,string> Set environment variables for\n+                     the new process.\n+                   • stdin: (string|string[]|true) If `true`, then a pipe to\n+                     stdin is opened and can be written to via the `write()`\n+                     method to SystemObj.\n+                   • stdout: (function|false) when passed as a function must\n+                     have the signature fun(err: string, data: string) Pass\n+                     `false` to disable.\n+                   • stderr: (function|false) when passed as a function must",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1215983199",
            "id": 1215983199,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Iem5f",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 1614,
            "original_position": 44,
            "original_start_line": 1611,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1460539028,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215983199/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-04T00:26:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215983199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1215984748"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215984748"
                }
            },
            "author_association": "MEMBER",
            "body": "If this doesn't use the internals of `jobstart` then we probably need special handling similar to `:help jobstart-env`. In particular, unsetting `$NVIM_LISTEN_ADDRESS` is important. The others could be a backlog item (i.e. not a blocker for this PR).",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-04T00:28:50Z",
            "diff_hunk": "@@ -0,0 +1,360 @@\n+local uv = vim.loop\n+\n+--- @class SystemSpec\n+--- @field cmd string|string[]\n+--- @field args? string[]\n+--- @field stdin string|string[]|true\n+--- @field stdout fun(err:string, data: string)|false\n+--- @field stderr fun(err:string, data: string)|false\n+--- @field cwd? string\n+--- @field env? table<string,string|number>\n+--- @field timeout? integer Timeout in ms\n+--- @field detached? boolean\n+\n+--- @class SystemCompleted\n+--- @field code integer\n+--- @field signal integer\n+--- @field stdout? string\n+--- @field stderr? string\n+\n+--- @class SystemState\n+--- @field handle uv_process_t\n+--- @field timer uv_timer_t\n+--- @field pid integer\n+--- @field timeout? integer\n+--- @field done boolean\n+--- @field stdin uv_stream_t?\n+--- @field stdout uv_stream_t?\n+--- @field stderr uv_stream_t?\n+--- @field cmd string\n+--- @field args? string[]\n+--- @field result? SystemCompleted\n+\n+---@private\n+---@param state SystemState\n+local function close_handles(state)\n+  for _, handle in pairs({ state.handle, state.stdin, state.stdout, state.stderr }) do\n+    if not handle:is_closing() then\n+      handle:close()\n+    end\n+  end\n+end\n+\n+--- @param cmd string\n+--- @param args string[]?\n+--- @return SystemCompleted\n+local function timeout_result(cmd, args)\n+  local cmd_str = cmd .. ' ' .. table.concat(args or {}, ' ')\n+  local err = string.format(\"Command timed out: '%s'\", cmd_str)\n+  return { code = 0, signal = 2, stdout = '', stderr = err }\n+end\n+\n+--- @class SystemObj\n+--- @field pid integer\n+--- @field private _state SystemState\n+--- @field wait fun(self: SystemObj, timeout?: integer): SystemCompleted\n+--- @field kill fun(self: SystemObj, signal: integer)\n+--- @field write fun(self: SystemObj, data?: string|string[])\n+--- @field is_closing fun(self: SystemObj): boolean?\n+local SystemObj = {}\n+\n+--- @param state SystemState\n+--- @return SystemObj\n+local function new_systemobj(state)\n+  return setmetatable({\n+    pid = state.pid,\n+    _state = state,\n+  }, { __index = SystemObj })\n+end\n+\n+--- @param signal integer\n+function SystemObj:kill(signal)\n+  local state = self._state\n+  state.handle:kill(signal)\n+  close_handles(state)\n+end\n+\n+local MAX_TIMEOUT = 2 ^ 31\n+\n+--- @param timeout? integer\n+--- @return SystemCompleted\n+function SystemObj:wait(timeout)\n+  local state = self._state\n+\n+  vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    return state.done\n+  end)\n+\n+  if not state.done then\n+    self:kill(6) -- 'sigint'\n+    state.result = timeout_result(state.cmd, state.args)\n+  end\n+\n+  return state.result\n+end\n+\n+--- @param data string[]|string|nil\n+function SystemObj:write(data)\n+  local stdin = self._state.stdin\n+\n+  if not stdin then\n+    error('stdin has not been opened on this object')\n+  end\n+\n+  if type(data) == 'table' then\n+    for _, v in ipairs(data) do\n+      stdin:write(v)\n+      stdin:write('\\n')\n+    end\n+  elseif type(data) == 'string' then\n+    stdin:write(data)\n+  elseif data == nil then\n+    -- Shutdown the write side of the duplex stream and then close the pipe.\n+    -- Note shutdown will wait for all the pending write requests to complete\n+    -- TODO(lewis6991): apparently shutdown doesn't behave this way.\n+    -- (https://github.com/neovim/neovim/pull/17620#discussion_r820775616)\n+    stdin:write('', function()\n+      stdin:shutdown(function()\n+        if stdin then\n+          stdin:close()\n+        end\n+      end)\n+    end)\n+  end\n+end\n+\n+--- @return boolean\n+function SystemObj:is_closing()\n+  local handle = self._state.handle\n+  return handle == nil or handle:is_closing()\n+end\n+\n+--- @param spec string[]|SystemSpec\n+--- @return SystemSpec\n+local function process_spec(spec)\n+  if spec[1] then\n+    local cmd = {} --- @type string[]\n+    for _, p in ipairs(spec) do\n+      cmd[#cmd + 1] = p\n+    end\n+    spec = vim.deepcopy(spec)\n+    spec.cmd = cmd\n+  end\n+\n+  return spec\n+end\n+\n+---@private\n+---@param output function|'false'\n+---@return uv_stream_t?\n+---@return function? Handler\n+local function setup_output(output)\n+  if output == nil then\n+    return assert(uv.new_pipe(false)), nil\n+  end\n+\n+  if type(output) == 'function' then\n+    return assert(uv.new_pipe(false)), output\n+  end\n+\n+  assert(output == false)\n+  return nil, nil\n+end\n+\n+---@private\n+---@param input string|string[]|true|nil\n+---@return uv_stream_t?\n+---@return string|string[]?\n+local function setup_input(input)\n+  if not input then\n+    return\n+  end\n+\n+  local towrite --- @type string|string[]?\n+  if type(input) == 'string' or type(input) == 'table' then\n+    towrite = input\n+  end\n+\n+  return assert(uv.new_pipe(false)), towrite\n+end\n+\n+--- @param cmd string|string[]\n+--- @param args? string[]\n+--- @return string Command\n+--- @return string[]? Arguments\n+local function setup_cmd(cmd, args)\n+  if type(cmd) == 'string' then\n+    cmd = { cmd }\n+    if args then\n+      vim.list_extend(cmd, args)\n+    end\n+  end\n+\n+  return cmd[1], vim.list_slice(cmd, 2)\n+end\n+\n+--- uv.spawn will completely overwrite the environment\n+--- when we just want to modify the existing one, so if env is provided\n+--- make sure to prepopulate it with the current env.\n+--- @param env table<string,string|number>\n+--- @return string[]?\n+local function setup_env(env)\n+  if not env then\n+    return\n+  end\n+\n+  --- @type table<string,string>\n+  local env0 = vim.tbl_extend('force', vim.fn.environ(), env)\n+\n+  local renv = {} --- @type string[]\n+  for k, v in pairs(env0) do\n+    renv[#renv + 1] = string.format('%s=%s', k, tostring(v))\n+  end\n+\n+  return renv\n+end\n+\n+--- @param stream uv_stream_t\n+--- @param bucket string[]\n+--- @return fun(err: string?, data: string?)\n+local function default_handler(stream, bucket)\n+  return function(err, data)\n+    if err then\n+      error(err)\n+    end\n+    if data ~= nil then\n+      bucket[#bucket + 1] = data\n+    else\n+      stream:read_stop()\n+      stream:close()\n+    end\n+  end\n+end\n+\n+local M = {}\n+\n+--- @param cmd string\n+--- @param opts uv.aliases.spawn_options\n+--- @param on_exit fun(code: integer, signal: integer)\n+--- @param on_error fun()\n+--- @return uv_process_t, integer\n+local function spawn(cmd, opts, on_exit, on_error)\n+  local handle, pid_or_err = uv.spawn(cmd, opts, on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1215984748",
            "id": 1215984748,
            "line": 225,
            "node_id": "PRRC_kwDOAPphoM5IenRs",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 225,
            "original_position": 242,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": 225,
            "pull_request_review_id": 1460542688,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215984748/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-04T00:28:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215984748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1215986138"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215986138"
                }
            },
            "author_association": "MEMBER",
            "body": "Don't see a strong reason to use a different name from `jobstart` here.\r\n```suggestion\r\n                   • detach: (boolean) If true, spawn the child process in a\r\n```",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-04T00:30:06Z",
            "diff_hunk": "@@ -1571,6 +1571,75 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+system({spec}, {on_exit})                                       *vim.system()*\n+    Run a system command\n+\n+    Examples: >lua\n+\n+      local on_exit = function(code, signal, stdout, stderr)\n+        print(code)\n+        print(signal)\n+        print(stdout)\n+        print(stderr)\n+      end\n+\n+      -- Run asynchronously\n+      vim.system({'echo', 'hello'}, on_exit)\n+      vim.system({cmd = {'echo', 'hello'}}, on_exit)\n+      vim.system({cmd = 'echo', args = {'hello'}}, on_exit)\n+\n+      -- Run synchronously\n+      local obj = vim.system({'echo', 'hello'}):wait()\n+      -- { code = 0, signal = 0, stdout = 'hello', stderr = '' }\n+<\n+\n+    See |uv.spawn()| for more details.\n+\n+    Parameters: ~\n+      • {spec}     (string[]|SystemSpec) When passed as a string array, the\n+                   argument is interpreted as a command. Accepts the options:\n+                   • cmd: (string|string[]) command to execute\n+                   • args: (string[]) Command line arguments. Ignored when cmd\n+                     is a string[]\n+                   • cwd: (string) Set the current working directory for the\n+                     sub-process.\n+                   • env: table<string,string> Set environment variables for\n+                     the new process.\n+                   • stdin: (string|string[]|true) If `true`, then a pipe to\n+                     stdin is opened and can be written to via the `write()`\n+                     method to SystemObj.\n+                   • stdout: (function|false) when passed as a function must\n+                     have the signature fun(err: string, data: string) Pass\n+                     `false` to disable.\n+                   • stderr: (function|false) when passed as a function must\n+                     have the signature fun(err: string, data: string) Pass\n+                     `false` to disable.\n+                   • timeout: (integer)\n+                   • detached: (boolean) If true, spawn the child process in a",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1215986138",
            "id": 1215986138,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ienna",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 1618,
            "original_position": 48,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1460546015,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215986138/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-04T00:30:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1215986138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1219827105"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219827105"
                }
            },
            "author_association": "MEMBER",
            "body": "What problem does this avoid? None of the users of `uv.spawn()` I've found handle this. Also `NVIM_LISTEN_ADDRESS` is deprecated?",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-06T15:08:31Z",
            "diff_hunk": "@@ -0,0 +1,360 @@\n+local uv = vim.loop\n+\n+--- @class SystemSpec\n+--- @field cmd string|string[]\n+--- @field args? string[]\n+--- @field stdin string|string[]|true\n+--- @field stdout fun(err:string, data: string)|false\n+--- @field stderr fun(err:string, data: string)|false\n+--- @field cwd? string\n+--- @field env? table<string,string|number>\n+--- @field timeout? integer Timeout in ms\n+--- @field detached? boolean\n+\n+--- @class SystemCompleted\n+--- @field code integer\n+--- @field signal integer\n+--- @field stdout? string\n+--- @field stderr? string\n+\n+--- @class SystemState\n+--- @field handle uv_process_t\n+--- @field timer uv_timer_t\n+--- @field pid integer\n+--- @field timeout? integer\n+--- @field done boolean\n+--- @field stdin uv_stream_t?\n+--- @field stdout uv_stream_t?\n+--- @field stderr uv_stream_t?\n+--- @field cmd string\n+--- @field args? string[]\n+--- @field result? SystemCompleted\n+\n+---@private\n+---@param state SystemState\n+local function close_handles(state)\n+  for _, handle in pairs({ state.handle, state.stdin, state.stdout, state.stderr }) do\n+    if not handle:is_closing() then\n+      handle:close()\n+    end\n+  end\n+end\n+\n+--- @param cmd string\n+--- @param args string[]?\n+--- @return SystemCompleted\n+local function timeout_result(cmd, args)\n+  local cmd_str = cmd .. ' ' .. table.concat(args or {}, ' ')\n+  local err = string.format(\"Command timed out: '%s'\", cmd_str)\n+  return { code = 0, signal = 2, stdout = '', stderr = err }\n+end\n+\n+--- @class SystemObj\n+--- @field pid integer\n+--- @field private _state SystemState\n+--- @field wait fun(self: SystemObj, timeout?: integer): SystemCompleted\n+--- @field kill fun(self: SystemObj, signal: integer)\n+--- @field write fun(self: SystemObj, data?: string|string[])\n+--- @field is_closing fun(self: SystemObj): boolean?\n+local SystemObj = {}\n+\n+--- @param state SystemState\n+--- @return SystemObj\n+local function new_systemobj(state)\n+  return setmetatable({\n+    pid = state.pid,\n+    _state = state,\n+  }, { __index = SystemObj })\n+end\n+\n+--- @param signal integer\n+function SystemObj:kill(signal)\n+  local state = self._state\n+  state.handle:kill(signal)\n+  close_handles(state)\n+end\n+\n+local MAX_TIMEOUT = 2 ^ 31\n+\n+--- @param timeout? integer\n+--- @return SystemCompleted\n+function SystemObj:wait(timeout)\n+  local state = self._state\n+\n+  vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    return state.done\n+  end)\n+\n+  if not state.done then\n+    self:kill(6) -- 'sigint'\n+    state.result = timeout_result(state.cmd, state.args)\n+  end\n+\n+  return state.result\n+end\n+\n+--- @param data string[]|string|nil\n+function SystemObj:write(data)\n+  local stdin = self._state.stdin\n+\n+  if not stdin then\n+    error('stdin has not been opened on this object')\n+  end\n+\n+  if type(data) == 'table' then\n+    for _, v in ipairs(data) do\n+      stdin:write(v)\n+      stdin:write('\\n')\n+    end\n+  elseif type(data) == 'string' then\n+    stdin:write(data)\n+  elseif data == nil then\n+    -- Shutdown the write side of the duplex stream and then close the pipe.\n+    -- Note shutdown will wait for all the pending write requests to complete\n+    -- TODO(lewis6991): apparently shutdown doesn't behave this way.\n+    -- (https://github.com/neovim/neovim/pull/17620#discussion_r820775616)\n+    stdin:write('', function()\n+      stdin:shutdown(function()\n+        if stdin then\n+          stdin:close()\n+        end\n+      end)\n+    end)\n+  end\n+end\n+\n+--- @return boolean\n+function SystemObj:is_closing()\n+  local handle = self._state.handle\n+  return handle == nil or handle:is_closing()\n+end\n+\n+--- @param spec string[]|SystemSpec\n+--- @return SystemSpec\n+local function process_spec(spec)\n+  if spec[1] then\n+    local cmd = {} --- @type string[]\n+    for _, p in ipairs(spec) do\n+      cmd[#cmd + 1] = p\n+    end\n+    spec = vim.deepcopy(spec)\n+    spec.cmd = cmd\n+  end\n+\n+  return spec\n+end\n+\n+---@private\n+---@param output function|'false'\n+---@return uv_stream_t?\n+---@return function? Handler\n+local function setup_output(output)\n+  if output == nil then\n+    return assert(uv.new_pipe(false)), nil\n+  end\n+\n+  if type(output) == 'function' then\n+    return assert(uv.new_pipe(false)), output\n+  end\n+\n+  assert(output == false)\n+  return nil, nil\n+end\n+\n+---@private\n+---@param input string|string[]|true|nil\n+---@return uv_stream_t?\n+---@return string|string[]?\n+local function setup_input(input)\n+  if not input then\n+    return\n+  end\n+\n+  local towrite --- @type string|string[]?\n+  if type(input) == 'string' or type(input) == 'table' then\n+    towrite = input\n+  end\n+\n+  return assert(uv.new_pipe(false)), towrite\n+end\n+\n+--- @param cmd string|string[]\n+--- @param args? string[]\n+--- @return string Command\n+--- @return string[]? Arguments\n+local function setup_cmd(cmd, args)\n+  if type(cmd) == 'string' then\n+    cmd = { cmd }\n+    if args then\n+      vim.list_extend(cmd, args)\n+    end\n+  end\n+\n+  return cmd[1], vim.list_slice(cmd, 2)\n+end\n+\n+--- uv.spawn will completely overwrite the environment\n+--- when we just want to modify the existing one, so if env is provided\n+--- make sure to prepopulate it with the current env.\n+--- @param env table<string,string|number>\n+--- @return string[]?\n+local function setup_env(env)\n+  if not env then\n+    return\n+  end\n+\n+  --- @type table<string,string>\n+  local env0 = vim.tbl_extend('force', vim.fn.environ(), env)\n+\n+  local renv = {} --- @type string[]\n+  for k, v in pairs(env0) do\n+    renv[#renv + 1] = string.format('%s=%s', k, tostring(v))\n+  end\n+\n+  return renv\n+end\n+\n+--- @param stream uv_stream_t\n+--- @param bucket string[]\n+--- @return fun(err: string?, data: string?)\n+local function default_handler(stream, bucket)\n+  return function(err, data)\n+    if err then\n+      error(err)\n+    end\n+    if data ~= nil then\n+      bucket[#bucket + 1] = data\n+    else\n+      stream:read_stop()\n+      stream:close()\n+    end\n+  end\n+end\n+\n+local M = {}\n+\n+--- @param cmd string\n+--- @param opts uv.aliases.spawn_options\n+--- @param on_exit fun(code: integer, signal: integer)\n+--- @param on_error fun()\n+--- @return uv_process_t, integer\n+local function spawn(cmd, opts, on_exit, on_error)\n+  local handle, pid_or_err = uv.spawn(cmd, opts, on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1219827105",
            "id": 1219827105,
            "in_reply_to_id": 1215984748,
            "line": 225,
            "node_id": "PRRC_kwDOAPphoM5ItRWh",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 225,
            "original_position": 242,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": 225,
            "pull_request_review_id": 1465444487,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219827105/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T15:08:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219827105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1219828469"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219828469"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm happy to make this change but just note that this was directly copied from `uv.spawn`.",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-06T15:09:22Z",
            "diff_hunk": "@@ -1571,6 +1571,75 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+system({spec}, {on_exit})                                       *vim.system()*\n+    Run a system command\n+\n+    Examples: >lua\n+\n+      local on_exit = function(code, signal, stdout, stderr)\n+        print(code)\n+        print(signal)\n+        print(stdout)\n+        print(stderr)\n+      end\n+\n+      -- Run asynchronously\n+      vim.system({'echo', 'hello'}, on_exit)\n+      vim.system({cmd = {'echo', 'hello'}}, on_exit)\n+      vim.system({cmd = 'echo', args = {'hello'}}, on_exit)\n+\n+      -- Run synchronously\n+      local obj = vim.system({'echo', 'hello'}):wait()\n+      -- { code = 0, signal = 0, stdout = 'hello', stderr = '' }\n+<\n+\n+    See |uv.spawn()| for more details.\n+\n+    Parameters: ~\n+      • {spec}     (string[]|SystemSpec) When passed as a string array, the\n+                   argument is interpreted as a command. Accepts the options:\n+                   • cmd: (string|string[]) command to execute\n+                   • args: (string[]) Command line arguments. Ignored when cmd\n+                     is a string[]\n+                   • cwd: (string) Set the current working directory for the\n+                     sub-process.\n+                   • env: table<string,string> Set environment variables for\n+                     the new process.\n+                   • stdin: (string|string[]|true) If `true`, then a pipe to\n+                     stdin is opened and can be written to via the `write()`\n+                     method to SystemObj.\n+                   • stdout: (function|false) when passed as a function must\n+                     have the signature fun(err: string, data: string) Pass\n+                     `false` to disable.\n+                   • stderr: (function|false) when passed as a function must\n+                     have the signature fun(err: string, data: string) Pass\n+                     `false` to disable.\n+                   • timeout: (integer)\n+                   • detached: (boolean) If true, spawn the child process in a",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1219828469",
            "id": 1219828469,
            "in_reply_to_id": 1215986138,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItRr1",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 1618,
            "original_position": 48,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1465446250,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219828469/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T15:09:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219828469",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1219838523"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219838523"
                }
            },
            "author_association": "MEMBER",
            "body": "These aren't strictly handlers. The intention of `stdout`/`stderr` is for the user to signal that they want output from these descriptors handled, hence why the type is `function|false`.\r\n\r\nIn the original version of this PR these options could be passed as `uv_stream_t` objects which I've removed for now but still want to leave open to add in the future. Another possibility I'd like to leave open is to allow these to be passed as tables which get populated. So I think keeping the more generic name is better.\r\n\r\nI can change the type to `boolean|function` with default `true` if that makes it a bit cleaner? The common case is that the default value will be used: `stdout=true`.",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-06T15:15:23Z",
            "diff_hunk": "@@ -1571,6 +1571,75 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+system({spec}, {on_exit})                                       *vim.system()*\n+    Run a system command\n+\n+    Examples: >lua\n+\n+      local on_exit = function(code, signal, stdout, stderr)\n+        print(code)\n+        print(signal)\n+        print(stdout)\n+        print(stderr)\n+      end\n+\n+      -- Run asynchronously\n+      vim.system({'echo', 'hello'}, on_exit)\n+      vim.system({cmd = {'echo', 'hello'}}, on_exit)\n+      vim.system({cmd = 'echo', args = {'hello'}}, on_exit)\n+\n+      -- Run synchronously\n+      local obj = vim.system({'echo', 'hello'}):wait()\n+      -- { code = 0, signal = 0, stdout = 'hello', stderr = '' }\n+<\n+\n+    See |uv.spawn()| for more details.\n+\n+    Parameters: ~\n+      • {spec}     (string[]|SystemSpec) When passed as a string array, the\n+                   argument is interpreted as a command. Accepts the options:\n+                   • cmd: (string|string[]) command to execute\n+                   • args: (string[]) Command line arguments. Ignored when cmd\n+                     is a string[]\n+                   • cwd: (string) Set the current working directory for the\n+                     sub-process.\n+                   • env: table<string,string> Set environment variables for\n+                     the new process.\n+                   • stdin: (string|string[]|true) If `true`, then a pipe to\n+                     stdin is opened and can be written to via the `write()`\n+                     method to SystemObj.\n+                   • stdout: (function|false) when passed as a function must\n+                     have the signature fun(err: string, data: string) Pass\n+                     `false` to disable.\n+                   • stderr: (function|false) when passed as a function must",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1219838523",
            "id": 1219838523,
            "in_reply_to_id": 1215983199,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItUI7",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 1614,
            "original_position": 44,
            "original_start_line": 1611,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1465459285,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219838523/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T15:15:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219838523",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1219844722"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219844722"
                }
            },
            "author_association": "MEMBER",
            "body": "> None of the users of `uv.spawn()` I've found handle this\r\n\r\nThis is something Nvim should handle itself. It's for robustness: \r\n\r\n- we don't want child processes accidentally taking a dependency on `$NVIM_LISTEN_ADDRESS` (which, yes, is deprecated, and explicitly should not be passed to child processes to further strengthen the contract and avoid confusion)\r\n- `$NVIM` should always be set on child processes, else it serves no purpose",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-06T15:19:18Z",
            "diff_hunk": "@@ -0,0 +1,360 @@\n+local uv = vim.loop\n+\n+--- @class SystemSpec\n+--- @field cmd string|string[]\n+--- @field args? string[]\n+--- @field stdin string|string[]|true\n+--- @field stdout fun(err:string, data: string)|false\n+--- @field stderr fun(err:string, data: string)|false\n+--- @field cwd? string\n+--- @field env? table<string,string|number>\n+--- @field timeout? integer Timeout in ms\n+--- @field detached? boolean\n+\n+--- @class SystemCompleted\n+--- @field code integer\n+--- @field signal integer\n+--- @field stdout? string\n+--- @field stderr? string\n+\n+--- @class SystemState\n+--- @field handle uv_process_t\n+--- @field timer uv_timer_t\n+--- @field pid integer\n+--- @field timeout? integer\n+--- @field done boolean\n+--- @field stdin uv_stream_t?\n+--- @field stdout uv_stream_t?\n+--- @field stderr uv_stream_t?\n+--- @field cmd string\n+--- @field args? string[]\n+--- @field result? SystemCompleted\n+\n+---@private\n+---@param state SystemState\n+local function close_handles(state)\n+  for _, handle in pairs({ state.handle, state.stdin, state.stdout, state.stderr }) do\n+    if not handle:is_closing() then\n+      handle:close()\n+    end\n+  end\n+end\n+\n+--- @param cmd string\n+--- @param args string[]?\n+--- @return SystemCompleted\n+local function timeout_result(cmd, args)\n+  local cmd_str = cmd .. ' ' .. table.concat(args or {}, ' ')\n+  local err = string.format(\"Command timed out: '%s'\", cmd_str)\n+  return { code = 0, signal = 2, stdout = '', stderr = err }\n+end\n+\n+--- @class SystemObj\n+--- @field pid integer\n+--- @field private _state SystemState\n+--- @field wait fun(self: SystemObj, timeout?: integer): SystemCompleted\n+--- @field kill fun(self: SystemObj, signal: integer)\n+--- @field write fun(self: SystemObj, data?: string|string[])\n+--- @field is_closing fun(self: SystemObj): boolean?\n+local SystemObj = {}\n+\n+--- @param state SystemState\n+--- @return SystemObj\n+local function new_systemobj(state)\n+  return setmetatable({\n+    pid = state.pid,\n+    _state = state,\n+  }, { __index = SystemObj })\n+end\n+\n+--- @param signal integer\n+function SystemObj:kill(signal)\n+  local state = self._state\n+  state.handle:kill(signal)\n+  close_handles(state)\n+end\n+\n+local MAX_TIMEOUT = 2 ^ 31\n+\n+--- @param timeout? integer\n+--- @return SystemCompleted\n+function SystemObj:wait(timeout)\n+  local state = self._state\n+\n+  vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    return state.done\n+  end)\n+\n+  if not state.done then\n+    self:kill(6) -- 'sigint'\n+    state.result = timeout_result(state.cmd, state.args)\n+  end\n+\n+  return state.result\n+end\n+\n+--- @param data string[]|string|nil\n+function SystemObj:write(data)\n+  local stdin = self._state.stdin\n+\n+  if not stdin then\n+    error('stdin has not been opened on this object')\n+  end\n+\n+  if type(data) == 'table' then\n+    for _, v in ipairs(data) do\n+      stdin:write(v)\n+      stdin:write('\\n')\n+    end\n+  elseif type(data) == 'string' then\n+    stdin:write(data)\n+  elseif data == nil then\n+    -- Shutdown the write side of the duplex stream and then close the pipe.\n+    -- Note shutdown will wait for all the pending write requests to complete\n+    -- TODO(lewis6991): apparently shutdown doesn't behave this way.\n+    -- (https://github.com/neovim/neovim/pull/17620#discussion_r820775616)\n+    stdin:write('', function()\n+      stdin:shutdown(function()\n+        if stdin then\n+          stdin:close()\n+        end\n+      end)\n+    end)\n+  end\n+end\n+\n+--- @return boolean\n+function SystemObj:is_closing()\n+  local handle = self._state.handle\n+  return handle == nil or handle:is_closing()\n+end\n+\n+--- @param spec string[]|SystemSpec\n+--- @return SystemSpec\n+local function process_spec(spec)\n+  if spec[1] then\n+    local cmd = {} --- @type string[]\n+    for _, p in ipairs(spec) do\n+      cmd[#cmd + 1] = p\n+    end\n+    spec = vim.deepcopy(spec)\n+    spec.cmd = cmd\n+  end\n+\n+  return spec\n+end\n+\n+---@private\n+---@param output function|'false'\n+---@return uv_stream_t?\n+---@return function? Handler\n+local function setup_output(output)\n+  if output == nil then\n+    return assert(uv.new_pipe(false)), nil\n+  end\n+\n+  if type(output) == 'function' then\n+    return assert(uv.new_pipe(false)), output\n+  end\n+\n+  assert(output == false)\n+  return nil, nil\n+end\n+\n+---@private\n+---@param input string|string[]|true|nil\n+---@return uv_stream_t?\n+---@return string|string[]?\n+local function setup_input(input)\n+  if not input then\n+    return\n+  end\n+\n+  local towrite --- @type string|string[]?\n+  if type(input) == 'string' or type(input) == 'table' then\n+    towrite = input\n+  end\n+\n+  return assert(uv.new_pipe(false)), towrite\n+end\n+\n+--- @param cmd string|string[]\n+--- @param args? string[]\n+--- @return string Command\n+--- @return string[]? Arguments\n+local function setup_cmd(cmd, args)\n+  if type(cmd) == 'string' then\n+    cmd = { cmd }\n+    if args then\n+      vim.list_extend(cmd, args)\n+    end\n+  end\n+\n+  return cmd[1], vim.list_slice(cmd, 2)\n+end\n+\n+--- uv.spawn will completely overwrite the environment\n+--- when we just want to modify the existing one, so if env is provided\n+--- make sure to prepopulate it with the current env.\n+--- @param env table<string,string|number>\n+--- @return string[]?\n+local function setup_env(env)\n+  if not env then\n+    return\n+  end\n+\n+  --- @type table<string,string>\n+  local env0 = vim.tbl_extend('force', vim.fn.environ(), env)\n+\n+  local renv = {} --- @type string[]\n+  for k, v in pairs(env0) do\n+    renv[#renv + 1] = string.format('%s=%s', k, tostring(v))\n+  end\n+\n+  return renv\n+end\n+\n+--- @param stream uv_stream_t\n+--- @param bucket string[]\n+--- @return fun(err: string?, data: string?)\n+local function default_handler(stream, bucket)\n+  return function(err, data)\n+    if err then\n+      error(err)\n+    end\n+    if data ~= nil then\n+      bucket[#bucket + 1] = data\n+    else\n+      stream:read_stop()\n+      stream:close()\n+    end\n+  end\n+end\n+\n+local M = {}\n+\n+--- @param cmd string\n+--- @param opts uv.aliases.spawn_options\n+--- @param on_exit fun(code: integer, signal: integer)\n+--- @param on_error fun()\n+--- @return uv_process_t, integer\n+local function spawn(cmd, opts, on_exit, on_error)\n+  local handle, pid_or_err = uv.spawn(cmd, opts, on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1219844722",
            "id": 1219844722,
            "in_reply_to_id": 1215984748,
            "line": 225,
            "node_id": "PRRC_kwDOAPphoM5ItVpy",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 225,
            "original_position": 242,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": 225,
            "pull_request_review_id": 1465467859,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219844722/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T15:20:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219844722",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1219845478"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219845478"
                }
            },
            "author_association": "MEMBER",
            "body": "The goal here is to basically just consolidate all the uses of `uv.spawn` into a single API. I've not seen any users of `uv.spawn` need access to pid, and like @mfussenegger it isn't that useful and can easily be achieved with closures.\r\n\r\nIf there's a stronger case put forward in the future we can always add it.\r\n\r\nAlso this example is out of date it should now be:\r\n\r\n```\r\nlocal on_exit = function(obj)\r\n```\r\n\r\nWhere `obj` has fields: `code`, `signal`, `stdout`, `stderr`.",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-06T15:19:43Z",
            "diff_hunk": "@@ -1571,6 +1571,75 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+system({spec}, {on_exit})                                       *vim.system()*\n+    Run a system command\n+\n+    Examples: >lua\n+\n+      local on_exit = function(code, signal, stdout, stderr)",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1219845478",
            "id": 1219845478,
            "in_reply_to_id": 1214223424,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItV1m",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 1579,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1465468729,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219845478/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T15:19:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219845478",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1219852462"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219852462"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes. I believe continuation callbacks (callbacks that are only every called once) should always be positioned as the last arguments (after opts).\r\n\r\nMostly because:\r\n- to be consistent with luv\r\n- to synergize with the future async lib which transforms functions of the form `function(<args>, cb(<ret)>))` -> `function(<args>) -> <ret>`.",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-06T15:23:12Z",
            "diff_hunk": "@@ -1571,6 +1571,75 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+system({spec}, {on_exit})                                       *vim.system()*\n+    Run a system command\n+\n+    Examples: >lua\n+\n+      local on_exit = function(code, signal, stdout, stderr)\n+        print(code)\n+        print(signal)\n+        print(stdout)\n+        print(stderr)\n+      end\n+\n+      -- Run asynchronously\n+      vim.system({'echo', 'hello'}, on_exit)\n+      vim.system({cmd = {'echo', 'hello'}}, on_exit)\n+      vim.system({cmd = 'echo', args = {'hello'}}, on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1219852462",
            "id": 1219852462,
            "in_reply_to_id": 1214217400,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItXiu",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 1584,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1465477518,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219852462/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T15:23:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219852462",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1219880134"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219880134"
                }
            },
            "author_association": "MEMBER",
            "body": "Since the args are no longer positional, this is a 2-way door.",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-06T15:38:05Z",
            "diff_hunk": "@@ -1571,6 +1571,75 @@ schedule_wrap({cb})                                      *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+system({spec}, {on_exit})                                       *vim.system()*\n+    Run a system command\n+\n+    Examples: >lua\n+\n+      local on_exit = function(code, signal, stdout, stderr)",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1219880134",
            "id": 1219880134,
            "in_reply_to_id": 1214223424,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5IteTG",
            "original_commit_id": "68798c33e0c45ce268e2b159f953daab98839a5c",
            "original_line": 1579,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1465511252,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219880134/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T15:38:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219880134",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1219920321"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219920321"
                }
            },
            "author_association": "MEMBER",
            "body": "Could leave these 3 as a TODO if they cause trouble. They are still TODO for jobstart() I think.",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-06T16:02:23Z",
            "diff_hunk": "@@ -0,0 +1,373 @@\n+local uv = vim.uv\n+\n+--- @class SystemSpec\n+--- @field cmd string|string[]\n+--- @field args? string[]\n+--- @field stdin string|string[]|true\n+--- @field stdout fun(err:string, data: string)|false\n+--- @field stderr fun(err:string, data: string)|false\n+--- @field cwd? string\n+--- @field env? table<string,string|number>\n+--- @field clear_env? boolean\n+--- @field timeout? integer Timeout in ms\n+--- @field detach? boolean\n+\n+--- @class SystemCompleted\n+--- @field code integer\n+--- @field signal integer\n+--- @field stdout? string\n+--- @field stderr? string\n+\n+--- @class SystemState\n+--- @field handle uv_process_t\n+--- @field timer uv_timer_t\n+--- @field pid integer\n+--- @field timeout? integer\n+--- @field done boolean\n+--- @field stdin uv_stream_t?\n+--- @field stdout uv_stream_t?\n+--- @field stderr uv_stream_t?\n+--- @field cmd string\n+--- @field args? string[]\n+--- @field result? SystemCompleted\n+\n+---@private\n+---@param state SystemState\n+local function close_handles(state)\n+  for _, handle in pairs({ state.handle, state.stdin, state.stdout, state.stderr }) do\n+    if not handle:is_closing() then\n+      handle:close()\n+    end\n+  end\n+end\n+\n+--- @param cmd string\n+--- @param args string[]?\n+--- @return SystemCompleted\n+local function timeout_result(cmd, args)\n+  local cmd_str = cmd .. ' ' .. table.concat(args or {}, ' ')\n+  local err = string.format(\"Command timed out: '%s'\", cmd_str)\n+  return { code = 0, signal = 2, stdout = '', stderr = err }\n+end\n+\n+--- @class SystemObj\n+--- @field pid integer\n+--- @field private _state SystemState\n+--- @field wait fun(self: SystemObj, timeout?: integer): SystemCompleted\n+--- @field kill fun(self: SystemObj, signal: integer)\n+--- @field write fun(self: SystemObj, data?: string|string[])\n+--- @field is_closing fun(self: SystemObj): boolean?\n+local SystemObj = {}\n+\n+--- @param state SystemState\n+--- @return SystemObj\n+local function new_systemobj(state)\n+  return setmetatable({\n+    pid = state.pid,\n+    _state = state,\n+  }, { __index = SystemObj })\n+end\n+\n+--- @param signal integer\n+function SystemObj:kill(signal)\n+  local state = self._state\n+  state.handle:kill(signal)\n+  close_handles(state)\n+end\n+\n+local MAX_TIMEOUT = 2 ^ 31\n+\n+--- @param timeout? integer\n+--- @return SystemCompleted\n+function SystemObj:wait(timeout)\n+  local state = self._state\n+\n+  vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    return state.done\n+  end)\n+\n+  if not state.done then\n+    self:kill(6) -- 'sigint'\n+    state.result = timeout_result(state.cmd, state.args)\n+  end\n+\n+  return state.result\n+end\n+\n+--- @param data string[]|string|nil\n+function SystemObj:write(data)\n+  local stdin = self._state.stdin\n+\n+  if not stdin then\n+    error('stdin has not been opened on this object')\n+  end\n+\n+  if type(data) == 'table' then\n+    for _, v in ipairs(data) do\n+      stdin:write(v)\n+      stdin:write('\\n')\n+    end\n+  elseif type(data) == 'string' then\n+    stdin:write(data)\n+  elseif data == nil then\n+    -- Shutdown the write side of the duplex stream and then close the pipe.\n+    -- Note shutdown will wait for all the pending write requests to complete\n+    -- TODO(lewis6991): apparently shutdown doesn't behave this way.\n+    -- (https://github.com/neovim/neovim/pull/17620#discussion_r820775616)\n+    stdin:write('', function()\n+      stdin:shutdown(function()\n+        if stdin then\n+          stdin:close()\n+        end\n+      end)\n+    end)\n+  end\n+end\n+\n+--- @return boolean\n+function SystemObj:is_closing()\n+  local handle = self._state.handle\n+  return handle == nil or handle:is_closing()\n+end\n+\n+--- @param spec string[]|SystemSpec\n+--- @return SystemSpec\n+local function process_spec(spec)\n+  if spec[1] then\n+    local cmd = {} --- @type string[]\n+    for _, p in ipairs(spec) do\n+      cmd[#cmd + 1] = p\n+    end\n+    spec = vim.deepcopy(spec)\n+    spec.cmd = cmd\n+  end\n+\n+  return spec\n+end\n+\n+---@private\n+---@param output function|'false'\n+---@return uv_stream_t?\n+---@return function? Handler\n+local function setup_output(output)\n+  if output == nil then\n+    return assert(uv.new_pipe(false)), nil\n+  end\n+\n+  if type(output) == 'function' then\n+    return assert(uv.new_pipe(false)), output\n+  end\n+\n+  assert(output == false)\n+  return nil, nil\n+end\n+\n+---@private\n+---@param input string|string[]|true|nil\n+---@return uv_stream_t?\n+---@return string|string[]?\n+local function setup_input(input)\n+  if not input then\n+    return\n+  end\n+\n+  local towrite --- @type string|string[]?\n+  if type(input) == 'string' or type(input) == 'table' then\n+    towrite = input\n+  end\n+\n+  return assert(uv.new_pipe(false)), towrite\n+end\n+\n+--- @param cmd string|string[]\n+--- @param args? string[]\n+--- @return string Command\n+--- @return string[]? Arguments\n+local function setup_cmd(cmd, args)\n+  if type(cmd) == 'string' then\n+    cmd = { cmd }\n+    if args then\n+      vim.list_extend(cmd, args)\n+    end\n+  end\n+\n+  return cmd[1], vim.list_slice(cmd, 2)\n+end\n+\n+--- @return table<string,string>\n+local function base_env()\n+  local env = vim.fn.environ()\n+  env['NVIM_LISTEN_ADDRESS'] = nil\n+  env['NVIM_LOG_FILE'] = nil\n+  env['VIM'] = nil\n+  env['VIMRUNTIME'] = nil",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1219920321",
            "id": 1219920321,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItoHB",
            "original_commit_id": "a5441fa66ebec4f776542856e257e46cf5de5a71",
            "original_line": 203,
            "original_position": 203,
            "original_start_line": 201,
            "path": "runtime/lua/vim/_system.lua",
            "position": null,
            "pull_request_review_id": 1465561858,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219920321/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T16:02:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219920321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1219924084"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219924084"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n• |vim.system()| for running system commands\r\n```",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-06T16:04:36Z",
            "diff_hunk": "@@ -76,6 +76,8 @@ The following new APIs or features were added.\n   is resized horizontally). Note: Lines that are not visible and kept in\n   |'scrollback'| are not reflown.\n \n+• |vim.system()| for running system commands'",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1219924084",
            "id": 1219924084,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItpB0",
            "original_commit_id": "5fa0bd00ba1f4f5e49fca6e7e4390b38b995958d",
            "original_line": 79,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1465566984,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219924084/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T16:04:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219924084",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1219953676"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219953676"
                }
            },
            "author_association": "MEMBER",
            "body": "I've removed them and just documented `NVIM`.",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-06T16:24:53Z",
            "diff_hunk": "@@ -0,0 +1,373 @@\n+local uv = vim.uv\n+\n+--- @class SystemSpec\n+--- @field cmd string|string[]\n+--- @field args? string[]\n+--- @field stdin string|string[]|true\n+--- @field stdout fun(err:string, data: string)|false\n+--- @field stderr fun(err:string, data: string)|false\n+--- @field cwd? string\n+--- @field env? table<string,string|number>\n+--- @field clear_env? boolean\n+--- @field timeout? integer Timeout in ms\n+--- @field detach? boolean\n+\n+--- @class SystemCompleted\n+--- @field code integer\n+--- @field signal integer\n+--- @field stdout? string\n+--- @field stderr? string\n+\n+--- @class SystemState\n+--- @field handle uv_process_t\n+--- @field timer uv_timer_t\n+--- @field pid integer\n+--- @field timeout? integer\n+--- @field done boolean\n+--- @field stdin uv_stream_t?\n+--- @field stdout uv_stream_t?\n+--- @field stderr uv_stream_t?\n+--- @field cmd string\n+--- @field args? string[]\n+--- @field result? SystemCompleted\n+\n+---@private\n+---@param state SystemState\n+local function close_handles(state)\n+  for _, handle in pairs({ state.handle, state.stdin, state.stdout, state.stderr }) do\n+    if not handle:is_closing() then\n+      handle:close()\n+    end\n+  end\n+end\n+\n+--- @param cmd string\n+--- @param args string[]?\n+--- @return SystemCompleted\n+local function timeout_result(cmd, args)\n+  local cmd_str = cmd .. ' ' .. table.concat(args or {}, ' ')\n+  local err = string.format(\"Command timed out: '%s'\", cmd_str)\n+  return { code = 0, signal = 2, stdout = '', stderr = err }\n+end\n+\n+--- @class SystemObj\n+--- @field pid integer\n+--- @field private _state SystemState\n+--- @field wait fun(self: SystemObj, timeout?: integer): SystemCompleted\n+--- @field kill fun(self: SystemObj, signal: integer)\n+--- @field write fun(self: SystemObj, data?: string|string[])\n+--- @field is_closing fun(self: SystemObj): boolean?\n+local SystemObj = {}\n+\n+--- @param state SystemState\n+--- @return SystemObj\n+local function new_systemobj(state)\n+  return setmetatable({\n+    pid = state.pid,\n+    _state = state,\n+  }, { __index = SystemObj })\n+end\n+\n+--- @param signal integer\n+function SystemObj:kill(signal)\n+  local state = self._state\n+  state.handle:kill(signal)\n+  close_handles(state)\n+end\n+\n+local MAX_TIMEOUT = 2 ^ 31\n+\n+--- @param timeout? integer\n+--- @return SystemCompleted\n+function SystemObj:wait(timeout)\n+  local state = self._state\n+\n+  vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    return state.done\n+  end)\n+\n+  if not state.done then\n+    self:kill(6) -- 'sigint'\n+    state.result = timeout_result(state.cmd, state.args)\n+  end\n+\n+  return state.result\n+end\n+\n+--- @param data string[]|string|nil\n+function SystemObj:write(data)\n+  local stdin = self._state.stdin\n+\n+  if not stdin then\n+    error('stdin has not been opened on this object')\n+  end\n+\n+  if type(data) == 'table' then\n+    for _, v in ipairs(data) do\n+      stdin:write(v)\n+      stdin:write('\\n')\n+    end\n+  elseif type(data) == 'string' then\n+    stdin:write(data)\n+  elseif data == nil then\n+    -- Shutdown the write side of the duplex stream and then close the pipe.\n+    -- Note shutdown will wait for all the pending write requests to complete\n+    -- TODO(lewis6991): apparently shutdown doesn't behave this way.\n+    -- (https://github.com/neovim/neovim/pull/17620#discussion_r820775616)\n+    stdin:write('', function()\n+      stdin:shutdown(function()\n+        if stdin then\n+          stdin:close()\n+        end\n+      end)\n+    end)\n+  end\n+end\n+\n+--- @return boolean\n+function SystemObj:is_closing()\n+  local handle = self._state.handle\n+  return handle == nil or handle:is_closing()\n+end\n+\n+--- @param spec string[]|SystemSpec\n+--- @return SystemSpec\n+local function process_spec(spec)\n+  if spec[1] then\n+    local cmd = {} --- @type string[]\n+    for _, p in ipairs(spec) do\n+      cmd[#cmd + 1] = p\n+    end\n+    spec = vim.deepcopy(spec)\n+    spec.cmd = cmd\n+  end\n+\n+  return spec\n+end\n+\n+---@private\n+---@param output function|'false'\n+---@return uv_stream_t?\n+---@return function? Handler\n+local function setup_output(output)\n+  if output == nil then\n+    return assert(uv.new_pipe(false)), nil\n+  end\n+\n+  if type(output) == 'function' then\n+    return assert(uv.new_pipe(false)), output\n+  end\n+\n+  assert(output == false)\n+  return nil, nil\n+end\n+\n+---@private\n+---@param input string|string[]|true|nil\n+---@return uv_stream_t?\n+---@return string|string[]?\n+local function setup_input(input)\n+  if not input then\n+    return\n+  end\n+\n+  local towrite --- @type string|string[]?\n+  if type(input) == 'string' or type(input) == 'table' then\n+    towrite = input\n+  end\n+\n+  return assert(uv.new_pipe(false)), towrite\n+end\n+\n+--- @param cmd string|string[]\n+--- @param args? string[]\n+--- @return string Command\n+--- @return string[]? Arguments\n+local function setup_cmd(cmd, args)\n+  if type(cmd) == 'string' then\n+    cmd = { cmd }\n+    if args then\n+      vim.list_extend(cmd, args)\n+    end\n+  end\n+\n+  return cmd[1], vim.list_slice(cmd, 2)\n+end\n+\n+--- @return table<string,string>\n+local function base_env()\n+  local env = vim.fn.environ()\n+  env['NVIM_LISTEN_ADDRESS'] = nil\n+  env['NVIM_LOG_FILE'] = nil\n+  env['VIM'] = nil\n+  env['VIMRUNTIME'] = nil",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1219953676",
            "id": 1219953676,
            "in_reply_to_id": 1219920321,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItwQM",
            "original_commit_id": "a5441fa66ebec4f776542856e257e46cf5de5a71",
            "original_line": 203,
            "original_position": 203,
            "original_start_line": 201,
            "path": "runtime/lua/vim/_system.lua",
            "position": null,
            "pull_request_review_id": 1465603188,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219953676/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T16:24:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219953676",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23827#discussion_r1221485364"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23827"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1221485364"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    detach = detached,\r\n```",
            "commit_id": "4ef48f1aba194949b1a0fc7338af2b767278daca",
            "created_at": "2023-06-07T12:19:32Z",
            "diff_hunk": "@@ -658,89 +632,85 @@ end\n --- - `is_closing()` returns a boolean indicating if the RPC is closing.\n --- - `terminate()` terminates the RPC client.\n local function start(cmd, cmd_args, dispatchers, extra_spawn_params)\n-  local _ = log.info()\n-    and log.info('Starting RPC client', { cmd = cmd, args = cmd_args, extra = extra_spawn_params })\n+  if log.info() then\n+    log.info('Starting RPC client', { cmd = cmd, args = cmd_args, extra = extra_spawn_params })\n+  end\n+\n   validate({\n     cmd = { cmd, 's' },\n     cmd_args = { cmd_args, 't' },\n     dispatchers = { dispatchers, 't', true },\n   })\n \n-  if extra_spawn_params and extra_spawn_params.cwd then\n+  extra_spawn_params = extra_spawn_params or {}\n+\n+  if extra_spawn_params.cwd then\n     assert(is_dir(extra_spawn_params.cwd), 'cwd must be a directory')\n   end\n \n   dispatchers = merge_dispatchers(dispatchers)\n-  local stdin = uv.new_pipe(false)\n-  local stdout = uv.new_pipe(false)\n-  local stderr = uv.new_pipe(false)\n-  local handle, pid\n+\n+  local sysobj ---@type SystemObj\n \n   local client = new_client(dispatchers, {\n     write = function(msg)\n-      stdin:write(msg)\n+      sysobj:write(msg)\n     end,\n     is_closing = function()\n-      return handle == nil or handle:is_closing()\n+      return sysobj == nil or sysobj:is_closing()\n     end,\n     terminate = function()\n-      if handle then\n-        handle:kill(15)\n-      end\n+      sysobj:kill(15)\n     end,\n   })\n \n-  ---@private\n-  --- Callback for |vim.uv.spawn()| Closes all streams and runs the `on_exit` dispatcher.\n-  ---@param code (integer) Exit code\n-  ---@param signal (integer) Signal that was used to terminate (if any)\n-  local function onexit(code, signal)\n-    stdin:close()\n-    stdout:close()\n-    stderr:close()\n-    handle:close()\n-    dispatchers.on_exit(code, signal)\n+  local handle_body = function(body)\n+    client:handle_body(body)\n   end\n-  local spawn_params = {\n-    args = cmd_args,\n-    stdio = { stdin, stdout, stderr },\n-    detached = not is_win,\n-  }\n-  if extra_spawn_params then\n-    spawn_params.cwd = extra_spawn_params.cwd\n-    spawn_params.env = env_merge(extra_spawn_params.env)\n-    if extra_spawn_params.detached ~= nil then\n-      spawn_params.detached = extra_spawn_params.detached\n+\n+  local stdout_handler = create_read_loop(handle_body, nil, function(err)\n+    client:on_error(client_errors.READ_ERROR, err)\n+  end)\n+\n+  local stderr_handler = function(_, chunk)\n+    if chunk and log.error() then\n+      log.error('rpc', cmd, 'stderr', chunk)\n     end\n   end\n-  handle, pid = uv.spawn(cmd, spawn_params, onexit)\n-  if handle == nil then\n-    stdin:close()\n-    stdout:close()\n-    stderr:close()\n+\n+  local detached = not is_win\n+  if extra_spawn_params.detached ~= nil then\n+    detached = extra_spawn_params.detached\n+  end\n+\n+  local cmd1 = { cmd }\n+  vim.list_extend(cmd1, cmd_args)\n+\n+  local ok, sysobj_or_err = pcall(vim.system, cmd1, {\n+    stdin = true,\n+    stdout = stdout_handler,\n+    stderr = stderr_handler,\n+    cwd = extra_spawn_params.cwd,\n+    env = extra_spawn_params.env,\n+    detached = detached,",
            "html_url": "https://github.com/neovim/neovim/pull/23827#discussion_r1221485364",
            "id": 1221485364,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5IzmM0",
            "original_commit_id": "b920c3609e6e975da0d9cfb57222edf295079bbe",
            "original_line": 695,
            "original_position": 134,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/rpc.lua",
            "position": null,
            "pull_request_review_id": 1467502063,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1221485364/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-07T12:19:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1221485364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Is there a way to pipe stuff to `stdin` (like Vimscript's `system(cmd, string)`)?",
            "created_at": "2023-05-31T11:37:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1570027193",
            "id": 1570027193,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5dlLa5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1570027193/reactions"
            },
            "updated_at": "2023-05-31T11:37:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1570027193",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, `stdin` can be a `string` or `string[]`.",
            "created_at": "2023-05-31T11:39:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1570028785",
            "id": 1570028785,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5dlLzx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1570028785/reactions"
            },
            "updated_at": "2023-05-31T11:39:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1570028785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "hi, thanks for your working. just confused about why this is needed. in neovim we have `os.execute`, `vim.fn.system`, vim.fn.jobstart, etc. all of these functions do same things. it is too hard for users to remember all of this functions. \r\n\r\nand what does it mean `vim.fn.jobstart` only support vimscritp. as I know we can us lua functions as callback too.",
            "created_at": "2023-06-01T03:54:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1571297125",
            "id": 1571297125,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5dqBdl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1571297125/reactions"
            },
            "updated_at": "2023-06-01T03:59:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1571297125",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13142418?v=4",
                "events_url": "https://api.github.com/users/wsdjeg/events{/privacy}",
                "followers_url": "https://api.github.com/users/wsdjeg/followers",
                "following_url": "https://api.github.com/users/wsdjeg/following{/other_user}",
                "gists_url": "https://api.github.com/users/wsdjeg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wsdjeg",
                "id": 13142418,
                "login": "wsdjeg",
                "node_id": "MDQ6VXNlcjEzMTQyNDE4",
                "organizations_url": "https://api.github.com/users/wsdjeg/orgs",
                "received_events_url": "https://api.github.com/users/wsdjeg/received_events",
                "repos_url": "https://api.github.com/users/wsdjeg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wsdjeg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wsdjeg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wsdjeg"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "See https://github.com/neovim/neovim/pull/17620#issuecomment-1060427777 which I've already mentioned in the description.\n\n`uv.spawn` is currently the only function plugins should be using.\n\nVimscript functions may be accessible in lua but they have quite a few limitations. Mostly typval conversion.\n\n> it is too hard for users to remember all of this functions\n\nThis will replace all of them so they will only need to remember one.",
            "created_at": "2023-06-01T07:33:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1571511231",
            "id": 1571511231,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5dq1u_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1571511231/reactions"
            },
            "updated_at": "2023-06-01T07:36:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1571511231",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "the stdout stderr and exit callback should use pid or jobid argv. when multiple job use same callback fucktion, it will easier for user to ditingush which job the callback is called by.",
            "created_at": "2023-06-02T00:51:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1572969234",
            "id": 1572969234,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5dwZsS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1572969234/reactions"
            },
            "updated_at": "2023-06-02T00:51:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1572969234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13142418?v=4",
                "events_url": "https://api.github.com/users/wsdjeg/events{/privacy}",
                "followers_url": "https://api.github.com/users/wsdjeg/followers",
                "following_url": "https://api.github.com/users/wsdjeg/following{/other_user}",
                "gists_url": "https://api.github.com/users/wsdjeg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wsdjeg",
                "id": 13142418,
                "login": "wsdjeg",
                "node_id": "MDQ6VXNlcjEzMTQyNDE4",
                "organizations_url": "https://api.github.com/users/wsdjeg/orgs",
                "received_events_url": "https://api.github.com/users/wsdjeg/received_events",
                "repos_url": "https://api.github.com/users/wsdjeg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wsdjeg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wsdjeg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wsdjeg"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> See [#17620 (comment)](https://github.com/neovim/neovim/pull/17620#issuecomment-1060427777) which I've already mentioned in the description.\r\n> \r\n> `uv.spawn` is currently the only function plugins should be using.\r\n> \r\n> Vimscript functions may be accessible in lua but they have quite a few limitations. Mostly typval conversion.\r\n> \r\n> > it is too hard for users to remember all of this functions\r\n> \r\n> This will replace all of them so they will only need to remember one.\r\n\r\ndoes it mean jobstart will be removed from neovim lua support?\r\n\r\nI think jobstart is easier to understand and use. here is example:\r\n\r\n```lua\r\nlocal jobstart = vim.fn.jobstart\r\n\r\n\r\nlocal function stdout(id, data, event)\r\n\r\nend\r\n\r\nlocal function stderr(id, data, event)\r\n\r\nend\r\n\r\nlocal function on_exit(id, data, event)\r\n\r\nend\r\n\r\njobstart(cmd, {\r\n     on_stdout = stdout,\r\n     on_stderr = stderr,\r\n     on_exit = on_exit,\r\n})\r\n```\r\n\r\n\r\nall the callback function is lua function.",
            "created_at": "2023-06-03T02:50:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1574588298",
            "id": 1574588298,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5d2k-K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1574588298/reactions"
            },
            "updated_at": "2023-06-03T02:55:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1574588298",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13142418?v=4",
                "events_url": "https://api.github.com/users/wsdjeg/events{/privacy}",
                "followers_url": "https://api.github.com/users/wsdjeg/followers",
                "following_url": "https://api.github.com/users/wsdjeg/following{/other_user}",
                "gists_url": "https://api.github.com/users/wsdjeg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wsdjeg",
                "id": 13142418,
                "login": "wsdjeg",
                "node_id": "MDQ6VXNlcjEzMTQyNDE4",
                "organizations_url": "https://api.github.com/users/wsdjeg/orgs",
                "received_events_url": "https://api.github.com/users/wsdjeg/received_events",
                "repos_url": "https://api.github.com/users/wsdjeg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wsdjeg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wsdjeg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wsdjeg"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">does it mean jobstart will be removed from neovim lua support?\r\n\r\nNo, it will not be removed.\r\n\r\n>I think jobstart is easier to understand and use\r\n\r\nYou're welcome to that opinion of course, and you can continue to use `jobstart` if you wish.",
            "created_at": "2023-06-03T02:55:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1574589551",
            "id": 1574589551,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5d2lRv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1574589551/reactions"
            },
            "updated_at": "2023-06-03T02:55:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1574589551",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "why it's marked as off topic? and `jobstart` is the first asynchronous function name people used in neovim. and maybe the name of the function can be `vim.jobstart`, and following the same parameters spec as jobstart function.",
            "created_at": "2023-06-03T03:02:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1574592161",
            "id": 1574592161,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5d2l6h",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1574592161/reactions"
            },
            "updated_at": "2023-06-03T07:17:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1574592161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13142418?v=4",
                "events_url": "https://api.github.com/users/wsdjeg/events{/privacy}",
                "followers_url": "https://api.github.com/users/wsdjeg/followers",
                "following_url": "https://api.github.com/users/wsdjeg/following{/other_user}",
                "gists_url": "https://api.github.com/users/wsdjeg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wsdjeg",
                "id": 13142418,
                "login": "wsdjeg",
                "node_id": "MDQ6VXNlcjEzMTQyNDE4",
                "organizations_url": "https://api.github.com/users/wsdjeg/orgs",
                "received_events_url": "https://api.github.com/users/wsdjeg/received_events",
                "repos_url": "https://api.github.com/users/wsdjeg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wsdjeg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wsdjeg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wsdjeg"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Windows test failures are germane (stupid Windows line endings...)\r\n\r\nProbably needs something like https://github.com/neovim/neovim/blob/c65e2203f70cd5d66fcb8ffb26f8cef38f50e04f/runtime/lua/vim/lsp/util.lua#L458C29-L459\r\n\r\n(which seems like something that could be refactored -- e.g., as part of a `vim.string` library).",
            "created_at": "2023-06-03T07:57:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1574761566",
            "id": 1574761566,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5d3PRe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1574761566/reactions"
            },
            "updated_at": "2023-06-03T08:44:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1574761566",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Windows test failures are germane (stupid Windows line endings...)\r\n> \r\n> Probably needs something like [`c65e220`/runtime/lua/vim/lsp/util.lua#L458C29-L459](https://github.com/neovim/neovim/blob/c65e2203f70cd5d66fcb8ffb26f8cef38f50e04f/runtime/lua/vim/lsp/util.lua#L458C29-L459)\r\n> \r\n> (which seems like something that could be refactored -- e.g., as part of a `vim.string` library).\r\n\r\nI don't think `vim.system` should be doing anything special with line endings. One example is in Gitsigns `\\r` needs to be preserved since the system output is used to diff against the buffer text so we need to take the output verbatim.\r\n\r\nFor now, I think we just need to make the tests handle outputs with `\\n` or `\\r\\n`. There might be an argument that the default handler strips `\\r` and users must use custom handlers to preserve them.",
            "created_at": "2023-06-06T16:38:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1579104195",
            "id": 1579104195,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5eHzfD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1579104195/reactions"
            },
            "updated_at": "2023-06-06T16:38:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1579104195",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I don't think vim.system should be doing anything special with line endings. One example is in Gitsigns \\r needs to be preserved since the system output is used to diff against the buffer text so we need to take the output verbatim.\r\n\r\nThat is a strong argument (also since it's easier to strip than to restore). Is this something that should/could be mentioned somewhere, or is this too niche or obvious in the context?",
            "created_at": "2023-06-06T16:41:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1579106952",
            "id": 1579106952,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5eH0KI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1579106952/reactions"
            },
            "updated_at": "2023-06-06T16:41:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1579106952",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is this low-hanging fruit now, or better left for a follow-up PR? https://github.com/neovim/neovim/blob/0370e4def0c0328f8cd09f02c1ca82ed491ecb9a/runtime/lua/provider/health.lua#L78-L141\r\n",
            "created_at": "2023-06-06T17:48:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1579205995",
            "id": 1579205995,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5eIMVr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1579205995/reactions"
            },
            "updated_at": "2023-06-06T17:48:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1579205995",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I would say it is just hanging fruit.\n\nI did have a go at refactoring it but the code has some niche options that I'm not sure are meaningful to keep. And tbh, the whole file could do with some cleanup so probably better to do it in one go (in a follow up PR).",
            "created_at": "2023-06-06T18:43:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1579277162",
            "id": 1579277162,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5eIdtq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1579277162/reactions"
            },
            "updated_at": "2023-06-06T18:43:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1579277162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`external_deps` test is straight-up broken (@dundargoc) across PRs, so after squashing this should be good to go.",
            "created_at": "2023-06-07T07:44:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1580122500",
            "id": 1580122500,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5eLsGE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1580122500/reactions"
            },
            "updated_at": "2023-06-07T07:44:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1580122500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For the `\\r\\n` problem, python has a `text=true` argument which I've copied here (default `false`). Note: before `text` they had `universal_newlines`, so they've done the churn for us.\r\n\r\nNote `vim.fn.system()` also has this:\r\n\r\n\t\tResult is a String, filtered to avoid platform-specific quirks:\r\n\t\t- <CR><NL> is replaced with <NL>\r\n\t\t- NUL characters are replaced with SOH (0x01)\r\n\r\nLua can happily handle embedded `NUL` chars so we don't need to do that.\r\n\r\nSo now the following are roughly equivalent.\r\n\r\n```lua\r\nlocal out = vim.fn.system({'echo', 'hello'})\r\nlocal out = vim.system({'echo', 'hello'}, {text=true}):wait().stdout\r\n```\r\n\r\n`vim.system` is a bit more verbose than I planned (with `:wait()`, `text=true` and `.stdout`), but it's probably a good middle-ground given its versatility.",
            "created_at": "2023-06-07T09:41:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1580318462",
            "id": 1580318462,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5eMb7-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1580318462/reactions"
            },
            "updated_at": "2023-06-07T10:56:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1580318462",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "NONE",
            "body": "vim.system does not work on windows 10 using:\r\n`:=vim.system({'echo', 'hello'}, {text=true}):wait().stdout`\r\nis this just me or can anyone replicate ?\r\n\r\n**NVIM: v0.10.0-dev-751+gd086bc1e8**\r\n![image](https://github.com/neovim/neovim/assets/6450181/4d64a828-6c33-497b-802a-cc98cc19b16b)",
            "created_at": "2023-08-02T07:34:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1661663149",
            "id": 1661663149,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5jCvet",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1661663149/reactions"
            },
            "updated_at": "2023-08-02T07:35:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1661663149",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6450181?v=4",
                "events_url": "https://api.github.com/users/A-Lamia/events{/privacy}",
                "followers_url": "https://api.github.com/users/A-Lamia/followers",
                "following_url": "https://api.github.com/users/A-Lamia/following{/other_user}",
                "gists_url": "https://api.github.com/users/A-Lamia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/A-Lamia",
                "id": 6450181,
                "login": "A-Lamia",
                "node_id": "MDQ6VXNlcjY0NTAxODE=",
                "organizations_url": "https://api.github.com/users/A-Lamia/orgs",
                "received_events_url": "https://api.github.com/users/A-Lamia/received_events",
                "repos_url": "https://api.github.com/users/A-Lamia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/A-Lamia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/A-Lamia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/A-Lamia"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The message seems like it's indicating `echo` doesn't exist.",
            "created_at": "2023-08-02T07:55:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1661695263",
            "id": 1661695263,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5jC3Uf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1661695263/reactions"
            },
            "updated_at": "2023-08-02T07:55:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1661695263",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "NONE",
            "body": "@lewis6991 it does though, tested on CMD and PS, isn't echo a native command lol ?\r\n\r\nEDIT: you are right though fd seems to return something but not echo, I'm very confused :)",
            "created_at": "2023-08-02T11:45:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1662060939",
            "id": 1662060939,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5jEQmL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662060939/reactions"
            },
            "updated_at": "2023-08-02T11:49:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662060939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6450181?v=4",
                "events_url": "https://api.github.com/users/A-Lamia/events{/privacy}",
                "followers_url": "https://api.github.com/users/A-Lamia/followers",
                "following_url": "https://api.github.com/users/A-Lamia/following{/other_user}",
                "gists_url": "https://api.github.com/users/A-Lamia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/A-Lamia",
                "id": 6450181,
                "login": "A-Lamia",
                "node_id": "MDQ6VXNlcjY0NTAxODE=",
                "organizations_url": "https://api.github.com/users/A-Lamia/orgs",
                "received_events_url": "https://api.github.com/users/A-Lamia/received_events",
                "repos_url": "https://api.github.com/users/A-Lamia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/A-Lamia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/A-Lamia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/A-Lamia"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The tests added in this PR cover echo on windows so the issue must be something specific to your environment.",
            "created_at": "2023-08-02T11:57:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1662077339",
            "id": 1662077339,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5jEUmb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662077339/reactions"
            },
            "updated_at": "2023-08-02T11:57:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662077339",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "NONE",
            "body": "@lewis6991 didn't work on my second desktop but worked on my laptop, so yeah it's probably something on my side, do these commands all run on default CMD ?",
            "created_at": "2023-08-02T12:16:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1662104399",
            "id": 1662104399,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5jEbNP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662104399/reactions"
            },
            "updated_at": "2023-08-02T12:16:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662104399",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6450181?v=4",
                "events_url": "https://api.github.com/users/A-Lamia/events{/privacy}",
                "followers_url": "https://api.github.com/users/A-Lamia/followers",
                "following_url": "https://api.github.com/users/A-Lamia/following{/other_user}",
                "gists_url": "https://api.github.com/users/A-Lamia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/A-Lamia",
                "id": 6450181,
                "login": "A-Lamia",
                "node_id": "MDQ6VXNlcjY0NTAxODE=",
                "organizations_url": "https://api.github.com/users/A-Lamia/orgs",
                "received_events_url": "https://api.github.com/users/A-Lamia/received_events",
                "repos_url": "https://api.github.com/users/A-Lamia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/A-Lamia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/A-Lamia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/A-Lamia"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No idea, `vim.system` is just a wrapper around `vim.uv.spawn` which is provided by libuv.",
            "created_at": "2023-08-02T13:28:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1662215215",
            "id": 1662215215,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5jE2Qv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662215215/reactions"
            },
            "updated_at": "2023-08-02T13:28:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662215215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`uv.spawn` doesn't run the process in a shell. You'll have to run something like `vim.system({\"cmd.exe\", \"/C\", \"echo\"}):wait()` if you need one.\r\n\r\n(And please stop using this PR as support forum. You're notifying all reviewers. Use matrix if you've general usage questions. )",
            "created_at": "2023-08-02T13:41:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/23827#issuecomment-1662236493",
            "id": 1662236493,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
            "node_id": "IC_kwDOAPphoM5jE7dN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662236493/reactions"
            },
            "updated_at": "2023-08-02T13:41:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662236493",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23827/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/23827/commits",
    "created_at": "2023-05-30T12:33:38Z",
    "diff_url": "https://github.com/neovim/neovim/pull/23827.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:feat/systemlua",
        "ref": "feat/systemlua",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2023-08-02T17:32:44Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 243717,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2023-01-31T18:36:52Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "4ef48f1aba194949b1a0fc7338af2b767278daca",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/23827",
    "id": 1370377721,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23827",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": true,
    "merge_commit_sha": "c0952e62fd0ee16a3275bb69e0de04c836b39015",
    "merged_at": "2023-06-07T12:52:24Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5Rrk35",
    "number": 23827,
    "patch_url": "https://github.com/neovim/neovim/pull/23827.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/23827/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/4ef48f1aba194949b1a0fc7338af2b767278daca",
    "title": "feat(lua): add `vim.system()`",
    "updated_at": "2023-08-02T13:41:28Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/23827",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    }
}