{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/16499/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/16499/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/16499"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/16499"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/16499/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/16499"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/1373521d14f4daff588ac83893e7f4e5bee0c9f9"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4858,
            "forks_count": 4858,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1679,
            "open_issues_count": 1679,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-09-11T00:42:25Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 247614,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 69248,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-09-11T01:19:13Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 69248,
            "watchers_count": 69248,
            "web_commit_signoff_required": false
        },
        "sha": "79d5f06f79ca2f84a89be3fe2b3d498a72e37a55",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "This PR implements the minimal snippet feature.\r\n\r\n### API\r\n\r\n- `vim.snippet.expand(snippet_text)`\r\n- `vim.snippet.jump(direction)`\r\n- `vim.snippet.jumpable(direction)`\r\n- `vim.snippet.dispose()`\r\n\r\n### Limitation\r\n- current implementation can't handle adjacent placeholders.\r\n- the `transform` feature is just ignored.\r\n\r\n### TODO\r\n- functionaltest\r\n    - port test case from vim-vsnip\r\n- documentation\r\n    - learn how to write docs\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16499#discussion_r761308741"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16499"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/761308741"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "In my desing, the `vim.snippet` will be this `M`.\r\n\r\nThe plugin authors can override `vim.snippet.expand` or `vim.snippet.jump`.\r\n\r\nProbably, we should expose `vim.snippet.jumpable(direction)`.",
            "commit_id": "1373521d14f4daff588ac83893e7f4e5bee0c9f9",
            "created_at": "2021-12-02T17:17:51Z",
            "diff_hunk": "@@ -0,0 +1,200 @@\n+local snippet = require('vim.lsp._snippet')\n+\n+---@type { session: nvim.SnippetSession }\n+local state = {}\n+\n+---Return one indent string of current buffer.\n+---@return string\n+local function get_one_indent()\n+  local expandtab = vim.api.nvim_get_option('expandtab')\n+  if not expandtab then\n+    return '\\t'\n+  end\n+  local shiftwidth = vim.api.nvim_get_option('shiftwidth')\n+  if shiftwidth > 0 then\n+    return string.rep(' ', shiftwidth)\n+  end\n+  return string.rep(' ', vim.api.nvim_get_option('tabstop'))\n+end\n+\n+---Return base indent of current line.\n+---@return string\n+local function get_base_indent()\n+  return string.match(vim.api.nvim_get_current_line(), '^%s*') or ''\n+end\n+\n+---Select specific range.\n+---@param range { s: { number, number }, e: { number, number } }\n+local function select_text(range)\n+  if range.s[1] == range.e[1] and range.s[2] == range.e[2] then\n+    vim.api.nvim_win_set_cursor(0, { range.s[1] + 1, range.s[2] })\n+  else\n+    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes([[<Esc>%sG%s|v%sG%s|<C-g>]], true, true, true):format(\n+      range.s[1] + 1,\n+      range.s[2] + 1,\n+      range.e[1] + 1,\n+      range.e[2]\n+    ), 'n', true)\n+  end\n+end\n+\n+---Adjust snippet indent\n+---@param snippet_text string\n+---@return string\n+local function adjust_indent(snippet_text)\n+  local one_indent = get_one_indent()\n+  local base_indent = get_base_indent()\n+  local adjusted_snippet_text = {}\n+  local texts = vim.split(snippet_text, '\\n', true)\n+  for i, text in ipairs(texts) do\n+    if i ~= #texts and string.match(text, '^%s*$') then\n+      table.insert(adjusted_snippet_text, '')\n+    else\n+      if i ~= 1 then\n+        text = string.gsub(text, '^(\\t+)', function(indent)\n+          return string.gsub(indent, '\\t', one_indent)\n+        end)\n+        table.insert(adjusted_snippet_text, base_indent .. text)\n+      else\n+        table.insert(adjusted_snippet_text, text)\n+      end\n+    end\n+  end\n+  return table.concat(adjusted_snippet_text, '\\n')\n+end\n+\n+---@class nvim.SnippetSession\n+---@field ns string\n+---@field public snippet_text string\n+local SnippetSession = {}\n+\n+---Create SnippetSession instance.\n+---@param snippet_text string\n+function SnippetSession.new(snippet_text)\n+  return setmetatable({\n+    ns = vim.api.nvim_create_namespace('nvim.snippet'),\n+    snippet_text = adjust_indent(snippet_text),\n+  }, { __index = SnippetSession })\n+end\n+\n+---Insert snippet to the current buffer.\n+function SnippetSession:insert()\n+  local cursor = vim.api.nvim_win_get_cursor(0)\n+  cursor[1] = cursor[1] - 1\n+\n+  local snippet_node = snippet.parse(self.snippet_text)\n+  vim.api.nvim_buf_set_text(0, cursor[1], cursor[2], cursor[1], cursor[2], vim.split(tostring(snippet_node), '\\n'))\n+\n+  local function traverse(node, start_pos)\n+    local end_pos = { start_pos[1], start_pos[2] }\n+    local marks = {}\n+    if node.children then\n+      for _, child in ipairs(node.children) do\n+        for _, mark in ipairs(traverse(child, end_pos)) do\n+          table.insert(marks, mark)\n+        end\n+      end\n+    else\n+      local texts = vim.split(tostring(node), '\\n')\n+      end_pos[1] = start_pos[1] + #texts - 1\n+      end_pos[2] = #texts == 1 and (start_pos[2] + #texts[1]) or #texts[#texts]\n+    end\n+\n+    if vim.tbl_contains({\n+      snippet.NodeType.TABSTOP,\n+      snippet.NodeType.PLACEHOLDER,\n+      snippet.NodeType.CHOICE,\n+    }, node.type) then\n+      table.insert(marks, {\n+        mark_id = vim.api.nvim_buf_set_extmark(0, self.ns, start_pos[1], start_pos[2], {\n+          end_line = end_pos[1],\n+          end_col = end_pos[2],\n+          hl_group = 'Visual',\n+        }),\n+        node = node,\n+      })\n+    end\n+\n+    start_pos[1] = end_pos[1]\n+    start_pos[2] = end_pos[2]\n+\n+    return marks\n+  end\n+  self.marks = traverse(snippet_node, cursor)\n+end\n+\n+local M = {}",
            "html_url": "https://github.com/neovim/neovim/pull/16499#discussion_r761308741",
            "id": 761308741,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4tYKZF",
            "original_commit_id": "796cc23be881f45bd3b187c28bf236513338d871",
            "original_line": 126,
            "original_position": 126,
            "original_start_line": null,
            "path": "runtime/lua/vim/snippet.lua",
            "position": null,
            "pull_request_review_id": 821801717,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16499",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/761308741/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-02T17:17:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/761308741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16499#discussion_r761313071"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16499"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/761313071"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The default minimal snippet implementation is this.",
            "commit_id": "1373521d14f4daff588ac83893e7f4e5bee0c9f9",
            "created_at": "2021-12-02T17:23:13Z",
            "diff_hunk": "@@ -0,0 +1,212 @@\n+local snippet = require('vim.lsp._snippet')\n+\n+---@type { session: nvim.SnippetSession }\n+local state = {}\n+\n+---Return one indent string of current buffer.\n+---@return string\n+local function get_one_indent()\n+  local expandtab = vim.api.nvim_get_option('expandtab')\n+  if not expandtab then\n+    return '\\t'\n+  end\n+  local shiftwidth = vim.api.nvim_get_option('shiftwidth')\n+  if shiftwidth > 0 then\n+    return string.rep(' ', shiftwidth)\n+  end\n+  return string.rep(' ', vim.api.nvim_get_option('tabstop'))\n+end\n+\n+---Return base indent of current line.\n+---@return string\n+local function get_base_indent()\n+  return string.match(vim.api.nvim_get_current_line(), '^%s*') or ''\n+end\n+\n+---Select specific range.\n+---@param range { s: { number, number }, e: { number, number } }\n+local function select_text(range)\n+  if range.s[1] == range.e[1] and range.s[2] == range.e[2] then\n+    vim.api.nvim_win_set_cursor(0, { range.s[1] + 1, range.s[2] })\n+  else\n+    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes([[<Esc>%sG%s|v%sG%s|<C-g>]], true, true, true):format(\n+      range.s[1] + 1,\n+      range.s[2] + 1,\n+      range.e[1] + 1,\n+      range.e[2]\n+    ), 'in', true)\n+  end\n+end\n+\n+---Adjust snippet indent\n+---@param snippet_text string\n+---@return string\n+local function adjust_indent(snippet_text)\n+  local one_indent = get_one_indent()\n+  local base_indent = get_base_indent()\n+  local adjusted_snippet_text = {}\n+  local texts = vim.split(snippet_text, '\\n', true)\n+  for i, text in ipairs(texts) do\n+    if i ~= #texts and string.match(text, '^%s*$') then\n+      table.insert(adjusted_snippet_text, '')\n+    else\n+      if i ~= 1 then\n+        text = string.gsub(text, '^(\\t+)', function(indent)\n+          return string.gsub(indent, '\\t', one_indent)\n+        end)\n+        table.insert(adjusted_snippet_text, base_indent .. text)\n+      else\n+        table.insert(adjusted_snippet_text, text)\n+      end\n+    end\n+  end\n+  return table.concat(adjusted_snippet_text, '\\n')\n+end\n+\n+---@alias nvim.SnippetJumpDirection \"1\" | \"2\"\n+local JumpDirection = {}\n+JumpDirection.Next = 1\n+JumpDirection.Prev = 2\n+\n+\n+---@class nvim.SnippetSession\n+---@field ns string\n+---@field public snippet_text string\n+local SnippetSession = {}",
            "html_url": "https://github.com/neovim/neovim/pull/16499#discussion_r761313071",
            "id": 761313071,
            "line": 392,
            "node_id": "PRRC_kwDOAPphoM4tYLcv",
            "original_commit_id": "ab59ab92cc44e75be2876067ec4f6cb19d56a554",
            "original_line": 392,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/snippet.lua",
            "position": 392,
            "pull_request_review_id": 821807675,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16499",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/761313071/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-02T17:23:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/761313071",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16499#discussion_r761320738"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16499"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/761320738"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This `M` will be a `vim.snippet`.\r\n\r\nThe plugin authors can override `vim.snippet.expand` and `vim.snippet.jump`.\r\n\r\nProbably, we should expose `vim.snippet.jumpable(direction)`.",
            "commit_id": "1373521d14f4daff588ac83893e7f4e5bee0c9f9",
            "created_at": "2021-12-02T17:32:42Z",
            "diff_hunk": "@@ -0,0 +1,212 @@\n+local snippet = require('vim.lsp._snippet')\n+\n+---@type { session: nvim.SnippetSession }\n+local state = {}\n+\n+---Return one indent string of current buffer.\n+---@return string\n+local function get_one_indent()\n+  local expandtab = vim.api.nvim_get_option('expandtab')\n+  if not expandtab then\n+    return '\\t'\n+  end\n+  local shiftwidth = vim.api.nvim_get_option('shiftwidth')\n+  if shiftwidth > 0 then\n+    return string.rep(' ', shiftwidth)\n+  end\n+  return string.rep(' ', vim.api.nvim_get_option('tabstop'))\n+end\n+\n+---Return base indent of current line.\n+---@return string\n+local function get_base_indent()\n+  return string.match(vim.api.nvim_get_current_line(), '^%s*') or ''\n+end\n+\n+---Select specific range.\n+---@param range { s: { number, number }, e: { number, number } }\n+local function select_text(range)\n+  if range.s[1] == range.e[1] and range.s[2] == range.e[2] then\n+    vim.api.nvim_win_set_cursor(0, { range.s[1] + 1, range.s[2] })\n+  else\n+    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes([[<Esc>%sG%s|v%sG%s|<C-g>]], true, true, true):format(\n+      range.s[1] + 1,\n+      range.s[2] + 1,\n+      range.e[1] + 1,\n+      range.e[2]\n+    ), 'in', true)\n+  end\n+end\n+\n+---Adjust snippet indent\n+---@param snippet_text string\n+---@return string\n+local function adjust_indent(snippet_text)\n+  local one_indent = get_one_indent()\n+  local base_indent = get_base_indent()\n+  local adjusted_snippet_text = {}\n+  local texts = vim.split(snippet_text, '\\n', true)\n+  for i, text in ipairs(texts) do\n+    if i ~= #texts and string.match(text, '^%s*$') then\n+      table.insert(adjusted_snippet_text, '')\n+    else\n+      if i ~= 1 then\n+        text = string.gsub(text, '^(\\t+)', function(indent)\n+          return string.gsub(indent, '\\t', one_indent)\n+        end)\n+        table.insert(adjusted_snippet_text, base_indent .. text)\n+      else\n+        table.insert(adjusted_snippet_text, text)\n+      end\n+    end\n+  end\n+  return table.concat(adjusted_snippet_text, '\\n')\n+end\n+\n+---@alias nvim.SnippetJumpDirection \"1\" | \"2\"\n+local JumpDirection = {}\n+JumpDirection.Next = 1\n+JumpDirection.Prev = 2\n+\n+\n+---@class nvim.SnippetSession\n+---@field ns string\n+---@field public snippet_text string\n+local SnippetSession = {}\n+\n+---Create SnippetSession instance.\n+---@param snippet_text string\n+function SnippetSession.new(snippet_text)\n+  return setmetatable({\n+    ns = vim.api.nvim_create_namespace('nvim.snippet'),\n+    snippet_text = adjust_indent(snippet_text),\n+  }, { __index = SnippetSession })\n+end\n+\n+---Insert snippet to the current buffer.\n+function SnippetSession:expand()\n+  local cursor = vim.api.nvim_win_get_cursor(0)\n+  cursor[1] = cursor[1] - 1\n+\n+  local snippet_node = snippet.parse(self.snippet_text)\n+  vim.api.nvim_buf_set_text(0, cursor[1], cursor[2], cursor[1], cursor[2], vim.split(tostring(snippet_node), '\\n'))\n+\n+  local function traverse(node, start_pos)\n+    local end_pos = { start_pos[1], start_pos[2] }\n+    local marks = {}\n+    if node.children then\n+      for _, child in ipairs(node.children) do\n+        for _, mark in ipairs(traverse(child, end_pos)) do\n+          table.insert(marks, mark)\n+        end\n+      end\n+    else\n+      local texts = vim.split(tostring(node), '\\n')\n+      end_pos[1] = start_pos[1] + #texts - 1\n+      end_pos[2] = #texts == 1 and (start_pos[2] + #texts[1]) or #texts[#texts]\n+    end\n+\n+    if vim.tbl_contains({\n+      snippet.NodeType.TABSTOP,\n+      snippet.NodeType.PLACEHOLDER,\n+      snippet.NodeType.CHOICE,\n+    }, node.type) then\n+      table.insert(marks, {\n+        mark_id = vim.api.nvim_buf_set_extmark(0, self.ns, start_pos[1], start_pos[2], {\n+          end_line = end_pos[1],\n+          end_col = end_pos[2],\n+          hl_group = 'Visual',\n+        }),\n+        node = node,\n+      })\n+    end\n+\n+    start_pos[1] = end_pos[1]\n+    start_pos[2] = end_pos[2]\n+\n+    return marks\n+  end\n+  self.marks = traverse(snippet_node, cursor)\n+end\n+\n+---Jump to the suitable placeholder.\n+---@param direction nvim.SnippetJumpDirection\n+function SnippetSession:jump(direction)\n+  local is_correct_direction = function(cursor, current_range)\n+    if direction == JumpDirection.Next then\n+      return current_range.s[1] < cursor[1] or (current_range.s[1] == cursor[1] and cursor[2] < current_range.s[2])\n+    end\n+    return current_range.s[1] > cursor[1] or (current_range.s[1] == cursor[1] and cursor[2] > current_range.s[2])\n+  end\n+  local compare = function(cursor, target_range, current_range)\n+    local is_nearest = not target_range\n+    if direction == JumpDirection.Next then\n+      is_nearest = is_nearest or (math.abs(target_range.s[1] - cursor[1]) > math.abs(current_range.s[1] - cursor[1]))\n+      is_nearest = is_nearest or (target_range.s[1] == current_range.s[1] and math.abs(target_range.s[2] - cursor[2]) > math.abs(current_range.s[2] - cursor[2]))\n+    else\n+      is_nearest = is_nearest or (math.abs(target_range.s[1] - cursor[1]) < math.abs(current_range.s[1] - cursor[1]))\n+      is_nearest = is_nearest or (target_range.s[1] == current_range.s[1] and math.abs(target_range.s[2] - cursor[2]) < math.abs(current_range.s[2] - cursor[2]))\n+    end\n+    return is_nearest\n+  end\n+\n+  local cursor = vim.api.nvim_win_get_cursor(0)\n+  cursor[1] = cursor[1] - 1\n+\n+  local target_range\n+  for _, m in ipairs(state.session.marks or {}) do\n+    local mark = vim.api.nvim_buf_get_extmark_by_id(0, state.session.ns, m.mark_id, { details = true })\n+    local s = { mark[1], mark[2] }\n+    local e = { mark[3].end_row, mark[3].end_col }\n+    if s[1] > e[1] or (s[1] == e[1] and s[2] > e[2]) then\n+      local t = s\n+      s = e\n+      e = t\n+    end\n+    local current_range = { s = s, e = e }\n+    if is_correct_direction(cursor, current_range) then\n+      if compare(cursor, target_range, current_range) then\n+        target_range = current_range\n+      end\n+    end\n+  end\n+  if target_range then\n+    select_text(target_range)\n+  end\n+end\n+\n+local M = {}",
            "html_url": "https://github.com/neovim/neovim/pull/16499#discussion_r761320738",
            "id": 761320738,
            "line": 651,
            "node_id": "PRRC_kwDOAPphoM4tYNUi",
            "original_commit_id": "ab59ab92cc44e75be2876067ec4f6cb19d56a554",
            "original_line": 651,
            "original_position": 178,
            "original_start_line": null,
            "path": "runtime/lua/vim/snippet.lua",
            "position": 651,
            "pull_request_review_id": 821818333,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16499",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/761320738/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-02T17:32:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/761320738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16499#discussion_r761322141"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16499"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/761322141"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This implementation does not care about the `current tabstop index`. Instead of that, this determines the suitable next tabstop via `cursor position`.\r\n\r\nThis is not general implementation. I think we should implement correct version if we ship this PR.",
            "commit_id": "1373521d14f4daff588ac83893e7f4e5bee0c9f9",
            "created_at": "2021-12-02T17:34:34Z",
            "diff_hunk": "@@ -0,0 +1,212 @@\n+local snippet = require('vim.lsp._snippet')\n+\n+---@type { session: nvim.SnippetSession }\n+local state = {}\n+\n+---Return one indent string of current buffer.\n+---@return string\n+local function get_one_indent()\n+  local expandtab = vim.api.nvim_get_option('expandtab')\n+  if not expandtab then\n+    return '\\t'\n+  end\n+  local shiftwidth = vim.api.nvim_get_option('shiftwidth')\n+  if shiftwidth > 0 then\n+    return string.rep(' ', shiftwidth)\n+  end\n+  return string.rep(' ', vim.api.nvim_get_option('tabstop'))\n+end\n+\n+---Return base indent of current line.\n+---@return string\n+local function get_base_indent()\n+  return string.match(vim.api.nvim_get_current_line(), '^%s*') or ''\n+end\n+\n+---Select specific range.\n+---@param range { s: { number, number }, e: { number, number } }\n+local function select_text(range)\n+  if range.s[1] == range.e[1] and range.s[2] == range.e[2] then\n+    vim.api.nvim_win_set_cursor(0, { range.s[1] + 1, range.s[2] })\n+  else\n+    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes([[<Esc>%sG%s|v%sG%s|<C-g>]], true, true, true):format(\n+      range.s[1] + 1,\n+      range.s[2] + 1,\n+      range.e[1] + 1,\n+      range.e[2]\n+    ), 'in', true)\n+  end\n+end\n+\n+---Adjust snippet indent\n+---@param snippet_text string\n+---@return string\n+local function adjust_indent(snippet_text)\n+  local one_indent = get_one_indent()\n+  local base_indent = get_base_indent()\n+  local adjusted_snippet_text = {}\n+  local texts = vim.split(snippet_text, '\\n', true)\n+  for i, text in ipairs(texts) do\n+    if i ~= #texts and string.match(text, '^%s*$') then\n+      table.insert(adjusted_snippet_text, '')\n+    else\n+      if i ~= 1 then\n+        text = string.gsub(text, '^(\\t+)', function(indent)\n+          return string.gsub(indent, '\\t', one_indent)\n+        end)\n+        table.insert(adjusted_snippet_text, base_indent .. text)\n+      else\n+        table.insert(adjusted_snippet_text, text)\n+      end\n+    end\n+  end\n+  return table.concat(adjusted_snippet_text, '\\n')\n+end\n+\n+---@alias nvim.SnippetJumpDirection \"1\" | \"2\"\n+local JumpDirection = {}\n+JumpDirection.Next = 1\n+JumpDirection.Prev = 2\n+\n+\n+---@class nvim.SnippetSession\n+---@field ns string\n+---@field public snippet_text string\n+local SnippetSession = {}\n+\n+---Create SnippetSession instance.\n+---@param snippet_text string\n+function SnippetSession.new(snippet_text)\n+  return setmetatable({\n+    ns = vim.api.nvim_create_namespace('nvim.snippet'),\n+    snippet_text = adjust_indent(snippet_text),\n+  }, { __index = SnippetSession })\n+end\n+\n+---Insert snippet to the current buffer.\n+function SnippetSession:expand()\n+  local cursor = vim.api.nvim_win_get_cursor(0)\n+  cursor[1] = cursor[1] - 1\n+\n+  local snippet_node = snippet.parse(self.snippet_text)\n+  vim.api.nvim_buf_set_text(0, cursor[1], cursor[2], cursor[1], cursor[2], vim.split(tostring(snippet_node), '\\n'))\n+\n+  local function traverse(node, start_pos)\n+    local end_pos = { start_pos[1], start_pos[2] }\n+    local marks = {}\n+    if node.children then\n+      for _, child in ipairs(node.children) do\n+        for _, mark in ipairs(traverse(child, end_pos)) do\n+          table.insert(marks, mark)\n+        end\n+      end\n+    else\n+      local texts = vim.split(tostring(node), '\\n')\n+      end_pos[1] = start_pos[1] + #texts - 1\n+      end_pos[2] = #texts == 1 and (start_pos[2] + #texts[1]) or #texts[#texts]\n+    end\n+\n+    if vim.tbl_contains({\n+      snippet.NodeType.TABSTOP,\n+      snippet.NodeType.PLACEHOLDER,\n+      snippet.NodeType.CHOICE,\n+    }, node.type) then\n+      table.insert(marks, {\n+        mark_id = vim.api.nvim_buf_set_extmark(0, self.ns, start_pos[1], start_pos[2], {\n+          end_line = end_pos[1],\n+          end_col = end_pos[2],\n+          hl_group = 'Visual',\n+        }),\n+        node = node,\n+      })\n+    end\n+\n+    start_pos[1] = end_pos[1]\n+    start_pos[2] = end_pos[2]\n+\n+    return marks\n+  end\n+  self.marks = traverse(snippet_node, cursor)\n+end\n+\n+---Jump to the suitable placeholder.\n+---@param direction nvim.SnippetJumpDirection\n+function SnippetSession:jump(direction)",
            "html_url": "https://github.com/neovim/neovim/pull/16499#discussion_r761322141",
            "id": 761322141,
            "line": 523,
            "node_id": "PRRC_kwDOAPphoM4tYNqd",
            "original_commit_id": "ab59ab92cc44e75be2876067ec4f6cb19d56a554",
            "original_line": 523,
            "original_position": 134,
            "original_start_line": null,
            "path": "runtime/lua/vim/snippet.lua",
            "position": 523,
            "pull_request_review_id": 821820299,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16499",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/761322141/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-02T17:34:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/761322141",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16499#discussion_r761323513"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16499"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/761323513"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Currently, this will insert the result of `tostring(snippet_ast)`.\r\nIt should be changed when implementing LSP variables.",
            "commit_id": "1373521d14f4daff588ac83893e7f4e5bee0c9f9",
            "created_at": "2021-12-02T17:36:17Z",
            "diff_hunk": "@@ -0,0 +1,212 @@\n+local snippet = require('vim.lsp._snippet')\n+\n+---@type { session: nvim.SnippetSession }\n+local state = {}\n+\n+---Return one indent string of current buffer.\n+---@return string\n+local function get_one_indent()\n+  local expandtab = vim.api.nvim_get_option('expandtab')\n+  if not expandtab then\n+    return '\\t'\n+  end\n+  local shiftwidth = vim.api.nvim_get_option('shiftwidth')\n+  if shiftwidth > 0 then\n+    return string.rep(' ', shiftwidth)\n+  end\n+  return string.rep(' ', vim.api.nvim_get_option('tabstop'))\n+end\n+\n+---Return base indent of current line.\n+---@return string\n+local function get_base_indent()\n+  return string.match(vim.api.nvim_get_current_line(), '^%s*') or ''\n+end\n+\n+---Select specific range.\n+---@param range { s: { number, number }, e: { number, number } }\n+local function select_text(range)\n+  if range.s[1] == range.e[1] and range.s[2] == range.e[2] then\n+    vim.api.nvim_win_set_cursor(0, { range.s[1] + 1, range.s[2] })\n+  else\n+    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes([[<Esc>%sG%s|v%sG%s|<C-g>]], true, true, true):format(\n+      range.s[1] + 1,\n+      range.s[2] + 1,\n+      range.e[1] + 1,\n+      range.e[2]\n+    ), 'in', true)\n+  end\n+end\n+\n+---Adjust snippet indent\n+---@param snippet_text string\n+---@return string\n+local function adjust_indent(snippet_text)\n+  local one_indent = get_one_indent()\n+  local base_indent = get_base_indent()\n+  local adjusted_snippet_text = {}\n+  local texts = vim.split(snippet_text, '\\n', true)\n+  for i, text in ipairs(texts) do\n+    if i ~= #texts and string.match(text, '^%s*$') then\n+      table.insert(adjusted_snippet_text, '')\n+    else\n+      if i ~= 1 then\n+        text = string.gsub(text, '^(\\t+)', function(indent)\n+          return string.gsub(indent, '\\t', one_indent)\n+        end)\n+        table.insert(adjusted_snippet_text, base_indent .. text)\n+      else\n+        table.insert(adjusted_snippet_text, text)\n+      end\n+    end\n+  end\n+  return table.concat(adjusted_snippet_text, '\\n')\n+end\n+\n+---@alias nvim.SnippetJumpDirection \"1\" | \"2\"\n+local JumpDirection = {}\n+JumpDirection.Next = 1\n+JumpDirection.Prev = 2\n+\n+\n+---@class nvim.SnippetSession\n+---@field ns string\n+---@field public snippet_text string\n+local SnippetSession = {}\n+\n+---Create SnippetSession instance.\n+---@param snippet_text string\n+function SnippetSession.new(snippet_text)\n+  return setmetatable({\n+    ns = vim.api.nvim_create_namespace('nvim.snippet'),\n+    snippet_text = adjust_indent(snippet_text),\n+  }, { __index = SnippetSession })\n+end\n+\n+---Insert snippet to the current buffer.\n+function SnippetSession:expand()\n+  local cursor = vim.api.nvim_win_get_cursor(0)\n+  cursor[1] = cursor[1] - 1\n+\n+  local snippet_node = snippet.parse(self.snippet_text)\n+  vim.api.nvim_buf_set_text(0, cursor[1], cursor[2], cursor[1], cursor[2], vim.split(tostring(snippet_node), '\\n'))",
            "html_url": "https://github.com/neovim/neovim/pull/16499#discussion_r761323513",
            "id": 761323513,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4tYN_5",
            "original_commit_id": "ab59ab92cc44e75be2876067ec4f6cb19d56a554",
            "original_line": 92,
            "original_position": 92,
            "original_start_line": null,
            "path": "runtime/lua/vim/snippet.lua",
            "position": null,
            "pull_request_review_id": 821822319,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16499",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/761323513/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-02T17:36:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/761323513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16499#discussion_r763893375"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16499"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/763893375"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I can't manage this test...",
            "commit_id": "1373521d14f4daff588ac83893e7f4e5bee0c9f9",
            "created_at": "2021-12-07T11:20:05Z",
            "diff_hunk": "@@ -0,0 +1,106 @@\n+local helpers = require('test.functional.helpers')(after_each)\n+\n+local eq = helpers.eq\n+local clear = helpers.clear\n+local feed = helpers.feed\n+local exec_lua = helpers.exec_lua\n+\n+describe('vim.snippet', function()\n+  before_each(function()\n+    helpers.clear()\n+    exec_lua([[\n+      function getpos()\n+        local cur = vim.api.nvim_win_get_cursor(0)\n+        return { cur[1] - 1, cur[2] }\n+      end\n+    ]])\n+  end)\n+\n+  after_each(function()\n+    helpers.clear()\n+  end)\n+\n+  it('should expand snippet with considering buffer indent setting', function()\n+    local snippet = table.concat({\n+      'class ${1:Class}${2: extends ${3:Parent}} {',\n+      '\\tpublic $1($4) {',\n+      '\\t\\t${5}',\n+      '\\t}',\n+      '}',\n+      ''\n+    }, '\\n')\n+\n+    for _, case in ipairs({\n+      {\n+        base_indent = [[  ]],\n+        indent_setting = [[\n+          vim.o.expandtab = true\n+          vim.o.shiftwidth = 2\n+        ]],\n+        expects = {\n+          '  class Class extends Parent {',\n+          '    public Class() {',\n+          '      ',\n+          '    }',\n+          '  }',\n+          '  ',\n+        }\n+      }, {\n+        base_indent = [[  ]],\n+        indent_setting = [[\n+          vim.o.expandtab = true\n+          vim.o.shiftwidth = 0\n+          vim.o.tabstop = 2\n+        ]],\n+        expects = {\n+          '  class Class extends Parent {',\n+          '    public Class() {',\n+          '      ',\n+          '    }',\n+          '  }',\n+          '  ',\n+        }\n+      }, {\n+        base_indent = [[<Tab>]],\n+        indent_setting = [[\n+          vim.o.expandtab = false\n+        ]],\n+        expects = {\n+          '\\tclass Class extends Parent {',\n+          '\\t\\tpublic Class() {',\n+          '\\t\\t\\t',\n+          '\\t\\t}',\n+          '\\t}',\n+          '\\t',\n+        }\n+      }\n+    }) do\n+      clear()\n+      exec_lua(case.indent_setting)\n+      feed('i' .. case.base_indent)\n+      exec_lua('vim.snippet.expand(...)', snippet)\n+      eq(case.expects, helpers.buf_lines(0))\n+    end\n+  end)\n+\n+  -- This test doesn't work as expected due to feedkeys (maybe).",
            "html_url": "https://github.com/neovim/neovim/pull/16499#discussion_r763893375",
            "id": 763893375,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4tiBZ_",
            "original_commit_id": "11b51f879d1da0d100668725d9df8921b1335022",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": null,
            "path": "test/functional/lua/snippet_spec.lua",
            "position": null,
            "pull_request_review_id": 825135451,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16499",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/763893375/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-07T11:20:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/763893375",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/16499#discussion_r1181526151"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/16499"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1181526151"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "How do I write test for this?\r\n\r\nI can't manage `vim.schedule` and `feedkeys`...",
            "commit_id": "1373521d14f4daff588ac83893e7f4e5bee0c9f9",
            "created_at": "2023-05-01T11:39:25Z",
            "diff_hunk": "@@ -0,0 +1,259 @@\n+local helpers = require('test.functional.helpers')(after_each)\n+\n+local eq = helpers.eq\n+local clear = helpers.clear\n+local feed = helpers.feed\n+local exec_lua = helpers.exec_lua\n+\n+describe('vim.snippet', function()\n+  before_each(function()\n+    clear()\n+    exec_lua([[\n+      vim.snippet.dispose()\n+      vim.api.nvim_buf_set_keymap(0, 'n', '<C-l>', '<Cmd>lua vim.snippet.sync()<CR>', { noremap = true })\n+      vim.api.nvim_buf_set_keymap(0, 'i', '<C-l>', '<Cmd>lua vim.snippet.sync()<CR>', { noremap = true })\n+      vim.api.nvim_buf_set_keymap(0, 's', '<C-l>', '<Cmd>lua vim.snippet.sync()<CR>', { noremap = true })\n+      vim.api.nvim_buf_set_keymap(0, 'i', '<Tab>', '<Cmd>lua vim.snippet.jump(vim.snippet.JumpDirection.Next)<CR>', { noremap = true })\n+      vim.api.nvim_buf_set_keymap(0, 's', '<Tab>', '<Cmd>lua vim.snippet.jump(vim.snippet.JumpDirection.Next)<CR>', { noremap = true })\n+      vim.api.nvim_buf_set_keymap(0, 'i', '<S-Tab>', '<Cmd>lua vim.snippet.jump(vim.snippet.JumpDirection.Prev)<CR>', { noremap = true })\n+      vim.api.nvim_buf_set_keymap(0, 's', '<S-Tab>', '<Cmd>lua vim.snippet.jump(vim.snippet.JumpDirection.Prev)<CR>', { noremap = true })\n+      vim.api.nvim_buf_set_keymap(0, 's', '<BS>', '\"\\\\<BS>\" .. (getcurpos()[2] == col(\"$\") - 1 ? \"a\" : \"i\")', { noremap = true, expr = true })\n+\n+      function get_state()\n+        local m = vim.api.nvim_get_mode().mode\n+        local s = vim.fn.getpos(\"'<\")\n+        local e = vim.fn.getpos(\"'>\")\n+        local c = vim.fn.getpos('.')\n+        return {\n+          m = m,\n+          s = m ~= 's' and ({ c[2] - 1, c[3] - 1 }) or ({ s[2] - 1, s[3] - 1 }),\n+          e = m ~= 's' and ({ c[2] - 1, c[3] - 1 }) or ({ e[2] - 1, e[3] - 1 }),\n+        }\n+      end\n+    ]])\n+  end)\n+  after_each(function()\n+    clear()\n+  end)\n+\n+  it('should expand snippet with considering buffer indent setting', function()\n+    local snippet = table.concat({\n+      'class ${1:ClassName} {',\n+      '\\tpublic $1($2) {',\n+      '\\t\\t${3}',\n+      '\\t}',\n+      '}',\n+      ''\n+    }, '\\n')\n+\n+    for _, case in ipairs({\n+      {\n+        base_indent = [[  ]],\n+        indent_setting = [[\n+          vim.o.expandtab = true\n+          vim.o.shiftwidth = 2\n+        ]],\n+        expects = {\n+          '  class ClassName {',\n+          '    public ClassName() {',\n+          '      ',\n+          '    }',\n+          '  }',\n+          '  ',\n+        }\n+      }, {\n+        base_indent = [[  ]],\n+        indent_setting = [[\n+          vim.o.expandtab = true\n+          vim.o.shiftwidth = 0\n+          vim.o.tabstop = 2\n+        ]],\n+        expects = {\n+          '  class ClassName {',\n+          '    public ClassName() {',\n+          '      ',\n+          '    }',\n+          '  }',\n+          '  ',\n+        }\n+      }, {\n+        base_indent = [[<Tab>]],\n+        indent_setting = [[\n+          vim.o.expandtab = false\n+        ]],\n+        expects = {\n+          '\\tclass ClassName {',\n+          '\\t\\tpublic ClassName() {',\n+          '\\t\\t\\t',\n+          '\\t\\t}',\n+          '\\t}',\n+          '\\t',\n+        }\n+      }\n+    }) do\n+      clear()\n+      exec_lua(case.indent_setting)\n+      feed('i' .. case.base_indent)\n+      exec_lua('vim.snippet.expand(...)', snippet)\n+      eq(case.expects, helpers.buf_lines(0))\n+    end\n+  end)\n+\n+  it('should able to jump to all placeholders', function()\n+    exec_lua('vim.snippet.expand(...)', table.concat({\n+      'class ${1:ClassName} {',\n+      '\\tpublic $1($2) {',\n+      '\\t\\t${3}',\n+      '\\t}',\n+      '}',\n+      ''\n+    }, '\\n'))\n+    local cases = {\n+      { m = 's', s = { 0, 6 }, e = { 0, 14 }, },\n+      { m = 'i', s = { 1, 18 }, e = { 1, 18 }, },\n+      { m = 'i', s = { 2, 2 }, e = { 2, 2 }, },\n+      { m = 'i', s = { 5, 0 }, e = { 5, 0 }, },\n+    }\n+    for i = 1, #cases do\n+      eq(cases[i], exec_lua([[return get_state()]]))\n+      eq(i ~= #cases, exec_lua([[return vim.snippet.jumpable(vim.snippet.JumpDirection.Next)]]))\n+      feed('<Tab>')\n+    end\n+    eq(cases[#cases], exec_lua([[return get_state()]]))\n+    for i = #cases, 1, -1 do\n+      eq(cases[i], exec_lua([[return get_state()]]))\n+      eq(i ~= 1, exec_lua([[return vim.snippet.jumpable(vim.snippet.JumpDirection.Prev)]]))\n+      feed('<S-Tab>')\n+    end\n+    eq(cases[1], exec_lua([[return get_state()]]))\n+  end)\n+\n+  it('should sync same tabstop marks', function()\n+    exec_lua('vim.snippet.expand(...)', table.concat({\n+      'class ${1:ClassName} {',\n+      '\\tpublic $1($2) {',\n+      '\\t\\t${3}',\n+      '\\t}',\n+      '}',\n+      ''\n+    }, '\\n'))\n+    feed('ModifiedClassName<C-l>')\n+    eq({\n+      'class ModifiedClassName {',\n+      '\\tpublic ModifiedClassName() {',\n+      '\\t\\t',\n+      '\\t}',\n+      '}',\n+      '',\n+    }, helpers.buf_lines(0))\n+  end)\n+\n+  -- it('should insert selected choice', function()\n+  --   exec_lua('vim.snippet.expand(...)', table.concat({\n+  --     'console.${1|log,info,warn,error|}($2);',\n+  --   }, '\\n'))\n+  --   feed('3<CR>')\n+  --   eq({\n+  --     'console.warn();',\n+  --   }, helpers.buf_lines(0))\n+  -- end)",
            "html_url": "https://github.com/neovim/neovim/pull/16499#discussion_r1181526151",
            "id": 1181526151,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5GbKiH",
            "original_commit_id": "2c7ce29f4b207e41e9d866b75494b28e6ace1b29",
            "original_line": 160,
            "original_position": 159,
            "original_start_line": null,
            "path": "test/functional/lua/snippet_spec.lua",
            "position": null,
            "pull_request_review_id": 1407533177,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/16499",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1181526151/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-05-01T11:39:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1181526151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "the `adjacent placeholder` is difficult to support via extmarks API, I guess.\r\n\r\nI don't think the core needs to support such difficult cases. How about that?",
            "created_at": "2021-12-02T17:39:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-984849801",
            "id": 984849801,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM46s52J",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/984849801/reactions"
            },
            "updated_at": "2021-12-02T17:39:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/984849801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hm... the gravity management is bit hard. I'll investigate it...",
            "created_at": "2021-12-05T15:03:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-986246057",
            "id": 986246057,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM46yOup",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/986246057/reactions"
            },
            "updated_at": "2021-12-05T15:03:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/986246057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hmm ... undo complex extmarks don't restore state correctly, I guess",
            "created_at": "2021-12-06T15:47:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-986900370",
            "id": 986900370,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM460ueS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/986900370/reactions"
            },
            "updated_at": "2021-12-06T15:47:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/986900370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The following features can be implemented but not implemented for now. How far should it be implemented?\r\n\r\n### Nested snippet expansion\r\n\r\nThis feature allows expanding the snippet even if the user has already in another snippet.\r\nTypically, the two snippets will be merged as one snippet session and the user can jump to all merged placeholders.\r\n\r\n### Squash nested placeholders\r\n\r\nThis feature is only for nested placeholders. For example, the placeholder of the `extends Parent` can be removed with `<BS>`. In this case, another snippet engine (e.g. vim-vsnip) will remove the `Parent` placeholders.\r\n\r\n```\r\nclass ${1:Class}${2: extends ${3:Parent}} {\r\n  constructor($4) {\r\n    $0\r\n  }\r\n}\r\n```\r\n",
            "created_at": "2021-12-12T07:31:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-991848487",
            "id": 991848487,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM47Hmgn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/991848487/reactions"
            },
            "updated_at": "2021-12-12T07:37:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/991848487",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'd say the _minimal_ snippet API we should support is what is required for LSP completion snippets to work -- and no more. So if these features are not used by the LSP spec, we should not implement them.\r\n\r\nOf course, a \"nested\" situation can also occur if an LSP snippet is expanded inside a user snippet -- but then the user must already be using a full snippet plugin, which should also take care of LSP snippets and so this is the full plugin's problem. (We should not support mixing different snippet engines!) ",
            "created_at": "2021-12-12T10:16:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-991870582",
            "id": 991870582,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM47Hr52",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/991870582/reactions"
            },
            "updated_at": "2021-12-12T10:16:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/991870582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thank you for your response.\r\nOK. I'll make the implementation more simple.",
            "created_at": "2021-12-15T07:36:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-994429297",
            "id": 994429297,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM47Rclx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/994429297/reactions"
            },
            "updated_at": "2021-12-15T07:36:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/994429297",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Oh, I'm not saying you have to remove stuff! Just don't mind about adding such complicated things that are not strictly necessary.",
            "created_at": "2021-12-15T07:36:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-994429826",
            "id": 994429826,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM47RcuC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/994429826/reactions"
            },
            "updated_at": "2021-12-15T07:37:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/994429826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes. I think the required features are\r\n\r\n1. undo management\r\n2. Support editing non-origin mark directly\r\n\r\nCurrently, my implementation cares about the adjacent placeholders. I'll remove it for now. (If we re-consider it's required, we can implement it later)",
            "created_at": "2021-12-15T07:40:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-994435639",
            "id": 994435639,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM47ReI3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/994435639/reactions"
            },
            "updated_at": "2021-12-15T07:40:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/994435639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@hrsh7th do you mind me asking what are your current plans for this?",
            "created_at": "2023-03-24T13:39:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-1482814548",
            "id": 1482814548,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM5YYfRU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1482814548/reactions"
            },
            "updated_at": "2023-03-24T13:39:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1482814548",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'd like to continue implementing this, but I'm too busy to do it at the moment.\r\n\r\nI'm also planning on reworking the completion plugin, so I'm not sure how to prioritize this PR.\r\n\r\n",
            "created_at": "2023-03-24T14:01:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-1482852331",
            "id": 1482852331,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM5YYofr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1482852331/reactions"
            },
            "updated_at": "2023-03-24T14:01:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1482852331",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Everyone uses LuaSnip, so it was a little less of a priority.\r\nI think I'll raise the priority again and think about it.\r\n",
            "created_at": "2023-03-24T14:10:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-1482867116",
            "id": 1482867116,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM5YYsGs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 4,
                "hooray": 3,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1482867116/reactions"
            },
            "updated_at": "2023-03-24T14:10:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1482867116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Everyone uses LuaSnip, so it was a little less of a priority.\r\n> I think I'll raise the priority again and think about it.\r\n\r\nJust to be clear: it is still a very high priority for Neovim to be able to expand LSP snippets (e.g., in omni-completion, or using `nvim-cmp`) without an external plugin. We consider this a requirement for claiming to fully support the LSP specification, which is an explicit goal.\r\n\r\n(We also hope to be able to expose these methods to users wanting to write their own full-featured snippet plugin that can work with a personal snippet library and manual expansion, but this is secondary.)",
            "created_at": "2023-03-24T14:24:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-1482890120",
            "id": 1482890120,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM5YYxuI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 8,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1482890120/reactions"
            },
            "updated_at": "2023-03-24T14:24:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1482890120",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "This functionality would be very useful for me.\r\n\r\nI'm writing a project in Dart / Flutter — a mobile app — which requires sticking together a lot of \"widgets\" that each have a million props to configure.\r\n\r\nThe omnifunc completes props so I don't have to remember exactly what attributes are owned by whichever widget. However, _built into_ the ordinary completion, for ordinary tokens, in the Dart LSP is snippet functionality.\r\n\r\nA regular completion on \"co\" inside a Container object would produce \"color: ,\" — adding a colon, a space, and appending a trailing comma. The idea is for the cursor to be placed before the comma so you can just insert whatever object is required by the class property (attribute), and it's all syntactically correct. However, because the Omnifunc doesn't have any support for snippet-like behaviour, it ignores the added information from the language server, and just places the cursor after the comma. Meaning I have to either delete the comma and re-enter it later, or go into normal mode to backtrack.\r\n\r\nLikewise, trying to complete certain class names auto-fills all their properties, but you have no way to tab between them and edit them, because no snippets. This is all in the base LSP completions and no snippet plugin is going to be able to override that.\r\n\r\nNot complaining, just throwing in my 2 cents about why this would be extremely, extremely welcome for certain users! How's the PR, shall I just merge it in my local copy and see how it goes?",
            "created_at": "2023-04-26T21:39:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-1524078036",
            "id": 1524078036,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM5a15XU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1524078036/reactions"
            },
            "updated_at": "2023-04-27T07:46:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1524078036",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/126087510?v=4",
                "events_url": "https://api.github.com/users/textzenith/events{/privacy}",
                "followers_url": "https://api.github.com/users/textzenith/followers",
                "following_url": "https://api.github.com/users/textzenith/following{/other_user}",
                "gists_url": "https://api.github.com/users/textzenith/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/textzenith",
                "id": 126087510,
                "login": "textzenith",
                "node_id": "U_kgDOB4PxVg",
                "organizations_url": "https://api.github.com/users/textzenith/orgs",
                "received_events_url": "https://api.github.com/users/textzenith/received_events",
                "repos_url": "https://api.github.com/users/textzenith/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/textzenith/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/textzenith/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/textzenith"
            }
        },
        {
            "author_association": "NONE",
            "body": "any news on this pr? won't be part of 0.10 milestone?",
            "created_at": "2023-09-10T15:21:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/16499#issuecomment-1712841789",
            "id": 1712841789,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
            "node_id": "IC_kwDOAPphoM5mF-Q9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712841789/reactions"
            },
            "updated_at": "2023-09-10T15:25:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712841789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/27911493?v=4",
                "events_url": "https://api.github.com/users/mortezadadgar/events{/privacy}",
                "followers_url": "https://api.github.com/users/mortezadadgar/followers",
                "following_url": "https://api.github.com/users/mortezadadgar/following{/other_user}",
                "gists_url": "https://api.github.com/users/mortezadadgar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mortezadadgar",
                "id": 27911493,
                "login": "mortezadadgar",
                "node_id": "MDQ6VXNlcjI3OTExNDkz",
                "organizations_url": "https://api.github.com/users/mortezadadgar/orgs",
                "received_events_url": "https://api.github.com/users/mortezadadgar/received_events",
                "repos_url": "https://api.github.com/users/mortezadadgar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mortezadadgar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mortezadadgar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mortezadadgar"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/16499/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/16499/commits",
    "created_at": "2021-12-02T17:09:35Z",
    "diff_url": "https://github.com/neovim/neovim/pull/16499.diff",
    "draft": true,
    "head": {
        "label": "hrsh7th:minimal-snippet",
        "ref": "minimal-snippet",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/hrsh7th/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/hrsh7th/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/hrsh7th/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/hrsh7th/neovim/branches{/branch}",
            "clone_url": "https://github.com/hrsh7th/neovim.git",
            "collaborators_url": "https://api.github.com/repos/hrsh7th/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/hrsh7th/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/hrsh7th/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/hrsh7th/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/hrsh7th/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/hrsh7th/neovim/contributors",
            "created_at": "2020-02-26T10:46:05Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/hrsh7th/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/hrsh7th/neovim/downloads",
            "events_url": "https://api.github.com/repos/hrsh7th/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/hrsh7th/neovim/forks",
            "full_name": "hrsh7th/neovim",
            "git_commits_url": "https://api.github.com/repos/hrsh7th/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/hrsh7th/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/hrsh7th/neovim/git/tags{/sha}",
            "git_url": "git://github.com/hrsh7th/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/hrsh7th/neovim/hooks",
            "html_url": "https://github.com/hrsh7th/neovim",
            "id": 243238674,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/hrsh7th/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/hrsh7th/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/hrsh7th/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/hrsh7th/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/hrsh7th/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/hrsh7th/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/hrsh7th/neovim/merges",
            "milestones_url": "https://api.github.com/repos/hrsh7th/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNDMyMzg2NzQ=",
            "notifications_url": "https://api.github.com/repos/hrsh7th/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/hrsh7th/neovim/pulls{/number}",
            "pushed_at": "2023-05-15T04:16:29Z",
            "releases_url": "https://api.github.com/repos/hrsh7th/neovim/releases{/id}",
            "size": 242144,
            "ssh_url": "git@github.com:hrsh7th/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/hrsh7th/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/hrsh7th/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/hrsh7th/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/hrsh7th/neovim/subscription",
            "svn_url": "https://github.com/hrsh7th/neovim",
            "tags_url": "https://api.github.com/repos/hrsh7th/neovim/tags",
            "teams_url": "https://api.github.com/repos/hrsh7th/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/hrsh7th/neovim/git/trees{/sha}",
            "updated_at": "2020-02-26T10:46:08Z",
            "url": "https://api.github.com/repos/hrsh7th/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "1373521d14f4daff588ac83893e7f4e5bee0c9f9",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
            "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
            "followers_url": "https://api.github.com/users/hrsh7th/followers",
            "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
            "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/hrsh7th",
            "id": 629908,
            "login": "hrsh7th",
            "node_id": "MDQ6VXNlcjYyOTkwOA==",
            "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
            "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
            "repos_url": "https://api.github.com/users/hrsh7th/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/hrsh7th"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/16499",
    "id": 793905891,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16499",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f7984c8a78d5bcda0c6a55e65c178489fc2b88e6",
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 125,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 143,
        "state": "open",
        "title": "0.10",
        "updated_at": "2023-09-11T00:39:51Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "PR_kwDOAPphoM4vUgrj",
    "number": 16499,
    "patch_url": "https://github.com/neovim/neovim/pull/16499.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/16499/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/1373521d14f4daff588ac83893e7f4e5bee0c9f9",
    "title": "feat(snippet): Minimal snippet API",
    "updated_at": "2023-09-10T15:25:06Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/16499",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
        "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
        "followers_url": "https://api.github.com/users/hrsh7th/followers",
        "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
        "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/hrsh7th",
        "id": 629908,
        "login": "hrsh7th",
        "node_id": "MDQ6VXNlcjYyOTkwOA==",
        "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
        "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
        "repos_url": "https://api.github.com/users/hrsh7th/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/hrsh7th"
    }
}