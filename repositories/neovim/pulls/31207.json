{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31207/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31207/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31207"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31207"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31207/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/72dd0ca934312a4271cb9ca43b44c26dccc3a744"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5704,
            "forks_count": 5704,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1834,
            "open_issues_count": 1834,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-11-18T23:26:37Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 295086,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 83399,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-11-19T02:35:58Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 83399,
            "watchers_count": 83399,
            "web_commit_signoff_required": false
        },
        "sha": "989a37a594649528f28432388c0e7e28e8be2753",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Deprecated:\n- `client.request()` -> `client:request()`\n- `client.request_sync()` -> `client:request_sync()`\n- `client.notify()` -> `client:notify()`\n- `client.cancel_request()` -> `client:cancel_request()`\n- `client.stop()` -> `client:stop()`\n- `client.is_stopped()` `client:is_stopped()`\n- `client.supports_method()` -> `client:supports_method()`\n- `client.on_attach()` -> `client:on_attach()`\n\nFixed docgen to link class fields to the full function doc.\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1843155406"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843155406"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        (`boolean`) status indicates whether the request was successful. If it\r\n```\r\n```suggestion\r\n        (`boolean`) status inidcates whether the request was successful. If it\r\n```",
            "commit_id": "72dd0ca934312a4271cb9ca43b44c26dccc3a744",
            "created_at": "2024-11-15T03:56:03Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1843155406",
            "id": 1843155406,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5t3FHO",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1183,
            "original_position": 134,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2437605176,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843155406/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-15T04:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843155406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1843156199"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156199"
                }
            },
            "author_association": "MEMBER",
            "body": "Out of curiosity, is a zero-timeout allowed?",
            "commit_id": "72dd0ca934312a4271cb9ca43b44c26dccc3a744",
            "created_at": "2024-11-15T03:57:41Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1843156199",
            "id": 1843156199,
            "line": 1200,
            "node_id": "PRRC_kwDOAPphoM5t3FTn",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1200,
            "original_position": 151,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 151,
            "pull_request_review_id": 2437605176,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156199/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-15T04:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1843156694"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156694"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: For consistency I think it would be nice to have a separate `vim.lsp.ClientSupportsMethodOpts` type for this.",
            "commit_id": "72dd0ca934312a4271cb9ca43b44c26dccc3a744",
            "created_at": "2024-11-15T03:58:49Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a\n+                      result. Defaults to 1000\n+      • {bufnr}       (`integer`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`{err: lsp.ResponseError?, result:any}?`) `result` and `err` from the\n+        |lsp-handler|. `nil` is the request was unsuccessful\n+        (`string?`) err On timeout, cancel or error, where `err` is a string\n+        describing the failure reason.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_sync()|\n+\n+Client:stop({force})                                           *Client:stop()*\n+    Stops a client, optionally with force.\n+\n+    By default, it will just request the server to shutdown without force. If\n+    you request to stop a client which has previously been requested to\n+    shutdown, it will automatically escalate and force shutdown.\n+\n+    Parameters: ~\n+      • {force}  (`boolean?`)\n+\n+Client:supports_method({method}, {opts})            *Client:supports_method()*\n+    Checks if a client supports a given method. Always returns true for\n+    unknown off-spec methods.\n+\n+    Note: Some language server capabilities can be file specific.\n+\n+    Parameters: ~\n+      • {method}  (`string`)\n+      • {opts}    (`{bufnr: integer?}?`)",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1843156694",
            "id": 1843156694,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5t3FbW",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1231,
            "original_position": 182,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2437605176,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156694/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-15T04:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1843158168"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843158168"
                }
            },
            "author_association": "MEMBER",
            "body": "I would also mention that it defaults to the current buffer.",
            "commit_id": "72dd0ca934312a4271cb9ca43b44c26dccc3a744",
            "created_at": "2024-11-15T04:01:41Z",
            "diff_hunk": "@@ -650,15 +614,14 @@ end\n --- @param method string LSP method name.\n --- @param params? table LSP request params.\n --- @param handler? lsp.Handler Response |lsp-handler| for this method.\n---- @param bufnr integer Buffer handle (0 for current).\n---- @return boolean status, integer? request_id {status} is a bool indicating\n---- whether the request was successful. If it is `false`, then it will\n---- always be `false` (the client has shutdown). If it was\n---- successful, then it will return {request_id} as the\n---- second result. You can use this with `client.cancel_request(request_id)`\n+--- @param bufnr? integer Buffer handle (0 for current).",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1843158168",
            "id": 1843158168,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5t3FyY",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 638,
            "original_position": 190,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": null,
            "pull_request_review_id": 2437605176,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843158168/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-15T04:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843158168",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1846984573"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846984573"
                }
            },
            "author_association": "MEMBER",
            "body": "Would have to check what `vim.wait` does.",
            "commit_id": "72dd0ca934312a4271cb9ca43b44c26dccc3a744",
            "created_at": "2024-11-18T17:25:13Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1846984573",
            "id": 1846984573,
            "in_reply_to_id": 1843156199,
            "line": 1200,
            "node_id": "PRRC_kwDOAPphoM5uFr99",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1200,
            "original_position": 151,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 151,
            "pull_request_review_id": 2443265856,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846984573/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-18T17:25:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846984573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1846990453"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846990453"
                }
            },
            "author_association": "MEMBER",
            "body": "Turned this into a `bufnr` param instead. Can always be reverted to opts if a new option is needed.",
            "commit_id": "72dd0ca934312a4271cb9ca43b44c26dccc3a744",
            "created_at": "2024-11-18T17:29:28Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a\n+                      result. Defaults to 1000\n+      • {bufnr}       (`integer`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`{err: lsp.ResponseError?, result:any}?`) `result` and `err` from the\n+        |lsp-handler|. `nil` is the request was unsuccessful\n+        (`string?`) err On timeout, cancel or error, where `err` is a string\n+        describing the failure reason.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_sync()|\n+\n+Client:stop({force})                                           *Client:stop()*\n+    Stops a client, optionally with force.\n+\n+    By default, it will just request the server to shutdown without force. If\n+    you request to stop a client which has previously been requested to\n+    shutdown, it will automatically escalate and force shutdown.\n+\n+    Parameters: ~\n+      • {force}  (`boolean?`)\n+\n+Client:supports_method({method}, {opts})            *Client:supports_method()*\n+    Checks if a client supports a given method. Always returns true for\n+    unknown off-spec methods.\n+\n+    Note: Some language server capabilities can be file specific.\n+\n+    Parameters: ~\n+      • {method}  (`string`)\n+      • {opts}    (`{bufnr: integer?}?`)",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1846990453",
            "id": 1846990453,
            "in_reply_to_id": 1843156694,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5uFtZ1",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1231,
            "original_position": 182,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2443274709,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846990453/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-18T17:29:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846990453",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31207/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31207/commits",
    "created_at": "2024-11-14T11:56:17Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31207.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:feat/lspmethoddep",
        "ref": "feat/lspmethoddep",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2024-11-18T17:35:27Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 288868,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2024-02-06T12:43:15Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "72dd0ca934312a4271cb9ca43b44c26dccc3a744",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31207",
    "id": 2179552134,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31207",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "802a1ef1eb2f9813a3b3d8775040eb042e236721",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6B6VOG",
    "number": 31207,
    "patch_url": "https://github.com/neovim/neovim/pull/31207.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
            "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
            "followers_url": "https://api.github.com/users/mfussenegger/followers",
            "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
            "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mfussenegger",
            "id": 38700,
            "login": "mfussenegger",
            "node_id": "MDQ6VXNlcjM4NzAw",
            "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
            "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
            "repos_url": "https://api.github.com/users/mfussenegger/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mfussenegger",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31207/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/72dd0ca934312a4271cb9ca43b44c26dccc3a744",
    "title": "feat(lsp): deprecate non-method client functions",
    "updated_at": "2024-11-18T17:35:29Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    }
}