{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27386/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27386/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/27386"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27386"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27386/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27386"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/20c3e74296684428285145435d34860fdc12cb3d"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5201,
            "forks_count": 5201,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1728,
            "open_issues_count": 1728,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-02-12T23:38:13Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 252813,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 73720,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-02-13T01:34:21Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 73720,
            "watchers_count": 73720,
            "web_commit_signoff_required": false
        },
        "sha": "02cc84b4d9d8efdd27c3f60fef11e02297051fab",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": null,
    "closed_at": "2024-02-08T11:11:46Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27386#discussion_r1482695654"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27386"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482695654"
                }
            },
            "author_association": "MEMBER",
            "body": "Just fyi as I'm not sure if it has an impact in practice: The idea behind the guards is to avoid the allocations - e.g. in this case creating the table.\r\n\r\nI know from looking at java profiles that it can be a unnecessary source of allocations. Not sure how that translates to Lua and maybe good enough to limit it to inner loops.",
            "commit_id": "20c3e74296684428285145435d34860fdc12cb3d",
            "created_at": "2024-02-08T09:51:47Z",
            "diff_hunk": "@@ -1504,9 +1490,7 @@ end\n --- - findstart=0: column where the completion starts, or -2 or -3\n --- - findstart=1: list of matches (actually just calls |complete()|)\n function lsp.omnifunc(findstart, base)\n-  if log.debug() then\n-    log.debug('omnifunc.findstart', { findstart = findstart, base = base })\n-  end\n+  log.debug('omnifunc.findstart', { findstart = findstart, base = base })",
            "html_url": "https://github.com/neovim/neovim/pull/27386#discussion_r1482695654",
            "id": 1482695654,
            "line": 1493,
            "node_id": "PRRC_kwDOAPphoM5YYCPm",
            "original_commit_id": "3839543e71bc81da95f8dcd1e826a49b3a52d2cc",
            "original_line": 1493,
            "original_position": 74,
            "original_start_line": 1507,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 74,
            "pull_request_review_id": 1869701535,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27386",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482695654/reactions"
            },
            "side": "RIGHT",
            "start_line": 1507,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2024-02-08T09:56:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482695654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27386#discussion_r1482699532"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27386"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482699532"
                }
            },
            "author_association": "MEMBER",
            "body": "It's intentionally kept private and not documented. \r\n\r\nSee also https://github.com/neovim/neovim/pull/12150\r\nI still wish neovim had a logging module for use in plugins, but that shouldn't be under the lsp namespace.",
            "commit_id": "20c3e74296684428285145435d34860fdc12cb3d",
            "created_at": "2024-02-08T09:53:54Z",
            "diff_hunk": "@@ -12,130 +12,124 @@ log.levels = vim.deepcopy(vim.log.levels)\n \n -- Default log level is warn.\n local current_log_level = log.levels.WARN\n+\n local log_date_format = '%F %H:%M:%S'\n-local format_func = function(arg)\n+\n+local function format_func(arg)\n   return vim.inspect(arg, { newline = '' })\n end\n \n-do\n-  local function notify(msg, level)\n-    if vim.in_fast_event() then\n-      vim.schedule(function()\n-        vim.notify(msg, level)\n-      end)\n-    else\n+local function notify(msg, level)\n+  if vim.in_fast_event() then\n+    vim.schedule(function()\n       vim.notify(msg, level)\n-    end\n+    end)\n+  else\n+    vim.notify(msg, level)\n   end\n+end\n+\n+local logfilename = vim.fs.joinpath(vim.fn.stdpath('log'), 'lsp.log')\n+\n+-- TODO: Ideally the directory should be created in open_logfile(), right\n+-- before opening the log file, but open_logfile() can be called from libuv\n+-- callbacks, where using fn.mkdir() is not allowed.\n+vim.fn.mkdir(vim.fn.stdpath('log'), 'p')\n+\n+--- Returns the log filename.\n+---@return string log filename\n+function log.get_filename()\n+  return logfilename\n+end\n+\n+--- @type file*?, string?\n+local logfile, openerr\n \n-  local path_sep = vim.uv.os_uname().version:match('Windows') and '\\\\' or '/'\n-  local function path_join(...)\n-    return table.concat(vim.tbl_flatten({ ... }), path_sep)\n+--- Opens log file. Returns true if file is open, false on error\n+local function open_logfile()\n+  -- Try to open file only once\n+  if logfile then\n+    return true\n+  end\n+  if openerr then\n+    return false\n   end\n-  local logfilename = path_join(vim.fn.stdpath('log'), 'lsp.log')\n \n-  -- TODO: Ideally the directory should be created in open_logfile(), right\n-  -- before opening the log file, but open_logfile() can be called from libuv\n-  -- callbacks, where using fn.mkdir() is not allowed.\n-  vim.fn.mkdir(vim.fn.stdpath('log'), 'p')\n+  logfile, openerr = io.open(logfilename, 'a+')\n+  if not logfile then\n+    local err_msg = string.format('Failed to open LSP client log file: %s', openerr)\n+    notify(err_msg, vim.log.levels.ERROR)\n+    return false\n+  end\n \n-  --- Returns the log filename.\n-  ---@return string log filename\n-  function log.get_filename()\n-    return logfilename\n+  local log_info = vim.uv.fs_stat(logfilename)\n+  if log_info and log_info.size > 1e9 then\n+    local warn_msg = string.format(\n+      'LSP client log is large (%d MB): %s',\n+      log_info.size / (1000 * 1000),\n+      logfilename\n+    )\n+    notify(warn_msg)\n   end\n \n-  local logfile, openerr\n-  --- Opens log file. Returns true if file is open, false on error\n-  local function open_logfile()\n-    -- Try to open file only once\n-    if logfile then\n-      return true\n-    end\n-    if openerr then\n-      return false\n-    end\n+  -- Start message for logging\n+  logfile:write(string.format('[START][%s] LSP logging initiated\\n', os.date(log_date_format)))\n+  return true\n+end\n+\n+for level, levelnr in pairs(log.levels) do\n+  -- Also export the log level on the root object.\n+  log[level] = levelnr\n+end\n \n-    logfile, openerr = io.open(logfilename, 'a+')\n-    if not logfile then\n-      local err_msg = string.format('Failed to open LSP client log file: %s', openerr)\n-      notify(err_msg, vim.log.levels.ERROR)\n+vim.tbl_add_reverse_lookup(log.levels)\n+\n+--- @param level string\n+--- @param levelnr integer\n+--- @return fun(...:any): boolean?\n+local function create_logger(level, levelnr)\n+  return function(...)\n+    if levelnr < current_log_level then\n       return false\n     end\n-\n-    local log_info = vim.uv.fs_stat(logfilename)\n-    if log_info and log_info.size > 1e9 then\n-      local warn_msg = string.format(\n-        'LSP client log is large (%d MB): %s',\n-        log_info.size / (1000 * 1000),\n-        logfilename\n-      )\n-      notify(warn_msg)\n+    local argc = select('#', ...)\n+    if argc == 0 then\n+      return true\n     end\n-\n-    -- Start message for logging\n-    logfile:write(string.format('[START][%s] LSP logging initiated\\n', os.date(log_date_format)))\n-    return true\n-  end\n-\n-  for level, levelnr in pairs(log.levels) do\n-    -- Also export the log level on the root object.\n-    log[level] = levelnr\n-    -- FIXME: DOC\n-    -- Should be exposed in the vim docs.\n-    --\n-    -- Set the lowercase name as the main use function.\n-    -- If called without arguments, it will check whether the log level is\n-    -- greater than or equal to this one. When called with arguments, it will\n-    -- log at that level (if applicable, it is checked either way).\n-    --\n-    -- Recommended usage:\n-    -- ```\n-    -- if log.warn() then\n-    --   log.warn(\"123\")\n-    -- end\n-    -- ```\n-    --\n-    -- This way you can avoid string allocations if the log level isn't high enough.\n-    if level ~= 'OFF' then\n-      log[level:lower()] = function(...)\n-        local argc = select('#', ...)\n-        if levelnr < current_log_level then\n-          return false\n-        end\n-        if argc == 0 then\n-          return true\n-        end\n-        if not open_logfile() then\n-          return false\n-        end\n-        local info = debug.getinfo(2, 'Sl')\n-        local header = string.format(\n-          '[%s][%s] ...%s:%s',\n-          level,\n-          os.date(log_date_format),\n-          string.sub(info.short_src, #info.short_src - 15),\n-          info.currentline\n-        )\n-        local parts = { header }\n-        for i = 1, argc do\n-          local arg = select(i, ...)\n-          if arg == nil then\n-            table.insert(parts, 'nil')\n-          else\n-            table.insert(parts, format_func(arg))\n-          end\n-        end\n-        logfile:write(table.concat(parts, '\\t'), '\\n')\n-        logfile:flush()\n-      end\n+    if not open_logfile() then\n+      return false\n+    end\n+    local info = debug.getinfo(2, 'Sl')\n+    local header = string.format(\n+      '[%s][%s] ...%s:%s',\n+      level,\n+      os.date(log_date_format),\n+      info.short_src:sub(-16),\n+      info.currentline\n+    )\n+    local parts = { header }\n+    for i = 1, argc do\n+      local arg = select(i, ...)\n+      table.insert(parts, arg == nil and 'nil' or format_func(arg))\n     end\n+    assert(logfile)\n+    logfile:write(table.concat(parts, '\\t'), '\\n')\n+    logfile:flush()\n   end\n end\n \n--- This is put here on purpose after the loop above so that it doesn't\n--- interfere with iterating the levels\n-vim.tbl_add_reverse_lookup(log.levels)\n+-- FIXME: DOC\n+-- Should be exposed in the vim docs.",
            "html_url": "https://github.com/neovim/neovim/pull/27386#discussion_r1482699532",
            "id": 1482699532,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YYDMM",
            "original_commit_id": "3839543e71bc81da95f8dcd1e826a49b3a52d2cc",
            "original_line": 122,
            "original_position": 215,
            "original_start_line": 121,
            "path": "runtime/lua/vim/lsp/log.lua",
            "position": null,
            "pull_request_review_id": 1869701535,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27386",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482699532/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-08T09:54:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482699532",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27386#discussion_r1482703645"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27386"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482703645"
                }
            },
            "author_association": "MEMBER",
            "body": "Agreed; maybe after 0.10 we can sit down and discuss what we would like to offer plugins as a \"standard library\" and collect this in a tracking issue.",
            "commit_id": "20c3e74296684428285145435d34860fdc12cb3d",
            "created_at": "2024-02-08T09:57:06Z",
            "diff_hunk": "@@ -12,130 +12,124 @@ log.levels = vim.deepcopy(vim.log.levels)\n \n -- Default log level is warn.\n local current_log_level = log.levels.WARN\n+\n local log_date_format = '%F %H:%M:%S'\n-local format_func = function(arg)\n+\n+local function format_func(arg)\n   return vim.inspect(arg, { newline = '' })\n end\n \n-do\n-  local function notify(msg, level)\n-    if vim.in_fast_event() then\n-      vim.schedule(function()\n-        vim.notify(msg, level)\n-      end)\n-    else\n+local function notify(msg, level)\n+  if vim.in_fast_event() then\n+    vim.schedule(function()\n       vim.notify(msg, level)\n-    end\n+    end)\n+  else\n+    vim.notify(msg, level)\n   end\n+end\n+\n+local logfilename = vim.fs.joinpath(vim.fn.stdpath('log'), 'lsp.log')\n+\n+-- TODO: Ideally the directory should be created in open_logfile(), right\n+-- before opening the log file, but open_logfile() can be called from libuv\n+-- callbacks, where using fn.mkdir() is not allowed.\n+vim.fn.mkdir(vim.fn.stdpath('log'), 'p')\n+\n+--- Returns the log filename.\n+---@return string log filename\n+function log.get_filename()\n+  return logfilename\n+end\n+\n+--- @type file*?, string?\n+local logfile, openerr\n \n-  local path_sep = vim.uv.os_uname().version:match('Windows') and '\\\\' or '/'\n-  local function path_join(...)\n-    return table.concat(vim.tbl_flatten({ ... }), path_sep)\n+--- Opens log file. Returns true if file is open, false on error\n+local function open_logfile()\n+  -- Try to open file only once\n+  if logfile then\n+    return true\n+  end\n+  if openerr then\n+    return false\n   end\n-  local logfilename = path_join(vim.fn.stdpath('log'), 'lsp.log')\n \n-  -- TODO: Ideally the directory should be created in open_logfile(), right\n-  -- before opening the log file, but open_logfile() can be called from libuv\n-  -- callbacks, where using fn.mkdir() is not allowed.\n-  vim.fn.mkdir(vim.fn.stdpath('log'), 'p')\n+  logfile, openerr = io.open(logfilename, 'a+')\n+  if not logfile then\n+    local err_msg = string.format('Failed to open LSP client log file: %s', openerr)\n+    notify(err_msg, vim.log.levels.ERROR)\n+    return false\n+  end\n \n-  --- Returns the log filename.\n-  ---@return string log filename\n-  function log.get_filename()\n-    return logfilename\n+  local log_info = vim.uv.fs_stat(logfilename)\n+  if log_info and log_info.size > 1e9 then\n+    local warn_msg = string.format(\n+      'LSP client log is large (%d MB): %s',\n+      log_info.size / (1000 * 1000),\n+      logfilename\n+    )\n+    notify(warn_msg)\n   end\n \n-  local logfile, openerr\n-  --- Opens log file. Returns true if file is open, false on error\n-  local function open_logfile()\n-    -- Try to open file only once\n-    if logfile then\n-      return true\n-    end\n-    if openerr then\n-      return false\n-    end\n+  -- Start message for logging\n+  logfile:write(string.format('[START][%s] LSP logging initiated\\n', os.date(log_date_format)))\n+  return true\n+end\n+\n+for level, levelnr in pairs(log.levels) do\n+  -- Also export the log level on the root object.\n+  log[level] = levelnr\n+end\n \n-    logfile, openerr = io.open(logfilename, 'a+')\n-    if not logfile then\n-      local err_msg = string.format('Failed to open LSP client log file: %s', openerr)\n-      notify(err_msg, vim.log.levels.ERROR)\n+vim.tbl_add_reverse_lookup(log.levels)\n+\n+--- @param level string\n+--- @param levelnr integer\n+--- @return fun(...:any): boolean?\n+local function create_logger(level, levelnr)\n+  return function(...)\n+    if levelnr < current_log_level then\n       return false\n     end\n-\n-    local log_info = vim.uv.fs_stat(logfilename)\n-    if log_info and log_info.size > 1e9 then\n-      local warn_msg = string.format(\n-        'LSP client log is large (%d MB): %s',\n-        log_info.size / (1000 * 1000),\n-        logfilename\n-      )\n-      notify(warn_msg)\n+    local argc = select('#', ...)\n+    if argc == 0 then\n+      return true\n     end\n-\n-    -- Start message for logging\n-    logfile:write(string.format('[START][%s] LSP logging initiated\\n', os.date(log_date_format)))\n-    return true\n-  end\n-\n-  for level, levelnr in pairs(log.levels) do\n-    -- Also export the log level on the root object.\n-    log[level] = levelnr\n-    -- FIXME: DOC\n-    -- Should be exposed in the vim docs.\n-    --\n-    -- Set the lowercase name as the main use function.\n-    -- If called without arguments, it will check whether the log level is\n-    -- greater than or equal to this one. When called with arguments, it will\n-    -- log at that level (if applicable, it is checked either way).\n-    --\n-    -- Recommended usage:\n-    -- ```\n-    -- if log.warn() then\n-    --   log.warn(\"123\")\n-    -- end\n-    -- ```\n-    --\n-    -- This way you can avoid string allocations if the log level isn't high enough.\n-    if level ~= 'OFF' then\n-      log[level:lower()] = function(...)\n-        local argc = select('#', ...)\n-        if levelnr < current_log_level then\n-          return false\n-        end\n-        if argc == 0 then\n-          return true\n-        end\n-        if not open_logfile() then\n-          return false\n-        end\n-        local info = debug.getinfo(2, 'Sl')\n-        local header = string.format(\n-          '[%s][%s] ...%s:%s',\n-          level,\n-          os.date(log_date_format),\n-          string.sub(info.short_src, #info.short_src - 15),\n-          info.currentline\n-        )\n-        local parts = { header }\n-        for i = 1, argc do\n-          local arg = select(i, ...)\n-          if arg == nil then\n-            table.insert(parts, 'nil')\n-          else\n-            table.insert(parts, format_func(arg))\n-          end\n-        end\n-        logfile:write(table.concat(parts, '\\t'), '\\n')\n-        logfile:flush()\n-      end\n+    if not open_logfile() then\n+      return false\n+    end\n+    local info = debug.getinfo(2, 'Sl')\n+    local header = string.format(\n+      '[%s][%s] ...%s:%s',\n+      level,\n+      os.date(log_date_format),\n+      info.short_src:sub(-16),\n+      info.currentline\n+    )\n+    local parts = { header }\n+    for i = 1, argc do\n+      local arg = select(i, ...)\n+      table.insert(parts, arg == nil and 'nil' or format_func(arg))\n     end\n+    assert(logfile)\n+    logfile:write(table.concat(parts, '\\t'), '\\n')\n+    logfile:flush()\n   end\n end\n \n--- This is put here on purpose after the loop above so that it doesn't\n--- interfere with iterating the levels\n-vim.tbl_add_reverse_lookup(log.levels)\n+-- FIXME: DOC\n+-- Should be exposed in the vim docs.",
            "html_url": "https://github.com/neovim/neovim/pull/27386#discussion_r1482703645",
            "id": 1482703645,
            "in_reply_to_id": 1482699532,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YYEMd",
            "original_commit_id": "3839543e71bc81da95f8dcd1e826a49b3a52d2cc",
            "original_line": 122,
            "original_position": 215,
            "original_start_line": 121,
            "path": "runtime/lua/vim/lsp/log.lua",
            "position": null,
            "pull_request_review_id": 1869714150,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27386",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482703645/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-08T09:57:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482703645",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27386#discussion_r1482703937"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27386"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482703937"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah I'm fully aware and mindful of this. There's one case I've left this guard in (that has a `vim.inspect(ctx)`), but otherwise it's a micro-op which doesn't make sense since performance will likely be bound by RPC IO.",
            "commit_id": "20c3e74296684428285145435d34860fdc12cb3d",
            "created_at": "2024-02-08T09:57:20Z",
            "diff_hunk": "@@ -1504,9 +1490,7 @@ end\n --- - findstart=0: column where the completion starts, or -2 or -3\n --- - findstart=1: list of matches (actually just calls |complete()|)\n function lsp.omnifunc(findstart, base)\n-  if log.debug() then\n-    log.debug('omnifunc.findstart', { findstart = findstart, base = base })\n-  end\n+  log.debug('omnifunc.findstart', { findstart = findstart, base = base })",
            "html_url": "https://github.com/neovim/neovim/pull/27386#discussion_r1482703937",
            "id": 1482703937,
            "in_reply_to_id": 1482695654,
            "line": 1493,
            "node_id": "PRRC_kwDOAPphoM5YYERB",
            "original_commit_id": "3839543e71bc81da95f8dcd1e826a49b3a52d2cc",
            "original_line": 1493,
            "original_position": 74,
            "original_start_line": 1507,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 74,
            "pull_request_review_id": 1869714633,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27386",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482703937/reactions"
            },
            "side": "RIGHT",
            "start_line": 1507,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2024-02-08T09:57:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482703937",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27386#discussion_r1482706888"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27386"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482706888"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry, didn't intend to change any docs. I'll fix.",
            "commit_id": "20c3e74296684428285145435d34860fdc12cb3d",
            "created_at": "2024-02-08T09:59:45Z",
            "diff_hunk": "@@ -12,130 +12,124 @@ log.levels = vim.deepcopy(vim.log.levels)\n \n -- Default log level is warn.\n local current_log_level = log.levels.WARN\n+\n local log_date_format = '%F %H:%M:%S'\n-local format_func = function(arg)\n+\n+local function format_func(arg)\n   return vim.inspect(arg, { newline = '' })\n end\n \n-do\n-  local function notify(msg, level)\n-    if vim.in_fast_event() then\n-      vim.schedule(function()\n-        vim.notify(msg, level)\n-      end)\n-    else\n+local function notify(msg, level)\n+  if vim.in_fast_event() then\n+    vim.schedule(function()\n       vim.notify(msg, level)\n-    end\n+    end)\n+  else\n+    vim.notify(msg, level)\n   end\n+end\n+\n+local logfilename = vim.fs.joinpath(vim.fn.stdpath('log'), 'lsp.log')\n+\n+-- TODO: Ideally the directory should be created in open_logfile(), right\n+-- before opening the log file, but open_logfile() can be called from libuv\n+-- callbacks, where using fn.mkdir() is not allowed.\n+vim.fn.mkdir(vim.fn.stdpath('log'), 'p')\n+\n+--- Returns the log filename.\n+---@return string log filename\n+function log.get_filename()\n+  return logfilename\n+end\n+\n+--- @type file*?, string?\n+local logfile, openerr\n \n-  local path_sep = vim.uv.os_uname().version:match('Windows') and '\\\\' or '/'\n-  local function path_join(...)\n-    return table.concat(vim.tbl_flatten({ ... }), path_sep)\n+--- Opens log file. Returns true if file is open, false on error\n+local function open_logfile()\n+  -- Try to open file only once\n+  if logfile then\n+    return true\n+  end\n+  if openerr then\n+    return false\n   end\n-  local logfilename = path_join(vim.fn.stdpath('log'), 'lsp.log')\n \n-  -- TODO: Ideally the directory should be created in open_logfile(), right\n-  -- before opening the log file, but open_logfile() can be called from libuv\n-  -- callbacks, where using fn.mkdir() is not allowed.\n-  vim.fn.mkdir(vim.fn.stdpath('log'), 'p')\n+  logfile, openerr = io.open(logfilename, 'a+')\n+  if not logfile then\n+    local err_msg = string.format('Failed to open LSP client log file: %s', openerr)\n+    notify(err_msg, vim.log.levels.ERROR)\n+    return false\n+  end\n \n-  --- Returns the log filename.\n-  ---@return string log filename\n-  function log.get_filename()\n-    return logfilename\n+  local log_info = vim.uv.fs_stat(logfilename)\n+  if log_info and log_info.size > 1e9 then\n+    local warn_msg = string.format(\n+      'LSP client log is large (%d MB): %s',\n+      log_info.size / (1000 * 1000),\n+      logfilename\n+    )\n+    notify(warn_msg)\n   end\n \n-  local logfile, openerr\n-  --- Opens log file. Returns true if file is open, false on error\n-  local function open_logfile()\n-    -- Try to open file only once\n-    if logfile then\n-      return true\n-    end\n-    if openerr then\n-      return false\n-    end\n+  -- Start message for logging\n+  logfile:write(string.format('[START][%s] LSP logging initiated\\n', os.date(log_date_format)))\n+  return true\n+end\n+\n+for level, levelnr in pairs(log.levels) do\n+  -- Also export the log level on the root object.\n+  log[level] = levelnr\n+end\n \n-    logfile, openerr = io.open(logfilename, 'a+')\n-    if not logfile then\n-      local err_msg = string.format('Failed to open LSP client log file: %s', openerr)\n-      notify(err_msg, vim.log.levels.ERROR)\n+vim.tbl_add_reverse_lookup(log.levels)\n+\n+--- @param level string\n+--- @param levelnr integer\n+--- @return fun(...:any): boolean?\n+local function create_logger(level, levelnr)\n+  return function(...)\n+    if levelnr < current_log_level then\n       return false\n     end\n-\n-    local log_info = vim.uv.fs_stat(logfilename)\n-    if log_info and log_info.size > 1e9 then\n-      local warn_msg = string.format(\n-        'LSP client log is large (%d MB): %s',\n-        log_info.size / (1000 * 1000),\n-        logfilename\n-      )\n-      notify(warn_msg)\n+    local argc = select('#', ...)\n+    if argc == 0 then\n+      return true\n     end\n-\n-    -- Start message for logging\n-    logfile:write(string.format('[START][%s] LSP logging initiated\\n', os.date(log_date_format)))\n-    return true\n-  end\n-\n-  for level, levelnr in pairs(log.levels) do\n-    -- Also export the log level on the root object.\n-    log[level] = levelnr\n-    -- FIXME: DOC\n-    -- Should be exposed in the vim docs.\n-    --\n-    -- Set the lowercase name as the main use function.\n-    -- If called without arguments, it will check whether the log level is\n-    -- greater than or equal to this one. When called with arguments, it will\n-    -- log at that level (if applicable, it is checked either way).\n-    --\n-    -- Recommended usage:\n-    -- ```\n-    -- if log.warn() then\n-    --   log.warn(\"123\")\n-    -- end\n-    -- ```\n-    --\n-    -- This way you can avoid string allocations if the log level isn't high enough.\n-    if level ~= 'OFF' then\n-      log[level:lower()] = function(...)\n-        local argc = select('#', ...)\n-        if levelnr < current_log_level then\n-          return false\n-        end\n-        if argc == 0 then\n-          return true\n-        end\n-        if not open_logfile() then\n-          return false\n-        end\n-        local info = debug.getinfo(2, 'Sl')\n-        local header = string.format(\n-          '[%s][%s] ...%s:%s',\n-          level,\n-          os.date(log_date_format),\n-          string.sub(info.short_src, #info.short_src - 15),\n-          info.currentline\n-        )\n-        local parts = { header }\n-        for i = 1, argc do\n-          local arg = select(i, ...)\n-          if arg == nil then\n-            table.insert(parts, 'nil')\n-          else\n-            table.insert(parts, format_func(arg))\n-          end\n-        end\n-        logfile:write(table.concat(parts, '\\t'), '\\n')\n-        logfile:flush()\n-      end\n+    if not open_logfile() then\n+      return false\n+    end\n+    local info = debug.getinfo(2, 'Sl')\n+    local header = string.format(\n+      '[%s][%s] ...%s:%s',\n+      level,\n+      os.date(log_date_format),\n+      info.short_src:sub(-16),\n+      info.currentline\n+    )\n+    local parts = { header }\n+    for i = 1, argc do\n+      local arg = select(i, ...)\n+      table.insert(parts, arg == nil and 'nil' or format_func(arg))\n     end\n+    assert(logfile)\n+    logfile:write(table.concat(parts, '\\t'), '\\n')\n+    logfile:flush()\n   end\n end\n \n--- This is put here on purpose after the loop above so that it doesn't\n--- interfere with iterating the levels\n-vim.tbl_add_reverse_lookup(log.levels)\n+-- FIXME: DOC\n+-- Should be exposed in the vim docs.",
            "html_url": "https://github.com/neovim/neovim/pull/27386#discussion_r1482706888",
            "id": 1482706888,
            "in_reply_to_id": 1482699532,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YYE_I",
            "original_commit_id": "3839543e71bc81da95f8dcd1e826a49b3a52d2cc",
            "original_line": 122,
            "original_position": 215,
            "original_start_line": 121,
            "path": "runtime/lua/vim/lsp/log.lua",
            "position": null,
            "pull_request_review_id": 1869719777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27386",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482706888/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-08T09:59:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482706888",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27386#discussion_r1482715730"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27386"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482715730"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh, I had also missed that this was just moved. I think we can remove the fixme",
            "commit_id": "20c3e74296684428285145435d34860fdc12cb3d",
            "created_at": "2024-02-08T10:07:00Z",
            "diff_hunk": "@@ -12,130 +12,124 @@ log.levels = vim.deepcopy(vim.log.levels)\n \n -- Default log level is warn.\n local current_log_level = log.levels.WARN\n+\n local log_date_format = '%F %H:%M:%S'\n-local format_func = function(arg)\n+\n+local function format_func(arg)\n   return vim.inspect(arg, { newline = '' })\n end\n \n-do\n-  local function notify(msg, level)\n-    if vim.in_fast_event() then\n-      vim.schedule(function()\n-        vim.notify(msg, level)\n-      end)\n-    else\n+local function notify(msg, level)\n+  if vim.in_fast_event() then\n+    vim.schedule(function()\n       vim.notify(msg, level)\n-    end\n+    end)\n+  else\n+    vim.notify(msg, level)\n   end\n+end\n+\n+local logfilename = vim.fs.joinpath(vim.fn.stdpath('log'), 'lsp.log')\n+\n+-- TODO: Ideally the directory should be created in open_logfile(), right\n+-- before opening the log file, but open_logfile() can be called from libuv\n+-- callbacks, where using fn.mkdir() is not allowed.\n+vim.fn.mkdir(vim.fn.stdpath('log'), 'p')\n+\n+--- Returns the log filename.\n+---@return string log filename\n+function log.get_filename()\n+  return logfilename\n+end\n+\n+--- @type file*?, string?\n+local logfile, openerr\n \n-  local path_sep = vim.uv.os_uname().version:match('Windows') and '\\\\' or '/'\n-  local function path_join(...)\n-    return table.concat(vim.tbl_flatten({ ... }), path_sep)\n+--- Opens log file. Returns true if file is open, false on error\n+local function open_logfile()\n+  -- Try to open file only once\n+  if logfile then\n+    return true\n+  end\n+  if openerr then\n+    return false\n   end\n-  local logfilename = path_join(vim.fn.stdpath('log'), 'lsp.log')\n \n-  -- TODO: Ideally the directory should be created in open_logfile(), right\n-  -- before opening the log file, but open_logfile() can be called from libuv\n-  -- callbacks, where using fn.mkdir() is not allowed.\n-  vim.fn.mkdir(vim.fn.stdpath('log'), 'p')\n+  logfile, openerr = io.open(logfilename, 'a+')\n+  if not logfile then\n+    local err_msg = string.format('Failed to open LSP client log file: %s', openerr)\n+    notify(err_msg, vim.log.levels.ERROR)\n+    return false\n+  end\n \n-  --- Returns the log filename.\n-  ---@return string log filename\n-  function log.get_filename()\n-    return logfilename\n+  local log_info = vim.uv.fs_stat(logfilename)\n+  if log_info and log_info.size > 1e9 then\n+    local warn_msg = string.format(\n+      'LSP client log is large (%d MB): %s',\n+      log_info.size / (1000 * 1000),\n+      logfilename\n+    )\n+    notify(warn_msg)\n   end\n \n-  local logfile, openerr\n-  --- Opens log file. Returns true if file is open, false on error\n-  local function open_logfile()\n-    -- Try to open file only once\n-    if logfile then\n-      return true\n-    end\n-    if openerr then\n-      return false\n-    end\n+  -- Start message for logging\n+  logfile:write(string.format('[START][%s] LSP logging initiated\\n', os.date(log_date_format)))\n+  return true\n+end\n+\n+for level, levelnr in pairs(log.levels) do\n+  -- Also export the log level on the root object.\n+  log[level] = levelnr\n+end\n \n-    logfile, openerr = io.open(logfilename, 'a+')\n-    if not logfile then\n-      local err_msg = string.format('Failed to open LSP client log file: %s', openerr)\n-      notify(err_msg, vim.log.levels.ERROR)\n+vim.tbl_add_reverse_lookup(log.levels)\n+\n+--- @param level string\n+--- @param levelnr integer\n+--- @return fun(...:any): boolean?\n+local function create_logger(level, levelnr)\n+  return function(...)\n+    if levelnr < current_log_level then\n       return false\n     end\n-\n-    local log_info = vim.uv.fs_stat(logfilename)\n-    if log_info and log_info.size > 1e9 then\n-      local warn_msg = string.format(\n-        'LSP client log is large (%d MB): %s',\n-        log_info.size / (1000 * 1000),\n-        logfilename\n-      )\n-      notify(warn_msg)\n+    local argc = select('#', ...)\n+    if argc == 0 then\n+      return true\n     end\n-\n-    -- Start message for logging\n-    logfile:write(string.format('[START][%s] LSP logging initiated\\n', os.date(log_date_format)))\n-    return true\n-  end\n-\n-  for level, levelnr in pairs(log.levels) do\n-    -- Also export the log level on the root object.\n-    log[level] = levelnr\n-    -- FIXME: DOC\n-    -- Should be exposed in the vim docs.\n-    --\n-    -- Set the lowercase name as the main use function.\n-    -- If called without arguments, it will check whether the log level is\n-    -- greater than or equal to this one. When called with arguments, it will\n-    -- log at that level (if applicable, it is checked either way).\n-    --\n-    -- Recommended usage:\n-    -- ```\n-    -- if log.warn() then\n-    --   log.warn(\"123\")\n-    -- end\n-    -- ```\n-    --\n-    -- This way you can avoid string allocations if the log level isn't high enough.\n-    if level ~= 'OFF' then\n-      log[level:lower()] = function(...)\n-        local argc = select('#', ...)\n-        if levelnr < current_log_level then\n-          return false\n-        end\n-        if argc == 0 then\n-          return true\n-        end\n-        if not open_logfile() then\n-          return false\n-        end\n-        local info = debug.getinfo(2, 'Sl')\n-        local header = string.format(\n-          '[%s][%s] ...%s:%s',\n-          level,\n-          os.date(log_date_format),\n-          string.sub(info.short_src, #info.short_src - 15),\n-          info.currentline\n-        )\n-        local parts = { header }\n-        for i = 1, argc do\n-          local arg = select(i, ...)\n-          if arg == nil then\n-            table.insert(parts, 'nil')\n-          else\n-            table.insert(parts, format_func(arg))\n-          end\n-        end\n-        logfile:write(table.concat(parts, '\\t'), '\\n')\n-        logfile:flush()\n-      end\n+    if not open_logfile() then\n+      return false\n+    end\n+    local info = debug.getinfo(2, 'Sl')\n+    local header = string.format(\n+      '[%s][%s] ...%s:%s',\n+      level,\n+      os.date(log_date_format),\n+      info.short_src:sub(-16),\n+      info.currentline\n+    )\n+    local parts = { header }\n+    for i = 1, argc do\n+      local arg = select(i, ...)\n+      table.insert(parts, arg == nil and 'nil' or format_func(arg))\n     end\n+    assert(logfile)\n+    logfile:write(table.concat(parts, '\\t'), '\\n')\n+    logfile:flush()\n   end\n end\n \n--- This is put here on purpose after the loop above so that it doesn't\n--- interfere with iterating the levels\n-vim.tbl_add_reverse_lookup(log.levels)\n+-- FIXME: DOC\n+-- Should be exposed in the vim docs.",
            "html_url": "https://github.com/neovim/neovim/pull/27386#discussion_r1482715730",
            "id": 1482715730,
            "in_reply_to_id": 1482699532,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YYHJS",
            "original_commit_id": "3839543e71bc81da95f8dcd1e826a49b3a52d2cc",
            "original_line": 122,
            "original_position": 215,
            "original_start_line": 121,
            "path": "runtime/lua/vim/lsp/log.lua",
            "position": null,
            "pull_request_review_id": 1869736691,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27386",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482715730/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-08T10:07:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482715730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27386/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/27386/commits",
    "created_at": "2024-02-08T09:26:40Z",
    "diff_url": "https://github.com/neovim/neovim/pull/27386.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:lsplog",
        "ref": "lsplog",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2024-02-12T14:51:29Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 247566,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2024-02-06T12:43:15Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "20c3e74296684428285145435d34860fdc12cb3d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/27386",
    "id": 1717162226,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27386",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "1f9da3d0835af2cfe937de250c2cde3a59e1677e",
    "merged_at": "2024-02-08T11:11:46Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5mWdDy",
    "number": 27386,
    "patch_url": "https://github.com/neovim/neovim/pull/27386.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/27386/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/20c3e74296684428285145435d34860fdc12cb3d",
    "title": "refactor(lsp): tidy up logging",
    "updated_at": "2024-02-08T11:17:57Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/27386",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    }
}