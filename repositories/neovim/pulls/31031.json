{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31031/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31031/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31031"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31031"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31031/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/d26ebabdffad90fd1b2028c01ee1387370a3c113"
        }
    },
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5750,
            "forks_count": 5750,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1841,
            "open_issues_count": 1841,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-12-17T01:03:26Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 298939,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 84221,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-12-17T02:03:44Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 84221,
            "watchers_count": 84221,
            "web_commit_signoff_required": false
        },
        "sha": "ca760e645ba4d1fdb0b6fff3ac98231c3d683306",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "## Problem\r\n\r\n- Setting up LSP clients require unnecessary boilerplate.\r\n- LSP configuration has no system.\r\n\r\n## Solution\r\n\r\nAdd `vim.lsp.enable()` and `vim.lsp.config()`.\r\n\r\n### Design goals/requirements:\r\n- Default configuration of a server can be distributed across multiple sources.\r\n  - And via RTP discovery.\r\n- Default configuration can be specified for all servers.\r\n  - Can extend capabilities of all clients.\r\n- Configuration _can_ be project specific.\r\n\r\n### Proposal:\r\n\r\n- Two new API's:\r\n  - `vim.lsp.config(name, cfg)`:\r\n    - Used to define configurations for servers of name.\r\n    - Can be used like a table or called as a function.\r\n      - Use `vim.lsp.config(name, cfg)` to extend a configuration\r\n      - Use `vim.lsp.config[name] = cfg` to define a configuration \r\n    - Use `vim.lsp.confg('*', cfg)` to specify default config for all\r\n      servers.\r\n    - Examples:\r\n      ```lua\r\n      -- Set default root marker for all clients\r\n      vim.lsp.config('*', {\r\n        root_markers = { '.git' },\r\n      })\r\n\r\n      -- Set default configuration for clangd but don't enable it\r\n      vim.lsp.config.clangd = {\r\n        cmd = {\r\n          'clangd',\r\n          '--clang-tidy',\r\n          '--background-index',\r\n          '--offset-encoding=utf-8',\r\n        },\r\n        root_markers = { '.clangd', 'compile_commands.json' },\r\n        filetypes = { 'c', 'cpp' },\r\n      }\r\n      ```\r\n  - `vim.lsp.enable(name)`\r\n    - Used to enable servers of name. Uses configuration defined via `vim.lsp.config()`.\r\n    -  Examples:\r\n       ```lua\r\n       vim.lsp.enable('clangd')\r\n       ```\r\n- Client configuration sources `lsp/<name>.lua` to resolve configurations.\r\n   - Only done once per enabled configuration.\r\n   - Redone if `vim.lsp.config[name]` is accessed (read or modified).\r\n\r\n### Notes:\r\n\r\n- Instead of adding `vim.lsp.config(name, cfg)` I considered\r\n  `vim.lsp.enable(name, cfg, config_only)` where\r\n  `vim.lsp.enable(name, cfg, true) === vim.lsp.config(name, cfg)`.\r\n\r\n  I decided against this since I felt a `config_only` field is slightly more confusing, harder to explain and less generally appealing than having `vim.lsp.config`. There is also some parallel to\r\n  `vim.diagnostic.enable` and `vim.diagnostic.config`.\r\n\r\n  If there is pushback to this, then I can remove that from this PR, and add it to a separate future PR for further consideration.\r\n\r\n- This PR doesn't provide a full solution for project specific config, but I'm pretty sure doesn't inhibit it. Though I think for most cases using things like `workspace/didChangeConfiguration` in `on_attach` or `LspAttach` should be sufficient.\r\n\r\n- This PR is not intended to be the final end goal of LSP configuration but just a medium term stepping stone that moves us forward in the right direction.\r\n\r\n  Going forward I'd expect us to add some options into the native option system to complement (or replace) what is added here:\r\n\r\n  - Buffer local options:\r\n    - `:setlocal lsp+=clangd`\r\n    - `:setlocal root_marker+=compile_commands.json`\r\n\r\n  - LSP namespaced specific options:\r\n    - `:set lsp_servers.clangd.cmd=['clangd']`\r\n\r\n- Continuation of #18506\r\n\r\n### Todo:\r\n\r\n- [x] News\r\n- [x] Documentation\r\n- [x] Tests\r\n- [x] Health check\r\n\r\n### Future considerations\r\n\r\n- Consider allowing a table to be returned from `lsp/*.lua`.\r\n- Better accommodate project specific configurations.",
    "closed_at": "2024-12-10T17:16:01Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1827771633"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827771633"
                }
            },
            "author_association": "MEMBER",
            "body": "I think config fits just fine here. Let's not introduce \"setup\".",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-11-04T13:54:49Z",
            "diff_hunk": "@@ -782,6 +782,56 @@ set_log_level({level})                               *vim.lsp.set_log_level()*\n     See also: ~\n       • |vim.lsp.log_levels|\n \n+setup({config})                                              *vim.lsp.setup()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1827771633",
            "id": 1827771633,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5s8ZTx",
            "original_commit_id": "2cfdd5a188b4227fdef5f26e75a9dde04754e81c",
            "original_line": 785,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2413134929,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827771633/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-04T13:54:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827771633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1867677385"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867677385"
                }
            },
            "author_association": "MEMBER",
            "body": "For reference, in https://github.com/neovim/nvim-lspconfig/issues/1827 it sounds like tpope was infavor of this \"declarative root_markers\". Is this derived from that?\r\n\r\nWhereas https://github.com/neovim/neovim/pull/18506#issuecomment-1121958744 was hesitant: \r\n\r\n>  root_markers as a list of strings should not be a baked in concept like this, there are too many special cases that require more complicated logic (nested git projects, rust, etc). I don't think it's good design to have essentially duplicate overlap with root_dir (which should be removed IMO in favor of the more generic workspaceFolders adopted by the spec)\r\n\r\n",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T12:55:53Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a\n+    buffer.\n+\n+    Uses default configuration defined with `vim.lsp.config`.\n+\n+    Examples: >lua\n+          vim.lsp.enable('clangd', {\n+            cmd = { 'clangd', '--clang-tidy' },\n+            root_markers = { '.clangd', 'compile_commands.json' },",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1867677385",
            "id": 1867677385,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vUn7J",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 760,
            "original_position": 70,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2475605646,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867677385/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T12:55:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867677385",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1867692945"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867692945"
                }
            },
            "author_association": "MEMBER",
            "body": "I think `vim.fs.root` is the compromise we settled on? Allows specifying \"declarative root markers\" with minimal boilerplate while still allowing fully custom logic where needed.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T13:07:18Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a\n+    buffer.\n+\n+    Uses default configuration defined with `vim.lsp.config`.\n+\n+    Examples: >lua\n+          vim.lsp.enable('clangd', {\n+            cmd = { 'clangd', '--clang-tidy' },\n+            root_markers = { '.clangd', 'compile_commands.json' },",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1867692945",
            "id": 1867692945,
            "in_reply_to_id": 1867677385,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vUruR",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 760,
            "original_position": 70,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2475632455,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867692945/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T13:07:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867692945",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1867715741"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867715741"
                }
            },
            "author_association": "MEMBER",
            "body": "AFAIK this satisfies the large majority of use cases. If there are more complex cases then we can try to accommodate that in some way (with root_marker as function?), or defer them to use `vim.lsp.start()`.\n\nAt this point I think lspconfig has done enough baking; so we've got to be able to make progress, otherwise it will never happen.\n\nTo me saying root markers isn't a good enough general solution because of a few use cases is like saying treesitter isn't good enough because of a few languages.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T13:23:16Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a\n+    buffer.\n+\n+    Uses default configuration defined with `vim.lsp.config`.\n+\n+    Examples: >lua\n+          vim.lsp.enable('clangd', {\n+            cmd = { 'clangd', '--clang-tidy' },\n+            root_markers = { '.clangd', 'compile_commands.json' },",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1867715741",
            "id": 1867715741,
            "in_reply_to_id": 1867677385,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vUxSd",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 760,
            "original_position": 70,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2475670131,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867715741/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T13:23:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867715741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1867723878"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867723878"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, all these comments were before we had `vim.lsp.start` in core, which is the \"full control\" interface (and working fine for that). This PR is a (hopefully thin) additional layer for specifying \"static configs\" which does not need to have the full expressivity. \r\n\r\n(That being said, allowing `root_markers` to be a function doesn't hurt -- unless someone again starts raving about \"fully declarative configuration\" -- but in no way needs to block the first implementation here. Let's start with the \"90% at 10%\" cases.)",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T13:28:50Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a\n+    buffer.\n+\n+    Uses default configuration defined with `vim.lsp.config`.\n+\n+    Examples: >lua\n+          vim.lsp.enable('clangd', {\n+            cmd = { 'clangd', '--clang-tidy' },\n+            root_markers = { '.clangd', 'compile_commands.json' },",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1867723878",
            "id": 1867723878,
            "in_reply_to_id": 1867677385,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vUzRm",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 760,
            "original_position": 70,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2475683699,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867723878/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T14:00:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867723878",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1867755792"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867755792"
                }
            },
            "author_association": "MEMBER",
            "body": "Perfect. We have closed the loop here.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T13:50:02Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a\n+    buffer.\n+\n+    Uses default configuration defined with `vim.lsp.config`.\n+\n+    Examples: >lua\n+          vim.lsp.enable('clangd', {\n+            cmd = { 'clangd', '--clang-tidy' },\n+            root_markers = { '.clangd', 'compile_commands.json' },",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1867755792",
            "id": 1867755792,
            "in_reply_to_id": 1867677385,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vU7EQ",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 760,
            "original_position": 70,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2475736865,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867755792/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T13:50:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1867755792",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1868082721"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868082721"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it would be worth mentioning how the config gets merged.\r\nI suspect a common scenario is to set the capabilities globally for all and settings per server. Based on the implementation it looks like that's supported but from the docs it's not clear",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T16:55:11Z",
            "diff_hunk": "@@ -211,6 +211,193 @@ local function reuse_client_default(client, config)\n   return false\n end\n \n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- Filetypes the server will attach to.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+\n+--- Define default configuration for LSP clients.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be used as a table.\n+---\n+--- Examples:\n+---\n+--- - Set default root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+---\n+--- - Set default configuration for clangd using table form:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+---\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+--- @nodoc\n+--- @type table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    self[name] = cfg\n+  end,\n+})\n+\n+local client_config_list_keys = {\n+  'filetypes',\n+  'on_attach',\n+  'on_exit',\n+  'on_init',\n+  'root_markers',\n+}\n+\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local config = vim.tbl_deep_extend('force', ...)\n+  for _, k in ipairs(client_config_list_keys) do\n+    for i = 1, select('#', ...) do\n+      local v = select(i, ...)\n+      if v and v[k] then\n+        config[k] = vim.list_extend(vim.deepcopy(vim._ensure_list(v[k])), config[k] or {})\n+      end\n+    end\n+  end\n+  return config\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.\n+---\n+--- Uses default configuration defined with `vim.lsp.config`.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1868082721",
            "id": 1868082721,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vWK4h",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 497,
            "original_position": 119,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2476276887,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868082721/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T17:00:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868082721",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1868086229"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868086229"
                }
            },
            "author_association": "MEMBER",
            "body": "Any reason for the restriction here? I use luals often in nofile scratch buffers (nvim-dap eval buffer) and some servers have off-spec extensions for virtual documents which in plugins are implemented via nofile buffers too",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T16:57:24Z",
            "diff_hunk": "@@ -211,6 +211,193 @@ local function reuse_client_default(client, config)\n   return false\n end\n \n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- Filetypes the server will attach to.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+\n+--- Define default configuration for LSP clients.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be used as a table.\n+---\n+--- Examples:\n+---\n+--- - Set default root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+---\n+--- - Set default configuration for clangd using table form:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+---\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+--- @nodoc\n+--- @type table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    self[name] = cfg\n+  end,\n+})\n+\n+local client_config_list_keys = {\n+  'filetypes',\n+  'on_attach',\n+  'on_exit',\n+  'on_init',\n+  'root_markers',\n+}\n+\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local config = vim.tbl_deep_extend('force', ...)\n+  for _, k in ipairs(client_config_list_keys) do\n+    for i = 1, select('#', ...) do\n+      local v = select(i, ...)\n+      if v and v[k] then\n+        config[k] = vim.list_extend(vim.deepcopy(vim._ensure_list(v[k])), config[k] or {})\n+      end\n+    end\n+  end\n+  return config\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.\n+---\n+--- Uses default configuration defined with `vim.lsp.config`.\n+---\n+--- Examples:\n+---\n+--- ```lua\n+---   vim.lsp.enable('clangd', {\n+---     cmd = { 'clangd', '--clang-tidy' },\n+---     root_markers = { '.clangd', 'compile_commands.json' },\n+---     filetypes = { 'c', 'cpp' },\n+---   })\n+---\n+---   -- or if config is already defined\n+---   vim.lsp.enable('clangd')\n+---\n+---   vim.lsp.enable('lua_ls', {\n+---     cmd = { 'lua-language-server' },\n+---     filetypes = { 'lua' },\n+---     root_markers = { '.luarc.json', '.luacheckrc', '.stylua.toml' },\n+---     settings = {\n+---       Lua = {\n+---         hint = {\n+---           enable = true,\n+---           paramName = 'Literal',\n+---           setType = true,\n+---         },\n+---       },\n+---     },\n+---   })\n+--- ```\n+---\n+--- @param name string\n+--- @param config? vim.lsp.Config\n+function lsp.enable(name, config)\n+  assert(name and name ~= '*', 'Invalid name')\n+  validate('config', config, 'table', true)\n+\n+  if config then\n+    lsp.config[name] = config\n+  end\n+\n+  config = merge_configs(lsp.config['*'], lsp.config[name], config)\n+  config.name = name\n+\n+  validate('cmd', config.cmd, { 'function', 'table' })\n+  validate('cmd', config.reuse_client, 'function', true)\n+  -- TODO(lewis6991): validate more config fields\n+\n+  api.nvim_create_autocmd('FileType', {\n+    pattern = config.filetypes,\n+    group = api.nvim_create_augroup('nvim.lsp.enable.' .. name, {}),\n+    callback = function(args)\n+      local bufnr = args.buf --- @type integer\n+      if vim.bo[bufnr].buftype == 'nofile' then",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1868086229",
            "id": 1868086229,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vWLvV",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 381,
            "original_position": 171,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2476276887,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868086229/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T17:00:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868086229",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1868088754"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868088754"
                }
            },
            "author_association": "MEMBER",
            "body": "Could be worth logging if it's a table but not executable, or does the health check cover this?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T16:58:51Z",
            "diff_hunk": "@@ -211,6 +211,193 @@ local function reuse_client_default(client, config)\n   return false\n end\n \n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- Filetypes the server will attach to.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+\n+--- Define default configuration for LSP clients.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be used as a table.\n+---\n+--- Examples:\n+---\n+--- - Set default root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+---\n+--- - Set default configuration for clangd using table form:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+---\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+--- @nodoc\n+--- @type table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    self[name] = cfg\n+  end,\n+})\n+\n+local client_config_list_keys = {\n+  'filetypes',\n+  'on_attach',\n+  'on_exit',\n+  'on_init',\n+  'root_markers',\n+}\n+\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local config = vim.tbl_deep_extend('force', ...)\n+  for _, k in ipairs(client_config_list_keys) do\n+    for i = 1, select('#', ...) do\n+      local v = select(i, ...)\n+      if v and v[k] then\n+        config[k] = vim.list_extend(vim.deepcopy(vim._ensure_list(v[k])), config[k] or {})\n+      end\n+    end\n+  end\n+  return config\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.\n+---\n+--- Uses default configuration defined with `vim.lsp.config`.\n+---\n+--- Examples:\n+---\n+--- ```lua\n+---   vim.lsp.enable('clangd', {\n+---     cmd = { 'clangd', '--clang-tidy' },\n+---     root_markers = { '.clangd', 'compile_commands.json' },\n+---     filetypes = { 'c', 'cpp' },\n+---   })\n+---\n+---   -- or if config is already defined\n+---   vim.lsp.enable('clangd')\n+---\n+---   vim.lsp.enable('lua_ls', {\n+---     cmd = { 'lua-language-server' },\n+---     filetypes = { 'lua' },\n+---     root_markers = { '.luarc.json', '.luacheckrc', '.stylua.toml' },\n+---     settings = {\n+---       Lua = {\n+---         hint = {\n+---           enable = true,\n+---           paramName = 'Literal',\n+---           setType = true,\n+---         },\n+---       },\n+---     },\n+---   })\n+--- ```\n+---\n+--- @param name string\n+--- @param config? vim.lsp.Config\n+function lsp.enable(name, config)\n+  assert(name and name ~= '*', 'Invalid name')\n+  validate('config', config, 'table', true)\n+\n+  if config then\n+    lsp.config[name] = config\n+  end\n+\n+  config = merge_configs(lsp.config['*'], lsp.config[name], config)\n+  config.name = name\n+\n+  validate('cmd', config.cmd, { 'function', 'table' })\n+  validate('cmd', config.reuse_client, 'function', true)\n+  -- TODO(lewis6991): validate more config fields\n+\n+  api.nvim_create_autocmd('FileType', {\n+    pattern = config.filetypes,\n+    group = api.nvim_create_augroup('nvim.lsp.enable.' .. name, {}),\n+    callback = function(args)\n+      local bufnr = args.buf --- @type integer\n+      if vim.bo[bufnr].buftype == 'nofile' then\n+        return\n+      end\n+\n+      if type(config.cmd) == 'table' and vim.fn.executable(config.cmd[1]) == 0 then\n+        return",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1868088754",
            "id": 1868088754,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vWMWy",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 386,
            "original_position": 176,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2476276887,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868088754/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T17:00:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868088754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1868115752"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868115752"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah, I'm still working through the finer details on how the merge happens, because unlike `tbl_deep_extend` we need to extend some lists (`root_markers` and `filetypes`).",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T17:17:04Z",
            "diff_hunk": "@@ -211,6 +211,193 @@ local function reuse_client_default(client, config)\n   return false\n end\n \n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- Filetypes the server will attach to.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+\n+--- Define default configuration for LSP clients.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be used as a table.\n+---\n+--- Examples:\n+---\n+--- - Set default root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+---\n+--- - Set default configuration for clangd using table form:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+---\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+--- @nodoc\n+--- @type table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    self[name] = cfg\n+  end,\n+})\n+\n+local client_config_list_keys = {\n+  'filetypes',\n+  'on_attach',\n+  'on_exit',\n+  'on_init',\n+  'root_markers',\n+}\n+\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local config = vim.tbl_deep_extend('force', ...)\n+  for _, k in ipairs(client_config_list_keys) do\n+    for i = 1, select('#', ...) do\n+      local v = select(i, ...)\n+      if v and v[k] then\n+        config[k] = vim.list_extend(vim.deepcopy(vim._ensure_list(v[k])), config[k] or {})\n+      end\n+    end\n+  end\n+  return config\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.\n+---\n+--- Uses default configuration defined with `vim.lsp.config`.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1868115752",
            "id": 1868115752,
            "in_reply_to_id": 1868082721,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vWS8o",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 497,
            "original_position": 119,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2476333563,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868115752/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T17:48:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868115752",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1868116896"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868116896"
                }
            },
            "author_association": "MEMBER",
            "body": "No strong reason. This is all adapted from my config.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T17:17:56Z",
            "diff_hunk": "@@ -211,6 +211,193 @@ local function reuse_client_default(client, config)\n   return false\n end\n \n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- Filetypes the server will attach to.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+\n+--- Define default configuration for LSP clients.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be used as a table.\n+---\n+--- Examples:\n+---\n+--- - Set default root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+---\n+--- - Set default configuration for clangd using table form:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+---\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+--- @nodoc\n+--- @type table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    self[name] = cfg\n+  end,\n+})\n+\n+local client_config_list_keys = {\n+  'filetypes',\n+  'on_attach',\n+  'on_exit',\n+  'on_init',\n+  'root_markers',\n+}\n+\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local config = vim.tbl_deep_extend('force', ...)\n+  for _, k in ipairs(client_config_list_keys) do\n+    for i = 1, select('#', ...) do\n+      local v = select(i, ...)\n+      if v and v[k] then\n+        config[k] = vim.list_extend(vim.deepcopy(vim._ensure_list(v[k])), config[k] or {})\n+      end\n+    end\n+  end\n+  return config\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.\n+---\n+--- Uses default configuration defined with `vim.lsp.config`.\n+---\n+--- Examples:\n+---\n+--- ```lua\n+---   vim.lsp.enable('clangd', {\n+---     cmd = { 'clangd', '--clang-tidy' },\n+---     root_markers = { '.clangd', 'compile_commands.json' },\n+---     filetypes = { 'c', 'cpp' },\n+---   })\n+---\n+---   -- or if config is already defined\n+---   vim.lsp.enable('clangd')\n+---\n+---   vim.lsp.enable('lua_ls', {\n+---     cmd = { 'lua-language-server' },\n+---     filetypes = { 'lua' },\n+---     root_markers = { '.luarc.json', '.luacheckrc', '.stylua.toml' },\n+---     settings = {\n+---       Lua = {\n+---         hint = {\n+---           enable = true,\n+---           paramName = 'Literal',\n+---           setType = true,\n+---         },\n+---       },\n+---     },\n+---   })\n+--- ```\n+---\n+--- @param name string\n+--- @param config? vim.lsp.Config\n+function lsp.enable(name, config)\n+  assert(name and name ~= '*', 'Invalid name')\n+  validate('config', config, 'table', true)\n+\n+  if config then\n+    lsp.config[name] = config\n+  end\n+\n+  config = merge_configs(lsp.config['*'], lsp.config[name], config)\n+  config.name = name\n+\n+  validate('cmd', config.cmd, { 'function', 'table' })\n+  validate('cmd', config.reuse_client, 'function', true)\n+  -- TODO(lewis6991): validate more config fields\n+\n+  api.nvim_create_autocmd('FileType', {\n+    pattern = config.filetypes,\n+    group = api.nvim_create_augroup('nvim.lsp.enable.' .. name, {}),\n+    callback = function(args)\n+      local bufnr = args.buf --- @type integer\n+      if vim.bo[bufnr].buftype == 'nofile' then",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1868116896",
            "id": 1868116896,
            "in_reply_to_id": 1868086229,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vWTOg",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 381,
            "original_position": 171,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2476335433,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868116896/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T17:17:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868116896",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1868117747"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868117747"
                }
            },
            "author_association": "MEMBER",
            "body": "An additional health check should be added. I should probably add it to this PR.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T17:18:34Z",
            "diff_hunk": "@@ -211,6 +211,193 @@ local function reuse_client_default(client, config)\n   return false\n end\n \n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- Filetypes the server will attach to.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+\n+--- Define default configuration for LSP clients.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be used as a table.\n+---\n+--- Examples:\n+---\n+--- - Set default root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+---\n+--- - Set default configuration for clangd using table form:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+---\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+--- @nodoc\n+--- @type table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    self[name] = cfg\n+  end,\n+})\n+\n+local client_config_list_keys = {\n+  'filetypes',\n+  'on_attach',\n+  'on_exit',\n+  'on_init',\n+  'root_markers',\n+}\n+\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local config = vim.tbl_deep_extend('force', ...)\n+  for _, k in ipairs(client_config_list_keys) do\n+    for i = 1, select('#', ...) do\n+      local v = select(i, ...)\n+      if v and v[k] then\n+        config[k] = vim.list_extend(vim.deepcopy(vim._ensure_list(v[k])), config[k] or {})\n+      end\n+    end\n+  end\n+  return config\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.\n+---\n+--- Uses default configuration defined with `vim.lsp.config`.\n+---\n+--- Examples:\n+---\n+--- ```lua\n+---   vim.lsp.enable('clangd', {\n+---     cmd = { 'clangd', '--clang-tidy' },\n+---     root_markers = { '.clangd', 'compile_commands.json' },\n+---     filetypes = { 'c', 'cpp' },\n+---   })\n+---\n+---   -- or if config is already defined\n+---   vim.lsp.enable('clangd')\n+---\n+---   vim.lsp.enable('lua_ls', {\n+---     cmd = { 'lua-language-server' },\n+---     filetypes = { 'lua' },\n+---     root_markers = { '.luarc.json', '.luacheckrc', '.stylua.toml' },\n+---     settings = {\n+---       Lua = {\n+---         hint = {\n+---           enable = true,\n+---           paramName = 'Literal',\n+---           setType = true,\n+---         },\n+---       },\n+---     },\n+---   })\n+--- ```\n+---\n+--- @param name string\n+--- @param config? vim.lsp.Config\n+function lsp.enable(name, config)\n+  assert(name and name ~= '*', 'Invalid name')\n+  validate('config', config, 'table', true)\n+\n+  if config then\n+    lsp.config[name] = config\n+  end\n+\n+  config = merge_configs(lsp.config['*'], lsp.config[name], config)\n+  config.name = name\n+\n+  validate('cmd', config.cmd, { 'function', 'table' })\n+  validate('cmd', config.reuse_client, 'function', true)\n+  -- TODO(lewis6991): validate more config fields\n+\n+  api.nvim_create_autocmd('FileType', {\n+    pattern = config.filetypes,\n+    group = api.nvim_create_augroup('nvim.lsp.enable.' .. name, {}),\n+    callback = function(args)\n+      local bufnr = args.buf --- @type integer\n+      if vim.bo[bufnr].buftype == 'nofile' then\n+        return\n+      end\n+\n+      if type(config.cmd) == 'table' and vim.fn.executable(config.cmd[1]) == 0 then\n+        return",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1868117747",
            "id": 1868117747,
            "in_reply_to_id": 1868088754,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vWTbz",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 386,
            "original_position": 176,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2476336846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868117747/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T17:18:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868117747",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1868157118"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868157118"
                }
            },
            "author_association": "MEMBER",
            "body": "On second thought - I also have cases where I prevent them from attaching because some servers don't like fugitive buffers and go haywire.\r\n\r\nThe safe choice is likely to only start and attach on `buftype == \"\"` by default. \r\n\r\nQuestion is if a dedicated parameter for `.enable` is warranted to control that, but I'd tend to leave it out for the first version and then follow up depending on if the requirement comes up more often. One can still use `lsp.start` directly in the meantime.\r\n",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T17:43:43Z",
            "diff_hunk": "@@ -211,6 +211,193 @@ local function reuse_client_default(client, config)\n   return false\n end\n \n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- Filetypes the server will attach to.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+\n+--- Define default configuration for LSP clients.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be used as a table.\n+---\n+--- Examples:\n+---\n+--- - Set default root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+---\n+--- - Set default configuration for clangd using table form:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+---\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+--- @nodoc\n+--- @type table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    self[name] = cfg\n+  end,\n+})\n+\n+local client_config_list_keys = {\n+  'filetypes',\n+  'on_attach',\n+  'on_exit',\n+  'on_init',\n+  'root_markers',\n+}\n+\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local config = vim.tbl_deep_extend('force', ...)\n+  for _, k in ipairs(client_config_list_keys) do\n+    for i = 1, select('#', ...) do\n+      local v = select(i, ...)\n+      if v and v[k] then\n+        config[k] = vim.list_extend(vim.deepcopy(vim._ensure_list(v[k])), config[k] or {})\n+      end\n+    end\n+  end\n+  return config\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.\n+---\n+--- Uses default configuration defined with `vim.lsp.config`.\n+---\n+--- Examples:\n+---\n+--- ```lua\n+---   vim.lsp.enable('clangd', {\n+---     cmd = { 'clangd', '--clang-tidy' },\n+---     root_markers = { '.clangd', 'compile_commands.json' },\n+---     filetypes = { 'c', 'cpp' },\n+---   })\n+---\n+---   -- or if config is already defined\n+---   vim.lsp.enable('clangd')\n+---\n+---   vim.lsp.enable('lua_ls', {\n+---     cmd = { 'lua-language-server' },\n+---     filetypes = { 'lua' },\n+---     root_markers = { '.luarc.json', '.luacheckrc', '.stylua.toml' },\n+---     settings = {\n+---       Lua = {\n+---         hint = {\n+---           enable = true,\n+---           paramName = 'Literal',\n+---           setType = true,\n+---         },\n+---       },\n+---     },\n+---   })\n+--- ```\n+---\n+--- @param name string\n+--- @param config? vim.lsp.Config\n+function lsp.enable(name, config)\n+  assert(name and name ~= '*', 'Invalid name')\n+  validate('config', config, 'table', true)\n+\n+  if config then\n+    lsp.config[name] = config\n+  end\n+\n+  config = merge_configs(lsp.config['*'], lsp.config[name], config)\n+  config.name = name\n+\n+  validate('cmd', config.cmd, { 'function', 'table' })\n+  validate('cmd', config.reuse_client, 'function', true)\n+  -- TODO(lewis6991): validate more config fields\n+\n+  api.nvim_create_autocmd('FileType', {\n+    pattern = config.filetypes,\n+    group = api.nvim_create_augroup('nvim.lsp.enable.' .. name, {}),\n+    callback = function(args)\n+      local bufnr = args.buf --- @type integer\n+      if vim.bo[bufnr].buftype == 'nofile' then",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1868157118",
            "id": 1868157118,
            "in_reply_to_id": 1868086229,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vWdC-",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 381,
            "original_position": 171,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2476404522,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868157118/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T17:44:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868157118",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1868163517"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868163517"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, that's right. I'm pretty sure I do this for gitsigns diff buffers.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T17:48:34Z",
            "diff_hunk": "@@ -211,6 +211,193 @@ local function reuse_client_default(client, config)\n   return false\n end\n \n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- Filetypes the server will attach to.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+\n+--- Define default configuration for LSP clients.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be used as a table.\n+---\n+--- Examples:\n+---\n+--- - Set default root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+---\n+--- - Set default configuration for clangd using table form:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+---\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+--- @nodoc\n+--- @type table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    self[name] = cfg\n+  end,\n+})\n+\n+local client_config_list_keys = {\n+  'filetypes',\n+  'on_attach',\n+  'on_exit',\n+  'on_init',\n+  'root_markers',\n+}\n+\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local config = vim.tbl_deep_extend('force', ...)\n+  for _, k in ipairs(client_config_list_keys) do\n+    for i = 1, select('#', ...) do\n+      local v = select(i, ...)\n+      if v and v[k] then\n+        config[k] = vim.list_extend(vim.deepcopy(vim._ensure_list(v[k])), config[k] or {})\n+      end\n+    end\n+  end\n+  return config\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.\n+---\n+--- Uses default configuration defined with `vim.lsp.config`.\n+---\n+--- Examples:\n+---\n+--- ```lua\n+---   vim.lsp.enable('clangd', {\n+---     cmd = { 'clangd', '--clang-tidy' },\n+---     root_markers = { '.clangd', 'compile_commands.json' },\n+---     filetypes = { 'c', 'cpp' },\n+---   })\n+---\n+---   -- or if config is already defined\n+---   vim.lsp.enable('clangd')\n+---\n+---   vim.lsp.enable('lua_ls', {\n+---     cmd = { 'lua-language-server' },\n+---     filetypes = { 'lua' },\n+---     root_markers = { '.luarc.json', '.luacheckrc', '.stylua.toml' },\n+---     settings = {\n+---       Lua = {\n+---         hint = {\n+---           enable = true,\n+---           paramName = 'Literal',\n+---           setType = true,\n+---         },\n+---       },\n+---     },\n+---   })\n+--- ```\n+---\n+--- @param name string\n+--- @param config? vim.lsp.Config\n+function lsp.enable(name, config)\n+  assert(name and name ~= '*', 'Invalid name')\n+  validate('config', config, 'table', true)\n+\n+  if config then\n+    lsp.config[name] = config\n+  end\n+\n+  config = merge_configs(lsp.config['*'], lsp.config[name], config)\n+  config.name = name\n+\n+  validate('cmd', config.cmd, { 'function', 'table' })\n+  validate('cmd', config.reuse_client, 'function', true)\n+  -- TODO(lewis6991): validate more config fields\n+\n+  api.nvim_create_autocmd('FileType', {\n+    pattern = config.filetypes,\n+    group = api.nvim_create_augroup('nvim.lsp.enable.' .. name, {}),\n+    callback = function(args)\n+      local bufnr = args.buf --- @type integer\n+      if vim.bo[bufnr].buftype == 'nofile' then",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1868163517",
            "id": 1868163517,
            "in_reply_to_id": 1868086229,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vWem9",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 381,
            "original_position": 171,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2476414854,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868163517/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T17:48:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868163517",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1868503297"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868503297"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Let me link #30957 again here as another example. ",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-03T23:37:35Z",
            "diff_hunk": "@@ -211,6 +211,193 @@ local function reuse_client_default(client, config)\n   return false\n end\n \n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- Filetypes the server will attach to.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+\n+--- Define default configuration for LSP clients.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be used as a table.\n+---\n+--- Examples:\n+---\n+--- - Set default root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+---\n+--- - Set default configuration for clangd using table form:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+---\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+--- @nodoc\n+--- @type table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    self[name] = cfg\n+  end,\n+})\n+\n+local client_config_list_keys = {\n+  'filetypes',\n+  'on_attach',\n+  'on_exit',\n+  'on_init',\n+  'root_markers',\n+}\n+\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local config = vim.tbl_deep_extend('force', ...)\n+  for _, k in ipairs(client_config_list_keys) do\n+    for i = 1, select('#', ...) do\n+      local v = select(i, ...)\n+      if v and v[k] then\n+        config[k] = vim.list_extend(vim.deepcopy(vim._ensure_list(v[k])), config[k] or {})\n+      end\n+    end\n+  end\n+  return config\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.\n+---\n+--- Uses default configuration defined with `vim.lsp.config`.\n+---\n+--- Examples:\n+---\n+--- ```lua\n+---   vim.lsp.enable('clangd', {\n+---     cmd = { 'clangd', '--clang-tidy' },\n+---     root_markers = { '.clangd', 'compile_commands.json' },\n+---     filetypes = { 'c', 'cpp' },\n+---   })\n+---\n+---   -- or if config is already defined\n+---   vim.lsp.enable('clangd')\n+---\n+---   vim.lsp.enable('lua_ls', {\n+---     cmd = { 'lua-language-server' },\n+---     filetypes = { 'lua' },\n+---     root_markers = { '.luarc.json', '.luacheckrc', '.stylua.toml' },\n+---     settings = {\n+---       Lua = {\n+---         hint = {\n+---           enable = true,\n+---           paramName = 'Literal',\n+---           setType = true,\n+---         },\n+---       },\n+---     },\n+---   })\n+--- ```\n+---\n+--- @param name string\n+--- @param config? vim.lsp.Config\n+function lsp.enable(name, config)\n+  assert(name and name ~= '*', 'Invalid name')\n+  validate('config', config, 'table', true)\n+\n+  if config then\n+    lsp.config[name] = config\n+  end\n+\n+  config = merge_configs(lsp.config['*'], lsp.config[name], config)\n+  config.name = name\n+\n+  validate('cmd', config.cmd, { 'function', 'table' })\n+  validate('cmd', config.reuse_client, 'function', true)\n+  -- TODO(lewis6991): validate more config fields\n+\n+  api.nvim_create_autocmd('FileType', {\n+    pattern = config.filetypes,\n+    group = api.nvim_create_augroup('nvim.lsp.enable.' .. name, {}),\n+    callback = function(args)\n+      local bufnr = args.buf --- @type integer\n+      if vim.bo[bufnr].buftype == 'nofile' then",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1868503297",
            "id": 1868503297,
            "in_reply_to_id": 1868086229,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vXxkB",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 381,
            "original_position": 171,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2476968763,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868503297/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-03T23:37:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1868503297",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871193042"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871193042"
                }
            },
            "author_association": "MEMBER",
            "body": "If there is potential that people will want to \"disable\" configs, then `{config}` arg will be able to take `false` in the future?\r\n\r\n    vim.lsp.enable('foo', false)",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T11:21:53Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871193042",
            "id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viCPS",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481377009,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871193042/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T11:22:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871193042",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871197333"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871197333"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we even need a `config` arg on `enable()` or could we require a `vim.lsp.config()` call?\r\n\r\n```lua\r\nvim.lsp.config('foo', {...})\r\nvim.lsp.enable('foo')\r\n```",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T11:24:20Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871197333",
            "id": 1871197333,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viDSV",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481383998,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871197333/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T11:24:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871197333",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871203795"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871203795"
                }
            },
            "author_association": "MEMBER",
            "body": "It's up to you. I'm happy to allow a config arg to avoid boilerplate which is one of the goals of this PR.\r\n\r\nWe can allow `false` to be passed to disable a config. Do you want me to add that in this PR or can it be deferred?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T11:29:17Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871203795",
            "id": 1871203795,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viE3T",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481394531,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871203795/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T11:29:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871203795",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871203841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871203841"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      • {filetypes}?     (`string[]`) Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\r\n```",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T11:29:19Z",
            "diff_hunk": "@@ -590,6 +590,23 @@ LspTokenUpdate                                                *LspTokenUpdate*\n ==============================================================================\n Lua module: vim.lsp                                                 *lsp-core*\n \n+*vim.lsp.Config*\n+    Extends: |vim.lsp.ClientConfig|\n+\n+\n+    Fields: ~\n+      • {filetypes}?     (`string[]`) Filetypes the server will attach to.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871203841",
            "id": 1871203841,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viE4B",
            "original_commit_id": "0807ee2ea53c5be9bf751648d090c5d1311728f2",
            "original_line": 598,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481394584,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871203841/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T11:29:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871203841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871209151"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871209151"
                }
            },
            "author_association": "MEMBER",
            "body": "off-topic, I guess report_info should accept a list which would be treated as list items.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T11:33:10Z",
            "diff_hunk": "@@ -28,42 +28,45 @@ local function check_log()\n   report_fn(string.format('Log size: %d KB', log_size / 1000))\n end\n \n+--- @param f function\n+--- @return string\n+local function func_tostring(f)\n+  local info = debug.getinfo(f, 'S')\n+  return ('<function %s:%s>'):format(info.source, info.linedefined)\n+end\n+\n local function check_active_clients()\n   vim.health.start('vim.lsp: Active Clients')\n   local clients = vim.lsp.get_clients()\n   if next(clients) then\n     for _, client in pairs(clients) do\n       local cmd ---@type string\n-      if type(client.config.cmd) == 'table' then\n-        cmd = table.concat(client.config.cmd --[[@as table]], ' ')\n-      elseif type(client.config.cmd) == 'function' then\n-        cmd = tostring(client.config.cmd)\n+      local ccmd = client.config.cmd\n+      if type(ccmd) == 'table' then\n+        cmd = vim.inspect(ccmd)\n+      elseif type(ccmd) == 'function' then\n+        cmd = func_tostring(ccmd)\n       end\n       local dirs_info ---@type string\n       if client.workspace_folders and #client.workspace_folders > 1 then\n-        dirs_info = string.format(\n-          '  Workspace folders:\\n    %s',\n-          vim\n-            .iter(client.workspace_folders)\n-            ---@param folder lsp.WorkspaceFolder\n-            :map(function(folder)\n-              return folder.name\n-            end)\n-            :join('\\n    ')\n-        )\n+        local wfolders = {} --- @type string[]\n+        for _, dir in ipairs(client.workspace_folders) do\n+          wfolders[#wfolders + 1] = dir.name\n+        end\n+        dirs_info = ('- Workspace folders:\\n    %s'):format(table.concat(wfolders, '\\n    '))\n       else\n         dirs_info = string.format(\n-          '  Root directory: %s',\n+          '- Root directory: %s',\n           client.root_dir and vim.fn.fnamemodify(client.root_dir, ':~')\n         ) or nil\n       end\n       report_info(table.concat({\n         string.format('%s (id: %d)', client.name, client.id),\n         dirs_info,\n-        string.format('  Command: %s', cmd),\n-        string.format('  Settings: %s', vim.inspect(client.settings, { newline = '\\n  ' })),\n+        string.format('- Command: %s', cmd),\n+        string.format('- Settings: %s', vim.inspect(client.settings, { newline = '\\n  ' })),\n         string.format(\n-          '  Attached buffers: %s',\n+          '- Attached buffers: %s',",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871209151",
            "id": 1871209151,
            "line": 69,
            "node_id": "PRRC_kwDOAPphoM5viGK_",
            "original_commit_id": "0807ee2ea53c5be9bf751648d090c5d1311728f2",
            "original_line": 69,
            "original_position": 60,
            "original_start_line": 66,
            "path": "runtime/lua/vim/lsp/health.lua",
            "position": 60,
            "pull_request_review_id": 2481403654,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871209151/reactions"
            },
            "side": "RIGHT",
            "start_line": 66,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-05T11:33:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871209151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871217466"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871217466"
                }
            },
            "author_association": "MEMBER",
            "body": "> We can allow `false` to be passed to disable a config. Do you want me to add that in this PR or can it be deferred?\r\n\r\n\r\nCan be deferred, just wanted to make sure the door is open for it. Might be worth a 1-line TODO comment.\r\n\r\n\r\n\r\n> I'm happy to allow a config arg to avoid boilerplate which is one of the goals of this PR.\r\n\r\nMost users that are using the default configs will only need to call `enable()` (no config-arg), right? I think it's perfectly fine to require a `vim.lsp.config()` call for overriding defaults or redefining a config. And that cleanly separates the purpose of each, and also simplifies the docs.\r\n\r\nAnd this is easily reversible in the future by overloading `enable` if it turns out it's really needed.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T11:38:12Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871217466",
            "id": 1871217466,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viIM6",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481417538,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871217466/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T11:39:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871217466",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871222759"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871222759"
                }
            },
            "author_association": "MEMBER",
            "body": "What's the plan for distributing default configs to users? Is it the rtp approach? Otherwise, when this is merged, and potentially for the 0.11 release, the common usecase will be providing `config()` and `enable()` together.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T11:41:41Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871222759",
            "id": 1871222759,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viJfn",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481426432,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871222759/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T11:41:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871222759",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871248231"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871248231"
                }
            },
            "author_association": "MEMBER",
            "body": "> the common usecase will be providing `config()` and `enable()` together.\r\n\r\nIf we provide default configs, then Nvim itself does the `config()` call. The user only does `enable()`. Right?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T11:59:33Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871248231",
            "id": 1871248231,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viPtn",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481469632,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871248231/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T12:01:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871248231",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871259210"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871259210"
                }
            },
            "author_association": "MEMBER",
            "body": "> then Nvim itself does the config() call.\r\n\r\nWhen/where? Via the rtp method via a future PR?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T12:02:37Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871259210",
            "id": 1871259210,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viSZK",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481484870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871259210/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T12:02:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871259210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871272220"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871272220"
                }
            },
            "author_association": "MEMBER",
            "body": "However we decide to do it, it will involve a `config()` call, right?\r\n\r\nIf we *don't* provide default configs, then avoiding one extra call is not really going to answer the bigger question of \"I want stuff OOTB\".",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T12:12:28Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871272220",
            "id": 1871272220,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viVkc",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481507226,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871272220/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T12:13:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871272220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871272882"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871272882"
                }
            },
            "author_association": "MEMBER",
            "body": "One usecase that I've tried to cover is something like:\r\n\r\n```lua\r\nvim.lsp.enable('bashls', {\r\n  filetypes = 'rando_bash_ft'\r\n  settings = {\r\n    bashIde = {\r\n      shellcheckArguments = {\r\n        '-e', 'SC2086', -- Double quote to prevent globbing and word splitting\r\n        '-e', 'SC2155', -- Declare and assign separately to avoid masking return values\r\n      },\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nWhere the passed config is partial and allows easily overriding default values.\r\n\r\nIf we require `vim.lsp.config()` for this then it becomes:\r\n\r\n```lua\r\nvim.lsp.config.bashls = vim.tbl_deep_extend('force', vim.lsp.config.bashls, {\r\n  settings = {\r\n    bashIde = {\r\n      shellcheckArguments = {\r\n        '-e', 'SC2086', -- Double quote to prevent globbing and word splitting\r\n        '-e', 'SC2155', -- Declare and assign separately to avoid masking return values\r\n      },\r\n    }\r\n  }\r\n})\r\n\r\ntable.insert(vim.lsp.config.bashls.filetypes, 'rando_bash_ft')\r\n\r\nvim.lsp.enable('bashls')\r\n```\r\n\r\nNot a deal breaker, but worth noting.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T12:13:01Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871272882",
            "id": 1871272882,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viVuy",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481508298,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871272882/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T12:13:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871272882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871279562"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871279562"
                }
            },
            "author_association": "MEMBER",
            "body": "> However we decide to do it, it will involve a config() call, right?\r\n\r\nYes, but also changes to `vim.lsp.enable()`.\r\n\r\nI'm mainly asking because I think forcing `vim.lsp.config()` accelerates the need for us (or plugins) distributing default configs **efficiently**. If we want to defer that, then allowing config in `vim.lsp.enable` is a nice reduction in friction for the meantime.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T12:17:44Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871279562",
            "id": 1871279562,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viXXK",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481519890,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871279562/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T12:17:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871279562",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871288721"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871288721"
                }
            },
            "author_association": "MEMBER",
            "body": "> If we require `vim.lsp.config()` for this then it becomes:\r\n> \r\n> ```lua\r\n> vim.lsp.config.bashls = vim.tbl_deep_extend('force', vim.lsp.config.bashls, { ... })\r\n> table.insert(vim.lsp.config.bashls.filetypes, 'rando_bash_ft')\r\n> ```\r\n\r\nOh that's definitely less ergonomic. I guess you already considered this, but the obvious question is why can't we make `config()` have the same ergonomics as your `enable()` example?\r\n\r\n```lua\r\nvim.lsp.config('bashls', {\r\n  filetypes = 'rando_bash_ft',\r\n  settings = { ... },\r\n})\r\nvim.lsp.enable('bashls')\r\n```",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T12:23:15Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871288721",
            "id": 1871288721,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viZmR",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481538225,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871288721/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T12:23:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871288721",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871295501"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871295501"
                }
            },
            "author_association": "MEMBER",
            "body": "I guess the answer is \"because `enable` merges stuff, whereas `config` fully overwrites the config\". But does `enable` define an override only for the filetypes, or does it globally augment the default `config`? If it's global, then merging would fit on `config()`. If it's specific to the enable filetypes cases, then yeah it probably belongs on `enable()`.\r\n\r\nShould be called out in the docs for `enable`.\r\n\r\nAs a user trying to understand all these semantics, I suspect it's easier to understand if:\r\n- `config` fully owns defining and merging both the \"global\" and \"per-filetype\" config. \r\n- `enable` only manages the FileType handlers.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T12:28:07Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871295501",
            "id": 1871295501,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vibQN",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481549598,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871295501/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T12:34:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871295501",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871354774"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871354774"
                }
            },
            "author_association": "MEMBER",
            "body": "Shipping default configs keeps coming up, but do we have some concrete examples of what that would entail?\r\n\r\nFor example, looking at `clangd` in lspconfig:\r\n\r\n- cmd: `clangd`\r\n- filetypes: `filetypes = { 'c', 'cpp', 'objc', 'objcpp', 'cuda', 'proto' },`\r\n- root_dir: ` root_dir = function(fname)\r\n      return util.root_pattern(\r\n        '.clangd',\r\n        '.clang-tidy',\r\n        '.clang-format',\r\n        'compile_commands.json',\r\n        'compile_flags.txt',\r\n        'configure.ac' -- AutoTools\r\n      )(fname) or util.find_git_ancestor(fname)\r\n    end,`\r\n\r\n\r\n- `single_file_support`: Not in core, imho shouldn't be, that's `root_dir = nil`\r\n- capabilities: These are off-spec definitions, not in scope of score\r\n- commands: user commands, shouldn't be part of lsp interfaces. The functions they enable are also off-spec\r\n\r\nAre we talking about server-name -> `filetypes` mappings, or more?\r\n\r\n---\r\n\r\nI'm still unsure if defining root dir heuristics for the users is a good move as it can lead to surprising behavior. In vscode and all the other \"easy to use\" editors the choice is also made by the user.\r\nIn helix there are also issues about it doing the wrong thing.\r\n\r\n_If_ we include them, we'd imho have to think how to surface it more prominently (e.g. different statusline defaults)\r\n\r\n---\r\n\r\nSpeaking for how I'd use it: I'd always set a (partial) config explicitly when using lsp.enable.\r\n(Once global for some capabilities changes, once per server where I don't use a `ftplugin` anyway for `lsp.start`)\r\n\r\n---\r\n\r\nThat aside, having some kind of merge capabilities for `lsp.config` calls could help language specific plugins like nvim-jdtls. Would be great if we'd end up with something where users can do `vim.lsp.enable(\"jdtls\", { cmd = ... })` and they'd gain all the extra functions with no additional configuration because nvim-jdtls can set all its extra capabilities via a `vim.lsp.config` call.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T13:06:36Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871354774",
            "id": 1871354774,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vipuW",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481647485,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871354774/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T13:17:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871354774",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871372779"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871372779"
                }
            },
            "author_association": "MEMBER",
            "body": "A lot of users will want to pull in these settings from somewhere even if it's just for command and filetypes.\r\n\r\nI'm less concerned about including these in core, but more about enabling a general mechanism so plugins can provide these configurations passively. At least then this logic can be deferred to someone else to figure out instead of the user.\r\n\r\nAnd obviously it's worth reiterating that the goal isn't a one size fits all, just most.\r\n\r\nI also feel like you potentially attribute a lot more weight to potential issues here because you use java? For all the languages I use, this model fits very well. And for cases it doesn't, there's appropriate escape hatches to fix things.\r\n\r\n---\r\n\r\nEDIT: looks like you edit sniped me and seem to mostly agree with me.\r\n\r\nIs there really much issue with having `vim.lsp.config()` separated out (which does config merging)? It does simplify how to explain this.\r\n\r\n---\r\n\r\nEDIT2: I also had a draft comment on my laptop I forgot to post and I replied thinking you had read that. I've posted that comment below.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T13:19:30Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871372779",
            "id": 1871372779,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viuHr",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481677657,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871372779/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T13:25:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871372779",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871379846"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871379846"
                }
            },
            "author_association": "MEMBER",
            "body": "> Oh that's definitely less ergonomic. I guess you already considered this, but the obvious question is why can't we make config() have the same ergonomics as your enable() example?\r\n\r\nLike your example, we can make `vim.lsp.config()` update a config, whereas `vim.lsp.config[name] = {}` completely redefines a config.\r\n\r\nIn the PR's current form, the config passed to `enable` affects the global config, but is lazy resolved. Not a big deal. \r\n\r\nAlso something I've been trying to keep in mind, but haven't been able to implement is accommodating project specific instances of `vim.lsp.enable()`. But I haven't got anything, so lets go ahead with the simplification. I'll also remove the `*` configuration since that's not that useful in practice.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T13:24:13Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871379846",
            "id": 1871379846,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viv2G",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481689287,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871379846/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T13:24:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871379846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871427117"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871427117"
                }
            },
            "author_association": "MEMBER",
            "body": "> I'll also remove the * configuration since that's not that useful in practice.\r\n\r\nIt would allow plugins that add extra capabilities not yet in core to set `lsp.config(\"*\", { capabilities = ... })`\r\n\r\n> I also feel like you potentially attribute a lot more weight to potential issues here because you use java? For all the languages I use, this model fits very well. And for cases it doesn't, there's appropriate escape hatches to fix things.\r\n\r\njava is certainly a special snowflake but the issue with root dir detection is not limited to it.\r\nThere is a good chunk of closed issues in lspconfig related to servers not attaching, or starting more than one, or slow performance - all related in some way to root dir definitions. \r\nMurphy's law: Anything that can go wrong will go wrong. \r\nIf users set it explicitly themselves they'd at least have some lead of what could've led to the issue. I agree that the goal isn't one size fits all, but if we do make a choice for users we need to think about how it affects users where the choice doesn't fit and how they can deal with it. One option I can think of is making root_dir choice and server count visible in statusline and maybe clickable to lead them to the health check or the docs for more info.\r\n(Or simply not make the choice for them)\r\n\r\nI raise this only as a concern for moving the root markers into core.\r\n\r\nWhat I agree with or see as unproblematic:\r\n- configs should be mergeable in some form, and plugins should be able to set them passivley. (Especially capabilities, since they have to be set before a client/server starts)\r\n- server name -> filetypes mapping could be in core, that's less likely to cause issues. (In vscode that's something the language extensions define) although the \"make it visible\" aspect still applies somewhat.\r\n\r\n\r\n> Is there really much issue with having vim.lsp.config() separated out (which does config merging)? It does simplify how to explain this.\r\n\r\nNo big deal, but I already see myself adding some kind of `enable(name, config)` that would call `lsp.config(name, config); lsp.enable(name)`  to avoid the `lsp.config(); lsp.enable() * server` pairs - so why not provide it?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T13:53:02Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871427117",
            "id": 1871427117,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vi7Yt",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481772201,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871427117/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T13:53:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871427117",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871427398"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871427398"
                }
            },
            "author_association": "MEMBER",
            "body": "> Shipping default configs keeps coming up\r\n\r\nYes, and partly my fault, so let me state clearly here what I meant by that:\r\n1. We **want** to ship default configs with `nvim-lspconfig` (as that is that repo's purpose; i.e., the goal is not shipping something more but _removing everything else_).\r\n2. We _then_ **might** want to ship default configs with Neovim for languages we think should be easy to set up out-of-the-box _but currently aren't_ -- that list may very well be empty (but need not stay that way). Potential candidates are `clangd` (too simple), `luals` (already handled by our editorconfig), `ts_query_ls` (not done yet), so this use case is indeed not relevant right now.\r\n\r\nTL;DR: the main target for \"shipping configs\" is nvim-lspconfig, _not_ core; that is just a door we're leaving open (at no current cost).\r\n\r\n",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T13:53:12Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871427398",
            "id": 1871427398,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vi7dG",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481772645,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871427398/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T13:59:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871427398",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871435427"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871435427"
                }
            },
            "author_association": "MEMBER",
            "body": "> No big deal, but I already see myself adding some kind of enable(name, config) that would call lsp.config(name, config); lsp.enable(name) to avoid the lsp.config(); lsp.enable() * server pairs - so why not provide it?\r\n\r\nMe too, and hence my initial pushback to Justin's comments. I agree with Justin that It does simplify the model and makes the role/accountabilities of each function very clear. And it's not a closed door to allow this in the future.\r\n\r\n> It would allow plugins that add extra capabilities not yet in core to set lsp.config(\"*\", { capabilities = ... })\r\n\r\nErrhh, good point. This simplified a lot, but I'll keep it.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T13:58:27Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871435427",
            "id": 1871435427,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vi9aj",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481786014,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871435427/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T13:59:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871435427",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871442283"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871442283"
                }
            },
            "author_association": "MEMBER",
            "body": "And given that the \"real\" target here is nvim-lsponfig, that strongly pushes us towards passive discovery on `rtp` because otherwise we'd need to keep some sort of setup logic in `nvim-lspconfig`, again duplicating logic. `rtp` precedence is also well-documented and (despite some hitches) established pattern for custom and overridden treesitter queries.\r\n\r\n(If we go that route, an open question is about _merging_ matching configs on `rtp`, but I'm not convinced that needs to or should be part of the initial implementation. Worth keeping in mind, though.)",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T14:02:58Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871442283",
            "id": 1871442283,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vi_Fr",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481797982,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871442283/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T14:02:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871442283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871455431"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871455431"
                }
            },
            "author_association": "MEMBER",
            "body": "> (If we go that route, an open question is about merging matching configs on rtp, but I'm not convinced that needs to or should be part of the initial implementation. Worth keeping in mind, though.)\r\n\r\nWe wouldn't have to merge. We can just source the files according to rtp rules. Each file can either call `vim.lsp.config()` to update a config, or use `vim.lsp.config[name] = ...` to redefine a config. It'll be down to the file what it wants to do.\r\n\r\nAnd to note the merging semantics I've added here will be the same as `tbl_deep_extend` except:\r\n- Lists: `filetypes` and `root_markers` are extended.\r\n- Fields can be single or list (`on_attach`, `on_exit`, `on_init`), so they are coerced into a list.\r\n\r\n",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T14:11:12Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871455431",
            "id": 1871455431,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vjCTH",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481820526,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871455431/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T14:11:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871455431",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871469970"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871469970"
                }
            },
            "author_association": "MEMBER",
            "body": "Even better.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T14:19:36Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871469970",
            "id": 1871469970,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vjF2S",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481845427,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871469970/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T14:19:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871469970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871483853"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871483853"
                }
            },
            "author_association": "MEMBER",
            "body": "> > Is there really much issue with having vim.lsp.config() separated out (which does config merging)? It does simplify how to explain this.\r\n> \r\n> No big deal, but I already see myself adding some kind of `enable(name, config)` that would call `lsp.config(name, config); lsp.enable(name)` to avoid the `lsp.config(); lsp.enable() * server` pairs - so why not provide it?\r\n\r\nBecause\r\n1. it's confusing to explain (and understand, for users) how `config('foo', <config>)` differs from `enable('foo', <config>)`. If `config()` owns setting/merging configs then docs and concepts are simpler. That gain is worth the cost of one extra function call (which will not even be needed for users that don't want to modify the default 'foo' config).\r\n2. the door is open to extending `enable()` in a future PR.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T14:27:32Z",
            "diff_hunk": "@@ -698,6 +715,75 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {config})                                    *vim.lsp.enable()*",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871483853",
            "id": 1871483853,
            "in_reply_to_id": 1871193042,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vjJPN",
            "original_commit_id": "51c4b0c64310addbd417ac38978ebb7872101ea4",
            "original_line": 751,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481869079,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871483853/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T14:27:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871483853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871516654"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871516654"
                }
            },
            "author_association": "MEMBER",
            "body": "root_markers?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T14:47:13Z",
            "diff_hunk": "@@ -698,6 +736,53 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Define default configuration for LSP clients.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be used as a table.\n+\n+    Examples:\n+    • Set default root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Set default configuration for clangd using table form: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         markers = { '.clangd', 'compile_commands.json' },",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871516654",
            "id": 1871516654,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vjRPu",
            "original_commit_id": "c5854c7e03a2318a7f304e48aa825b3476852219",
            "original_line": 760,
            "original_position": 170,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2481925752,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871516654/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T14:47:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871516654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871519833"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871519833"
                }
            },
            "author_association": "MEMBER",
            "body": "Just for reference: is this similar to the proposed `vim.merge` behavior? https://github.com/neovim/neovim/pull/15124",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T14:49:00Z",
            "diff_hunk": "@@ -307,6 +307,241 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871519833",
            "id": 1871519833,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vjSBZ",
            "original_commit_id": "c5854c7e03a2318a7f304e48aa825b3476852219",
            "original_line": 322,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2481930942,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871519833/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T14:49:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871519833",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871527185"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871527185"
                }
            },
            "author_association": "MEMBER",
            "body": "Not really, and it won't be possible to generalize without some kind of schema since certain keys have specific merge semantics. E.g. `on_attach` is coerced into a list, whereas `cmd` is always replaced.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T14:52:51Z",
            "diff_hunk": "@@ -307,6 +307,241 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871527185",
            "id": 1871527185,
            "in_reply_to_id": 1871519833,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vjT0R",
            "original_commit_id": "c5854c7e03a2318a7f304e48aa825b3476852219",
            "original_line": 322,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2481942593,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871527185/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T14:52:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871527185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871543724"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871543724"
                }
            },
            "author_association": "MEMBER",
            "body": "(We discussed adding some schema to `tbl_deepextend` but quickly dismissed it as infeasible in general, especially given the rather academic -- at that time -- use cases.)",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T15:02:34Z",
            "diff_hunk": "@@ -307,6 +307,241 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871543724",
            "id": 1871543724,
            "in_reply_to_id": 1871519833,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vjX2s",
            "original_commit_id": "c5854c7e03a2318a7f304e48aa825b3476852219",
            "original_line": 322,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2481970613,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871543724/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T15:02:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871543724",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1871563696"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871563696"
                }
            },
            "author_association": "MEMBER",
            "body": "I've added this to `|lsp-config|`.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-05T15:14:01Z",
            "diff_hunk": "@@ -211,6 +211,193 @@ local function reuse_client_default(client, config)\n   return false\n end\n \n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- Filetypes the server will attach to.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+\n+--- Define default configuration for LSP clients.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be used as a table.\n+---\n+--- Examples:\n+---\n+--- - Set default root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+---\n+--- - Set default configuration for clangd using table form:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+---\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+--- @nodoc\n+--- @type table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    self[name] = cfg\n+  end,\n+})\n+\n+local client_config_list_keys = {\n+  'filetypes',\n+  'on_attach',\n+  'on_exit',\n+  'on_init',\n+  'root_markers',\n+}\n+\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local config = vim.tbl_deep_extend('force', ...)\n+  for _, k in ipairs(client_config_list_keys) do\n+    for i = 1, select('#', ...) do\n+      local v = select(i, ...)\n+      if v and v[k] then\n+        config[k] = vim.list_extend(vim.deepcopy(vim._ensure_list(v[k])), config[k] or {})\n+      end\n+    end\n+  end\n+  return config\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.\n+---\n+--- Uses default configuration defined with `vim.lsp.config`.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1871563696",
            "id": 1871563696,
            "in_reply_to_id": 1868082721,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vjcuw",
            "original_commit_id": "d59d0c8214d804e086fdc256cff1832191f708a2",
            "original_line": 497,
            "original_position": 119,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2482004868,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871563696/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T15:14:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871563696",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872549634"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872549634"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit:\r\n```suggestion\r\n        cmd = { 'name-of-language-server-executable', '--option', 'arg1', 'arg2' },\r\n```",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:20:01Z",
            "diff_hunk": "@@ -28,30 +28,48 @@ Follow these steps to get LSP features:\n    upstream installation instructions. You can find language servers here:\n    https://microsoft.github.io/language-server-protocol/implementors/servers/\n \n-2. Use |vim.lsp.start()| to start the LSP server (or attach to an existing\n-   one) when a file is opened. Example: >lua\n-    -- Create an event handler for the FileType autocommand\n-    vim.api.nvim_create_autocmd('FileType', {\n-      -- This handler will fire when the buffer's 'filetype' is \"python\"\n-      pattern = 'python',\n-      callback = function(args)\n-        vim.lsp.start({\n-          name = 'my-server-name',\n-          cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n-\n-          -- Set the \"root directory\" to the parent directory of the file in the\n-          -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n-          -- \"pyproject.toml\" file. Files that share a root directory will reuse\n-          -- the connection to the same LSP server.\n-          root_dir = vim.fs.root(args.buf, {'setup.py', 'pyproject.toml'}),\n-        })\n-      end,\n-    })\n+2. Use |vim.lsp.config()| to define a configuration for an LSP client.\n+    Example: >lua\n+      vim.lsp.config['my-server-name'] = {\n+        cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872549634",
            "id": 1872549634,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vnNcC",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 34,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872549634/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872549634",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872550765"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872550765"
                }
            },
            "author_association": "MEMBER",
            "body": "I think examples are more valuable when they refer to real-life scenarios and not just \"foo-bar\" cases.\r\nThis is to say: Consider using `pyright` here instead of `my-server-name`.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:21:21Z",
            "diff_hunk": "@@ -28,30 +28,48 @@ Follow these steps to get LSP features:\n    upstream installation instructions. You can find language servers here:\n    https://microsoft.github.io/language-server-protocol/implementors/servers/\n \n-2. Use |vim.lsp.start()| to start the LSP server (or attach to an existing\n-   one) when a file is opened. Example: >lua\n-    -- Create an event handler for the FileType autocommand\n-    vim.api.nvim_create_autocmd('FileType', {\n-      -- This handler will fire when the buffer's 'filetype' is \"python\"\n-      pattern = 'python',\n-      callback = function(args)\n-        vim.lsp.start({\n-          name = 'my-server-name',\n-          cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n-\n-          -- Set the \"root directory\" to the parent directory of the file in the\n-          -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n-          -- \"pyproject.toml\" file. Files that share a root directory will reuse\n-          -- the connection to the same LSP server.\n-          root_dir = vim.fs.root(args.buf, {'setup.py', 'pyproject.toml'}),\n-        })\n-      end,\n-    })\n+2. Use |vim.lsp.config()| to define a configuration for an LSP client.\n+    Example: >lua\n+      vim.lsp.config['my-server-name'] = {",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872550765",
            "id": 1872550765,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vnNtt",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 33,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872550765/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872550765",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872551809"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872551809"
                }
            },
            "author_association": "MEMBER",
            "body": "Might be valuable to mention here which `runtime` paths are included.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:23:39Z",
            "diff_hunk": "@@ -28,30 +28,48 @@ Follow these steps to get LSP features:\n    upstream installation instructions. You can find language servers here:\n    https://microsoft.github.io/language-server-protocol/implementors/servers/\n \n-2. Use |vim.lsp.start()| to start the LSP server (or attach to an existing\n-   one) when a file is opened. Example: >lua\n-    -- Create an event handler for the FileType autocommand\n-    vim.api.nvim_create_autocmd('FileType', {\n-      -- This handler will fire when the buffer's 'filetype' is \"python\"\n-      pattern = 'python',\n-      callback = function(args)\n-        vim.lsp.start({\n-          name = 'my-server-name',\n-          cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n-\n-          -- Set the \"root directory\" to the parent directory of the file in the\n-          -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n-          -- \"pyproject.toml\" file. Files that share a root directory will reuse\n-          -- the connection to the same LSP server.\n-          root_dir = vim.fs.root(args.buf, {'setup.py', 'pyproject.toml'}),\n-        })\n-      end,\n-    })\n+2. Use |vim.lsp.config()| to define a configuration for an LSP client.\n+    Example: >lua\n+      vim.lsp.config['my-server-name'] = {\n+        cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n+        filetypes = { 'python' },\n+        -- Sets the \"root directory\" to the parent directory of the file in the\n+        -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n+        -- \"pyproject.toml\" file. Files that share a root directory will reuse\n+        -- the connection to the same LSP server.\n+        root_markers = {'setup.py', 'pyproject.toml'},\n+        -- Specific settings to send to the server. The schema for this is\n+        -- defined by the server.\n+        settings = {\n+          ...\n+        }\n+      }\n+<\n+\n+3. Use |vim.lsp.enable()| to enable a configuration.\n+   Example: >lua\n+     vim.lsp.enable('my-server-name')\n <\n-3. Check that the buffer is attached to the server: >vim\n-    :checkhealth lsp\n \n-4. (Optional) Configure keymaps and autocommands to use LSP features. |lsp-config|\n+4. Check that the buffer is attached to the server: >vim\n+    :checkhealth vim.lsp\n+\n+5. (Optional) Configure keymaps and autocommands to use LSP features.\n+   |lsp-attach|\n+\n+                                                        *lsp-config*\n+\n+Configurations for LSP clients is done via |vim.lsp.config()|.\n+\n+When a LSP client starts, it resolves a config by first sourcing\n+all the `lsp/<name>.lua` files in runtimepath. After that it merges",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872551809",
            "id": 1872551809,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vnN-B",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 65,
            "original_position": 60,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872551809/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872551809",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872552156"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872552156"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit (just a personal preference):\r\n```suggestion\r\n- Lists are extended (e.g.: `filetypes`, `root_markers`).\r\n```",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:24:22Z",
            "diff_hunk": "@@ -28,30 +28,48 @@ Follow these steps to get LSP features:\n    upstream installation instructions. You can find language servers here:\n    https://microsoft.github.io/language-server-protocol/implementors/servers/\n \n-2. Use |vim.lsp.start()| to start the LSP server (or attach to an existing\n-   one) when a file is opened. Example: >lua\n-    -- Create an event handler for the FileType autocommand\n-    vim.api.nvim_create_autocmd('FileType', {\n-      -- This handler will fire when the buffer's 'filetype' is \"python\"\n-      pattern = 'python',\n-      callback = function(args)\n-        vim.lsp.start({\n-          name = 'my-server-name',\n-          cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n-\n-          -- Set the \"root directory\" to the parent directory of the file in the\n-          -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n-          -- \"pyproject.toml\" file. Files that share a root directory will reuse\n-          -- the connection to the same LSP server.\n-          root_dir = vim.fs.root(args.buf, {'setup.py', 'pyproject.toml'}),\n-        })\n-      end,\n-    })\n+2. Use |vim.lsp.config()| to define a configuration for an LSP client.\n+    Example: >lua\n+      vim.lsp.config['my-server-name'] = {\n+        cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n+        filetypes = { 'python' },\n+        -- Sets the \"root directory\" to the parent directory of the file in the\n+        -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n+        -- \"pyproject.toml\" file. Files that share a root directory will reuse\n+        -- the connection to the same LSP server.\n+        root_markers = {'setup.py', 'pyproject.toml'},\n+        -- Specific settings to send to the server. The schema for this is\n+        -- defined by the server.\n+        settings = {\n+          ...\n+        }\n+      }\n+<\n+\n+3. Use |vim.lsp.enable()| to enable a configuration.\n+   Example: >lua\n+     vim.lsp.enable('my-server-name')\n <\n-3. Check that the buffer is attached to the server: >vim\n-    :checkhealth lsp\n \n-4. (Optional) Configure keymaps and autocommands to use LSP features. |lsp-config|\n+4. Check that the buffer is attached to the server: >vim\n+    :checkhealth vim.lsp\n+\n+5. (Optional) Configure keymaps and autocommands to use LSP features.\n+   |lsp-attach|\n+\n+                                                        *lsp-config*\n+\n+Configurations for LSP clients is done via |vim.lsp.config()|.\n+\n+When a LSP client starts, it resolves a config by first sourcing\n+all the `lsp/<name>.lua` files in runtimepath. After that it merges\n+in the special `*` configuration which applies to all clients.\n+\n+The merge semantics of configurations follow the behaviour of |\n+vim.tbl_deep_extend()| with the following differences.\n+- Lists are extended (`filetypes`, `root_markers`).",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872552156",
            "id": 1872552156,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vnODc",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 70,
            "original_position": 65,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872552156/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872552156",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872553887"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872553887"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we please merge these changes of using the methods instead of the function now? They're not core to this PR's feature and these updates should be done anyway since https://github.com/neovim/neovim/pull/31207 has been merged.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:27:38Z",
            "diff_hunk": "@@ -107,16 +125,16 @@ server. Example: >lua\n     vim.api.nvim_create_autocmd('LspAttach', {\n       callback = function(args)\n         local client = vim.lsp.get_client_by_id(args.data.client_id)\n-        if client.supports_method('textDocument/implementation') then\n+        if client:supports_method('textDocument/implementation') then",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872553887",
            "id": 1872553887,
            "line": 193,
            "node_id": "PRRC_kwDOAPphoM5vnOef",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 193,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 151,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872553887/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872553887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872555484"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872555484"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we need to have both `vim.lsp.rcp.PublicClient` and `vim.lsp.ClientConfig`?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:30:37Z",
            "diff_hunk": "@@ -590,6 +608,26 @@ LspTokenUpdate                                                *LspTokenUpdate*\n ==============================================================================\n Lua module: vim.lsp                                                 *lsp-core*\n \n+*vim.lsp.Config*\n+    Extends: |vim.lsp.ClientConfig|\n+\n+\n+    Fields: ~\n+      • {cmd}?           (`string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient`)",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872555484",
            "id": 1872555484,
            "line": 681,
            "node_id": "PRRC_kwDOAPphoM5vnO3c",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 681,
            "original_position": 127,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 193,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872555484/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872555484",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872555721"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872555721"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    Can also be table-assigned to redefine the configuration for a client.\r\n```",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:31:05Z",
            "diff_hunk": "@@ -698,6 +736,66 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Update the configuration for an LSP client.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be table assigned to redefine the configuration for a client.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872555721",
            "id": 1872555721,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vnO7J",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 744,
            "original_position": 154,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872555721/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872555721",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872557720"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872557720"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    Enable an LSP server for filetype(s) to automatically start when opening a\r\n```\r\n\r\nFor consistency with other documentation changes in this PR.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:33:33Z",
            "diff_hunk": "@@ -698,6 +736,66 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Update the configuration for an LSP client.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be table assigned to redefine the configuration for a client.\n+\n+    Examples:\n+    • Add a root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Add additional capabilities to all clients: >lua\n+       vim.lsp.config('*', {\n+         capabilities = {\n+           textDocument = {\n+             semanticTokens = {\n+               multilineTokenSupport = true,\n+             }\n+           }\n+         }\n+       })\n+<\n+    • (Re-)define the configuration for clangd: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         root_markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {enable})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872557720",
            "id": 1872557720,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vnPaY",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 784,
            "original_position": 194,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872557720/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872557720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872558829"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872558829"
                }
            },
            "author_association": "MEMBER",
            "body": "Kind of unrelated, but it feels redundant to both have `?` and `| nil` in the documentation.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:35:39Z",
            "diff_hunk": "@@ -698,6 +736,66 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Update the configuration for an LSP client.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be table assigned to redefine the configuration for a client.\n+\n+    Examples:\n+    • Add a root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Add additional capabilities to all clients: >lua\n+       vim.lsp.config('*', {\n+         capabilities = {\n+           textDocument = {\n+             semanticTokens = {\n+               multilineTokenSupport = true,\n+             }\n+           }\n+         }\n+       })\n+<\n+    • (Re-)define the configuration for clangd: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         root_markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {enable})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a\n+    buffer.\n+\n+    Uses configuration defined with `vim.lsp.config`.\n+\n+    Examples: >lua\n+          vim.lsp.enable('clangd')\n+\n+          vim.lsp.enable({'luals', 'pyright'})\n+<\n+\n+    Parameters: ~\n+      • {name}    (`string|string[]`) Name(s) of client(s) to enable.\n+      • {enable}  (`boolean?`) `true|nil` to enable, `false` to disable.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872558829",
            "id": 1872558829,
            "line": 862,
            "node_id": "PRRC_kwDOAPphoM5vnPrt",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 862,
            "original_position": 207,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 282,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872558829/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872558829",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872558978"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872558978"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  servers. In addition, configurations can be specified in `lsp/<name>.lua`.\r\n```",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:35:55Z",
            "diff_hunk": "@@ -232,6 +232,9 @@ LSP\n • Functions in |vim.lsp.Client| can now be called as methods.\n • Implemented LSP folding: |vim.lsp.foldexpr()|\n   https://microsoft.github.io/language-server-protocol/specification/#textDocument_foldingRange\n+• |vim.lsp.config()| has been added to define default configurations for\n+  servers. In addition configurations can be specified in `lsp/<name>.lua`.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872558978",
            "id": 1872558978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vnPuC",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 236,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872558978/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:02:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872558978",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872572716"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872572716"
                }
            },
            "author_association": "MEMBER",
            "body": "I would appreciate more documentation about the differences of these 2 types here. As someone that has worked on LSP for several years now, I still get confused about editors interchanging the client/server roles in their docs, and I would like Neovim to clearly indicate who's the client and who's the server here.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:43:03Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872572716",
            "id": 1872572716,
            "line": 319,
            "node_id": "PRRC_kwDOAPphoM5vnTEs",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 319,
            "original_position": 37,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 4,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872572716/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872572716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872577135"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872577135"
                }
            },
            "author_association": "MEMBER",
            "body": "What's the default?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:44:42Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872577135",
            "id": 1872577135,
            "line": 326,
            "node_id": "PRRC_kwDOAPphoM5vnUJv",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 326,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 11,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872577135/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872577135",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872580164"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872580164"
                }
            },
            "author_association": "MEMBER",
            "body": "Note that `name == ''` will be `true` here. Do we want that to be falsy?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:46:15Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+--- - Add additional capabilities to all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         capabilities = {\n+---           textDocument = {\n+---             semanticTokens = {\n+---               multilineTokenSupport = true,\n+---             }\n+---           }\n+---         }\n+---       })\n+---   ```\n+--- - (Re-)define the configuration for clangd:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         root_markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+lsp._enabled_configs = {} --- @type table<string,{resolved_config:vim.lsp.Config?}>\n+\n+--- If a config in vim.lsp.config() is accessed then the resolved config becomes invalid.\n+--- @param name string?\n+local function invalidate_enabled_config(name)\n+  if not name or name == '*' then",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872580164",
            "id": 1872580164,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vnU5E",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 418,
            "original_position": 111,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872580164/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872580164",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872582062"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872582062"
                }
            },
            "author_association": "MEMBER",
            "body": "For my own learning: Why not \"underscore\" this?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:47:04Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+--- - Add additional capabilities to all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         capabilities = {\n+---           textDocument = {\n+---             semanticTokens = {\n+---               multilineTokenSupport = true,\n+---             }\n+---           }\n+---         }\n+---       })\n+---   ```\n+--- - (Re-)define the configuration for clangd:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         root_markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+lsp._enabled_configs = {} --- @type table<string,{resolved_config:vim.lsp.Config?}>\n+\n+--- If a config in vim.lsp.config() is accessed then the resolved config becomes invalid.\n+--- @param name string?\n+local function invalidate_enabled_config(name)\n+  if not name or name == '*' then\n+    for _, v in pairs(lsp._enabled_configs) do\n+      v.resolved_config = nil\n+    end\n+  elseif lsp._enabled_configs[name] then\n+    lsp._enabled_configs[name].resolved_config = nil\n+  end\n+end\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872582062",
            "id": 1872582062,
            "line": 407,
            "node_id": "PRRC_kwDOAPphoM5vnVWu",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 407,
            "original_position": 124,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 92,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872582062/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872582062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872592704"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872592704"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- Enable a LSP server for its filetype(s) to automatically start when opening a buffer.\r\n```\r\n\r\nTo better indicate that `filetype(s)` refers to the input client name. I found a bit unclear how the docs refer to the arguments when skimming this.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T04:52:21Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+--- - Add additional capabilities to all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         capabilities = {\n+---           textDocument = {\n+---             semanticTokens = {\n+---               multilineTokenSupport = true,\n+---             }\n+---           }\n+---         }\n+---       })\n+---   ```\n+--- - (Re-)define the configuration for clangd:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         root_markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+lsp._enabled_configs = {} --- @type table<string,{resolved_config:vim.lsp.Config?}>\n+\n+--- If a config in vim.lsp.config() is accessed then the resolved config becomes invalid.\n+--- @param name string?\n+local function invalidate_enabled_config(name)\n+  if not name or name == '*' then\n+    for _, v in pairs(lsp._enabled_configs) do\n+      v.resolved_config = nil\n+    end\n+  elseif lsp._enabled_configs[name] then\n+    lsp._enabled_configs[name].resolved_config = nil\n+  end\n+end\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    invalidate_enabled_config(name)\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    invalidate_enabled_config(name)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    self[name] = merge_configs(self._configs[name], cfg)\n+  end,\n+})\n+\n+--- @private\n+--- @param name string\n+--- @return vim.lsp.Config\n+function lsp._resolve_config(name)\n+  local econfig = lsp._enabled_configs[name] or lsp.config._configs[name]\n+\n+  if not econfig.resolved_config then\n+    -- Resolve configs from lsp/*.lua\n+    for _, f in ipairs(api.nvim_get_runtime_file(('lsp/%s.lua'):format(name), true)) do\n+      local chunk = loadfile(f)\n+      if chunk then\n+        pcall(chunk)\n+      end\n+    end\n+\n+    local config = merge_configs(lsp.config._configs['*'], lsp.config._configs[name])\n+\n+    config.name = name\n+\n+    validate('cmd', config.cmd, { 'function', 'table' })\n+    validate('cmd', config.reuse_client, 'function', true)\n+    -- All other fields are validated in client.create\n+\n+    econfig.resolved_config = config\n+  end\n+\n+  return assert(econfig.resolved_config)\n+end\n+\n+local lsp_enable_autocmd_id --- @type integer?\n+\n+--- @param bufnr integer\n+local function lsp_enable_callback(bufnr)\n+  -- Only ever attach to buffers that represent an actual file.\n+  if vim.bo[bufnr].buftype ~= '' then\n+    return\n+  end\n+\n+  --- @param config vim.lsp.Config\n+  local function can_start(config)\n+    if config.filetypes and not vim.tbl_contains(config.filetypes, vim.bo[bufnr].filetype) then\n+      return false\n+    elseif type(config.cmd) == 'table' and vim.fn.executable(config.cmd[1]) == 0 then\n+      return false\n+    end\n+\n+    return true\n+  end\n+\n+  for name in vim.spairs(lsp._enabled_configs) do\n+    local config = lsp._resolve_config(name)\n+\n+    if can_start(config) then\n+      vim.lsp.start(config, {\n+        bufnr = bufnr,\n+        reuse_client = config.reuse_client,\n+        _root_markers = config.root_markers,\n+      })\n+    end\n+  end\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872592704",
            "id": 1872592704,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vnX9A",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 521,
            "original_position": 215,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2483581863,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872592704/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:01:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872592704",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872635341"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872635341"
                }
            },
            "author_association": "NONE",
            "body": "For consistency, as pointed out in another comment, perhaps also changing \"a LSP\" for \"an LSP\" could be beneficial.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T05:39:38Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+--- - Add additional capabilities to all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         capabilities = {\n+---           textDocument = {\n+---             semanticTokens = {\n+---               multilineTokenSupport = true,\n+---             }\n+---           }\n+---         }\n+---       })\n+---   ```\n+--- - (Re-)define the configuration for clangd:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         root_markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+lsp._enabled_configs = {} --- @type table<string,{resolved_config:vim.lsp.Config?}>\n+\n+--- If a config in vim.lsp.config() is accessed then the resolved config becomes invalid.\n+--- @param name string?\n+local function invalidate_enabled_config(name)\n+  if not name or name == '*' then\n+    for _, v in pairs(lsp._enabled_configs) do\n+      v.resolved_config = nil\n+    end\n+  elseif lsp._enabled_configs[name] then\n+    lsp._enabled_configs[name].resolved_config = nil\n+  end\n+end\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    invalidate_enabled_config(name)\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    invalidate_enabled_config(name)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    self[name] = merge_configs(self._configs[name], cfg)\n+  end,\n+})\n+\n+--- @private\n+--- @param name string\n+--- @return vim.lsp.Config\n+function lsp._resolve_config(name)\n+  local econfig = lsp._enabled_configs[name] or lsp.config._configs[name]\n+\n+  if not econfig.resolved_config then\n+    -- Resolve configs from lsp/*.lua\n+    for _, f in ipairs(api.nvim_get_runtime_file(('lsp/%s.lua'):format(name), true)) do\n+      local chunk = loadfile(f)\n+      if chunk then\n+        pcall(chunk)\n+      end\n+    end\n+\n+    local config = merge_configs(lsp.config._configs['*'], lsp.config._configs[name])\n+\n+    config.name = name\n+\n+    validate('cmd', config.cmd, { 'function', 'table' })\n+    validate('cmd', config.reuse_client, 'function', true)\n+    -- All other fields are validated in client.create\n+\n+    econfig.resolved_config = config\n+  end\n+\n+  return assert(econfig.resolved_config)\n+end\n+\n+local lsp_enable_autocmd_id --- @type integer?\n+\n+--- @param bufnr integer\n+local function lsp_enable_callback(bufnr)\n+  -- Only ever attach to buffers that represent an actual file.\n+  if vim.bo[bufnr].buftype ~= '' then\n+    return\n+  end\n+\n+  --- @param config vim.lsp.Config\n+  local function can_start(config)\n+    if config.filetypes and not vim.tbl_contains(config.filetypes, vim.bo[bufnr].filetype) then\n+      return false\n+    elseif type(config.cmd) == 'table' and vim.fn.executable(config.cmd[1]) == 0 then\n+      return false\n+    end\n+\n+    return true\n+  end\n+\n+  for name in vim.spairs(lsp._enabled_configs) do\n+    local config = lsp._resolve_config(name)\n+\n+    if can_start(config) then\n+      vim.lsp.start(config, {\n+        bufnr = bufnr,\n+        reuse_client = config.reuse_client,\n+        _root_markers = config.root_markers,\n+      })\n+    end\n+  end\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872635341",
            "id": 1872635341,
            "in_reply_to_id": 1872592704,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vniXN",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 521,
            "original_position": 215,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2483704692,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872635341/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T05:39:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872635341",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/42811720?v=4",
                "events_url": "https://api.github.com/users/hernancerm/events{/privacy}",
                "followers_url": "https://api.github.com/users/hernancerm/followers",
                "following_url": "https://api.github.com/users/hernancerm/following{/other_user}",
                "gists_url": "https://api.github.com/users/hernancerm/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hernancerm",
                "id": 42811720,
                "login": "hernancerm",
                "node_id": "MDQ6VXNlcjQyODExNzIw",
                "organizations_url": "https://api.github.com/users/hernancerm/orgs",
                "received_events_url": "https://api.github.com/users/hernancerm/received_events",
                "repos_url": "https://api.github.com/users/hernancerm/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hernancerm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hernancerm/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hernancerm",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872797636"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872797636"
                }
            },
            "author_association": "MEMBER",
            "body": "If someone makes and merges a change then I'll rebase over.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T08:20:22Z",
            "diff_hunk": "@@ -107,16 +125,16 @@ server. Example: >lua\n     vim.api.nvim_create_autocmd('LspAttach', {\n       callback = function(args)\n         local client = vim.lsp.get_client_by_id(args.data.client_id)\n-        if client.supports_method('textDocument/implementation') then\n+        if client:supports_method('textDocument/implementation') then",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872797636",
            "id": 1872797636,
            "in_reply_to_id": 1872553887,
            "line": 193,
            "node_id": "PRRC_kwDOAPphoM5voJ_E",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 193,
            "original_position": 85,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 151,
            "pull_request_review_id": 2483981923,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872797636/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T09:26:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872797636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872798176"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872798176"
                }
            },
            "author_association": "MEMBER",
            "body": "They are different types for different things.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T08:20:52Z",
            "diff_hunk": "@@ -590,6 +608,26 @@ LspTokenUpdate                                                *LspTokenUpdate*\n ==============================================================================\n Lua module: vim.lsp                                                 *lsp-core*\n \n+*vim.lsp.Config*\n+    Extends: |vim.lsp.ClientConfig|\n+\n+\n+    Fields: ~\n+      • {cmd}?           (`string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient`)",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872798176",
            "id": 1872798176,
            "in_reply_to_id": 1872555484,
            "line": 681,
            "node_id": "PRRC_kwDOAPphoM5voKHg",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 681,
            "original_position": 127,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 193,
            "pull_request_review_id": 2483982783,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872798176/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T08:20:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872798176",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872799716"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872799716"
                }
            },
            "author_association": "MEMBER",
            "body": "The `|nil` is a part of the description, not the type. I took this directly from `vim.lsp.inlay_hint.enable` which had a lot of discussion behind.\r\n\r\nHappy to consider suggestions on rewording this.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T08:22:29Z",
            "diff_hunk": "@@ -698,6 +736,66 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Update the configuration for an LSP client.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be table assigned to redefine the configuration for a client.\n+\n+    Examples:\n+    • Add a root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Add additional capabilities to all clients: >lua\n+       vim.lsp.config('*', {\n+         capabilities = {\n+           textDocument = {\n+             semanticTokens = {\n+               multilineTokenSupport = true,\n+             }\n+           }\n+         }\n+       })\n+<\n+    • (Re-)define the configuration for clangd: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         root_markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {enable})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a\n+    buffer.\n+\n+    Uses configuration defined with `vim.lsp.config`.\n+\n+    Examples: >lua\n+          vim.lsp.enable('clangd')\n+\n+          vim.lsp.enable({'luals', 'pyright'})\n+<\n+\n+    Parameters: ~\n+      • {name}    (`string|string[]`) Name(s) of client(s) to enable.\n+      • {enable}  (`boolean?`) `true|nil` to enable, `false` to disable.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872799716",
            "id": 1872799716,
            "in_reply_to_id": 1872558829,
            "line": 862,
            "node_id": "PRRC_kwDOAPphoM5voKfk",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 862,
            "original_position": 207,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 282,
            "pull_request_review_id": 2483985401,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872799716/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T10:12:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872799716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872802494"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872802494"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry I don't understand what you're asking for here. This is just a type that extends from another type with additional fields to be used by a different API.\r\n\r\nIf you've got some suggestions, then I'd be happy to consider them.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T08:25:02Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872802494",
            "id": 1872802494,
            "in_reply_to_id": 1872572716,
            "line": 319,
            "node_id": "PRRC_kwDOAPphoM5voLK-",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 319,
            "original_position": 37,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 4,
            "pull_request_review_id": 2483989596,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872802494/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T10:00:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872802494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872903356"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872903356"
                }
            },
            "author_association": "MEMBER",
            "body": "There is none. If a config doesn't provide filetypes then that config will connect to all buffers.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T09:15:57Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872903356",
            "id": 1872903356,
            "in_reply_to_id": 1872577135,
            "line": 326,
            "node_id": "PRRC_kwDOAPphoM5vojy8",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 326,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 11,
            "pull_request_review_id": 2484142396,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872903356/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T09:25:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872903356",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872904524"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872904524"
                }
            },
            "author_association": "MEMBER",
            "body": "Why not underscore what? `lsp.config` is API, only its internal fields are prefixed with `_`.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T09:16:51Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+--- - Add additional capabilities to all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         capabilities = {\n+---           textDocument = {\n+---             semanticTokens = {\n+---               multilineTokenSupport = true,\n+---             }\n+---           }\n+---         }\n+---       })\n+---   ```\n+--- - (Re-)define the configuration for clangd:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         root_markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+lsp._enabled_configs = {} --- @type table<string,{resolved_config:vim.lsp.Config?}>\n+\n+--- If a config in vim.lsp.config() is accessed then the resolved config becomes invalid.\n+--- @param name string?\n+local function invalidate_enabled_config(name)\n+  if not name or name == '*' then\n+    for _, v in pairs(lsp._enabled_configs) do\n+      v.resolved_config = nil\n+    end\n+  elseif lsp._enabled_configs[name] then\n+    lsp._enabled_configs[name].resolved_config = nil\n+  end\n+end\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872904524",
            "id": 1872904524,
            "in_reply_to_id": 1872582062,
            "line": 407,
            "node_id": "PRRC_kwDOAPphoM5vokFM",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 407,
            "original_position": 124,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 92,
            "pull_request_review_id": 2484144569,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872904524/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T10:03:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872904524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872917540"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872917540"
                }
            },
            "author_association": "MEMBER",
            "body": "The filetypes belong to the configuration (`vim.lsp.Config`), not the client (`vim.lsp.Client`).",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T09:23:44Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+--- - Add additional capabilities to all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         capabilities = {\n+---           textDocument = {\n+---             semanticTokens = {\n+---               multilineTokenSupport = true,\n+---             }\n+---           }\n+---         }\n+---       })\n+---   ```\n+--- - (Re-)define the configuration for clangd:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         root_markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+lsp._enabled_configs = {} --- @type table<string,{resolved_config:vim.lsp.Config?}>\n+\n+--- If a config in vim.lsp.config() is accessed then the resolved config becomes invalid.\n+--- @param name string?\n+local function invalidate_enabled_config(name)\n+  if not name or name == '*' then\n+    for _, v in pairs(lsp._enabled_configs) do\n+      v.resolved_config = nil\n+    end\n+  elseif lsp._enabled_configs[name] then\n+    lsp._enabled_configs[name].resolved_config = nil\n+  end\n+end\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    invalidate_enabled_config(name)\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    invalidate_enabled_config(name)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    self[name] = merge_configs(self._configs[name], cfg)\n+  end,\n+})\n+\n+--- @private\n+--- @param name string\n+--- @return vim.lsp.Config\n+function lsp._resolve_config(name)\n+  local econfig = lsp._enabled_configs[name] or lsp.config._configs[name]\n+\n+  if not econfig.resolved_config then\n+    -- Resolve configs from lsp/*.lua\n+    for _, f in ipairs(api.nvim_get_runtime_file(('lsp/%s.lua'):format(name), true)) do\n+      local chunk = loadfile(f)\n+      if chunk then\n+        pcall(chunk)\n+      end\n+    end\n+\n+    local config = merge_configs(lsp.config._configs['*'], lsp.config._configs[name])\n+\n+    config.name = name\n+\n+    validate('cmd', config.cmd, { 'function', 'table' })\n+    validate('cmd', config.reuse_client, 'function', true)\n+    -- All other fields are validated in client.create\n+\n+    econfig.resolved_config = config\n+  end\n+\n+  return assert(econfig.resolved_config)\n+end\n+\n+local lsp_enable_autocmd_id --- @type integer?\n+\n+--- @param bufnr integer\n+local function lsp_enable_callback(bufnr)\n+  -- Only ever attach to buffers that represent an actual file.\n+  if vim.bo[bufnr].buftype ~= '' then\n+    return\n+  end\n+\n+  --- @param config vim.lsp.Config\n+  local function can_start(config)\n+    if config.filetypes and not vim.tbl_contains(config.filetypes, vim.bo[bufnr].filetype) then\n+      return false\n+    elseif type(config.cmd) == 'table' and vim.fn.executable(config.cmd[1]) == 0 then\n+      return false\n+    end\n+\n+    return true\n+  end\n+\n+  for name in vim.spairs(lsp._enabled_configs) do\n+    local config = lsp._resolve_config(name)\n+\n+    if can_start(config) then\n+      vim.lsp.start(config, {\n+        bufnr = bufnr,\n+        reuse_client = config.reuse_client,\n+        _root_markers = config.root_markers,\n+      })\n+    end\n+  end\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872917540",
            "id": 1872917540,
            "in_reply_to_id": 1872592704,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vonQk",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 521,
            "original_position": 215,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2484163419,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872917540/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T09:23:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872917540",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872919771"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872919771"
                }
            },
            "author_association": "MEMBER",
            "body": "Even though it's weird, there's nothing particular special about `''` as a name. Only `'*'` is considered special.\r\n\r\nIf we want to properly restrict this, then we would need to define exactly what valid names are allowed to be. Something like `[a-zA-Z0-9_-]+` would make sense since these names can be filenames in `lsp/*`.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T09:25:18Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+--- - Add additional capabilities to all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         capabilities = {\n+---           textDocument = {\n+---             semanticTokens = {\n+---               multilineTokenSupport = true,\n+---             }\n+---           }\n+---         }\n+---       })\n+---   ```\n+--- - (Re-)define the configuration for clangd:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         root_markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+lsp._enabled_configs = {} --- @type table<string,{resolved_config:vim.lsp.Config?}>\n+\n+--- If a config in vim.lsp.config() is accessed then the resolved config becomes invalid.\n+--- @param name string?\n+local function invalidate_enabled_config(name)\n+  if not name or name == '*' then",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872919771",
            "id": 1872919771,
            "in_reply_to_id": 1872580164,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vonzb",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 418,
            "original_position": 111,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2484166634,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872919771/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T10:05:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872919771",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872951138"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872951138"
                }
            },
            "author_association": "MEMBER",
            "body": "Turned `runtimepath` into a reference `'runtimepath'`.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T09:47:45Z",
            "diff_hunk": "@@ -28,30 +28,48 @@ Follow these steps to get LSP features:\n    upstream installation instructions. You can find language servers here:\n    https://microsoft.github.io/language-server-protocol/implementors/servers/\n \n-2. Use |vim.lsp.start()| to start the LSP server (or attach to an existing\n-   one) when a file is opened. Example: >lua\n-    -- Create an event handler for the FileType autocommand\n-    vim.api.nvim_create_autocmd('FileType', {\n-      -- This handler will fire when the buffer's 'filetype' is \"python\"\n-      pattern = 'python',\n-      callback = function(args)\n-        vim.lsp.start({\n-          name = 'my-server-name',\n-          cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n-\n-          -- Set the \"root directory\" to the parent directory of the file in the\n-          -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n-          -- \"pyproject.toml\" file. Files that share a root directory will reuse\n-          -- the connection to the same LSP server.\n-          root_dir = vim.fs.root(args.buf, {'setup.py', 'pyproject.toml'}),\n-        })\n-      end,\n-    })\n+2. Use |vim.lsp.config()| to define a configuration for an LSP client.\n+    Example: >lua\n+      vim.lsp.config['my-server-name'] = {\n+        cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n+        filetypes = { 'python' },\n+        -- Sets the \"root directory\" to the parent directory of the file in the\n+        -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n+        -- \"pyproject.toml\" file. Files that share a root directory will reuse\n+        -- the connection to the same LSP server.\n+        root_markers = {'setup.py', 'pyproject.toml'},\n+        -- Specific settings to send to the server. The schema for this is\n+        -- defined by the server.\n+        settings = {\n+          ...\n+        }\n+      }\n+<\n+\n+3. Use |vim.lsp.enable()| to enable a configuration.\n+   Example: >lua\n+     vim.lsp.enable('my-server-name')\n <\n-3. Check that the buffer is attached to the server: >vim\n-    :checkhealth lsp\n \n-4. (Optional) Configure keymaps and autocommands to use LSP features. |lsp-config|\n+4. Check that the buffer is attached to the server: >vim\n+    :checkhealth vim.lsp\n+\n+5. (Optional) Configure keymaps and autocommands to use LSP features.\n+   |lsp-attach|\n+\n+                                                        *lsp-config*\n+\n+Configurations for LSP clients is done via |vim.lsp.config()|.\n+\n+When a LSP client starts, it resolves a config by first sourcing\n+all the `lsp/<name>.lua` files in runtimepath. After that it merges",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872951138",
            "id": 1872951138,
            "in_reply_to_id": 1872551809,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vovdi",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 65,
            "original_position": 60,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2484217255,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872951138/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T09:47:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872951138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872982586"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872982586"
                }
            },
            "author_association": "MEMBER",
            "body": "No, it's important to have it exactly like this, since it explains what happens if `enable` is not passed.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T10:10:51Z",
            "diff_hunk": "@@ -698,6 +736,66 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Update the configuration for an LSP client.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be table assigned to redefine the configuration for a client.\n+\n+    Examples:\n+    • Add a root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Add additional capabilities to all clients: >lua\n+       vim.lsp.config('*', {\n+         capabilities = {\n+           textDocument = {\n+             semanticTokens = {\n+               multilineTokenSupport = true,\n+             }\n+           }\n+         }\n+       })\n+<\n+    • (Re-)define the configuration for clangd: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         root_markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {enable})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a\n+    buffer.\n+\n+    Uses configuration defined with `vim.lsp.config`.\n+\n+    Examples: >lua\n+          vim.lsp.enable('clangd')\n+\n+          vim.lsp.enable({'luals', 'pyright'})\n+<\n+\n+    Parameters: ~\n+      • {name}    (`string|string[]`) Name(s) of client(s) to enable.\n+      • {enable}  (`boolean?`) `true|nil` to enable, `false` to disable.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872982586",
            "id": 1872982586,
            "in_reply_to_id": 1872558829,
            "line": 862,
            "node_id": "PRRC_kwDOAPphoM5vo3I6",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 862,
            "original_position": 207,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 282,
            "pull_request_review_id": 2484267813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872982586/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T10:10:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872982586",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1872984336"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872984336"
                }
            },
            "author_association": "MEMBER",
            "body": "(Could write \"`true` or `nil` to enable\", if that is clearer? But then it should be done consistently since we use that pattern elsewhere (and will use even more in the future).)",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T10:12:03Z",
            "diff_hunk": "@@ -698,6 +736,66 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Update the configuration for an LSP client.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be table assigned to redefine the configuration for a client.\n+\n+    Examples:\n+    • Add a root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Add additional capabilities to all clients: >lua\n+       vim.lsp.config('*', {\n+         capabilities = {\n+           textDocument = {\n+             semanticTokens = {\n+               multilineTokenSupport = true,\n+             }\n+           }\n+         }\n+       })\n+<\n+    • (Re-)define the configuration for clangd: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         root_markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {enable})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a\n+    buffer.\n+\n+    Uses configuration defined with `vim.lsp.config`.\n+\n+    Examples: >lua\n+          vim.lsp.enable('clangd')\n+\n+          vim.lsp.enable({'luals', 'pyright'})\n+<\n+\n+    Parameters: ~\n+      • {name}    (`string|string[]`) Name(s) of client(s) to enable.\n+      • {enable}  (`boolean?`) `true|nil` to enable, `false` to disable.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1872984336",
            "id": 1872984336,
            "in_reply_to_id": 1872558829,
            "line": 862,
            "node_id": "PRRC_kwDOAPphoM5vo3kQ",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 862,
            "original_position": 207,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 282,
            "pull_request_review_id": 2484270703,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872984336/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T10:12:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1872984336",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873116136"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873116136"
                }
            },
            "author_association": "MEMBER",
            "body": "the indent seems weird, similar for others below\r\n\r\n```suggestion\r\n---   ```lua\r\n---   vim.lsp.config('*', {\r\n---     root_markers = { '.git' },\r\n---   })\r\n---   ```\r\n```",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T11:29:38Z",
            "diff_hunk": "@@ -307,6 +307,261 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- If not provided, then the client will attach to all filetypes.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table-assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873116136",
            "id": 1873116136,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vpXvo",
            "original_commit_id": "d0a35ad37679cc79c505fa8844c1b8b97dbe9bb4",
            "original_line": 374,
            "original_position": 68,
            "original_start_line": 370,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2484488132,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873116136/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-06T11:29:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873116136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873151244"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873151244"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    it('can merge settings from \"*\"', function()\r\n```",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T11:40:10Z",
            "diff_hunk": "@@ -6129,4 +6129,91 @@ describe('LSP', function()\n       )\n     end)\n   end)\n+\n+  describe('vim.lsp.config() and vim.lsp.enable()', function()\n+    it('can merge seetings from \"*\"', function()",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873151244",
            "id": 1873151244,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vpgUM",
            "original_commit_id": "d0a35ad37679cc79c505fa8844c1b8b97dbe9bb4",
            "original_line": 6134,
            "original_position": 6,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp_spec.lua",
            "position": null,
            "pull_request_review_id": 2484539507,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873151244/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T11:40:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873151244",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873249860"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873249860"
                }
            },
            "author_association": "MEMBER",
            "body": "It's so the code blocks are rendered with an indent which is conventional for markup languages.\r\n\r\n![image](https://github.com/user-attachments/assets/f9358a43-be03-49ef-9ae7-63cafb39f250)\r\n\r\nIf anything, it is missing 1 char of indent.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T12:17:16Z",
            "diff_hunk": "@@ -307,6 +307,261 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- If not provided, then the client will attach to all filetypes.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table-assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873249860",
            "id": 1873249860,
            "in_reply_to_id": 1873116136,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vp4ZE",
            "original_commit_id": "d0a35ad37679cc79c505fa8844c1b8b97dbe9bb4",
            "original_line": 374,
            "original_position": 68,
            "original_start_line": 370,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2484695720,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873249860/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-06T12:18:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873249860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873275915"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873275915"
                }
            },
            "author_association": "MEMBER",
            "body": "hmm. seems like something the docgen should take care of\r\n\r\nout of scope for this PR , ofc",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T12:42:46Z",
            "diff_hunk": "@@ -307,6 +307,261 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- If not provided, then the client will attach to all filetypes.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table-assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873275915",
            "id": 1873275915,
            "in_reply_to_id": 1873116136,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vp-wL",
            "original_commit_id": "d0a35ad37679cc79c505fa8844c1b8b97dbe9bb4",
            "original_line": 374,
            "original_position": 68,
            "original_start_line": 370,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2484739794,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873275915/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-06T12:43:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873275915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873289750"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873289750"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm yeah. The current docgen has a bug with codeblocks anyway which I couldn't figure out where some blocks are rendered under-indented. I think it might have been an issue with the ts parser.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T12:52:45Z",
            "diff_hunk": "@@ -307,6 +307,261 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- If not provided, then the client will attach to all filetypes.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table-assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873289750",
            "id": 1873289750,
            "in_reply_to_id": 1873116136,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vqCIW",
            "original_commit_id": "d0a35ad37679cc79c505fa8844c1b8b97dbe9bb4",
            "original_line": 374,
            "original_position": 68,
            "original_start_line": 370,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2484764325,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873289750/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-06T12:53:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873289750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873291898"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873291898"
                }
            },
            "author_association": "MEMBER",
            "body": "Good thing we have a fully operational `#trim!` soon ;)",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T12:54:14Z",
            "diff_hunk": "@@ -307,6 +307,261 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- If not provided, then the client will attach to all filetypes.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table-assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873291898",
            "id": 1873291898,
            "in_reply_to_id": 1873116136,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vqCp6",
            "original_commit_id": "d0a35ad37679cc79c505fa8844c1b8b97dbe9bb4",
            "original_line": 374,
            "original_position": 68,
            "original_start_line": 370,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2484768610,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873291898/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-06T12:54:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873291898",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873293497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873293497"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure that'll help since the docgen doesn't use queries. It just walks the tree.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T12:55:38Z",
            "diff_hunk": "@@ -307,6 +307,261 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- If not provided, then the client will attach to all filetypes.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table-assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873293497",
            "id": 1873293497,
            "in_reply_to_id": 1873116136,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vqDC5",
            "original_commit_id": "d0a35ad37679cc79c505fa8844c1b8b97dbe9bb4",
            "original_line": 374,
            "original_position": 68,
            "original_start_line": 370,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2484771131,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873293497/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-06T12:55:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873293497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873764153"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873764153"
                }
            },
            "author_association": "MEMBER",
            "body": "There's also `nvim__get_runtime` (doesn't support globs or modelines yet, hence not used extensively so far).",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T17:39:50Z",
            "diff_hunk": "@@ -438,12 +438,7 @@ function lsp._resolve_config(name)\n     -- Calls to vim.lsp.config in lsp/* have a lower precedence than calls from other sites.\n     local orig_configs = lsp.config._configs\n     lsp.config._configs = {}\n-    for _, f in ipairs(api.nvim_get_runtime_file(('lsp/%s.lua'):format(name), true)) do\n-      local chunk = loadfile(f)\n-      if chunk then\n-        pcall(chunk)\n-      end\n-    end\n+    pcall(vim.cmd.runtime, { ('lsp/%s.lua'):format(name), bang = true })",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873764153",
            "id": 1873764153,
            "line": 450,
            "node_id": "PRRC_kwDOAPphoM5vr185",
            "original_commit_id": "d1b5d569a18a73e725cda33e7b336e01d8a2fe60",
            "original_line": 450,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 135,
            "pull_request_review_id": 2485506517,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873764153/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T17:40:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873764153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873805771"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873805771"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry I didn't read this properly and I was wondering why use `@nodoc` instead of `_config`, but this isn't a method. Ignore me.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T18:12:56Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+--- - Add additional capabilities to all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         capabilities = {\n+---           textDocument = {\n+---             semanticTokens = {\n+---               multilineTokenSupport = true,\n+---             }\n+---           }\n+---         }\n+---       })\n+---   ```\n+--- - (Re-)define the configuration for clangd:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         root_markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+lsp._enabled_configs = {} --- @type table<string,{resolved_config:vim.lsp.Config?}>\n+\n+--- If a config in vim.lsp.config() is accessed then the resolved config becomes invalid.\n+--- @param name string?\n+local function invalidate_enabled_config(name)\n+  if not name or name == '*' then\n+    for _, v in pairs(lsp._enabled_configs) do\n+      v.resolved_config = nil\n+    end\n+  elseif lsp._enabled_configs[name] then\n+    lsp._enabled_configs[name].resolved_config = nil\n+  end\n+end\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873805771",
            "id": 1873805771,
            "in_reply_to_id": 1872582062,
            "line": 407,
            "node_id": "PRRC_kwDOAPphoM5vsAHL",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 407,
            "original_position": 124,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 92,
            "pull_request_review_id": 2485575793,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873805771/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T18:12:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873805771",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873808351"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873808351"
                }
            },
            "author_association": "MEMBER",
            "body": "> If we want to properly restrict this, then we would need to define exactly what valid names are allowed to be. Something like `[a-zA-Z0-9_-]+` would make sense since these names can be filenames in `lsp/*`.\r\n\r\nHmmm and that's probably also something to bring up in the specs. ",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T18:15:49Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+--- - Add additional capabilities to all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         capabilities = {\n+---           textDocument = {\n+---             semanticTokens = {\n+---               multilineTokenSupport = true,\n+---             }\n+---           }\n+---         }\n+---       })\n+---   ```\n+--- - (Re-)define the configuration for clangd:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         root_markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+lsp._enabled_configs = {} --- @type table<string,{resolved_config:vim.lsp.Config?}>\n+\n+--- If a config in vim.lsp.config() is accessed then the resolved config becomes invalid.\n+--- @param name string?\n+local function invalidate_enabled_config(name)\n+  if not name or name == '*' then",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873808351",
            "id": 1873808351,
            "in_reply_to_id": 1872580164,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vsAvf",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 418,
            "original_position": 111,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2485580323,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873808351/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T18:15:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873808351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873810387"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873810387"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh I see. It looks good to me now that I read it correctly!",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T18:18:02Z",
            "diff_hunk": "@@ -698,6 +736,66 @@ commands                                                    *vim.lsp.commands*\n \n     The second argument is the `ctx` of |lsp-handler|\n \n+config({name}, {cfg})                                       *vim.lsp.config()*\n+    Update the configuration for an LSP client.\n+\n+    Use name '*' to set default configuration for all clients.\n+\n+    Can also be table assigned to redefine the configuration for a client.\n+\n+    Examples:\n+    • Add a root marker for all clients: >lua\n+       vim.lsp.config('*', {\n+         root_markers = { '.git' },\n+       })\n+<\n+    • Add additional capabilities to all clients: >lua\n+       vim.lsp.config('*', {\n+         capabilities = {\n+           textDocument = {\n+             semanticTokens = {\n+               multilineTokenSupport = true,\n+             }\n+           }\n+         }\n+       })\n+<\n+    • (Re-)define the configuration for clangd: >lua\n+       vim.lsp.config.clangd = {\n+         cmd = {\n+           'clangd',\n+           '--clang-tidy',\n+           '--background-index',\n+           '--offset-encoding=utf-8',\n+         },\n+         root_markers = { '.clangd', 'compile_commands.json' },\n+         filetypes = { 'c', 'cpp' },\n+       }\n+<\n+    • Get configuration for luals: >lua\n+       local cfg = vim.lsp.config.luals\n+<\n+\n+    Parameters: ~\n+      • {name}  (`string`)\n+      • {cfg}   (`vim.lsp.Config`) See |vim.lsp.Config|.\n+\n+enable({name}, {enable})                                    *vim.lsp.enable()*\n+    Enable a LSP server for filetype(s) to automatically start when opening a\n+    buffer.\n+\n+    Uses configuration defined with `vim.lsp.config`.\n+\n+    Examples: >lua\n+          vim.lsp.enable('clangd')\n+\n+          vim.lsp.enable({'luals', 'pyright'})\n+<\n+\n+    Parameters: ~\n+      • {name}    (`string|string[]`) Name(s) of client(s) to enable.\n+      • {enable}  (`boolean?`) `true|nil` to enable, `false` to disable.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873810387",
            "id": 1873810387,
            "in_reply_to_id": 1872558829,
            "line": 862,
            "node_id": "PRRC_kwDOAPphoM5vsBPT",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 862,
            "original_position": 207,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 282,
            "pull_request_review_id": 2485583590,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873810387/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T18:18:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873810387",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873811254"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873811254"
                }
            },
            "author_association": "MEMBER",
            "body": "Then could you mention that in the description of `filetypes`?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T18:18:44Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873811254",
            "id": 1873811254,
            "in_reply_to_id": 1872577135,
            "line": 326,
            "node_id": "PRRC_kwDOAPphoM5vsBc2",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 326,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 11,
            "pull_request_review_id": 2485585047,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873811254/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T18:18:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873811254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1873812171"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873812171"
                }
            },
            "author_association": "MEMBER",
            "body": "But `vim.lsp.Config` isn't a client configuration right?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-06T18:19:41Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1873812171",
            "id": 1873812171,
            "in_reply_to_id": 1872572716,
            "line": 319,
            "node_id": "PRRC_kwDOAPphoM5vsBrL",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 319,
            "original_position": 37,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 4,
            "pull_request_review_id": 2485586449,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873812171/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-06T18:19:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873812171",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1874414841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874414841"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n   Note: because of this, calls to |vim.lsp.config()| in `lsp/*.lua` are\r\n   treated independently to other calls. This ensures configurations\r\n   defined in `lsp/*.lua` have a lower priority.\r\n```",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-07T13:15:37Z",
            "diff_hunk": "@@ -28,31 +28,114 @@ Follow these steps to get LSP features:\n    upstream installation instructions. You can find language servers here:\n    https://microsoft.github.io/language-server-protocol/implementors/servers/\n \n-2. Use |vim.lsp.start()| to start the LSP server (or attach to an existing\n-   one) when a file is opened. Example: >lua\n-    -- Create an event handler for the FileType autocommand\n-    vim.api.nvim_create_autocmd('FileType', {\n-      -- This handler will fire when the buffer's 'filetype' is \"python\"\n-      pattern = 'python',\n-      callback = function(args)\n-        vim.lsp.start({\n-          name = 'my-server-name',\n-          cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n-\n-          -- Set the \"root directory\" to the parent directory of the file in the\n-          -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n-          -- \"pyproject.toml\" file. Files that share a root directory will reuse\n-          -- the connection to the same LSP server.\n-          root_dir = vim.fs.root(args.buf, {'setup.py', 'pyproject.toml'}),\n-        })\n-      end,\n-    })\n+2. Use |vim.lsp.config()| to define a configuration for an LSP client.\n+    Example: >lua\n+      vim.lsp.config['luals'] = {\n+        -- Command and arguments to start the server.\n+        cmd = { 'lua-language-server' }\n+\n+        -- Filetypes to automatically attach to.\n+        filetypes = { 'lua' },\n+\n+        -- Sets the \"root directory\" to the parent directory of the file in the\n+        -- current buffer that contains either a \".luarc.json\" or a\n+        -- \".luarc.jsonc\" file. Files that share a root directory will reuse\n+        -- the connection to the same LSP server.\n+        root_markers = { '.luarc.json', '.luarc.jsonc' },\n+\n+        -- Specific settings to send to the server. The schema for this is\n+        -- defined by the server. For example the schema for lua-language-server\n+        -- can be found here https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\n+        settings = {\n+          Lua = {\n+            runtime = {\n+              version = 'LuaJIT',\n+            }\n+          }\n+        }\n+      }\n <\n-3. Check that the buffer is attached to the server: >vim\n-    :checkhealth lsp\n+3. Use |vim.lsp.enable()| to enable a configuration.\n+   Example: >lua\n+     vim.lsp.enable('luals')\n+<\n+4. Check that the buffer is attached to the server: >vim\n+    :checkhealth vim.lsp\n+<\n+5. (Optional) Configure keymaps and autocommands to use LSP features.\n+   |lsp-attach|\n+\n+                                                        *lsp-config*\n+\n+Configurations for LSP clients is done via |vim.lsp.config()|.\n+\n+When an LSP client starts, it resolves a configuration by merging\n+configurations, in increasing priority, from the following:\n \n-4. (Optional) Configure keymaps and autocommands to use LSP features. |lsp-config|\n+1. Configuration defined for the `'*'` name.\n \n+2. Configuration from the result of sourcing all `lsp/<name>.lua` files\n+   in 'runtimepath' for a server of name `name`.\n+\n+   Note: becuase of this, calls to |vim.lsp.config()| in `lsp/*.lua` are\n+   treated independently to other calls. This is to ensure configurations\n+   defined in `lsp/*.lua` have a lower priority.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1874414841",
            "id": 1874414841,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vuUz5",
            "original_commit_id": "deee44159d9bcb9fa789dcca290b6c958d30cb62",
            "original_line": 82,
            "original_position": 77,
            "original_start_line": 80,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2486497335,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874414841/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-07T13:15:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874414841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1874415165"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874415165"
                }
            },
            "author_association": "MEMBER",
            "body": "This is definitely simpler to document/explain. But if `vim.merge` in the future would have more ideal behavior, maybe it's worth trying to anticipate those semantics, and then in the future this will say `following the behaviour of vim.merge` ?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-07T13:17:52Z",
            "diff_hunk": "@@ -28,31 +28,114 @@ Follow these steps to get LSP features:\n    upstream installation instructions. You can find language servers here:\n    https://microsoft.github.io/language-server-protocol/implementors/servers/\n \n-2. Use |vim.lsp.start()| to start the LSP server (or attach to an existing\n-   one) when a file is opened. Example: >lua\n-    -- Create an event handler for the FileType autocommand\n-    vim.api.nvim_create_autocmd('FileType', {\n-      -- This handler will fire when the buffer's 'filetype' is \"python\"\n-      pattern = 'python',\n-      callback = function(args)\n-        vim.lsp.start({\n-          name = 'my-server-name',\n-          cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n-\n-          -- Set the \"root directory\" to the parent directory of the file in the\n-          -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n-          -- \"pyproject.toml\" file. Files that share a root directory will reuse\n-          -- the connection to the same LSP server.\n-          root_dir = vim.fs.root(args.buf, {'setup.py', 'pyproject.toml'}),\n-        })\n-      end,\n-    })\n+2. Use |vim.lsp.config()| to define a configuration for an LSP client.\n+    Example: >lua\n+      vim.lsp.config['luals'] = {\n+        -- Command and arguments to start the server.\n+        cmd = { 'lua-language-server' }\n+\n+        -- Filetypes to automatically attach to.\n+        filetypes = { 'lua' },\n+\n+        -- Sets the \"root directory\" to the parent directory of the file in the\n+        -- current buffer that contains either a \".luarc.json\" or a\n+        -- \".luarc.jsonc\" file. Files that share a root directory will reuse\n+        -- the connection to the same LSP server.\n+        root_markers = { '.luarc.json', '.luarc.jsonc' },\n+\n+        -- Specific settings to send to the server. The schema for this is\n+        -- defined by the server. For example the schema for lua-language-server\n+        -- can be found here https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\n+        settings = {\n+          Lua = {\n+            runtime = {\n+              version = 'LuaJIT',\n+            }\n+          }\n+        }\n+      }\n <\n-3. Check that the buffer is attached to the server: >vim\n-    :checkhealth lsp\n+3. Use |vim.lsp.enable()| to enable a configuration.\n+   Example: >lua\n+     vim.lsp.enable('luals')\n+<\n+4. Check that the buffer is attached to the server: >vim\n+    :checkhealth vim.lsp\n+<\n+5. (Optional) Configure keymaps and autocommands to use LSP features.\n+   |lsp-attach|\n+\n+                                                        *lsp-config*\n+\n+Configurations for LSP clients is done via |vim.lsp.config()|.\n+\n+When an LSP client starts, it resolves a configuration by merging\n+configurations, in increasing priority, from the following:\n \n-4. (Optional) Configure keymaps and autocommands to use LSP features. |lsp-config|\n+1. Configuration defined for the `'*'` name.\n \n+2. Configuration from the result of sourcing all `lsp/<name>.lua` files\n+   in 'runtimepath' for a server of name `name`.\n+\n+   Note: becuase of this, calls to |vim.lsp.config()| in `lsp/*.lua` are\n+   treated independently to other calls. This is to ensure configurations\n+   defined in `lsp/*.lua` have a lower priority.\n+\n+3. Configurations defined anywhere else.\n+\n+Note: The merge semantics of configurations follow the behaviour of\n+|vim.tbl_deep_extend()|.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1874415165",
            "id": 1874415165,
            "line": 87,
            "node_id": "PRRC_kwDOAPphoM5vuU49",
            "original_commit_id": "deee44159d9bcb9fa789dcca290b6c958d30cb62",
            "original_line": 87,
            "original_position": 82,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 82,
            "pull_request_review_id": 2486497619,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874415165/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-07T13:18:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874415165",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1874415412"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874415412"
                }
            },
            "author_association": "MEMBER",
            "body": "Nvim LSP configs are neither client nor server configs, they overlap both I think?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-07T13:19:32Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1874415412",
            "id": 1874415412,
            "in_reply_to_id": 1872572716,
            "line": 319,
            "node_id": "PRRC_kwDOAPphoM5vuU80",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 319,
            "original_position": 37,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 4,
            "pull_request_review_id": 2486497818,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874415412/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-07T13:19:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874415412",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1874416399"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874416399"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sold on the premise of `vim.merge`, so I couldn't anticipate anything.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-07T13:26:57Z",
            "diff_hunk": "@@ -28,31 +28,114 @@ Follow these steps to get LSP features:\n    upstream installation instructions. You can find language servers here:\n    https://microsoft.github.io/language-server-protocol/implementors/servers/\n \n-2. Use |vim.lsp.start()| to start the LSP server (or attach to an existing\n-   one) when a file is opened. Example: >lua\n-    -- Create an event handler for the FileType autocommand\n-    vim.api.nvim_create_autocmd('FileType', {\n-      -- This handler will fire when the buffer's 'filetype' is \"python\"\n-      pattern = 'python',\n-      callback = function(args)\n-        vim.lsp.start({\n-          name = 'my-server-name',\n-          cmd = {'name-of-language-server-executable', '--option', 'arg1', 'arg2'},\n-\n-          -- Set the \"root directory\" to the parent directory of the file in the\n-          -- current buffer (`args.buf`) that contains either a \"setup.py\" or a\n-          -- \"pyproject.toml\" file. Files that share a root directory will reuse\n-          -- the connection to the same LSP server.\n-          root_dir = vim.fs.root(args.buf, {'setup.py', 'pyproject.toml'}),\n-        })\n-      end,\n-    })\n+2. Use |vim.lsp.config()| to define a configuration for an LSP client.\n+    Example: >lua\n+      vim.lsp.config['luals'] = {\n+        -- Command and arguments to start the server.\n+        cmd = { 'lua-language-server' }\n+\n+        -- Filetypes to automatically attach to.\n+        filetypes = { 'lua' },\n+\n+        -- Sets the \"root directory\" to the parent directory of the file in the\n+        -- current buffer that contains either a \".luarc.json\" or a\n+        -- \".luarc.jsonc\" file. Files that share a root directory will reuse\n+        -- the connection to the same LSP server.\n+        root_markers = { '.luarc.json', '.luarc.jsonc' },\n+\n+        -- Specific settings to send to the server. The schema for this is\n+        -- defined by the server. For example the schema for lua-language-server\n+        -- can be found here https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\n+        settings = {\n+          Lua = {\n+            runtime = {\n+              version = 'LuaJIT',\n+            }\n+          }\n+        }\n+      }\n <\n-3. Check that the buffer is attached to the server: >vim\n-    :checkhealth lsp\n+3. Use |vim.lsp.enable()| to enable a configuration.\n+   Example: >lua\n+     vim.lsp.enable('luals')\n+<\n+4. Check that the buffer is attached to the server: >vim\n+    :checkhealth vim.lsp\n+<\n+5. (Optional) Configure keymaps and autocommands to use LSP features.\n+   |lsp-attach|\n+\n+                                                        *lsp-config*\n+\n+Configurations for LSP clients is done via |vim.lsp.config()|.\n+\n+When an LSP client starts, it resolves a configuration by merging\n+configurations, in increasing priority, from the following:\n \n-4. (Optional) Configure keymaps and autocommands to use LSP features. |lsp-config|\n+1. Configuration defined for the `'*'` name.\n \n+2. Configuration from the result of sourcing all `lsp/<name>.lua` files\n+   in 'runtimepath' for a server of name `name`.\n+\n+   Note: becuase of this, calls to |vim.lsp.config()| in `lsp/*.lua` are\n+   treated independently to other calls. This is to ensure configurations\n+   defined in `lsp/*.lua` have a lower priority.\n+\n+3. Configurations defined anywhere else.\n+\n+Note: The merge semantics of configurations follow the behaviour of\n+|vim.tbl_deep_extend()|.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1874416399",
            "id": 1874416399,
            "in_reply_to_id": 1874415165,
            "line": 87,
            "node_id": "PRRC_kwDOAPphoM5vuVMP",
            "original_commit_id": "deee44159d9bcb9fa789dcca290b6c958d30cb62",
            "original_line": 87,
            "original_position": 82,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 82,
            "pull_request_review_id": 2486498785,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874416399/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-07T13:26:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874416399",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1874610603"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874610603"
                }
            },
            "author_association": "MEMBER",
            "body": "Fair. I'm being nitpicky here, and since I don't have concrete suggestions feel free to dismiss my comment.",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-08T04:21:17Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1874610603",
            "id": 1874610603,
            "in_reply_to_id": 1872572716,
            "line": 319,
            "node_id": "PRRC_kwDOAPphoM5vvEmr",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 319,
            "original_position": 37,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": 4,
            "pull_request_review_id": 2486728070,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874610603/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-08T04:21:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874610603",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31031#discussion_r1874610694"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31031"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874610694"
                }
            },
            "author_association": "MEMBER",
            "body": "Then maybe use \"its configured filetypes\"?",
            "commit_id": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
            "created_at": "2024-12-08T04:22:36Z",
            "diff_hunk": "@@ -307,6 +307,260 @@ local function create_and_initialize_client(config)\n   return client.id, nil\n end\n \n+local client_config_list_keys = {\n+  filetypes = true,\n+  on_attach = true,\n+  on_exit = true,\n+  on_init = true,\n+  root_markers = true,\n+}\n+\n+--- Similar to `vim.tbl_deep_extend('force', ...)`, except that lists specified in\n+--- `client_config_list_keys` are extended instead of replaced.\n+--- @param ... vim.lsp.Config\n+--- @return vim.lsp.Config\n+local function merge_configs(...)\n+  local ret = {} --- @type table<any,any>\n+\n+  for i = 1, select('#', ...) do\n+    for k, v in\n+      pairs(select(i, ...) or {} --[[@as table<string,any>]])\n+    do\n+      if ret[k] and client_config_list_keys[k] then\n+        ret[k] = vim._ensure_list(ret[k])\n+        vim.list_extend(ret[k], vim._ensure_list(v))\n+      elseif type(ret[k]) == 'table' and type(v) == 'table' then\n+        ret[k] = vim.tbl_deep_extend('force', ret[k], v)\n+      else\n+        ret[k] = v\n+      end\n+    end\n+  end\n+\n+  return ret\n+end\n+\n+--- @class vim.lsp.Config : vim.lsp.ClientConfig\n+---\n+--- See `cmd` in [vim.lsp.ClientConfig].\n+--- @field cmd? string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\n+---\n+--- Filetypes the client will attach to, if activated by `vim.lsp.enable()`.\n+--- @field filetypes? string[]\n+---\n+--- Directory markers (.e.g. '.git/') where the LSP server will base its workspaceFolders,\n+--- rootUri, and rootPath on initialization. Unused if `root_dir` is provided.\n+--- @field root_markers? string[]\n+---\n+--- Predicate used to decide if a client should be re-used. Used on all\n+--- running clients. The default implementation re-uses a client if name and\n+--- root_dir matches.\n+--- @field reuse_client? fun(client: vim.lsp.Client, config: vim.lsp.ClientConfig): boolean\n+\n+--- Update the configuration for an LSP client.\n+---\n+--- Use name '*' to set default configuration for all clients.\n+---\n+--- Can also be table assigned to redefine the configuration for a client.\n+---\n+--- Examples:\n+---\n+--- - Add a root marker for all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         root_markers = { '.git' },\n+---       })\n+---       ```\n+--- - Add additional capabilities to all clients:\n+---   ```lua\n+---     vim.lsp.config('*', {\n+---         capabilities = {\n+---           textDocument = {\n+---             semanticTokens = {\n+---               multilineTokenSupport = true,\n+---             }\n+---           }\n+---         }\n+---       })\n+---   ```\n+--- - (Re-)define the configuration for clangd:\n+---   ```lua\n+---     vim.lsp.config.clangd = {\n+---         cmd = {\n+---           'clangd',\n+---           '--clang-tidy',\n+---           '--background-index',\n+---           '--offset-encoding=utf-8',\n+---         },\n+---         root_markers = { '.clangd', 'compile_commands.json' },\n+---         filetypes = { 'c', 'cpp' },\n+---       }\n+---       ```\n+--- - Get configuration for luals:\n+---   ```lua\n+---     local cfg = vim.lsp.config.luals\n+---       ```\n+---\n+--- @param name string\n+--- @param cfg vim.lsp.Config\n+--- @diagnostic disable-next-line:assign-type-mismatch\n+function lsp.config(name, cfg)\n+  local _, _ = name, cfg -- ignore unused\n+  -- dummy proto for docs\n+end\n+\n+lsp._enabled_configs = {} --- @type table<string,{resolved_config:vim.lsp.Config?}>\n+\n+--- If a config in vim.lsp.config() is accessed then the resolved config becomes invalid.\n+--- @param name string?\n+local function invalidate_enabled_config(name)\n+  if not name or name == '*' then\n+    for _, v in pairs(lsp._enabled_configs) do\n+      v.resolved_config = nil\n+    end\n+  elseif lsp._enabled_configs[name] then\n+    lsp._enabled_configs[name].resolved_config = nil\n+  end\n+end\n+\n+--- @nodoc\n+--- @class vim.lsp.config\n+--- @field [string] vim.lsp.Config\n+--- @field package _configs table<string,vim.lsp.Config>\n+lsp.config = setmetatable({ _configs = {} }, {\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @return vim.lsp.Config\n+  __index = function(self, name)\n+    validate('name', name, 'string')\n+    invalidate_enabled_config(name)\n+    self._configs[name] = self._configs[name] or {}\n+    return self._configs[name]\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __newindex = function(self, name, cfg)\n+    validate('name', name, 'string')\n+    validate('cfg', cfg, 'table')\n+    invalidate_enabled_config(name)\n+    self._configs[name] = vim.tbl_deep_extend('force', self._configs[name] or {}, cfg)\n+  end,\n+\n+  --- @param self vim.lsp.config\n+  --- @param name string\n+  --- @param cfg vim.lsp.Config\n+  __call = function(self, name, cfg)\n+    self[name] = merge_configs(self._configs[name], cfg)\n+  end,\n+})\n+\n+--- @private\n+--- @param name string\n+--- @return vim.lsp.Config\n+function lsp._resolve_config(name)\n+  local econfig = lsp._enabled_configs[name] or lsp.config._configs[name]\n+\n+  if not econfig.resolved_config then\n+    -- Resolve configs from lsp/*.lua\n+    for _, f in ipairs(api.nvim_get_runtime_file(('lsp/%s.lua'):format(name), true)) do\n+      local chunk = loadfile(f)\n+      if chunk then\n+        pcall(chunk)\n+      end\n+    end\n+\n+    local config = merge_configs(lsp.config._configs['*'], lsp.config._configs[name])\n+\n+    config.name = name\n+\n+    validate('cmd', config.cmd, { 'function', 'table' })\n+    validate('cmd', config.reuse_client, 'function', true)\n+    -- All other fields are validated in client.create\n+\n+    econfig.resolved_config = config\n+  end\n+\n+  return assert(econfig.resolved_config)\n+end\n+\n+local lsp_enable_autocmd_id --- @type integer?\n+\n+--- @param bufnr integer\n+local function lsp_enable_callback(bufnr)\n+  -- Only ever attach to buffers that represent an actual file.\n+  if vim.bo[bufnr].buftype ~= '' then\n+    return\n+  end\n+\n+  --- @param config vim.lsp.Config\n+  local function can_start(config)\n+    if config.filetypes and not vim.tbl_contains(config.filetypes, vim.bo[bufnr].filetype) then\n+      return false\n+    elseif type(config.cmd) == 'table' and vim.fn.executable(config.cmd[1]) == 0 then\n+      return false\n+    end\n+\n+    return true\n+  end\n+\n+  for name in vim.spairs(lsp._enabled_configs) do\n+    local config = lsp._resolve_config(name)\n+\n+    if can_start(config) then\n+      vim.lsp.start(config, {\n+        bufnr = bufnr,\n+        reuse_client = config.reuse_client,\n+        _root_markers = config.root_markers,\n+      })\n+    end\n+  end\n+end\n+\n+--- Enable a LSP server for filetype(s) to automatically start when opening a buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/31031#discussion_r1874610694",
            "id": 1874610694,
            "in_reply_to_id": 1872592704,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vvEoG",
            "original_commit_id": "f37ee733edb5c333d21242f9d27dae3b02990347",
            "original_line": 521,
            "original_position": 215,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp.lua",
            "position": null,
            "pull_request_review_id": 2486728184,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874610694/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-08T04:22:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1874610694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Correct me if I'm wrong, but this seems to be missing the (in my view) important bit of `vim.lsp.config`, which is the server-independent `default`?",
            "created_at": "2024-11-01T16:51:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2452215658",
            "id": 2452215658,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SKddq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452215658/reactions"
            },
            "updated_at": "2024-12-01T12:10:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452215658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "What I'm proposing here is not that. This is purely for setting up individual servers with the aim of making lspconfig mostly redundant.",
            "created_at": "2024-11-01T16:56:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2452223004",
            "id": 2452223004,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SKfQc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452223004/reactions"
            },
            "updated_at": "2024-12-01T12:10:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452223004",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm happy to hear the sorts of stuff you want to configure. From my config there isn't much. From the work I've done on the handlers recently, there isn't a huge amount other than floating borders which can be done with something like `vim.go.float_border`.\r\n\r\nIs there anything else we need to consider?\r\n\r\nFor reference this is all I have in my config:\r\n\r\n```lua\r\nlocal function with(f, config)\r\n  return function(c)\r\n    return f(vim.tbl_deep_extend('force', config, c or {}))\r\n  end\r\nend\r\n\r\nvim.lsp.buf.signature_help = with(vim.lsp.buf.signature_help, {\r\n  border = 'rounded',\r\n  title_pos = 'left',\r\n})\r\n\r\nlocal have_cmp, cmp_nvim_lsp = pcall(require, 'cmp_nvim_lsp')\r\nif have_cmp then\r\n  local f = lsp.protocol.make_client_capabilities\r\n  lsp.protocol.make_client_capabilities = function()\r\n    return vim.tbl_deep_extend(\r\n      'force',\r\n      f(),\r\n      cmp_nvim_lsp.default_capabilities()\r\n    )\r\n  end\r\nend\r\n```",
            "created_at": "2024-11-01T17:00:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2452229172",
            "id": 2452229172,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SKgw0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452229172/reactions"
            },
            "updated_at": "2024-11-01T17:00:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452229172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ah yes, I do recall that. At least with this, markers are optional so it leaves room to retrofit a buffer option in the future. \n\nI can draft up a PR to at least see what such an option could look like.",
            "created_at": "2024-11-01T19:04:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2452434688",
            "id": 2452434688,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SLS8A",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452434688/reactions"
            },
            "updated_at": "2024-11-01T19:04:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452434688",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "How would this work if I wanted to configure my LSP client differently for a single project? I would want to have a \"main\" `vim.lsp.setup()` that sets the options that I will use as the default for most projects, but if I want to configure my LSP differently for just one project, how would I do that?\r\n\r\nSince each call to `vim.lsp.setup()` creates a new FileType autocommand, calling `vim.lsp.setup()` in a `.nvimrc` file (with project-specific configuration) wouldn't work because that would end up creating two autocommands. This would create two clients (or perhaps the second autocommand would re-use the client from the first autocommand?).\r\n\r\nI mentioned in chat a while ago that I've been using my own implementation of \"user-friendly LSP configuration\" that uses \"passive discovery\" (by finding files on the user's runtimepath) rather than \"active registration\" (i.e. explicitly calling `vim.lsp.setup` or similar). But frankly I'm happy to see _any_ movement towards making LSP configuration easier so I'm supportive of this, if there's consensus among the team. I just want to make sure we're thinking about all possible use cases.",
            "created_at": "2024-11-03T16:00:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2453476908",
            "id": 2453476908,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SPRYs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453476908/reactions"
            },
            "updated_at": "2024-11-03T16:00:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453476908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> How would this work if I wanted to configure my LSP client differently for a single project? I would want to have a \"main\" vim.lsp.setup() that sets the options that I will use as the default for most projects, but if I want to configure my LSP differently for just one project, how would I do that?\r\n\r\nFair question. What would you want to configure that isn't possible via `vim.lsp.ClientConfig`? Generally I lean towards providing my LSP configuration via editor agnostic methods, e.g. `.luarc.json`, `.clangd`, rather than implementing that with Nvim logic.\r\n\r\nAnother way would to to use something like:\r\n\r\n```lua\r\n        client.notify('workspace/didChangeConfiguration', { settings = client.settings })\r\n```\r\n\r\nin a LspAttach autocmd.\r\n\r\nSo I guess the details matter.\r\n\r\nNote that currently the client name is used as a sort of key to prevent multiple clients attaching to the same buffer. I can't quite figure where the exact logic for this is, but the way I've been testing my multi-client handler changes is by calling `lsp.setup` multiple times but by providing an explicit client.name (e.g. `luals` and `luals2`). It's not an exact solution, but it might lead to something.\r\n\r\n> I mentioned in chat a while ago that I've been using my own implementation of \"user-friendly LSP configuration\" that uses \"passive discovery\" (by finding files on the user's runtimepath) rather than \"active registration\" (i.e. explicitly calling vim.lsp.setup or similar). But frankly I'm happy to see any movement towards making LSP configuration easier so I'm supportive of this, if there's consensus among the team. I just want to make sure we're thinking about all possible use cases.\r\n\r\nI don't think this means we can't also have and rtp based approach as well. Just like we have `FileType` autocmds in addition to `ftplugin/`.\r\n\r\nDoes your rtp based approach have any significant differences to having something like `plugin/luals.lua` which just calls `vim.lsp.setup`?",
            "created_at": "2024-11-03T16:23:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2453484991",
            "id": 2453484991,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SPTW_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453484991/reactions"
            },
            "updated_at": "2024-11-03T16:26:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453484991",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  I can't quite figure where the exact logic for this is\r\n\r\nDo you mean https://github.com/neovim/neovim/blob/0da4d89558a05fb86186253e778510cfd859caea/runtime/lua/vim/lsp.lua#L265 ?\r\n\r\n*Update*: Nevermind, that's already there\r\n\r\n\r\n--- \r\n\r\n\r\n> I mentioned in chat a while ago that I've been using my own implementation of \"user-friendly LSP configuration\" that uses \"passive discovery\" (by finding files on the user's runtimepath) rather than \"active registration\" \r\n\r\n\r\nDo you have a small example how that would look like?\r\nThere was also an issue lately in the lsp repo about servers creating a .lsp entry to make them discoverable. See https://github.com/microsoft/language-server-protocol/issues/2051, which might be related?\r\n",
            "created_at": "2024-11-03T16:34:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2453488476",
            "id": 2453488476,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SPUNc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453488476/reactions"
            },
            "updated_at": "2024-11-03T16:40:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453488476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">What would you want to configure that isn't possible via vim.lsp.ClientConfig?\r\n\r\n`gopls` doesn't have any sort of configuration file so all configuration has to be done through the `settings` field in the initialization request. One example of a project-specific configuration setting is the [`local`](https://cs.opensource.google/go/x/tools/+/refs/tags/gopls/v0.16.2:gopls/doc/settings.md) setting, which doesn't make sense to use globally/for all projects. For one project at work, I also explicitly set the root directory for both `gopls` and `rust-analyzer` (rather than relying on root markers).\r\n\r\nMaybe this is possible using only `vim.lsp.ClientConfig` though.\r\n\r\n>Does your rtp based approach have any significant differences to having something like plugin/luals.lua which just calls vim.lsp.setup?\r\n\r\nI think the only significant difference is the fact that the rtp approach \"merges\" all of the files found in the rtp for a given server before calling `vim.lsp.start`. This allows a \"hierarchy\" of configuration settings (e.g. project-local -> plugin -> user).\r\n\r\n>Do you have a small example how that would look like?\r\n\r\nThe user creates Lua files under an `lsp/` directory on the runtimepath. Examples: https://github.com/gpanders/dotfiles/tree/master/.config/nvim/lsp. The implementation itself is [here](https://github.com/gpanders/dotfiles/blob/master/.config/nvim/lua/lsp.lua) (it's only about 100 lines of Lua).\r\n\r\nThis extends well to project-local configuration. A user can create a `.nvimrc` file which adds any directory to the runtimepath. In my case, I have `set runtimepath+=$PWD/.nvim` in `.nvimrc` and create overrides in e.g. `.nvim/lsp/gopls.lua`.",
            "created_at": "2024-11-03T18:04:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2453514200",
            "id": 2453514200,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SPafY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453514200/reactions"
            },
            "updated_at": "2024-11-03T18:04:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453514200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> For reference this is all I have in my config:\r\n\r\nThanks to overriding `vim.lsp.protocol.make_client_capabilities` I reduced lots of manual setting `capabilities` to the same value :+1:. I just had to make sure I did it before creating client configurations. ",
            "created_at": "2024-11-03T21:49:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2453588667",
            "id": 2453588667,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SPsq7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453588667/reactions"
            },
            "updated_at": "2024-12-01T11:55:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453588667",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Can we avoid introducing \"setup\" as a new name/concept, and stick with \"config\"?",
            "created_at": "2024-11-04T13:02:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2454661801",
            "id": 2454661801,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6STyqp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454661801/reactions"
            },
            "updated_at": "2024-12-01T11:54:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454661801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This isn't quite config as it is setting up autocmds to start specific servers; exactly one level above `vim.lsp.start()`. AFAIK there isn't anything existing in Nvim that maps closely to this. I'm not married to \"setup\", despite it not being new to users, but I'm not sure \"config\" is a good fit.\r\n\r\nIt would also be nice to keep `vim.lsp.config` open for non-server specific configuration, similar to `vim.diagnostic.config`, though maybe most of that can be gobbled up by more agnostic methods `vim.ui.config`, `vim.diagnostic.config`, etc.",
            "created_at": "2024-11-04T13:50:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2454770599",
            "id": 2454770599,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SUNOn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454770599/reactions"
            },
            "updated_at": "2024-12-02T22:20:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454770599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It would also be nice to keep `vim.lsp.config` open for non-server specific configuration,\r\n\r\nWhy couldn't we keep that door open, while still using `vim.lsp.config()` for this initial purpose?",
            "created_at": "2024-11-04T13:53:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2454776276",
            "id": 2454776276,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SUOnU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454776276/reactions"
            },
            "updated_at": "2024-12-02T22:20:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454776276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Because a function for non server specific configuration would have a different signature, and I don't want to combine these two things into a single function.\r\n\r\nWhat about `vim.lsp.add()`? This is the wording I used in my dotfiles.",
            "created_at": "2024-11-04T13:55:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2454782396",
            "id": 2454782396,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SUQG8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454782396/reactions"
            },
            "updated_at": "2024-12-01T11:54:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454782396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\r\n> Because a function for non server specific configuration would have a different signature, and I don't want to combine these two things into a single function.\r\n\r\n\"Non-server specific\" means something like \"global defaults\"? I don't see why they would have different interfaces, in fact it would be strange if they did.",
            "created_at": "2024-11-04T14:10:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2454818552",
            "id": 2454818552,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SUY74",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454818552/reactions"
            },
            "updated_at": "2024-11-04T14:10:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454818552",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> \"Non-server specific\" means something like \"global defaults\"?\r\n\r\nNo it does not. It means things like border hovers, quickfix handling and settings that have nothing to do with a server. Basically defaults for configs that may pass to `vim.lsp.buf` which are designed to handle multiple servers/clients, and thus their configs are not specific to any one server/client.",
            "created_at": "2024-11-04T14:13:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2454825487",
            "id": 2454825487,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SUaoP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454825487/reactions"
            },
            "updated_at": "2024-11-04T14:24:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454825487",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`lsp.enable()` could be another naming option?\r\n\r\n> means things like border hovers, quickfix handling and settings that have nothing to do with a server. Basically defaults for configs that may pass to vim.lsp.buf which are designed to handle multiple servers/clients, and thus their configs are not specific to any one server/client.\r\n\r\nIf it's about global options, shouldn't they just use the option system? Relating to https://github.com/neovim/neovim/pull/31074#issuecomment-2454773721\r\n\r\nAnd if it's for options that are client/server specific, putting them under the same `lsp.config`(setup) function would fit again?",
            "created_at": "2024-11-05T17:16:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2457750812",
            "id": 2457750812,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6Sfk0c",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2457750812/reactions"
            },
            "updated_at": "2024-11-05T17:17:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2457750812",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think a big part of \"API pressure\" here comes from the fact that we (still) don't have table options; there is (understandable) reticence to add a bucketful of new options for different LSP (and diagnostics and treesitter and...) aspects.\r\n\r\n(And I like `enable()`)",
            "created_at": "2024-11-05T17:26:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2457770962",
            "id": 2457770962,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SfpvS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2457770962/reactions"
            },
            "updated_at": "2024-11-05T17:26:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2457770962",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If it's about global options, shouldn't they just use the option system? Relating to https://github.com/neovim/neovim/pull/31074#issuecomment-2454773721\r\n\r\nMaybe, but that then puts the existence of `vim.diagnostic.config` under question.\r\n\r\n> And if it's for options that are client/server specific, putting them under the same lsp.config(setup) function would fit again?\r\n\r\nYes. I'm only suggesting we reserve`vim.lsp.config` for config that doesn't fit in a specific client/server.\r\n\r\nIt might look something like this:\r\n\r\n```lua\r\nvim.lsp.config({\r\n  hover = {\r\n    silent = true\r\n  },\r\n  declaration = {\r\n    reuse_win = true\r\n  },\r\n  signature_help = {\r\n    silent = false\r\n  },\r\n  format = {\r\n    filter = function(client) ... end\r\n    timeout_ms = 100,\r\n  },\r\n  rename = {\r\n    filter = function() ... end\r\n  },\r\n  references = {\r\n    loclist = true,\r\n  },\r\n  code_action = {\r\n    apply = true,\r\n  }\r\n})\r\n\r\n```\r\n\r\nNote this example includes options we already support. The schema for this config can be semi-autoamtically derived by coupling it with the functions in `vim.lsp.buf.*`.",
            "created_at": "2024-11-05T17:31:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2457780913",
            "id": 2457780913,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6SfsKx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2457780913/reactions"
            },
            "updated_at": "2024-11-05T17:31:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2457780913",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> but that then puts the existence of vim.diagnostic.config under question.\r\n\r\n`diagnostic.config` has per-provider namespacing. Drawing that parallel would only match for per-client/server options.\r\n\r\nUnless options started to support namespace indexing `vim.o[ns].xy = ...`\r\n\r\n> I think a big part of \"API pressure\" here comes from the fact that we (still) don't have table options\r\n\r\nFair, but I don't think the handler changes add much pressure to add these options now. Before one had to monkey patch handlers, now one could monkey patch the `buf.` functions. Not like one is worse than the other. (Not that I like that approach much)\r\n\r\n\r\n> It might look something like this [..]\r\n\r\nStill unclear if all these aspects warrant global configuration.\r\n\r\n- `silent`: Can explore supporting the `silent` flag set via `:verbose` and `keymap.set(... { silent })`.\r\n- `reuse_win`: Maybe use `'switchbuf'`\r\n- format filter: This seems client specific in a way and overlaps with changing capabilities to disable formatting on a client\r\n- rename filter: Same\r\n- references loclist: Keymap might be good enough?\r\n- code_action apply: I'd think this doesn't make for a good global in any case, as you likely want to filter the code-actions for a specific one. E.g. for organize imports or something. E.g. I have one keymap for all code-actions, one filtered for refactoring actions.\r\n\r\nBut assuming global options for these is warranted - if options supported tables nicely, and these don't need client/server namespacing - this could be `vim.o.lsp = {}` or `vim.o.lsp_hover = { silent = true }`\r\n\r\n---\r\n\r\nBut independent of this aspect. I'd probably still favour `enable` here over `config` (or `setup`) because it feels like a more an active operation than `vim.diagnostic.config` and it mirrors the subsystem's `enable` functions (`completion.enable`, etc.)\r\n",
            "created_at": "2024-11-05T17:57:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2457831098",
            "id": 2457831098,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6Sf4a6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2457831098/reactions"
            },
            "updated_at": "2024-11-05T18:56:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2457831098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Is this meant to be used for builtin configuration for certain types of servers similar to `:compiler`? It seems like what this is doing can already be achieved by adding `vim.lsp.start()` to the appropriate ftplugin. no autocmds required.",
            "created_at": "2024-11-18T05:38:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2481999001",
            "id": 2481999001,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6T8EyZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2481999001/reactions"
            },
            "updated_at": "2024-11-18T08:13:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2481999001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19380243?v=4",
                "events_url": "https://api.github.com/users/TravonteD/events{/privacy}",
                "followers_url": "https://api.github.com/users/TravonteD/followers",
                "following_url": "https://api.github.com/users/TravonteD/following{/other_user}",
                "gists_url": "https://api.github.com/users/TravonteD/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TravonteD",
                "id": 19380243,
                "login": "TravonteD",
                "node_id": "MDQ6VXNlcjE5MzgwMjQz",
                "organizations_url": "https://api.github.com/users/TravonteD/orgs",
                "received_events_url": "https://api.github.com/users/TravonteD/received_events",
                "repos_url": "https://api.github.com/users/TravonteD/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TravonteD/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TravonteD/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TravonteD",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`ftplugin` is an autocmd. It also doesn't have root markers or multiple filetypes.",
            "created_at": "2024-11-18T08:13:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2482228402",
            "id": 2482228402,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6T88yy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2482228402/reactions"
            },
            "updated_at": "2024-11-18T08:13:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2482228402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > If it's about global options, shouldn't they just use the option system? Relating to [#31074 (comment)](https://github.com/neovim/neovim/pull/31074#issuecomment-2454773721)\r\n> \r\n> Maybe, but that then puts the existence of `vim.diagnostic.config` under question.\r\n\r\nThat's OK. We don't need to double-down on the `vim.xx.config` pattern for anything that fits in the upcoming, expanded options subsystem (which is now becoming realistic).\r\n\r\n> Unless options started to support namespace indexing `vim.o[ns].xy = ...`\r\n\r\n🤔 I've also been thinking that autocmds/events could have user-defined \"scopes\" driven by namespaces.\r\n\r\n+100 for everything in https://github.com/neovim/neovim/pull/31031#issuecomment-2457831098 . If `enable` fits here then that at least avoids a new `setup` verb, which I strongly want to avoid.",
            "created_at": "2024-11-18T14:24:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2483199269",
            "id": 2483199269,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6UAp0l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2483199269/reactions"
            },
            "updated_at": "2024-11-18T14:26:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2483199269",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> That's OK. We don't need to double-down on the vim.xx.config pattern for anything that fits in the upcoming, expanded options subsystem (which is now becoming realistic).\r\n\r\nOk sure.\r\n\r\n`enable()` implies enabling something that already exists so feels a bit weird to me.\r\n\r\nIs there any objection to `add()`? Otherwise, I slightly prefer `config()` over `enable()`.",
            "created_at": "2024-11-18T14:50:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2483272528",
            "id": 2483272528,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6UA7tQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2483272528/reactions"
            },
            "updated_at": "2024-12-01T11:52:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2483272528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is there any objection to `add()`? Otherwise, I slightly prefer `config()` over `enable()`.\r\n\r\nI assume we will need \"lookup\" and \"update\", so `add()` wouldn't fit. I'm ok with `config()` or `enable()`.",
            "created_at": "2024-11-18T14:56:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2483292007",
            "id": 2483292007,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6UBAdn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2483292007/reactions"
            },
            "updated_at": "2024-12-01T11:52:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2483292007",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The user creates Lua files under an lsp/ directory on the runtimepath. Examples: [gpanders/dotfiles@master/.config/nvim/lsp](https://github.com/gpanders/dotfiles/tree/master/.config/nvim/lsp). The implementation itself is [here](https://github.com/gpanders/dotfiles/blob/master/.config/nvim/lua/lsp.lua) (it's only about 100 lines of Lua).\r\n>\r\n> This extends well to project-local configuration. A user can create a .nvimrc file which adds any directory to the runtimepath. In my case, I have set runtimepath+=$PWD/.nvim in .nvimrc and create overrides in e.g. .nvim/lsp/gopls.lua.\r\n\r\nJust to loop back around on this.\r\n\r\nI've had a look at the code, and one of the major drawbacks I noticed is that since it requires modifying `rtp`, means the project configuration applies to the whole nvim session, and not per buffer.\r\n\r\nNvim currently doesn't really have any existing frameworks to scope specific projects, and the closest thing we have is to emulate it using a combination of the buffer name and root directory. https://github.com/folke/neoconf.nvim is probably the closest plugin we have for managing project level configuration.\r\n\r\nHowever, I do like the concept of placing server defaults inside `lsp/<server>.lua` and I think what's proposed here doesn't prevent us from implementing that in the future. Hopefully it should just mean a user just needs to call `vim.lsp.config({ name = 'luals' })` (with a future overload to `vim.lsp.config('luals')`), and things like filetype, root markers and cmd can be fetched from `/lsp/luals.lua` using `rtp` lookup.\r\n\r\nAnd now I've said that, `enable()` is looking more attractive.",
            "created_at": "2024-11-18T15:07:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2483321113",
            "id": 2483321113,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6UBHkZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2483321113/reactions"
            },
            "updated_at": "2024-11-18T15:07:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2483321113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Given the discussion in https://github.com/neovim/neovim/pull/31341 maybe we should add a `enable` option to `start` instead and overload the root_dir somehow. Similar to how there's a `systemctl enable --now` (as a way to both enable and start a service).\r\nKinda fearing that otherwise having both `start` and `enable` might also confuse people and then we and up deprecating `start` too.\r\n\r\n",
            "created_at": "2024-11-26T16:35:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2501352241",
            "id": 2501352241,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6VF5sx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2501352241/reactions"
            },
            "updated_at": "2024-11-26T16:35:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2501352241",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I do think the distinction between `enable` and `start` is much more obvious than `start` and `start_client`. I'm also hoping in the future we can overload `enable` so it becomes as simple as `vim.lsp.enable('clangd')`.",
            "created_at": "2024-11-26T16:41:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2501366700",
            "id": 2501366700,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6VF9Os",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2501366700/reactions"
            },
            "updated_at": "2024-11-26T16:41:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2501366700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've thought about this for some time and took on board all the feedback. I've revised the proposal which I've updated in the PR description. The PR is a bit more ambitous but hopefully also meets all the requirements and objections to the last proposal. ",
            "created_at": "2024-12-01T11:51:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2509730988",
            "id": 2509730988,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6Vl3Ss",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509730988/reactions"
            },
            "updated_at": "2024-12-01T11:51:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509730988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is looking quite good! Simple and elegant.\r\n\r\nDoes `vim.lsp.config.clangd` \"lazy-load\" or is it eagerly set from the `lua/*.lua` runtime files (considering 1000s of lspconfigs)? Is the door open [for \"lazy-load\" discovery](https://github.com/neovim/neovim/pull/31031#issuecomment-2453514200) in the future?\r\n\r\n> Kinda fearing that otherwise having both `start` and `enable` might also confuse people and then we and up deprecating `start` too.\r\n\r\nGood point. See also `:h dev-name-common`. OTOH, it feels clear to me:\r\n\r\n1. `start` starts a client\r\n    - Low-level client spawning API.\r\n    - Analagously: we \"start\" a process, RPC call, timer, etc. \"Enable\" is for state that can be toggled.\r\n2. `enable` sets up a `FileType` event-handler.\r\n    - Fits our existing `foo.enable()` pattern.\r\n3. `config` defines default configuration.\r\n    - Fits our existing `foo.config()` pattern.\r\n\r\nSo although `enable` and `config` are relatively thin wrappers in this current PR, they fit established patterns. It would probably be awkward to overload `enable` to also perform `start` and `config`.",
            "created_at": "2024-12-02T22:13:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2513058014",
            "id": 2513058014,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6Vyjje",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2513058014/reactions"
            },
            "updated_at": "2024-12-02T22:21:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2513058014",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Does vim.lsp.config.clangd \"lazy-load\" or is it eagerly set\n\nEagerly set if I understand you correctly. This PR currently doesn't implement any automatic discovery but I've mentioned this snippet we could add that add RTP discovery via `/lsp/<name.lua>`\n\n```lua\nlocal orig_enable = vim.lsp.enable\nfunction vim.lsp.enable(name, cfg)\n  local tail = ('lsp/%s.lua'):format(name)\n  for _, f in ipairs(vim.api.nvim_get_runtime_file(tail, true)) do\n    local chunk = loadfile(f)\n    if chunk then\n      local ok, ccfg = pcall(chunk)\n      if ok and type(ccfg) == 'table' then\n        local nm = assert(f:match('([^/]+)%.lua$')) --- @type string\n        vim.lsp.config(nm, ccfg)\n      end\n    end\n  end\n\n  orig_enable(name, cfg)\nend\n\nvim.lsp.enable('clangd')\n```\n\nHowever, if we decide to add something like this, the config would be loaded at `enable` time since `filetype` is a config field that needs to be known. If we pull `filetype` out somehow then the config doesn't need to be resolved until `start` time.",
            "created_at": "2024-12-02T22:46:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2513138513",
            "id": 2513138513,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6Vy3NR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2513138513/reactions"
            },
            "updated_at": "2024-12-02T22:47:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2513138513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> but I've mentioned this snippet we could add that add RTP discovery via `/lsp/<name.lua>`\r\n\r\nOh I think the PR main description has a typo, it mentions `lua/<name>.lua` \r\n\r\n> if we decide to add something like this, the config would be loaded at `enable` time since `filetype` is a config field that needs to be known\r\n\r\nThat seems fine as long as we are not eager-loading every lspconfig on the runtimepath.",
            "created_at": "2024-12-02T23:55:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2513220078",
            "id": 2513220078,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6VzLHu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2513220078/reactions"
            },
            "updated_at": "2024-12-03T11:12:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2513220078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Oh I think the PR main description has a typo, it mentions lua/<name>.lua\n\nFixed\n\n> That seems fine as long as we are not eager-loading every lspconfig on the runtimepath.\n\nDo you mean the configurations should only be fetched from RTP at `start()` time? If so then this design needs to be modified so LSP servers are specified in `ftplugin`, and there's probably little need for `enable()` at that point (I'm not sure) and all the RTP discovery could be done in `start()` or some thin wrapper of it.\n\nOr do you mean it's fine to eager load all the user specified/opt-in servers?",
            "created_at": "2024-12-03T00:03:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2513229967",
            "id": 2513229967,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6VzNiP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2513229967/reactions"
            },
            "updated_at": "2024-12-03T00:04:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2513229967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Do you mean the configurations should only be fetched from RTP at `start()` time?\r\n\r\nI'm mainly thinking about the worst-case scenario: imagine (hypothetical) that all of nvim-lspconfig is upstreamed to Nvim. We probably want to avoid loading all 1000 lspconfigs in-memory, we only should load lspconfigs when a relevant filetype is triggered. The details about when `config`/`enable`/`start` loads a filetype-specific config are less important imo, as long as we are not eager-loading any and all configs that happen to exist on the runtimepath.\r\n\r\nIOW lspconfigs should behave like \"autoload\", not \"plugin\".",
            "created_at": "2024-12-03T11:17:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2514261759",
            "id": 2514261759,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6V3Jb_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514261759/reactions"
            },
            "updated_at": "2024-12-03T11:18:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514261759",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> IOW lspconfigs should behave like \"autoload\", not \"plugin\".\r\n\r\nWe're circling a little bit. Should we autoload as we _create_ the filetype autocmd, or do we autoload as we _execute_ the filetype autocmd? The latter will require a modified design to this PR.",
            "created_at": "2024-12-03T14:03:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2514646494",
            "id": 2514646494,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6V4nXe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514646494/reactions"
            },
            "updated_at": "2024-12-03T14:03:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514646494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Should we autoload as we _create_ the filetype autocmd,\r\n\r\nDepends on when that filetype autocmd/handler is created. Are they created for all filetypes at startup, and thus load all lspconfigs into memory? ",
            "created_at": "2024-12-03T14:13:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2514676250",
            "id": 2514676250,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6V4uoa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514676250/reactions"
            },
            "updated_at": "2024-12-03T14:13:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514676250",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think the _time_ is the main issue here (although \"at execution\" is obviously even lazier and thus more better) but the question of _whether_: Are all configurations always sourced (no matter when) as long as they are on runtimepath, or does this require explicit opt-in from the user? The former would put us in the same (sinking) boat as nvim-treesitter, where just the existence of bundled queries could affect users even if they never installed anything.\r\n\r\nTL;DR: Do the configs in `lsp/` only apply if you `vim.lsp.enable('clangd')` without a config, or do they _replace_  `vim.lsp.enable` entirely? Former good, latter bad.",
            "created_at": "2024-12-03T14:13:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2514679248",
            "id": 2514679248,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6V4vXQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514679248/reactions"
            },
            "updated_at": "2024-12-03T14:16:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514679248",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Depends on when that filetype autocmd/handler is created. Are they created for all filetypes at startup, and thus load all lspconfigs into memory?\r\n\r\nThey are created when the user calls `vim.lsp.enable()` (for the servers they want to enable) which would typically be done in `init.lua`. This is no different to how lspconfig works now.\r\n\r\n> TL;DR: Do the configs in lsp/ only apply if you vim.lsp.enable('clangd') without a config, or do they replace vim.lsp.enable entirely? Former good, latter bad.\r\n\r\nThis PR (currently) does not include `lsp/` loading. However, `enable` can be wrapped to do this. Only the configs the user specifically `enables` are loaded (as the autocmd is created).\r\n\r\nIn order to implement full-lazy, then `filetypes` cannot be an option to the table passed to `vim.lsp.config/enable()`, and instead you would need something like:\r\n\r\n```lua\r\nvim.api.nvim_create_autocmd('Filetype', {\r\n  pattern = 'c',\r\n  callback = function()\r\n    vim.opt.lsp:append('clangd')\r\n  end\r\n})\r\n```\r\n\r\nCould also be done in `ftplugin/c.lua`.\r\n\r\nWith this `vim.lsp.enable` would look like:\r\n\r\n```lua\r\nfunction vim.lsp.enable(name, cfg)\r\n  vim.api.nvim_create_autocmd('FileType', {\r\n    pattern = '*', -- Need to trigger for all filetypes since we don't know what filetypes this is valid for.\r\n    callback = function()\r\n      if vim.tbl_contains(vim.opt:lsp:get(), name) then\r\n        local config = get_config_from_rtp(name)\r\n        config = vim.tbl_deep_extend('force', config, cfg)\r\n        ...\r\n        vim.lsp.start(config)\r\n      end\r\n   end\r\n  })\r\nend\r\n```\r\n\r\nTLDR: the source of information of `filetype->lsp` needs to go somewhere else. A buffer local option makes the most sense.\r\n\r\nEDIT: Now I've actually written some rough code for this, I realise now we can do full lazy without a buffer local option and `filetypes` can still be an option in the config.",
            "created_at": "2024-12-03T14:25:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2514713435",
            "id": 2514713435,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6V43tb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514713435/reactions"
            },
            "updated_at": "2024-12-05T15:14:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514713435",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> They are created when the user calls vim.lsp.enable() (for the servers they want to enable) which would typically be done in init.lua. This is no different to how lspconfig works now.\r\n\r\nPerfect. That's all I wanted to hear. Sounds like we have a good way forward then. (Config autodiscovery need not be part of this PR as long as the roadmap is clear -- which it looks like.)",
            "created_at": "2024-12-03T14:28:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2514720223",
            "id": 2514720223,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6V45Xf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514720223/reactions"
            },
            "updated_at": "2024-12-03T14:31:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2514720223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've tweaked how capabilities are handled so `nvim-cmp` users can do:\r\n```lua\r\n  vim.lsp.config('*', { capablities = require('cmp_nvim_lsp').default_capabilities() })\r\n```",
            "created_at": "2024-12-05T15:16:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2520601121",
            "id": 2520601121,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6WPVIh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 4,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2520601121/reactions"
            },
            "updated_at": "2024-12-05T15:16:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2520601121",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Can `lsp.enable()` take a `string[]`? Now that `config` is separated out, that would further reduce boilerplate (e.g., put configs in  `lsp/` and have a single(!) `vim.lsp.enable { 'luals', 'clangd', 'texlab' }` in your `init.lua`).",
            "created_at": "2024-12-05T16:12:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2520798253",
            "id": 2520798253,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6WQFQt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2520798253/reactions"
            },
            "updated_at": "2024-12-05T16:12:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2520798253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Sorry, I'm probably missing something here and there's a lot of discussion. But as a user, compared to calling `vim.lsp.start(...)` in `ftplugin/*.lua` (what I do today) and/or `FileType` autocmd(s), it's not clear how this will be an improvement for me?\r\n\r\nWhile `root_markers` is looking convenient, how is it supposed to work for more complex cases like [gopls](https://github.com/neovim/nvim-lspconfig/blob/2c007c79eedfca0ec652c50d571cb0c52d1577ba/lua/lspconfig/configs/gopls.lua#L9-L26) and [rust-analyzer](https://github.com/neovim/nvim-lspconfig/blob/2c007c79eedfca0ec652c50d571cb0c52d1577ba/lua/lspconfig/configs/rust_analyzer.lua#L41-L73)?\r\n\r\nNote, I don't use nvim-lspconfig since it doesn't really provide me any value anymore.",
            "created_at": "2024-12-06T07:55:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2522412933",
            "id": 2522412933,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6WWPeF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2522412933/reactions"
            },
            "updated_at": "2024-12-06T08:17:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2522412933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/177685?v=4",
                "events_url": "https://api.github.com/users/lithammer/events{/privacy}",
                "followers_url": "https://api.github.com/users/lithammer/followers",
                "following_url": "https://api.github.com/users/lithammer/following{/other_user}",
                "gists_url": "https://api.github.com/users/lithammer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lithammer",
                "id": 177685,
                "login": "lithammer",
                "node_id": "MDQ6VXNlcjE3NzY4NQ==",
                "organizations_url": "https://api.github.com/users/lithammer/orgs",
                "received_events_url": "https://api.github.com/users/lithammer/received_events",
                "repos_url": "https://api.github.com/users/lithammer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lithammer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lithammer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lithammer",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Note, I don't use nvim-lspconfig since it doesn't really provide me any value anymore.\r\n\r\nThen this PR is not for you.",
            "created_at": "2024-12-06T08:09:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2522462502",
            "id": 2522462502,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6WWbkm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2522462502/reactions"
            },
            "updated_at": "2024-12-06T08:17:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2522462502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@lithammer this is a formalization (and improvement) of the \"lsp config\" concept. nvim-lspconfig will define its configs using `vim.lsp.config`: https://github.com/neovim/nvim-lspconfig/issues/3494 , but also in your personal config you will find that `vim.lsp.config` + `vim.lsp.enable` saves you some boilerplate.",
            "created_at": "2024-12-06T11:25:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2522946689",
            "id": 2522946689,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6WYRyB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2522946689/reactions"
            },
            "updated_at": "2024-12-06T11:25:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2522946689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "MacOS failures are consistent, unfortunately.",
            "created_at": "2024-12-09T18:28:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2529029076",
            "id": 2529029076,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6WvevU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2529029076/reactions"
            },
            "updated_at": "2024-12-09T18:28:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2529029076",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'd be really surprised if it was because of this change since I've pretty much only added new functions.\n\nEDIT: actually there is one line of code that might have caused the failures.",
            "created_at": "2024-12-09T19:03:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2529122897",
            "id": 2529122897,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6Wv1pR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2529122897/reactions"
            },
            "updated_at": "2024-12-09T19:14:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2529122897",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yep, and macOS is special since that's _not_ where we disable file watching.",
            "created_at": "2024-12-09T19:16:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2529152470",
            "id": 2529152470,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6Wv83W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2529152470/reactions"
            },
            "updated_at": "2024-12-09T19:16:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2529152470",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@mfussenegger can you just double-check your happy with the changes to `client.lua` and the tests removed in `lsp_spec.lua`.\r\n\r\nTLDR is that we now always use `lsp.protocol.make_client_capabilities()` as a base for `capabilities`. The consequence of this is that we can no longer remove tables from the default capabilities.\r\n\r\nIf that isn't acceptable, then maybe we can add an `extra_capabilities` field to avoid users having to pre-populate `capabilities` just to add new ones.",
            "created_at": "2024-12-10T12:10:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2531462105",
            "id": 2531462105,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6W4wvZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2531462105/reactions"
            },
            "updated_at": "2024-12-10T12:10:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2531462105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> TLDR is that we now always use `lsp.protocol.make_client_capabilities()` as a base for `capabilities`. The consequence of this is that we can no longer remove tables from the default capabilities.\r\n\r\nSounds okay to me.",
            "created_at": "2024-12-10T16:45:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2532258488",
            "id": 2532258488,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6W7zK4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2532258488/reactions"
            },
            "updated_at": "2024-12-10T16:45:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2532258488",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Friendly reminder that any new features merged into master should be considered unstable until they are included in an official release, which will be 0.11. Until then, the API introduced with this PR is subject to changes.\r\n\r\nIf there are any unresolved issues raised with the design, then we may prefix the API with `_` to mark as unstable for the official release.",
            "created_at": "2024-12-10T17:15:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/31031#issuecomment-2532328144",
            "id": 2532328144,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
            "node_id": "IC_kwDOAPphoM6W8ELQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2532328144/reactions"
            },
            "updated_at": "2024-12-10T17:15:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2532328144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31031/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31031/commits",
    "created_at": "2024-11-01T16:45:14Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31031.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:feat/lspsetup",
        "ref": "feat/lspsetup",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2024-12-16T16:53:11Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 292233,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2024-02-06T12:43:15Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "d26ebabdffad90fd1b2028c01ee1387370a3c113",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31031",
    "id": 2158409627,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31031",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": true,
    "merge_commit_sha": "3f1d09bc94d02266d6fa588a2ccd1be1ca084cf7",
    "merged_at": "2024-12-10T17:16:01Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6Apreb",
    "number": 31031,
    "patch_url": "https://github.com/neovim/neovim/pull/31031.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31031/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/d26ebabdffad90fd1b2028c01ee1387370a3c113",
    "title": "feat(lsp): add `vim.lsp.config` and `vim.lsp.enable`",
    "updated_at": "2024-12-10T17:16:50Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31031",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    }
}