{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25674/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25674/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25674"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25674"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25674/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/e19cc9c9b715d8171f7940632b8855104b5290b6"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4947,
            "forks_count": 4947,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1676,
            "open_issues_count": 1676,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-10-31T01:32:21Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 241511,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 70527,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-10-31T01:54:58Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 70527,
            "watchers_count": 70527,
            "web_commit_signoff_required": false
        },
        "sha": "0fe0cf5adaab06b92250eb350306de63c4d4f36f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "#25394 unified the interfaces for setting number and boolean options. However, there is still a separate `set_string_option` function that is used for setting a string option. This PR removes that function and merges it with `set_option`.\r\n\r\nRef: #25672",
    "closed_at": "2023-10-30T19:06:57Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362615517"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362615517"
                }
            },
            "author_association": "MEMBER",
            "body": "I assume this is only the case when buf/win is passed to `nvim_set_option_value`?",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T18:49:59Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362615517",
            "id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5RN9zd",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683134620,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362615517/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T18:50:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362615517",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362622228"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362622228"
                }
            },
            "author_association": "MEMBER",
            "body": "> I assume this is only the case when buf/win is passed to `nvim_set_option_value`?\r\n\r\nNope, it doesn't have anything to do with `nvim_set_option_value()` in particular, it's just a change in behavior regarding how options are set. Previously, this was the behavior for global-local string options, now this is the behavior for all global-local options regardless of type.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T18:56:34Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362622228",
            "id": 1362622228,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5RN_cU",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683146273,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362622228/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T18:57:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362622228",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362627763"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362627763"
                }
            },
            "author_association": "MEMBER",
            "body": "So when we use `nvim_set_option_value` with no scope it'll reset the local values for all buffers/windows?",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T19:02:11Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362627763",
            "id": 1362627763,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5ROAyz",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683154832,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362627763/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T19:02:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362627763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362628523"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362628523"
                }
            },
            "author_association": "MEMBER",
            "body": "> So when we use `nvim_set_option_value` with no scope it'll reset the local values for all buffers/windows?\r\n\r\nNo, only the current buffer/window. And it already did that for string options, btw.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T19:02:58Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362628523",
            "id": 1362628523,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5ROA-r",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683156003,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362628523/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T19:02:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362628523",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362629867"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362629867"
                }
            },
            "author_association": "MEMBER",
            "body": "This seems undesirable, at least for the API and should probably be documented. The API should be agnostic to current win/buf.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T19:04:24Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362629867",
            "id": 1362629867,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5ROBTr",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683158066,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362629867/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T19:04:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362629867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362632134"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362632134"
                }
            },
            "author_association": "MEMBER",
            "body": "> This seems undesirable, at least for the API and should probably be documented. The API should be agnostic to current win/buf.\r\n\r\nAgain, this was already the case for string options. The only thing this PR does is make it more consistent so that it also occurs for number and boolean options. I would be fine with documenting this, though.\r\n\r\n> The API should be agnostic to current win/buf.\r\n\r\nI generally agree, but unfortunately this was not how options were designed to work. If we really want we could probably add some extra code to `nvim_set_option_value` to set the local value for the curbuf/curwin again but I'm not sure if we really want that. I'll defer this to @bfredl as I don't have any strong opinions on this.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T19:06:57Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362632134",
            "id": 1362632134,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5ROB3G",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683161692,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362632134/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T19:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362632134",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362633815"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362633815"
                }
            },
            "author_association": "MEMBER",
            "body": "Also, using `:set` (or `nvim_set_option_value()`)  without scope implies setting both the local and global values for a global-local option. All this does is add an optimization (for non-trivial types) by removing the local value since it won't be used anyway.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T19:08:54Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362633815",
            "id": 1362633815,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5ROCRX",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683166599,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362633815/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T19:08:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362633815",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362636037"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362636037"
                }
            },
            "author_association": "MEMBER",
            "body": "> Again, this was already the case for string options. \n\nI know! I didn't ignore that.\n\n> The only thing this PR does is make it more consistent so that it also occurs for number and boolean options. I would be fine with documenting this, though.\n\nBy making it consistent you've had to change behaviour for a certain type of options. You could have just as easily changed how strings work. \n\nEither way it seems like we may want to change behaviour in the future so need to be weary of flip flopping.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T19:11:03Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362636037",
            "id": 1362636037,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5ROC0F",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683172325,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362636037/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T19:11:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362636037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362637231"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362637231"
                }
            },
            "author_association": "MEMBER",
            "body": "> I generally agree, but unfortunately this was not how options were designed to work. If we really want we could probably add some extra code to nvim_set_option_value to set the local value for the curbuf/curwin again but I'm not sure if we really want that. I'll defer this to @bfredl as I don't have any strong opinions on this.\n\nThe API can do exactly what we want it to do, and one of the goals of the API is to remove all current win/buf dependency.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T19:12:20Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362637231",
            "id": 1362637231,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5RODGv",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683175747,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362637231/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T19:12:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362637231",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362639150"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362639150"
                }
            },
            "author_association": "MEMBER",
            "body": "> > I generally agree, but unfortunately this was not how options were designed to work. If we really want we could probably add some extra code to nvim_set_option_value to set the local value for the curbuf/curwin again but I'm not sure if we really want that. I'll defer this to @bfredl as I don't have any strong opinions on this.\r\n> \r\n> The API can do exactly what we want it to do, and one of the goals of the API is to remove all current win/buf dependency.\r\n\r\nShould we add extra code for the API, in that case? Again, I don't consider myself an authority when it comes to making API changes like this so I'd like to defer this to someone else if possible, but I can implement whatever is required.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T19:14:25Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362639150",
            "id": 1362639150,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5RODku",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683181197,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362639150/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T19:14:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362639150",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1362643371"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362643371"
                }
            },
            "author_association": "MEMBER",
            "body": "Potentially. I haven't got all the necessary context in my brain atm, just that a design goal of the API is to also pass win/buf when it acts on them and pass 0 for current win/buf. Deviating from that would be unfortunate.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-17T19:17:57Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1362643371",
            "id": 1362643371,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5ROEmr",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1683189952,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362643371/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-17T19:17:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1362643371",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1368777592"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1368777592"
                }
            },
            "author_association": "MEMBER",
            "body": "This will be resolved in a follow-up PR",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-23T14:31:26Z",
            "diff_hunk": "@@ -73,7 +73,12 @@ The following changes may require adaptations in user config or plugins.\n \n • |OptionSet| autocommand args |v:option_new|, |v:option_old|,\n   |v:option_oldlocal|, |v:option_oldglobal| now have the type of the option\n-  instead of always being strings.\n+  instead of always being strings. |v:option_old| is now the old global value\n+  for all global-local options, instead of just string global-local options.\n+\n+• Local value for a global-local number/boolean option is now unset when\n+  the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1368777592",
            "id": 1368777592,
            "in_reply_to_id": 1362615517,
            "line": 80,
            "node_id": "PRRC_kwDOAPphoM5RleN4",
            "original_commit_id": "ecaa583599d4359669cf7f6685c8a22999fa839e",
            "original_line": 80,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 9,
            "pull_request_review_id": 1692729641,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1368777592/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-23T14:31:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1368777592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1369426813"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1369426813"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  // TODO(famiu): Use OptVal for def_val\r\n```",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-24T00:42:03Z",
            "diff_hunk": "@@ -56,6 +56,7 @@ typedef struct vimoption {\n   /// cmdline. Only useful for string options.\n   opt_expand_cb_T opt_expand_cb;\n \n+  /// TODO(famiu): Use OptVal for def_val",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1369426813",
            "id": 1369426813,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Rn8t9",
            "original_commit_id": "e7d10b1bc6d75c688022e4f5c6d608109ee016ca",
            "original_line": 59,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/option.h",
            "position": null,
            "pull_request_review_id": 1693755354,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1369426813/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-24T00:42:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1369426813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1375887675"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375887675"
                }
            },
            "author_association": "MEMBER",
            "body": "this looks like a ternary.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-30T09:10:04Z",
            "diff_hunk": "@@ -1142,8 +1142,18 @@ static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix,\n {\n   assert(varp != NULL);\n \n+  vimoption_T *opt = &options[opt_idx];\n   char *arg = *argp;\n-  OptVal oldval = optval_from_varp(opt_idx, varp);\n+  void *oldval_varp = NULL;\n+\n+  // When setting the local value of a global option, the old value may be the global value.\n+  if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+    oldval_varp = get_varp(opt);\n+  } else {\n+    oldval_varp = varp;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1375887675",
            "id": 1375887675,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SAmE7",
            "original_commit_id": "ff33b8a87bca2a2cdb9440d724e8b5f2b51ed95b",
            "original_line": 1154,
            "original_position": 33,
            "original_start_line": 1147,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1703604022,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375887675/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-30T09:10:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375887675",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1375942594"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375942594"
                }
            },
            "author_association": "MEMBER",
            "body": "strange uncrustify bug, would rather add the newline before `errbuf, errbuflen, errmsg)`",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-30T09:53:14Z",
            "diff_hunk": "@@ -3485,36 +3528,254 @@ vimoption_T *get_option(int opt_idx)\n   return &options[opt_idx];\n }\n \n+/// Check if local value of global-local option is unset for current buffer / window.\n+/// Always returns false for options that aren't global-local.\n+///\n+/// TODO(famiu): Remove this once we have an OptVal type to indicate an unset local value.\n+static bool is_option_local_value_unset(vimoption_T *opt, buf_T *buf, win_T *win)\n+{\n+  // Local value of option that isn't global-local is always considered set.\n+  if (!((int)opt->indir & PV_BOTH)) {\n+    return false;\n+  }\n+\n+  // Get pointer to local value in varp_local, and a pointer to the currently used value in varp.\n+  // If the local value is the one currently being used, that indicates that it's set.\n+  // Otherwise it indicates the local value is unset.\n+  void *varp = get_varp_from(opt, buf, win);\n+  void *varp_local = get_varp_scope_from(opt, OPT_LOCAL, buf, win);\n+\n+  return varp != varp_local;\n+}\n+\n+/// Handle side-effects of setting an option.\n+///\n+/// @param       opt_idx         Index in options[] table. Must be >= 0.\n+/// @param[in]   varp            Option variable pointer, cannot be NULL.\n+/// @param       old_value       Old option value.\n+/// @param       new_value       New option value.\n+/// @param       opt_flags       Option flags.\n+/// @param[out]  doskip          Whether option should be processed further.\n+/// @param[out]  value_checked   Value was checked to be safe, no need to set P_INSECURE.\n+/// @param       value_replaced  Value was replaced completely.\n+/// @param[out]  errbuf          Buffer for error message.\n+/// @param       errbuflen       Length of error buffer.\n+///\n+/// @return  NULL on success, an untranslated error message on error.\n+static const char *did_set_option(int opt_idx, void *varp, OptVal old_value, OptVal new_value,\n+                                  int opt_flags, bool *doskip, bool *value_checked,\n+                                  bool value_replaced, char *errbuf, size_t errbuflen)\n+{\n+  vimoption_T *opt = &options[opt_idx];\n+  const char *errmsg = NULL;\n+  bool restore_chartab = false;\n+  bool free_oldval = (opt->flags & P_ALLOCED);\n+  bool value_changed = false;\n+\n+  opt_did_set_cb_T did_set_cb;\n+  optset_T did_set_cb_args = {\n+    .os_varp = varp,\n+    .os_idx = opt_idx,\n+    .os_flags = opt_flags,\n+    .os_oldval = old_value.data,\n+    .os_newval = new_value.data,\n+    .os_value_checked = false,\n+    .os_value_changed = false,\n+    .os_restore_chartab = false,\n+    .os_doskip = false,\n+    .os_errbuf = errbuf,\n+    .os_errbuflen = errbuflen,\n+    .os_buf = curbuf,\n+    .os_win = curwin\n+  };\n+\n+  if ((int *)varp == &p_force_on) {\n+    did_set_cb = did_set_force_on;\n+  } else if ((int *)varp == &p_force_off) {\n+    did_set_cb = did_set_force_off;\n+  } else {\n+    did_set_cb = opt->opt_did_set_cb;\n+  }\n+\n+  // Disallow changing some options from secure mode\n+  if ((secure || sandbox != 0) && (opt->flags & P_SECURE)) {\n+    errmsg = e_secure;\n+    // Check for a \"normal\" directory or file name in some string options.\n+  } else if (new_value.type == kOptValTypeString\n+             && check_illegal_path_names(*(char **)varp, opt->flags)) {\n+    errmsg = e_invarg;\n+  } else if (did_set_cb != NULL) {\n+    // Invoke the option specific callback function to validate and apply the new value.\n+    errmsg = did_set_cb(&did_set_cb_args);\n+    // Whether option should be processed further or skipped.\n+    *doskip = did_set_cb_args.os_doskip;\n+    // The 'filetype' and 'syntax' option callback functions may change the os_value_changed field.\n+    value_changed = did_set_cb_args.os_value_changed;\n+    // The 'keymap', 'filetype' and 'syntax' option callback functions may change the\n+    // os_value_checked field.\n+    *value_checked = did_set_cb_args.os_value_checked;\n+    // The 'isident', 'iskeyword', 'isprint' and 'isfname' options may change the character table.\n+    // On failure, this needs to be restored.\n+    restore_chartab = did_set_cb_args.os_restore_chartab;\n+  }\n+\n+  // If an error is detected, restore the previous value.\n+  if (errmsg != NULL) {\n+    set_option_varp(opt_idx, varp, old_value, true);\n+    // When resetting some values, need to act on it.\n+    if (restore_chartab) {\n+      (void)buf_init_chartab(curbuf, true);\n+    }\n+\n+    // Unset new_value as it is no longer valid.\n+    new_value = NIL_OPTVAL;  // NOLINT(clang-analyzer-deadcode.DeadStores)\n+  } else {\n+    // Re-assign the new value as its value may get freed or modified by the option callback.\n+    new_value = optval_from_varp(opt_idx, varp);\n+\n+    // Remember where the option was set.\n+    set_option_sctx_idx(opt_idx, opt_flags, current_sctx);\n+    // Free options that are in allocated memory.\n+    // Use \"free_oldval\", because recursiveness may change the flags (esp. init_highlight()).\n+    if (free_oldval) {\n+      optval_free(old_value);\n+    }\n+    opt->flags |= P_ALLOCED;\n+\n+    // Check the bound for num options.\n+    if (new_value.type == kOptValTypeNumber) {\n+      errmsg",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1375942594",
            "id": 1375942594,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SAzfC",
            "original_commit_id": "ff33b8a87bca2a2cdb9440d724e8b5f2b51ed95b",
            "original_line": 3647,
            "original_position": 340,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1703691016,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375942594/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-30T09:53:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375942594",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1375946099"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375946099"
                }
            },
            "author_association": "MEMBER",
            "body": "`add / remove curwin bars for 'winbar'` ?",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-30T09:56:00Z",
            "diff_hunk": "@@ -3485,36 +3528,254 @@ vimoption_T *get_option(int opt_idx)\n   return &options[opt_idx];\n }\n \n+/// Check if local value of global-local option is unset for current buffer / window.\n+/// Always returns false for options that aren't global-local.\n+///\n+/// TODO(famiu): Remove this once we have an OptVal type to indicate an unset local value.\n+static bool is_option_local_value_unset(vimoption_T *opt, buf_T *buf, win_T *win)\n+{\n+  // Local value of option that isn't global-local is always considered set.\n+  if (!((int)opt->indir & PV_BOTH)) {\n+    return false;\n+  }\n+\n+  // Get pointer to local value in varp_local, and a pointer to the currently used value in varp.\n+  // If the local value is the one currently being used, that indicates that it's set.\n+  // Otherwise it indicates the local value is unset.\n+  void *varp = get_varp_from(opt, buf, win);\n+  void *varp_local = get_varp_scope_from(opt, OPT_LOCAL, buf, win);\n+\n+  return varp != varp_local;\n+}\n+\n+/// Handle side-effects of setting an option.\n+///\n+/// @param       opt_idx         Index in options[] table. Must be >= 0.\n+/// @param[in]   varp            Option variable pointer, cannot be NULL.\n+/// @param       old_value       Old option value.\n+/// @param       new_value       New option value.\n+/// @param       opt_flags       Option flags.\n+/// @param[out]  doskip          Whether option should be processed further.\n+/// @param[out]  value_checked   Value was checked to be safe, no need to set P_INSECURE.\n+/// @param       value_replaced  Value was replaced completely.\n+/// @param[out]  errbuf          Buffer for error message.\n+/// @param       errbuflen       Length of error buffer.\n+///\n+/// @return  NULL on success, an untranslated error message on error.\n+static const char *did_set_option(int opt_idx, void *varp, OptVal old_value, OptVal new_value,\n+                                  int opt_flags, bool *doskip, bool *value_checked,\n+                                  bool value_replaced, char *errbuf, size_t errbuflen)\n+{\n+  vimoption_T *opt = &options[opt_idx];\n+  const char *errmsg = NULL;\n+  bool restore_chartab = false;\n+  bool free_oldval = (opt->flags & P_ALLOCED);\n+  bool value_changed = false;\n+\n+  opt_did_set_cb_T did_set_cb;\n+  optset_T did_set_cb_args = {\n+    .os_varp = varp,\n+    .os_idx = opt_idx,\n+    .os_flags = opt_flags,\n+    .os_oldval = old_value.data,\n+    .os_newval = new_value.data,\n+    .os_value_checked = false,\n+    .os_value_changed = false,\n+    .os_restore_chartab = false,\n+    .os_doskip = false,\n+    .os_errbuf = errbuf,\n+    .os_errbuflen = errbuflen,\n+    .os_buf = curbuf,\n+    .os_win = curwin\n+  };\n+\n+  if ((int *)varp == &p_force_on) {\n+    did_set_cb = did_set_force_on;\n+  } else if ((int *)varp == &p_force_off) {\n+    did_set_cb = did_set_force_off;\n+  } else {\n+    did_set_cb = opt->opt_did_set_cb;\n+  }\n+\n+  // Disallow changing some options from secure mode\n+  if ((secure || sandbox != 0) && (opt->flags & P_SECURE)) {\n+    errmsg = e_secure;\n+    // Check for a \"normal\" directory or file name in some string options.\n+  } else if (new_value.type == kOptValTypeString\n+             && check_illegal_path_names(*(char **)varp, opt->flags)) {\n+    errmsg = e_invarg;\n+  } else if (did_set_cb != NULL) {\n+    // Invoke the option specific callback function to validate and apply the new value.\n+    errmsg = did_set_cb(&did_set_cb_args);\n+    // Whether option should be processed further or skipped.\n+    *doskip = did_set_cb_args.os_doskip;\n+    // The 'filetype' and 'syntax' option callback functions may change the os_value_changed field.\n+    value_changed = did_set_cb_args.os_value_changed;\n+    // The 'keymap', 'filetype' and 'syntax' option callback functions may change the\n+    // os_value_checked field.\n+    *value_checked = did_set_cb_args.os_value_checked;\n+    // The 'isident', 'iskeyword', 'isprint' and 'isfname' options may change the character table.\n+    // On failure, this needs to be restored.\n+    restore_chartab = did_set_cb_args.os_restore_chartab;\n+  }\n+\n+  // If an error is detected, restore the previous value.\n+  if (errmsg != NULL) {\n+    set_option_varp(opt_idx, varp, old_value, true);\n+    // When resetting some values, need to act on it.\n+    if (restore_chartab) {\n+      (void)buf_init_chartab(curbuf, true);\n+    }\n+\n+    // Unset new_value as it is no longer valid.\n+    new_value = NIL_OPTVAL;  // NOLINT(clang-analyzer-deadcode.DeadStores)\n+  } else {\n+    // Re-assign the new value as its value may get freed or modified by the option callback.\n+    new_value = optval_from_varp(opt_idx, varp);\n+\n+    // Remember where the option was set.\n+    set_option_sctx_idx(opt_idx, opt_flags, current_sctx);\n+    // Free options that are in allocated memory.\n+    // Use \"free_oldval\", because recursiveness may change the flags (esp. init_highlight()).\n+    if (free_oldval) {\n+      optval_free(old_value);\n+    }\n+    opt->flags |= P_ALLOCED;\n+\n+    // Check the bound for num options.\n+    if (new_value.type == kOptValTypeNumber) {\n+      errmsg\n+        = check_num_option_bounds((OptInt *)varp, old_value.data.number, errbuf, errbuflen, errmsg);\n+      // Re-assign new_value because the new value was modified by the bound check.\n+      new_value = optval_from_varp(opt_idx, varp);\n+    }\n+\n+    if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0 && (opt->indir & PV_BOTH)) {\n+      // Global option with local value set to use global value.\n+      // Free the local value and clear it.\n+      void *varp_local = get_varp_scope(opt, OPT_LOCAL);\n+      OptVal local_unset_value = optval_unset_local(opt_idx, varp_local);\n+      set_option_varp(opt_idx, varp_local, local_unset_value, true);\n+    } else if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+      // May set global value for local option.\n+      void *varp_global = get_varp_scope(opt, OPT_GLOBAL);\n+      set_option_varp(opt_idx, varp_global, optval_copy(new_value), true);\n+    }\n+  }\n+\n+  // Skip processing the option further if asked to do so.\n+  if (*doskip) {\n+    return errmsg;\n+  }\n+\n+  if (errmsg == NULL) {\n+    // Trigger the autocommand only after setting the flags.\n+    if (varp == &curbuf->b_p_syn) {\n+      do_syntax_autocmd(curbuf, value_changed);\n+    } else if (varp == &curbuf->b_p_ft) {\n+      // 'filetype' is set, trigger the FileType autocommand\n+      // Skip this when called from a modeline\n+      // Force autocmd when the filetype was changed\n+      if (!(opt_flags & OPT_MODELINE) || value_changed) {\n+        do_filetype_autocmd(curbuf, value_changed);\n+      }\n+    } else if (varp == &curwin->w_s->b_p_spl) {\n+      do_spelllang_source(curwin);\n+    }\n+  }\n+\n+  // In case 'columns' or 'ls' changed.\n+  comp_col();\n+\n+  if (varp == &p_mouse) {\n+    setmouse();  // in case 'mouse' changed\n+  } else if ((varp == &p_flp || varp == &(curbuf->b_p_flp)) && curwin->w_briopt_list) {\n+    // Changing Formatlistpattern when briopt includes the list setting:\n+    // redraw\n+    redraw_all_later(UPD_NOT_VALID);\n+  } else if (varp == &p_wbr || varp == &(curwin->w_p_wbr)) {\n+    // add / remove curwindow bars for 'curwinbar'",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1375946099",
            "id": 1375946099,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SA0Vz",
            "original_commit_id": "ff33b8a87bca2a2cdb9440d724e8b5f2b51ed95b",
            "original_line": 3697,
            "original_position": 390,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1703696401,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375946099/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-30T09:56:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375946099",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1375948579"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375948579"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd add a brief note in the commit message body about this, as it is a functional change.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-30T09:57:48Z",
            "diff_hunk": "@@ -778,11 +778,10 @@ OptionSet\t\t\tAfter setting an option (except during\n \t\t\t\tThis does not set |<abuf>|, you could use\n \t\t\t\t|bufnr()|.\n \n-\t\t\t\tNote that when setting a |global-local| string\n-\t\t\t\toption with |:set|, then |v:option_old| is the\n-\t\t\t\told global value. However, for all other kinds\n-\t\t\t\tof options (local string options, global-local\n-\t\t\t\tnumber options, ...) it is the old local\n+\t\t\t\tNote that when setting a |global-local| option",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1375948579",
            "id": 1375948579,
            "line": 781,
            "node_id": "PRRC_kwDOAPphoM5SA08j",
            "original_commit_id": "ff33b8a87bca2a2cdb9440d724e8b5f2b51ed95b",
            "original_line": 781,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/autocmd.txt",
            "position": 9,
            "pull_request_review_id": 1703700122,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375948579/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-30T09:57:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375948579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1375949697"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375949697"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it's intended to be \"window bars\"",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-30T09:58:40Z",
            "diff_hunk": "@@ -3485,36 +3528,254 @@ vimoption_T *get_option(int opt_idx)\n   return &options[opt_idx];\n }\n \n+/// Check if local value of global-local option is unset for current buffer / window.\n+/// Always returns false for options that aren't global-local.\n+///\n+/// TODO(famiu): Remove this once we have an OptVal type to indicate an unset local value.\n+static bool is_option_local_value_unset(vimoption_T *opt, buf_T *buf, win_T *win)\n+{\n+  // Local value of option that isn't global-local is always considered set.\n+  if (!((int)opt->indir & PV_BOTH)) {\n+    return false;\n+  }\n+\n+  // Get pointer to local value in varp_local, and a pointer to the currently used value in varp.\n+  // If the local value is the one currently being used, that indicates that it's set.\n+  // Otherwise it indicates the local value is unset.\n+  void *varp = get_varp_from(opt, buf, win);\n+  void *varp_local = get_varp_scope_from(opt, OPT_LOCAL, buf, win);\n+\n+  return varp != varp_local;\n+}\n+\n+/// Handle side-effects of setting an option.\n+///\n+/// @param       opt_idx         Index in options[] table. Must be >= 0.\n+/// @param[in]   varp            Option variable pointer, cannot be NULL.\n+/// @param       old_value       Old option value.\n+/// @param       new_value       New option value.\n+/// @param       opt_flags       Option flags.\n+/// @param[out]  doskip          Whether option should be processed further.\n+/// @param[out]  value_checked   Value was checked to be safe, no need to set P_INSECURE.\n+/// @param       value_replaced  Value was replaced completely.\n+/// @param[out]  errbuf          Buffer for error message.\n+/// @param       errbuflen       Length of error buffer.\n+///\n+/// @return  NULL on success, an untranslated error message on error.\n+static const char *did_set_option(int opt_idx, void *varp, OptVal old_value, OptVal new_value,\n+                                  int opt_flags, bool *doskip, bool *value_checked,\n+                                  bool value_replaced, char *errbuf, size_t errbuflen)\n+{\n+  vimoption_T *opt = &options[opt_idx];\n+  const char *errmsg = NULL;\n+  bool restore_chartab = false;\n+  bool free_oldval = (opt->flags & P_ALLOCED);\n+  bool value_changed = false;\n+\n+  opt_did_set_cb_T did_set_cb;\n+  optset_T did_set_cb_args = {\n+    .os_varp = varp,\n+    .os_idx = opt_idx,\n+    .os_flags = opt_flags,\n+    .os_oldval = old_value.data,\n+    .os_newval = new_value.data,\n+    .os_value_checked = false,\n+    .os_value_changed = false,\n+    .os_restore_chartab = false,\n+    .os_doskip = false,\n+    .os_errbuf = errbuf,\n+    .os_errbuflen = errbuflen,\n+    .os_buf = curbuf,\n+    .os_win = curwin\n+  };\n+\n+  if ((int *)varp == &p_force_on) {\n+    did_set_cb = did_set_force_on;\n+  } else if ((int *)varp == &p_force_off) {\n+    did_set_cb = did_set_force_off;\n+  } else {\n+    did_set_cb = opt->opt_did_set_cb;\n+  }\n+\n+  // Disallow changing some options from secure mode\n+  if ((secure || sandbox != 0) && (opt->flags & P_SECURE)) {\n+    errmsg = e_secure;\n+    // Check for a \"normal\" directory or file name in some string options.\n+  } else if (new_value.type == kOptValTypeString\n+             && check_illegal_path_names(*(char **)varp, opt->flags)) {\n+    errmsg = e_invarg;\n+  } else if (did_set_cb != NULL) {\n+    // Invoke the option specific callback function to validate and apply the new value.\n+    errmsg = did_set_cb(&did_set_cb_args);\n+    // Whether option should be processed further or skipped.\n+    *doskip = did_set_cb_args.os_doskip;\n+    // The 'filetype' and 'syntax' option callback functions may change the os_value_changed field.\n+    value_changed = did_set_cb_args.os_value_changed;\n+    // The 'keymap', 'filetype' and 'syntax' option callback functions may change the\n+    // os_value_checked field.\n+    *value_checked = did_set_cb_args.os_value_checked;\n+    // The 'isident', 'iskeyword', 'isprint' and 'isfname' options may change the character table.\n+    // On failure, this needs to be restored.\n+    restore_chartab = did_set_cb_args.os_restore_chartab;\n+  }\n+\n+  // If an error is detected, restore the previous value.\n+  if (errmsg != NULL) {\n+    set_option_varp(opt_idx, varp, old_value, true);\n+    // When resetting some values, need to act on it.\n+    if (restore_chartab) {\n+      (void)buf_init_chartab(curbuf, true);\n+    }\n+\n+    // Unset new_value as it is no longer valid.\n+    new_value = NIL_OPTVAL;  // NOLINT(clang-analyzer-deadcode.DeadStores)\n+  } else {\n+    // Re-assign the new value as its value may get freed or modified by the option callback.\n+    new_value = optval_from_varp(opt_idx, varp);\n+\n+    // Remember where the option was set.\n+    set_option_sctx_idx(opt_idx, opt_flags, current_sctx);\n+    // Free options that are in allocated memory.\n+    // Use \"free_oldval\", because recursiveness may change the flags (esp. init_highlight()).\n+    if (free_oldval) {\n+      optval_free(old_value);\n+    }\n+    opt->flags |= P_ALLOCED;\n+\n+    // Check the bound for num options.\n+    if (new_value.type == kOptValTypeNumber) {\n+      errmsg\n+        = check_num_option_bounds((OptInt *)varp, old_value.data.number, errbuf, errbuflen, errmsg);\n+      // Re-assign new_value because the new value was modified by the bound check.\n+      new_value = optval_from_varp(opt_idx, varp);\n+    }\n+\n+    if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0 && (opt->indir & PV_BOTH)) {\n+      // Global option with local value set to use global value.\n+      // Free the local value and clear it.\n+      void *varp_local = get_varp_scope(opt, OPT_LOCAL);\n+      OptVal local_unset_value = optval_unset_local(opt_idx, varp_local);\n+      set_option_varp(opt_idx, varp_local, local_unset_value, true);\n+    } else if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+      // May set global value for local option.\n+      void *varp_global = get_varp_scope(opt, OPT_GLOBAL);\n+      set_option_varp(opt_idx, varp_global, optval_copy(new_value), true);\n+    }\n+  }\n+\n+  // Skip processing the option further if asked to do so.\n+  if (*doskip) {\n+    return errmsg;\n+  }\n+\n+  if (errmsg == NULL) {\n+    // Trigger the autocommand only after setting the flags.\n+    if (varp == &curbuf->b_p_syn) {\n+      do_syntax_autocmd(curbuf, value_changed);\n+    } else if (varp == &curbuf->b_p_ft) {\n+      // 'filetype' is set, trigger the FileType autocommand\n+      // Skip this when called from a modeline\n+      // Force autocmd when the filetype was changed\n+      if (!(opt_flags & OPT_MODELINE) || value_changed) {\n+        do_filetype_autocmd(curbuf, value_changed);\n+      }\n+    } else if (varp == &curwin->w_s->b_p_spl) {\n+      do_spelllang_source(curwin);\n+    }\n+  }\n+\n+  // In case 'columns' or 'ls' changed.\n+  comp_col();\n+\n+  if (varp == &p_mouse) {\n+    setmouse();  // in case 'mouse' changed\n+  } else if ((varp == &p_flp || varp == &(curbuf->b_p_flp)) && curwin->w_briopt_list) {\n+    // Changing Formatlistpattern when briopt includes the list setting:\n+    // redraw\n+    redraw_all_later(UPD_NOT_VALID);\n+  } else if (varp == &p_wbr || varp == &(curwin->w_p_wbr)) {\n+    // add / remove curwindow bars for 'curwinbar'",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1375949697",
            "id": 1375949697,
            "in_reply_to_id": 1375946099,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SA1OB",
            "original_commit_id": "ff33b8a87bca2a2cdb9440d724e8b5f2b51ed95b",
            "original_line": 3697,
            "original_position": 390,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1703701889,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375949697/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-30T09:58:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1375949697",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1376270436"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376270436"
                }
            },
            "author_association": "MEMBER",
            "body": "I did try making this a ternary but imho it looks confusing as a ternary. Plus it wasn't a ternary in the original code iirc.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-30T13:59:31Z",
            "diff_hunk": "@@ -1142,8 +1142,18 @@ static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix,\n {\n   assert(varp != NULL);\n \n+  vimoption_T *opt = &options[opt_idx];\n   char *arg = *argp;\n-  OptVal oldval = optval_from_varp(opt_idx, varp);\n+  void *oldval_varp = NULL;\n+\n+  // When setting the local value of a global option, the old value may be the global value.\n+  if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+    oldval_varp = get_varp(opt);\n+  } else {\n+    oldval_varp = varp;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1376270436",
            "id": 1376270436,
            "in_reply_to_id": 1375887675,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SCDhk",
            "original_commit_id": "ff33b8a87bca2a2cdb9440d724e8b5f2b51ed95b",
            "original_line": 1154,
            "original_position": 33,
            "original_start_line": 1147,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1704211874,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376270436/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-30T13:59:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376270436",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25674#discussion_r1376274169"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25674"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376274169"
                }
            },
            "author_association": "MEMBER",
            "body": "Oops, this seems to be one of those cases where I did a text substitute and accidentally changed a comment as well. Fixed.",
            "commit_id": "e19cc9c9b715d8171f7940632b8855104b5290b6",
            "created_at": "2023-10-30T14:01:54Z",
            "diff_hunk": "@@ -3485,36 +3528,254 @@ vimoption_T *get_option(int opt_idx)\n   return &options[opt_idx];\n }\n \n+/// Check if local value of global-local option is unset for current buffer / window.\n+/// Always returns false for options that aren't global-local.\n+///\n+/// TODO(famiu): Remove this once we have an OptVal type to indicate an unset local value.\n+static bool is_option_local_value_unset(vimoption_T *opt, buf_T *buf, win_T *win)\n+{\n+  // Local value of option that isn't global-local is always considered set.\n+  if (!((int)opt->indir & PV_BOTH)) {\n+    return false;\n+  }\n+\n+  // Get pointer to local value in varp_local, and a pointer to the currently used value in varp.\n+  // If the local value is the one currently being used, that indicates that it's set.\n+  // Otherwise it indicates the local value is unset.\n+  void *varp = get_varp_from(opt, buf, win);\n+  void *varp_local = get_varp_scope_from(opt, OPT_LOCAL, buf, win);\n+\n+  return varp != varp_local;\n+}\n+\n+/// Handle side-effects of setting an option.\n+///\n+/// @param       opt_idx         Index in options[] table. Must be >= 0.\n+/// @param[in]   varp            Option variable pointer, cannot be NULL.\n+/// @param       old_value       Old option value.\n+/// @param       new_value       New option value.\n+/// @param       opt_flags       Option flags.\n+/// @param[out]  doskip          Whether option should be processed further.\n+/// @param[out]  value_checked   Value was checked to be safe, no need to set P_INSECURE.\n+/// @param       value_replaced  Value was replaced completely.\n+/// @param[out]  errbuf          Buffer for error message.\n+/// @param       errbuflen       Length of error buffer.\n+///\n+/// @return  NULL on success, an untranslated error message on error.\n+static const char *did_set_option(int opt_idx, void *varp, OptVal old_value, OptVal new_value,\n+                                  int opt_flags, bool *doskip, bool *value_checked,\n+                                  bool value_replaced, char *errbuf, size_t errbuflen)\n+{\n+  vimoption_T *opt = &options[opt_idx];\n+  const char *errmsg = NULL;\n+  bool restore_chartab = false;\n+  bool free_oldval = (opt->flags & P_ALLOCED);\n+  bool value_changed = false;\n+\n+  opt_did_set_cb_T did_set_cb;\n+  optset_T did_set_cb_args = {\n+    .os_varp = varp,\n+    .os_idx = opt_idx,\n+    .os_flags = opt_flags,\n+    .os_oldval = old_value.data,\n+    .os_newval = new_value.data,\n+    .os_value_checked = false,\n+    .os_value_changed = false,\n+    .os_restore_chartab = false,\n+    .os_doskip = false,\n+    .os_errbuf = errbuf,\n+    .os_errbuflen = errbuflen,\n+    .os_buf = curbuf,\n+    .os_win = curwin\n+  };\n+\n+  if ((int *)varp == &p_force_on) {\n+    did_set_cb = did_set_force_on;\n+  } else if ((int *)varp == &p_force_off) {\n+    did_set_cb = did_set_force_off;\n+  } else {\n+    did_set_cb = opt->opt_did_set_cb;\n+  }\n+\n+  // Disallow changing some options from secure mode\n+  if ((secure || sandbox != 0) && (opt->flags & P_SECURE)) {\n+    errmsg = e_secure;\n+    // Check for a \"normal\" directory or file name in some string options.\n+  } else if (new_value.type == kOptValTypeString\n+             && check_illegal_path_names(*(char **)varp, opt->flags)) {\n+    errmsg = e_invarg;\n+  } else if (did_set_cb != NULL) {\n+    // Invoke the option specific callback function to validate and apply the new value.\n+    errmsg = did_set_cb(&did_set_cb_args);\n+    // Whether option should be processed further or skipped.\n+    *doskip = did_set_cb_args.os_doskip;\n+    // The 'filetype' and 'syntax' option callback functions may change the os_value_changed field.\n+    value_changed = did_set_cb_args.os_value_changed;\n+    // The 'keymap', 'filetype' and 'syntax' option callback functions may change the\n+    // os_value_checked field.\n+    *value_checked = did_set_cb_args.os_value_checked;\n+    // The 'isident', 'iskeyword', 'isprint' and 'isfname' options may change the character table.\n+    // On failure, this needs to be restored.\n+    restore_chartab = did_set_cb_args.os_restore_chartab;\n+  }\n+\n+  // If an error is detected, restore the previous value.\n+  if (errmsg != NULL) {\n+    set_option_varp(opt_idx, varp, old_value, true);\n+    // When resetting some values, need to act on it.\n+    if (restore_chartab) {\n+      (void)buf_init_chartab(curbuf, true);\n+    }\n+\n+    // Unset new_value as it is no longer valid.\n+    new_value = NIL_OPTVAL;  // NOLINT(clang-analyzer-deadcode.DeadStores)\n+  } else {\n+    // Re-assign the new value as its value may get freed or modified by the option callback.\n+    new_value = optval_from_varp(opt_idx, varp);\n+\n+    // Remember where the option was set.\n+    set_option_sctx_idx(opt_idx, opt_flags, current_sctx);\n+    // Free options that are in allocated memory.\n+    // Use \"free_oldval\", because recursiveness may change the flags (esp. init_highlight()).\n+    if (free_oldval) {\n+      optval_free(old_value);\n+    }\n+    opt->flags |= P_ALLOCED;\n+\n+    // Check the bound for num options.\n+    if (new_value.type == kOptValTypeNumber) {\n+      errmsg\n+        = check_num_option_bounds((OptInt *)varp, old_value.data.number, errbuf, errbuflen, errmsg);\n+      // Re-assign new_value because the new value was modified by the bound check.\n+      new_value = optval_from_varp(opt_idx, varp);\n+    }\n+\n+    if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0 && (opt->indir & PV_BOTH)) {\n+      // Global option with local value set to use global value.\n+      // Free the local value and clear it.\n+      void *varp_local = get_varp_scope(opt, OPT_LOCAL);\n+      OptVal local_unset_value = optval_unset_local(opt_idx, varp_local);\n+      set_option_varp(opt_idx, varp_local, local_unset_value, true);\n+    } else if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+      // May set global value for local option.\n+      void *varp_global = get_varp_scope(opt, OPT_GLOBAL);\n+      set_option_varp(opt_idx, varp_global, optval_copy(new_value), true);\n+    }\n+  }\n+\n+  // Skip processing the option further if asked to do so.\n+  if (*doskip) {\n+    return errmsg;\n+  }\n+\n+  if (errmsg == NULL) {\n+    // Trigger the autocommand only after setting the flags.\n+    if (varp == &curbuf->b_p_syn) {\n+      do_syntax_autocmd(curbuf, value_changed);\n+    } else if (varp == &curbuf->b_p_ft) {\n+      // 'filetype' is set, trigger the FileType autocommand\n+      // Skip this when called from a modeline\n+      // Force autocmd when the filetype was changed\n+      if (!(opt_flags & OPT_MODELINE) || value_changed) {\n+        do_filetype_autocmd(curbuf, value_changed);\n+      }\n+    } else if (varp == &curwin->w_s->b_p_spl) {\n+      do_spelllang_source(curwin);\n+    }\n+  }\n+\n+  // In case 'columns' or 'ls' changed.\n+  comp_col();\n+\n+  if (varp == &p_mouse) {\n+    setmouse();  // in case 'mouse' changed\n+  } else if ((varp == &p_flp || varp == &(curbuf->b_p_flp)) && curwin->w_briopt_list) {\n+    // Changing Formatlistpattern when briopt includes the list setting:\n+    // redraw\n+    redraw_all_later(UPD_NOT_VALID);\n+  } else if (varp == &p_wbr || varp == &(curwin->w_p_wbr)) {\n+    // add / remove curwindow bars for 'curwinbar'",
            "html_url": "https://github.com/neovim/neovim/pull/25674#discussion_r1376274169",
            "id": 1376274169,
            "in_reply_to_id": 1375946099,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SCEb5",
            "original_commit_id": "ff33b8a87bca2a2cdb9440d724e8b5f2b51ed95b",
            "original_line": 3697,
            "original_position": 390,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1704218501,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376274169/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-30T14:01:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376274169",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25674/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25674/commits",
    "created_at": "2023-10-16T18:56:01Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25674.diff",
    "draft": false,
    "head": {
        "label": "famiu:refactor/options/unify_string_options",
        "ref": "refactor/options/unify_string_options",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/famiu/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/famiu/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/famiu/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/famiu/neovim/branches{/branch}",
            "clone_url": "https://github.com/famiu/neovim.git",
            "collaborators_url": "https://api.github.com/repos/famiu/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/famiu/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/famiu/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/famiu/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/famiu/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/famiu/neovim/contributors",
            "created_at": "2021-10-11T04:58:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/famiu/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/famiu/neovim/downloads",
            "events_url": "https://api.github.com/repos/famiu/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/famiu/neovim/forks",
            "full_name": "famiu/neovim",
            "git_commits_url": "https://api.github.com/repos/famiu/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/famiu/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/famiu/neovim/git/tags{/sha}",
            "git_url": "git://github.com/famiu/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/famiu/neovim/hooks",
            "html_url": "https://github.com/famiu/neovim",
            "id": 415783665,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/famiu/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/famiu/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/famiu/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/famiu/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/famiu/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/famiu/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/famiu/neovim/merges",
            "milestones_url": "https://api.github.com/repos/famiu/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGMha8Q",
            "notifications_url": "https://api.github.com/repos/famiu/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/famiu/neovim/pulls{/number}",
            "pushed_at": "2023-10-30T15:38:15Z",
            "releases_url": "https://api.github.com/repos/famiu/neovim/releases{/id}",
            "size": 237009,
            "ssh_url": "git@github.com:famiu/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/famiu/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/famiu/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/famiu/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/famiu/neovim/subscription",
            "svn_url": "https://github.com/famiu/neovim",
            "tags_url": "https://api.github.com/repos/famiu/neovim/tags",
            "teams_url": "https://api.github.com/repos/famiu/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/famiu/neovim/git/trees{/sha}",
            "updated_at": "2022-08-29T10:09:33Z",
            "url": "https://api.github.com/repos/famiu/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "e19cc9c9b715d8171f7940632b8855104b5290b6",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25674",
    "id": 1559208003,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25674",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "locked": false,
    "merge_commit_sha": "6d1a2f2c3c51560555ea6f7867273635d07eb287",
    "merged_at": "2023-10-30T19:06:57Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5c76BD",
    "number": 25674,
    "patch_url": "https://github.com/neovim/neovim/pull/25674.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25674/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/e19cc9c9b715d8171f7940632b8855104b5290b6",
    "title": "refactor(options): unify `set_option` and `set_string_option`",
    "updated_at": "2023-10-30T19:07:14Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25674",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu"
    }
}