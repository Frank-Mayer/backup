{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31630/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31630/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31630"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31630"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31630/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31630"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/1c30937d376544df5a179436be8e3a6441979125"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5782,
            "forks_count": 5782,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1833,
            "open_issues_count": 1833,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-12-31T00:41:55Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 300529,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 84725,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-12-31T02:01:23Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 84725,
            "watchers_count": 84725,
            "web_commit_signoff_required": false
        },
        "sha": "c51bf5a6b24928ac04d0bb129b1b424d4c78f28d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "If root_dir is a function it is evaluated when the client is created to determine the root directory.\r\n\r\nThis enables dynamically determining the root directory based on e.g. project or directory structure (example: finding a parent Cargo.toml file that contains \"[workspace]\" in a Rust project).",
    "closed_at": "2024-12-27T16:09:22Z",
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Does this resolve https://github.com/neovim/nvim-lspconfig/issues/1827 ?",
            "created_at": "2024-12-19T14:13:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2554223106",
            "id": 2554223106,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6YPloC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554223106/reactions"
            },
            "updated_at": "2024-12-19T14:13:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554223106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Just to mention, we're exploring the idea on matrix of adding workspace folders instead of a root_dir function.",
            "created_at": "2024-12-19T14:15:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2554231867",
            "id": 2554231867,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6YPnw7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554231867/reactions"
            },
            "updated_at": "2024-12-19T14:15:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554231867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Just to mention, we're exploring the idea on matrix of adding workspace folders instead of a root_dir function.\r\n\r\nAdding a workspace folder in an on_init function seems to work ok at first glance. Example (for a Rust project):\r\n\r\n```lua\r\non_init = function(client)\r\n    vim.system({\"cargo\", \"metadata\", \"--no-deps\", \"--format-version\", \"1\"}, {\r\n        cwd = client.root_dir,\r\n    }, function(out)\r\n        if out.code ~= 0 then\r\n            return\r\n        end\r\n\r\n        local workspace_root = vim.json.decode(out.stdout).workspace_root\r\n        if workspace_root then\r\n            client:_add_workspace_folder(workspace_root)\r\n        end\r\n    end)\r\nend\r\n```\r\n\r\nThe caveat here is that the client will now have 2 workspace folders: one is the workspace root found by `on_init` (good), the other is the initial root directory when the client was first created. I'm not sure what the consequences of this might be.\r\n\r\nTo make this more concrete, if I have the following project layout:\r\n\r\n```\r\nroot/\r\n  rust/\r\n    Cargo.toml  <-- workspace root\r\n    foo/\r\n      Cargo.toml\r\n      src/\r\n        lib.rs\r\n    bar/\r\n      Cargo.toml\r\n      src/\r\n        lib.rs\r\n```\r\n\r\nIf I first open `rust/foo/src/lib.rs` then my LSP client will have workspace folders `root/rust/foo` and `root/rust`. The presence of `root/rust/foo` as one of the workspace folders is what I'm unsure about, because now even if I open `rust/bar/src/lib.rs`, the `foo` directory is still one of the workspace folders, even though this source file is not part of the `foo` directory.\r\n\r\nThe definition of \"workspace folders\" per the [spec](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_workspaceFolders) seems to imply that each folder should be an individual project _root_, which is not the case in the example above.\r\n\r\nSo having a \"dynamic\" root_dir function that can set the client's root directory to the workspace still seems like it might be worth doing.\r\n",
            "created_at": "2024-12-19T15:59:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2554789166",
            "id": 2554789166,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6YRv0u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554789166/reactions"
            },
            "updated_at": "2024-12-19T15:59:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554789166",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Mentioned this in chat - posting here for the record too:\r\n\r\nI think for dynamic use cases the options are:\r\n\r\n1. Function for root_dir or root_markers in lsp.config, because there the is an actual gap between time of definition (init.lua) and evaluation (ftplugin).\r\n2. Do nothing and point users to vim.lsp.start\r\n\r\n\r\n`lsp.start` shouldn't support a function `root_dir`, because you'd basically have a:\r\n\r\n```lua\r\nlocal function start(root_dir)\r\n  if type(root_dir) == \"function\" then\r\n    root_dir = root_dir()\r\n  end\r\nend\r\n```\r\n\r\nOnly to support doing a `start(root_dir_func)` instead of a `start(root_dir_func())`.\r\nIn both cases the evaluation happens at the same time, and there is no later point to which you can defer the evaluation to, because the function immediately needs the string value.\r\n\r\n\r\n\r\nA example for 2)\r\n\r\n```lua\r\nlocal cmd = {\"cargo\", \"metadata\", \"--no-deps\", \"--format-version\", \"1\"}\r\nvim.system(cmd, {}, function(out)\r\n  if out.code ~= 0 then\r\n    return\r\n  end\r\n  local workspace_root = vim.json.decode(out.stdout).workspace_root\r\n  vim.lsp.start({\r\n    root_dir = workspace_root,\r\n    ...\r\n  })\r\nend)\r\n```\r\n\r\n\r\n\r\nFor 1)\r\n\r\nOne question is if the root_dir function needs to take a callback, or if it runs within a coroutine to support yielding values to make the sync case easy and the async case possible.\r\n",
            "created_at": "2024-12-19T16:34:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2554974245",
            "id": 2554974245,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6YSdAl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554974245/reactions"
            },
            "updated_at": "2024-12-19T16:48:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554974245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> One question is if the root_dir function needs to take a callback, or if it runs within a coroutine to support yielding values to make the sync case easy and the async case possible.\r\n\r\nFor the sync case the function can return the value directly. For the async case, the function must return nil and call the callback, at some point.",
            "created_at": "2024-12-19T16:50:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2555058010",
            "id": 2555058010,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6YSxda",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555058010/reactions"
            },
            "updated_at": "2024-12-19T16:50:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555058010",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> For the sync case the function can return the value directly. For the async case, the function must return nil and call the callback, at some point.\r\n\r\nSounds good. Might be a bit odd for when `nil` is the result - which is a valid value for `root_dir` given that there are servers that don't require a workspace. Not a dealbreaker, just wanted to have mentioned it.",
            "created_at": "2024-12-19T19:54:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2555660012",
            "id": 2555660012,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6YVEbs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555660012/reactions"
            },
            "updated_at": "2024-12-19T19:54:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555660012",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You're right. Ehh, this is getting complicated. I guess we can use some other sentinel value for either case. Maybe returning `false` means wait for callback. It's a bit weirder but keeps the sync case simple.",
            "created_at": "2024-12-19T20:19:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2555702406",
            "id": 2555702406,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6YVOyG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555702406/reactions"
            },
            "updated_at": "2024-12-19T20:21:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555702406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">One question is if the root_dir function needs to take a callback, or if it runs within a coroutine to support yielding values to make the sync case easy and the async case possible.\r\n\r\nCan we do neither and just force it to be sync?",
            "created_at": "2024-12-20T21:18:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2557729999",
            "id": 2557729999,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6Yc9zP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557729999/reactions"
            },
            "updated_at": "2024-12-20T21:18:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557729999",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Can we do neither and just force it to be sync?\r\n\r\nGiven that the cargo metadata cmd came up as a first use-case I think it should support async.\r\n\r\nBut I'd tend to either:\r\n\r\n1. Limit to callback only, instead of combination with return values:\r\n\r\n```lua\r\nvim.lsp.config(\"clangd\", {\r\n  root_dir = function(on_root_dir)\r\n    local cmd = {\"cargo\", \"metadata\", \"--no-deps\", \"--format-version\", \"1\"}\r\n    vim.system(cmd, {}, function(out)\r\n    if out.code == 0 then\r\n      local workspace_root = vim.json.decode(out.stdout).workspace_root\r\n      on_root_dir(workspace_root)\r\n    else\r\n      on_root_dir(nil)\r\n    end\r\n  end,\r\n})\r\n```\r\n\r\nFor synchronous cases it is not so bad either, given that a `return myvalue` turns into `on_root_dir(myvalue)`\r\n\r\n\r\n2. Support it via coroutine\r\n\r\n\r\n```lua\r\nvim.lsp.config(\"clangd\", {\r\n  root_dir = function()\r\n    local cmd = {\"cargo\", \"metadata\", \"--no-deps\", \"--format-version\", \"1\"}\r\n    local co = coroutine.running()\r\n    vim.system(cmd, {}, function(out)\r\n      local root = out.code == 0 and vim.json.decode(out.stdout).workspace_root or nil\r\n      coroutine.resume(co, root)\r\n    end)\r\n    return coroutine.yield()\r\n  end,\r\n})\r\n```\r\n\r\nWith a future `vim.async.resume()` (or different name) it could look like:\r\n\r\n\r\n```lua\r\nvim.lsp.config(\"clangd\", {\r\n  root_dir = function()\r\n    local cmd = {\"cargo\", \"metadata\", \"--no-deps\", \"--format-version\", \"1\"}\r\n    vim.system(cmd, {}, vim.async.resume())\r\n    local out = corotuine.yield()\r\n    return out.code == 0 and vim.json.decode(out.stdout).workspace_root or nil\r\n  end,\r\n})\r\n```\r\n\r\nWhere `vim.async.resume()` is something like:\r\n\r\n\r\n```lua\r\n---@param co? thread\r\nfunction vim.async.resume(co)\r\n  co = co or coroutine.running()\r\n  return function(...)\r\n    if coroutine.status(co) == \"suspended\" then\r\n      coroutine.resume(co, ...)\r\n    else\r\n      local args = {...}\r\n      vim.schedule(function()\r\n        assert(\r\n          coroutine.status(co) == \"suspended\",\r\n          \"Incorrect use of coresume. Callee must have yielded\"\r\n        )\r\n        coroutine.resume(co, unpack(args))\r\n      end)\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThis would require a coroutine.wrap within the logic triggering the root function. Upside is that synchronous functions could work with a regular `return myvalue`.\r\n",
            "created_at": "2024-12-21T14:34:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2558138694",
            "id": 2558138694,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6YehlG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558138694/reactions"
            },
            "updated_at": "2024-12-21T15:46:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558138694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm quite strongly against 2. IMO a function should never yield from a coroutine unless it knows where that coroutine was started and what for. The current running coroutine may have requirements about what should be yielded. Additionally some distros build with 5.2 features which makes `coroutine.running,()` always return a thread. Likewise we should not do any first class integration with a future vim.async, and should allow any async lib to work with this.\n\nvim.async will be designed entirely around wrapping other functions that have continuation parameters.\n\nI don't see any other option other than 1, which is simple and meets the requirements.\n\nTo keep the sync case simple the root_dir function can return a sentinel value to indicate that the callback is expected to be called. This will allow us to add a timeout (or not).",
            "created_at": "2024-12-21T16:06:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2558161177",
            "id": 2558161177,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6YenEZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558161177/reactions"
            },
            "updated_at": "2024-12-21T16:06:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558161177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> IMO a function should never yield from a coroutine unless it knows where that coroutine was started and what for.\r\n\r\nNote that we already do this:\r\n\r\nhttps://github.com/neovim/neovim/commit/af204dd0f193c3cd3154156c9f9fd40199b840c6\r\n\r\nAlthough in that case it was a bit more forced because it was the only way to support async operations for reverse-request handlers without breaking BWC.\r\n\r\n> . Likewise we should not do any first class integration with a future vim.async, and should allow any async lib to work with this.\r\n\r\nCan you elaborate on that? I don't see how this pattern would break down with other async libraries - as the first example shows it doesn't even require a `vim.async`. It's based solely on the contract that \r\n\r\na) it runs within a coroutine and \r\nb) it must yield if it wants to resume, and the resume must happen after the yield. (`vim.async.resume()` in my example takes care of the latter being always the case via a vim.schedule()). But this is generally the case with any `coroutine` use - yield and resume must always form a pair.\r\n\r\nThat said, I don't have a strong opinion on this, I merely wanted to put the option on the table and if there are some issues with it, it would be good to learn about them because I use the patttern in nvim-dap quite a bit and so far I didn't notice any issues (and I think nvim-dap-ui even uses a different async approach on top - making me think that if the approaches were conflicting I should've noticed by now).\r\n",
            "created_at": "2024-12-21T16:38:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2558169196",
            "id": 2558169196,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6YepBs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558169196/reactions"
            },
            "updated_at": "2024-12-21T16:40:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558169196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Can you elaborate on that? I don't see how this pattern would break down with other async libraries - as the first example shows it doesn't even require a vim.async. It's based solely on the contract that\r\n\r\nAll the different async libs that exist at the moment have certain requirements on what can be yielded.\r\n\r\n- With https://github.com/lewis6991/gitsigns.nvim/blob/main/lua/gitsigns/async.lua coroutines, the user must yield a function with the number of arguments.\r\n- https://github.com/nvim-neotest/nvim-nio is similar\r\n\r\nBoth these async libs require uv functions are executed on the main thread, so the callback can continue within the coroutine.",
            "created_at": "2024-12-27T14:03:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/31630#issuecomment-2563732494",
            "id": 2563732494,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
            "node_id": "IC_kwDOAPphoM6Yz3QO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2563732494/reactions"
            },
            "updated_at": "2024-12-27T14:03:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2563732494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31630/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31630/commits",
    "created_at": "2024-12-19T02:47:04Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31630.diff",
    "draft": false,
    "head": {
        "label": "gpanders:push-knrwxnwtlmrw",
        "ref": "push-knrwxnwtlmrw",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/gpanders/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gpanders/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gpanders/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gpanders/neovim/branches{/branch}",
            "clone_url": "https://github.com/gpanders/neovim.git",
            "collaborators_url": "https://api.github.com/repos/gpanders/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gpanders/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/gpanders/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gpanders/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gpanders/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gpanders/neovim/contributors",
            "created_at": "2021-06-11T03:58:44Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gpanders/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/gpanders/neovim/downloads",
            "events_url": "https://api.github.com/repos/gpanders/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gpanders/neovim/forks",
            "full_name": "gpanders/neovim",
            "git_commits_url": "https://api.github.com/repos/gpanders/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gpanders/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gpanders/neovim/git/tags{/sha}",
            "git_url": "git://github.com/gpanders/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/gpanders/neovim/hooks",
            "html_url": "https://github.com/gpanders/neovim",
            "id": 375899052,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/gpanders/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gpanders/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gpanders/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/gpanders/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gpanders/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/gpanders/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gpanders/neovim/merges",
            "milestones_url": "https://api.github.com/repos/gpanders/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzU4OTkwNTI=",
            "notifications_url": "https://api.github.com/repos/gpanders/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gpanders/neovim/pulls{/number}",
            "pushed_at": "2024-12-30T22:54:23Z",
            "releases_url": "https://api.github.com/repos/gpanders/neovim/releases{/id}",
            "size": 293630,
            "ssh_url": "git@github.com:gpanders/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gpanders/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/gpanders/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gpanders/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/gpanders/neovim/subscription",
            "svn_url": "https://github.com/gpanders/neovim",
            "tags_url": "https://api.github.com/repos/gpanders/neovim/tags",
            "teams_url": "https://api.github.com/repos/gpanders/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/gpanders/neovim/git/trees{/sha}",
            "updated_at": "2022-01-07T19:38:08Z",
            "url": "https://api.github.com/repos/gpanders/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "1c30937d376544df5a179436be8e3a6441979125",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31630",
    "id": 2243423837,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31630",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "0052CC",
            "default": false,
            "description": "",
            "id": 6664957181,
            "name": "ci:skip-news",
            "node_id": "LA_kwDOAPphoM8AAAABjUMs_Q",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ci:skip-news"
        }
    ],
    "locked": false,
    "merge_commit_sha": "35247b00a44e838ed7d657a9b94964dc0664d28d",
    "merged_at": "2024-12-27T16:09:22Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6Ft-5d",
    "number": 31630,
    "patch_url": "https://github.com/neovim/neovim/pull/31630.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31630/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/1c30937d376544df5a179436be8e3a6441979125",
    "title": "feat(lsp): support function for client root_dir",
    "updated_at": "2024-12-27T16:09:37Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31630",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
        "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gpanders/followers",
        "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gpanders",
        "id": 8965202,
        "login": "gpanders",
        "node_id": "MDQ6VXNlcjg5NjUyMDI=",
        "organizations_url": "https://api.github.com/users/gpanders/orgs",
        "received_events_url": "https://api.github.com/users/gpanders/received_events",
        "repos_url": "https://api.github.com/users/gpanders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gpanders",
        "user_view_type": "public"
    }
}