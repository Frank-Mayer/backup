{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24738/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24738/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/24738"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24738"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24738/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/dd2500d933ca0f5428b00afd4a8168dbbb2b80d8"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5726,
            "forks_count": 5726,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1842,
            "open_issues_count": 1842,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-12-03T00:32:23Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 296843,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 83804,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-12-03T02:31:16Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 83804,
            "watchers_count": 83804,
            "web_commit_signoff_required": false
        },
        "sha": "d09957e0a06f350443c750d9838b5f1016c0cccc",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Take over #17099 with a rebased version.\r\n\r\nSome things that need fixing / design:\r\n- Predicates may now operate on a list of nodes, how should they behave (e.g. `#contains?`)\r\n- Others things probably\r\n",
    "closed_at": "2024-02-16T17:54:47Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477151029"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477151029"
                }
            },
            "author_association": "MEMBER",
            "body": "The semantics of `#eq?` should be: \"all\" the capture nodes equal to `rhs`. This is the semantic the upstream tree-sitter is using, as opposed to `#any-eq?`.\r\n\r\nhttps://tree-sitter.github.io/tree-sitter/using-parsers#pattern-matching-with-queries",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T01:16:40Z",
            "diff_hunk": "@@ -262,44 +262,62 @@ function M.get_node_text(...)\n   return vim.treesitter.get_node_text(...)\n end\n \n----@alias TSMatch table<integer,TSNode>\n+---@alias TSMatch table<integer,TSNode[]>\n \n----@alias TSPredicate fun(match: TSMatch, _, _, predicate: any[]): boolean\n+---@alias TSPredicate fun(match: TSMatch, _, _, predicate: any[], any: boolean): boolean\n \n -- Predicate handler receive the following arguments\n--- (match, pattern, bufnr, predicate)\n+-- (match, pattern, bufnr, predicate, any)\n ---@type table<string,TSPredicate>\n local predicate_handlers = {\n-  ['eq?'] = function(match, _, source, predicate)\n-    local node = match[predicate[2]]\n-    if not node then\n+  ['eq?'] = function(match, _, source, predicate, any)\n+    local nodes = match[predicate[2]]\n+    if not nodes or #nodes == 0 then\n       return true\n     end\n-    local node_text = vim.treesitter.get_node_text(node, source)\n \n-    local str ---@type string\n-    if type(predicate[3]) == 'string' then\n-      -- (#eq? @aa \"foo\")\n-      str = predicate[3]\n-    else\n-      -- (#eq? @aa @bb)\n-      str = vim.treesitter.get_node_text(match[predicate[3]], source)\n-    end\n+    for _, node in ipairs(nodes) do\n+      local node_text = vim.treesitter.get_node_text(node, source)\n \n-    if node_text ~= str or str == nil then\n-      return false\n+      local str ---@type string\n+      if type(predicate[3]) == 'string' then\n+        -- (#eq? @aa \"foo\")\n+        str = predicate[3]\n+      else\n+        -- (#eq? @aa @bb)\n+        local other = assert(match[predicate[3]])\n+        assert(#other == 1, '#eq? does not support matching against multiple captures')",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477151029",
            "id": 1477151029,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YC4k1",
            "original_commit_id": "92ea4eec27d42b32bb5cccf3fc72b8dbff4c3e3a",
            "original_line": 289,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1861187245,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477151029/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T01:18:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477151029",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477153718"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477153718"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, and that is what I have implemented. This line in particular handles the case when `rhs` is another capture, and that other capture contains multiple nodes. It's not at all clear what the behavior in that situation should be, so for now we just don't allow it. We can always define that behavior later and remove this assertion.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T01:22:23Z",
            "diff_hunk": "@@ -262,44 +262,62 @@ function M.get_node_text(...)\n   return vim.treesitter.get_node_text(...)\n end\n \n----@alias TSMatch table<integer,TSNode>\n+---@alias TSMatch table<integer,TSNode[]>\n \n----@alias TSPredicate fun(match: TSMatch, _, _, predicate: any[]): boolean\n+---@alias TSPredicate fun(match: TSMatch, _, _, predicate: any[], any: boolean): boolean\n \n -- Predicate handler receive the following arguments\n--- (match, pattern, bufnr, predicate)\n+-- (match, pattern, bufnr, predicate, any)\n ---@type table<string,TSPredicate>\n local predicate_handlers = {\n-  ['eq?'] = function(match, _, source, predicate)\n-    local node = match[predicate[2]]\n-    if not node then\n+  ['eq?'] = function(match, _, source, predicate, any)\n+    local nodes = match[predicate[2]]\n+    if not nodes or #nodes == 0 then\n       return true\n     end\n-    local node_text = vim.treesitter.get_node_text(node, source)\n \n-    local str ---@type string\n-    if type(predicate[3]) == 'string' then\n-      -- (#eq? @aa \"foo\")\n-      str = predicate[3]\n-    else\n-      -- (#eq? @aa @bb)\n-      str = vim.treesitter.get_node_text(match[predicate[3]], source)\n-    end\n+    for _, node in ipairs(nodes) do\n+      local node_text = vim.treesitter.get_node_text(node, source)\n \n-    if node_text ~= str or str == nil then\n-      return false\n+      local str ---@type string\n+      if type(predicate[3]) == 'string' then\n+        -- (#eq? @aa \"foo\")\n+        str = predicate[3]\n+      else\n+        -- (#eq? @aa @bb)\n+        local other = assert(match[predicate[3]])\n+        assert(#other == 1, '#eq? does not support matching against multiple captures')",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477153718",
            "id": 1477153718,
            "in_reply_to_id": 1477151029,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YC5O2",
            "original_commit_id": "92ea4eec27d42b32bb5cccf3fc72b8dbff4c3e3a",
            "original_line": 289,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1861197224,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477153718/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T01:22:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477153718",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477154887"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477154887"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh I see, I'm sorry I got this wrong. This assertion check was about `rhs` only. Yes, it looks undocumented in the upstream tree-sitter at the moment. Though for this specific case (`eq`-like operators), the \"all\" semantics would still be valid; but for other predicates it can be confusing.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T01:24:38Z",
            "diff_hunk": "@@ -262,44 +262,62 @@ function M.get_node_text(...)\n   return vim.treesitter.get_node_text(...)\n end\n \n----@alias TSMatch table<integer,TSNode>\n+---@alias TSMatch table<integer,TSNode[]>\n \n----@alias TSPredicate fun(match: TSMatch, _, _, predicate: any[]): boolean\n+---@alias TSPredicate fun(match: TSMatch, _, _, predicate: any[], any: boolean): boolean\n \n -- Predicate handler receive the following arguments\n--- (match, pattern, bufnr, predicate)\n+-- (match, pattern, bufnr, predicate, any)\n ---@type table<string,TSPredicate>\n local predicate_handlers = {\n-  ['eq?'] = function(match, _, source, predicate)\n-    local node = match[predicate[2]]\n-    if not node then\n+  ['eq?'] = function(match, _, source, predicate, any)\n+    local nodes = match[predicate[2]]\n+    if not nodes or #nodes == 0 then\n       return true\n     end\n-    local node_text = vim.treesitter.get_node_text(node, source)\n \n-    local str ---@type string\n-    if type(predicate[3]) == 'string' then\n-      -- (#eq? @aa \"foo\")\n-      str = predicate[3]\n-    else\n-      -- (#eq? @aa @bb)\n-      str = vim.treesitter.get_node_text(match[predicate[3]], source)\n-    end\n+    for _, node in ipairs(nodes) do\n+      local node_text = vim.treesitter.get_node_text(node, source)\n \n-    if node_text ~= str or str == nil then\n-      return false\n+      local str ---@type string\n+      if type(predicate[3]) == 'string' then\n+        -- (#eq? @aa \"foo\")\n+        str = predicate[3]\n+      else\n+        -- (#eq? @aa @bb)\n+        local other = assert(match[predicate[3]])\n+        assert(#other == 1, '#eq? does not support matching against multiple captures')",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477154887",
            "id": 1477154887,
            "in_reply_to_id": 1477151029,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YC5hH",
            "original_commit_id": "92ea4eec27d42b32bb5cccf3fc72b8dbff4c3e3a",
            "original_line": 289,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1861201217,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477154887/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T01:35:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477154887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477157317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477157317"
                }
            },
            "author_association": "MEMBER",
            "body": "You're right though that the error message is incorrect. It should say \"matching against a capture containing multiple nodes\".",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T01:33:59Z",
            "diff_hunk": "@@ -262,44 +262,62 @@ function M.get_node_text(...)\n   return vim.treesitter.get_node_text(...)\n end\n \n----@alias TSMatch table<integer,TSNode>\n+---@alias TSMatch table<integer,TSNode[]>\n \n----@alias TSPredicate fun(match: TSMatch, _, _, predicate: any[]): boolean\n+---@alias TSPredicate fun(match: TSMatch, _, _, predicate: any[], any: boolean): boolean\n \n -- Predicate handler receive the following arguments\n--- (match, pattern, bufnr, predicate)\n+-- (match, pattern, bufnr, predicate, any)\n ---@type table<string,TSPredicate>\n local predicate_handlers = {\n-  ['eq?'] = function(match, _, source, predicate)\n-    local node = match[predicate[2]]\n-    if not node then\n+  ['eq?'] = function(match, _, source, predicate, any)\n+    local nodes = match[predicate[2]]\n+    if not nodes or #nodes == 0 then\n       return true\n     end\n-    local node_text = vim.treesitter.get_node_text(node, source)\n \n-    local str ---@type string\n-    if type(predicate[3]) == 'string' then\n-      -- (#eq? @aa \"foo\")\n-      str = predicate[3]\n-    else\n-      -- (#eq? @aa @bb)\n-      str = vim.treesitter.get_node_text(match[predicate[3]], source)\n-    end\n+    for _, node in ipairs(nodes) do\n+      local node_text = vim.treesitter.get_node_text(node, source)\n \n-    if node_text ~= str or str == nil then\n-      return false\n+      local str ---@type string\n+      if type(predicate[3]) == 'string' then\n+        -- (#eq? @aa \"foo\")\n+        str = predicate[3]\n+      else\n+        -- (#eq? @aa @bb)\n+        local other = assert(match[predicate[3]])\n+        assert(#other == 1, '#eq? does not support matching against multiple captures')",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477157317",
            "id": 1477157317,
            "in_reply_to_id": 1477151029,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YC6HF",
            "original_commit_id": "92ea4eec27d42b32bb5cccf3fc72b8dbff4c3e3a",
            "original_line": 289,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1861215134,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477157317/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T01:33:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477157317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477163490"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477163490"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this is the implementation detail that should be encapsulated into the predicate/directive handler, so I suggest we do not add this parameter to `add_directive` and `add_predicate`. The handler functions would anway get the full `match` mapping of `table<integer,TSNode[]>` rather than `table<integer,TSNode>`, so whether to behave like `any` or `all` would be a responsibility of handler functions. With that (i.e. not having the any parameter), we don't need to change the interface of predicates/directives (other than the breaking change on the type of `table`), and the interface of predicates/directives could become more general. ",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T02:15:26Z",
            "diff_hunk": "@@ -538,17 +585,19 @@ end\n --- Adds a new directive to be used in queries\n ---\n --- Handlers can set match level data by setting directly on the\n---- metadata object `metadata.key = value`, additionally, handlers\n+--- metadata object `metadata.key = value`. Additionally, handlers\n --- can set node level data by using the capture id on the\n --- metadata table `metadata[capture_id].key = value`\n ---\n ---@param name string Name of the directive, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[], metadata:table)\n----   - match: see |treesitter-query|\n----      - node-level data are accessible via `match[capture_id]`\n----   - pattern: see |treesitter-query|\n+---@param handler function(match:table<integer,TSNode[]>, pattern:integer, bufnr:integer, predicate:string[], metadata:table)\n+---   - match: A table mapping capture IDs to a list of captured nodes\n+---   - pattern: the index of the matching pattern in the query file\n ---   - predicate: list of strings containing the full directive being called, e.g.\n ---     `(node (#set! conceal \"-\"))` would get the predicate `{ \"#set!\", \"conceal\", \"-\" }`\n+---   - any: (only used for predicates) true if this predicate should match if ANY of the captured\n+---       nodes satisfy the predicate; otherwise, the predicate should match if ALL of the captured\n+---       nodes satsify the predicate.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477163490",
            "id": 1477163490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YC7ni",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 600,
            "original_position": 314,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1861243910,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477163490/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T02:55:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477163490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477163726"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477163726"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  |treesitter-predicates| and |treesitter-directives| now correctly maps capture IDs to a list of matching\r\n```",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T02:17:39Z",
            "diff_hunk": "@@ -116,6 +116,9 @@ The following changes may require adaptations in user config or plugins.\n   upstream tree-sitter and Helix to make it easier to share queries. The full\n   list is documented in |treesitter-highlight-groups|.\n \n+• The \"match\" table returned by |Query:iter_matches()| and that is used in\n+  |treesitter-predicates| now correctly maps capture IDs to a list of matching",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477163726",
            "id": 1477163726,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YC7rO",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 120,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1861243910,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477163726/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T02:38:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477163726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477164045"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477164045"
                }
            },
            "author_association": "MEMBER",
            "body": "Related question: Do we want to make `any-` a general prefix as `not-` is? In other words, would we also allow predicates like `any-has-parent?` `any-nth?` in general? (Or any other custom, user-specific predicates)\r\n\r\nWe can consider applying and allowing `any-` to certain predicates only, e.g., `any-eq?` `any-match?` `any-not-match?` `any-of?`.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T02:22:19Z",
            "diff_hunk": "@@ -590,18 +639,27 @@ function Query:match_preds(match, pattern, source)\n     -- continue on the other case. This way unknown predicates will not be considered,\n     -- which allows some testing and easier user extensibility (#12173).\n     -- Also, tree-sitter strips the leading # from predicates for us.\n-    local pred_name ---@type string\n-\n-    local is_not ---@type boolean\n+    local is_not = false\n+    local is_any = false\n \n     -- Skip over directives... they will get processed after all the predicates.\n     if not is_directive(pred[1]) then\n-      if string.sub(pred[1], 1, 4) == 'not-' then\n-        pred_name = string.sub(pred[1], 5)\n-        is_not = true\n-      else\n-        pred_name = pred[1]\n-        is_not = false\n+      local pred_name = pred[1] --[[@as string]]\n+      while true do\n+        if pred_name:match('^not%-') then\n+          pred_name = pred_name:sub(5)\n+          is_not = true\n+        elseif pred_name:match('^any%-') then",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477164045",
            "id": 1477164045,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YC7wN",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 652,
            "original_position": 341,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1861243910,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477164045/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T03:07:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477164045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477165423"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477165423"
                }
            },
            "author_association": "MEMBER",
            "body": "As a side note, I wonder if we could make the error message more helpful (rather than unexpected nil error) for better downstream migration experience, but it would be at the cost of small performance loss.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T02:38:16Z",
            "diff_hunk": "@@ -116,6 +116,9 @@ The following changes may require adaptations in user config or plugins.\n   upstream tree-sitter and Helix to make it easier to share queries. The full\n   list is documented in |treesitter-highlight-groups|.\n \n+• The \"match\" table returned by |Query:iter_matches()| and that is used in\n+  |treesitter-predicates| now correctly maps capture IDs to a list of matching",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477165423",
            "id": 1477165423,
            "in_reply_to_id": 1477163726,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YC8Fv",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 120,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1861243910,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477165423/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T02:38:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477165423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477165782"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477165782"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "So any-of? -> of? :D \n\nI'm not against it",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T02:40:35Z",
            "diff_hunk": "@@ -590,18 +639,27 @@ function Query:match_preds(match, pattern, source)\n     -- continue on the other case. This way unknown predicates will not be considered,\n     -- which allows some testing and easier user extensibility (#12173).\n     -- Also, tree-sitter strips the leading # from predicates for us.\n-    local pred_name ---@type string\n-\n-    local is_not ---@type boolean\n+    local is_not = false\n+    local is_any = false\n \n     -- Skip over directives... they will get processed after all the predicates.\n     if not is_directive(pred[1]) then\n-      if string.sub(pred[1], 1, 4) == 'not-' then\n-        pred_name = string.sub(pred[1], 5)\n-        is_not = true\n-      else\n-        pred_name = pred[1]\n-        is_not = false\n+      local pred_name = pred[1] --[[@as string]]\n+      while true do\n+        if pred_name:match('^not%-') then\n+          pred_name = pred_name:sub(5)\n+          is_not = true\n+        elseif pred_name:match('^any%-') then",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477165782",
            "id": 1477165782,
            "in_reply_to_id": 1477164045,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YC8LW",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 652,
            "original_position": 341,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1861245927,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477165782/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T02:40:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477165782",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477166188"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477166188"
                }
            },
            "author_association": "MEMBER",
            "body": "Due to the colliding name, `any-of` was handled as an exception. My suggestion is that we don't add `any-` as a general *quantifier*.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T02:45:04Z",
            "diff_hunk": "@@ -590,18 +639,27 @@ function Query:match_preds(match, pattern, source)\n     -- continue on the other case. This way unknown predicates will not be considered,\n     -- which allows some testing and easier user extensibility (#12173).\n     -- Also, tree-sitter strips the leading # from predicates for us.\n-    local pred_name ---@type string\n-\n-    local is_not ---@type boolean\n+    local is_not = false\n+    local is_any = false\n \n     -- Skip over directives... they will get processed after all the predicates.\n     if not is_directive(pred[1]) then\n-      if string.sub(pred[1], 1, 4) == 'not-' then\n-        pred_name = string.sub(pred[1], 5)\n-        is_not = true\n-      else\n-        pred_name = pred[1]\n-        is_not = false\n+      local pred_name = pred[1] --[[@as string]]\n+      while true do\n+        if pred_name:match('^not%-') then\n+          pred_name = pred_name:sub(5)\n+          is_not = true\n+        elseif pred_name:match('^any%-') then",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477166188",
            "id": 1477166188,
            "in_reply_to_id": 1477164045,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YC8Rs",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 652,
            "original_position": 341,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1861246313,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477166188/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T02:45:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477166188",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477244308"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477244308"
                }
            },
            "author_association": "MEMBER",
            "body": "My suggestion is not to deviate from upstream. We worked hard to align _more_; this would be a (massive) step backward.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T09:47:42Z",
            "diff_hunk": "@@ -590,18 +639,27 @@ function Query:match_preds(match, pattern, source)\n     -- continue on the other case. This way unknown predicates will not be considered,\n     -- which allows some testing and easier user extensibility (#12173).\n     -- Also, tree-sitter strips the leading # from predicates for us.\n-    local pred_name ---@type string\n-\n-    local is_not ---@type boolean\n+    local is_not = false\n+    local is_any = false\n \n     -- Skip over directives... they will get processed after all the predicates.\n     if not is_directive(pred[1]) then\n-      if string.sub(pred[1], 1, 4) == 'not-' then\n-        pred_name = string.sub(pred[1], 5)\n-        is_not = true\n-      else\n-        pred_name = pred[1]\n-        is_not = false\n+      local pred_name = pred[1] --[[@as string]]\n+      while true do\n+        if pred_name:match('^not%-') then\n+          pred_name = pred_name:sub(5)\n+          is_not = true\n+        elseif pred_name:match('^any%-') then",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477244308",
            "id": 1477244308,
            "in_reply_to_id": 1477164045,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YDPWU",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 652,
            "original_position": 341,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1861346499,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477244308/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T09:47:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477244308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1477343561"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477343561"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we actually need this for anything? If not I'd suggest we'd leave this out for now.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-04T15:25:47Z",
            "diff_hunk": "@@ -538,17 +585,19 @@ end\n --- Adds a new directive to be used in queries\n ---\n --- Handlers can set match level data by setting directly on the\n---- metadata object `metadata.key = value`, additionally, handlers\n+--- metadata object `metadata.key = value`. Additionally, handlers\n --- can set node level data by using the capture id on the\n --- metadata table `metadata[capture_id].key = value`\n ---\n ---@param name string Name of the directive, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[], metadata:table)\n----   - match: see |treesitter-query|\n----      - node-level data are accessible via `match[capture_id]`\n----   - pattern: see |treesitter-query|\n+---@param handler function(match:table<integer,TSNode[]>, pattern:integer, bufnr:integer, predicate:string[], metadata:table)\n+---   - match: A table mapping capture IDs to a list of captured nodes\n+---   - pattern: the index of the matching pattern in the query file\n ---   - predicate: list of strings containing the full directive being called, e.g.\n ---     `(node (#set! conceal \"-\"))` would get the predicate `{ \"#set!\", \"conceal\", \"-\" }`\n+---   - any: (only used for predicates) true if this predicate should match if ANY of the captured\n+---       nodes satisfy the predicate; otherwise, the predicate should match if ALL of the captured\n+---       nodes satsify the predicate.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1477343561",
            "id": 1477343561,
            "in_reply_to_id": 1477163490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YDnlJ",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 600,
            "original_position": 314,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1861460212,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477343561/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-04T15:25:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1477343561",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1478307180"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478307180"
                }
            },
            "author_association": "MEMBER",
            "body": "> Do we want to make any- a general prefix as not- is? In other words, would we also allow predicates like any-has-parent? any-nth? in general? (Or any other custom, user-specific predicates)\r\n\r\nIt kind of is, as implemented. If the `any-` prefix is present, then we pass `true` for the `any` argument to the predicate handler. It's up to the predicate itself whether or not it supports \"any semantics\" though.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-05T14:04:11Z",
            "diff_hunk": "@@ -590,18 +639,27 @@ function Query:match_preds(match, pattern, source)\n     -- continue on the other case. This way unknown predicates will not be considered,\n     -- which allows some testing and easier user extensibility (#12173).\n     -- Also, tree-sitter strips the leading # from predicates for us.\n-    local pred_name ---@type string\n-\n-    local is_not ---@type boolean\n+    local is_not = false\n+    local is_any = false\n \n     -- Skip over directives... they will get processed after all the predicates.\n     if not is_directive(pred[1]) then\n-      if string.sub(pred[1], 1, 4) == 'not-' then\n-        pred_name = string.sub(pred[1], 5)\n-        is_not = true\n-      else\n-        pred_name = pred[1]\n-        is_not = false\n+      local pred_name = pred[1] --[[@as string]]\n+      while true do\n+        if pred_name:match('^not%-') then\n+          pred_name = pred_name:sub(5)\n+          is_not = true\n+        elseif pred_name:match('^any%-') then",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1478307180",
            "id": 1478307180,
            "in_reply_to_id": 1477164045,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YHS1s",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 652,
            "original_position": 341,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1862888700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478307180/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-05T14:04:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478307180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1478315894"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478315894"
                }
            },
            "author_association": "MEMBER",
            "body": "Need what? We don't need `any` for directives, only predicates, but the docstring on `add_predicate` just says \"see `add_directive()`\", so I put the docs here.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-05T14:09:24Z",
            "diff_hunk": "@@ -538,17 +585,19 @@ end\n --- Adds a new directive to be used in queries\n ---\n --- Handlers can set match level data by setting directly on the\n---- metadata object `metadata.key = value`, additionally, handlers\n+--- metadata object `metadata.key = value`. Additionally, handlers\n --- can set node level data by using the capture id on the\n --- metadata table `metadata[capture_id].key = value`\n ---\n ---@param name string Name of the directive, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[], metadata:table)\n----   - match: see |treesitter-query|\n----      - node-level data are accessible via `match[capture_id]`\n----   - pattern: see |treesitter-query|\n+---@param handler function(match:table<integer,TSNode[]>, pattern:integer, bufnr:integer, predicate:string[], metadata:table)\n+---   - match: A table mapping capture IDs to a list of captured nodes\n+---   - pattern: the index of the matching pattern in the query file\n ---   - predicate: list of strings containing the full directive being called, e.g.\n ---     `(node (#set! conceal \"-\"))` would get the predicate `{ \"#set!\", \"conceal\", \"-\" }`\n+---   - any: (only used for predicates) true if this predicate should match if ANY of the captured\n+---       nodes satisfy the predicate; otherwise, the predicate should match if ALL of the captured\n+---       nodes satsify the predicate.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1478315894",
            "id": 1478315894,
            "in_reply_to_id": 1477163490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YHU92",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 600,
            "original_position": 314,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1862902478,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478315894/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-05T14:09:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478315894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1478508974"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478508974"
                }
            },
            "author_association": "MEMBER",
            "body": "~Do we need `any` for any of our predicates? This deviates from upstream which I'd like to avoid.~",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-05T16:19:26Z",
            "diff_hunk": "@@ -538,17 +585,19 @@ end\n --- Adds a new directive to be used in queries\n ---\n --- Handlers can set match level data by setting directly on the\n---- metadata object `metadata.key = value`, additionally, handlers\n+--- metadata object `metadata.key = value`. Additionally, handlers\n --- can set node level data by using the capture id on the\n --- metadata table `metadata[capture_id].key = value`\n ---\n ---@param name string Name of the directive, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[], metadata:table)\n----   - match: see |treesitter-query|\n----      - node-level data are accessible via `match[capture_id]`\n----   - pattern: see |treesitter-query|\n+---@param handler function(match:table<integer,TSNode[]>, pattern:integer, bufnr:integer, predicate:string[], metadata:table)\n+---   - match: A table mapping capture IDs to a list of captured nodes\n+---   - pattern: the index of the matching pattern in the query file\n ---   - predicate: list of strings containing the full directive being called, e.g.\n ---     `(node (#set! conceal \"-\"))` would get the predicate `{ \"#set!\", \"conceal\", \"-\" }`\n+---   - any: (only used for predicates) true if this predicate should match if ANY of the captured\n+---       nodes satisfy the predicate; otherwise, the predicate should match if ALL of the captured\n+---       nodes satsify the predicate.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1478508974",
            "id": 1478508974,
            "in_reply_to_id": 1477163490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YIEGu",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 600,
            "original_position": 314,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1863221274,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478508974/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-05T16:27:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478508974",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1478520643"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478520643"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok, I was just struggling to review this in the github UI, I think I get it now. @wookayin does make a good point though.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-05T16:27:23Z",
            "diff_hunk": "@@ -538,17 +585,19 @@ end\n --- Adds a new directive to be used in queries\n ---\n --- Handlers can set match level data by setting directly on the\n---- metadata object `metadata.key = value`, additionally, handlers\n+--- metadata object `metadata.key = value`. Additionally, handlers\n --- can set node level data by using the capture id on the\n --- metadata table `metadata[capture_id].key = value`\n ---\n ---@param name string Name of the directive, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[], metadata:table)\n----   - match: see |treesitter-query|\n----      - node-level data are accessible via `match[capture_id]`\n----   - pattern: see |treesitter-query|\n+---@param handler function(match:table<integer,TSNode[]>, pattern:integer, bufnr:integer, predicate:string[], metadata:table)\n+---   - match: A table mapping capture IDs to a list of captured nodes\n+---   - pattern: the index of the matching pattern in the query file\n ---   - predicate: list of strings containing the full directive being called, e.g.\n ---     `(node (#set! conceal \"-\"))` would get the predicate `{ \"#set!\", \"conceal\", \"-\" }`\n+---   - any: (only used for predicates) true if this predicate should match if ANY of the captured\n+---       nodes satisfy the predicate; otherwise, the predicate should match if ALL of the captured\n+---       nodes satsify the predicate.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1478520643",
            "id": 1478520643,
            "in_reply_to_id": 1477163490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YIG9D",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 600,
            "original_position": 314,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1863239909,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478520643/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-05T16:34:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478520643",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1478531105"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478531105"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure I understand @wookayin's suggestion? We are not adding a parameter to `add_directive` or `add_predicate`, the docstring here is describing the signature of the _handler_.\r\n\r\n>The handler functions would anway get the full match mapping of table<integer,TSNode[]> rather than table<integer,TSNode>, so whether to behave like any or all would be a responsibility of handler functions.\r\n\r\nYes, this is exactly what is implemented in this PR right now.\r\n\r\n>With that (i.e. not having the any parameter), we don't need to change the interface of predicates/directives\r\n\r\nYes we do, at least kind of, because now predicates have to implement the \"all\" vs \"any\" semantics themselves.\r\n\r\nAn alternate implementation approach is [here](https://github.com/neovim/neovim/pull/24738#issuecomment-1927090838).",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-05T16:35:08Z",
            "diff_hunk": "@@ -538,17 +585,19 @@ end\n --- Adds a new directive to be used in queries\n ---\n --- Handlers can set match level data by setting directly on the\n---- metadata object `metadata.key = value`, additionally, handlers\n+--- metadata object `metadata.key = value`. Additionally, handlers\n --- can set node level data by using the capture id on the\n --- metadata table `metadata[capture_id].key = value`\n ---\n ---@param name string Name of the directive, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[], metadata:table)\n----   - match: see |treesitter-query|\n----      - node-level data are accessible via `match[capture_id]`\n----   - pattern: see |treesitter-query|\n+---@param handler function(match:table<integer,TSNode[]>, pattern:integer, bufnr:integer, predicate:string[], metadata:table)\n+---   - match: A table mapping capture IDs to a list of captured nodes\n+---   - pattern: the index of the matching pattern in the query file\n ---   - predicate: list of strings containing the full directive being called, e.g.\n ---     `(node (#set! conceal \"-\"))` would get the predicate `{ \"#set!\", \"conceal\", \"-\" }`\n+---   - any: (only used for predicates) true if this predicate should match if ANY of the captured\n+---       nodes satisfy the predicate; otherwise, the predicate should match if ALL of the captured\n+---       nodes satsify the predicate.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1478531105",
            "id": 1478531105,
            "in_reply_to_id": 1477163490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YIJgh",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 600,
            "original_position": 314,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1863256220,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478531105/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-05T16:35:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478531105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1478540846"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478540846"
                }
            },
            "author_association": "MEMBER",
            "body": "> Yes we do, at least kind of, because now predicates have to implement the \"all\" vs \"any\" semantics themselves.\r\n\r\nWhich I'd argue is correct, since their semantics (in the multi-capture case) depends on what comes _after_ the `any` etc.\r\n\r\n",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-05T16:38:56Z",
            "diff_hunk": "@@ -538,17 +585,19 @@ end\n --- Adds a new directive to be used in queries\n ---\n --- Handlers can set match level data by setting directly on the\n---- metadata object `metadata.key = value`, additionally, handlers\n+--- metadata object `metadata.key = value`. Additionally, handlers\n --- can set node level data by using the capture id on the\n --- metadata table `metadata[capture_id].key = value`\n ---\n ---@param name string Name of the directive, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[], metadata:table)\n----   - match: see |treesitter-query|\n----      - node-level data are accessible via `match[capture_id]`\n----   - pattern: see |treesitter-query|\n+---@param handler function(match:table<integer,TSNode[]>, pattern:integer, bufnr:integer, predicate:string[], metadata:table)\n+---   - match: A table mapping capture IDs to a list of captured nodes\n+---   - pattern: the index of the matching pattern in the query file\n ---   - predicate: list of strings containing the full directive being called, e.g.\n ---     `(node (#set! conceal \"-\"))` would get the predicate `{ \"#set!\", \"conceal\", \"-\" }`\n+---   - any: (only used for predicates) true if this predicate should match if ANY of the captured\n+---       nodes satisfy the predicate; otherwise, the predicate should match if ALL of the captured\n+---       nodes satsify the predicate.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1478540846",
            "id": 1478540846,
            "in_reply_to_id": 1477163490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YIL4u",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 600,
            "original_position": 314,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1863269887,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478540846/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-05T16:38:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478540846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1478864844"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478864844"
                }
            },
            "author_association": "MEMBER",
            "body": "Let me elaborate -- sorry for some mistakes in the description and if it wasn't clear enough.\r\n\r\n> We are not adding a parameter to add_directive or add_predicate,\r\n\r\nYes you're right. I was talking about the new `any` parameter, which is actually being added to predicate handler, not to `add_{directive,predicate}` --- I said it wrong by mistake. What I was suggesting is *not* to add this new parameter to *predicate handlers*; Instead, leave the semantics (like `any-` or `all`-) decided by the predicate handlers themselves, i.e. \"*they have to implement the all vs any semantics themselves*\". It would look like:\r\n\r\n```lua\r\npredicate_handlers['eq?'] = function(match, pattern, source, predicate)\r\n  return eq_impl(match, pattern, source, predicate, false) -- work like `all?`\r\nend,\r\npredicate_handlers['any-eq?'] = function(match, pattern, source, predicate)\r\n  return eq_impl(match, pattern, source, predicate, true) -- work like `any?`\r\nend,\r\n```\r\n\r\nIt'd be an contrived and hypothetical example, but one could think of a predicate that is neither `all-` nor `any-`; say `at-least-three` or `exclusive-or` (if `#match == 2`), for instance. For such predicates the parameter `any` would just be an unused parameter to ignore. This idea would also apply to the directives (as @amaanq suggested in https://github.com/neovim/neovim/pull/24738#issuecomment-1926284050). We can also think of predicates/directives that would *count*; or an user/plugin might write an arbitrarily complex logic to deal with multiple nodes captured. The existing predicate API still allows that.\r\n\r\nThis design also implies that we will not have `any-` as a generic logic quantifier prefix as opposed to `not-` (which can simply negate the boolean return value); instead, we allow `any-` for only certain predicates that we know their implementation details. I think this is also closer to [what upstream tree-sitter does](https://github.com/tree-sitter/tree-sitter/pull/2532/files#diff-2af4e27edd56f326a108d99d345842f5f477fe2f933ca50cdd7c4eacfbffdf65).",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-05T20:16:24Z",
            "diff_hunk": "@@ -538,17 +585,19 @@ end\n --- Adds a new directive to be used in queries\n ---\n --- Handlers can set match level data by setting directly on the\n---- metadata object `metadata.key = value`, additionally, handlers\n+--- metadata object `metadata.key = value`. Additionally, handlers\n --- can set node level data by using the capture id on the\n --- metadata table `metadata[capture_id].key = value`\n ---\n ---@param name string Name of the directive, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[], metadata:table)\n----   - match: see |treesitter-query|\n----      - node-level data are accessible via `match[capture_id]`\n----   - pattern: see |treesitter-query|\n+---@param handler function(match:table<integer,TSNode[]>, pattern:integer, bufnr:integer, predicate:string[], metadata:table)\n+---   - match: A table mapping capture IDs to a list of captured nodes\n+---   - pattern: the index of the matching pattern in the query file\n ---   - predicate: list of strings containing the full directive being called, e.g.\n ---     `(node (#set! conceal \"-\"))` would get the predicate `{ \"#set!\", \"conceal\", \"-\" }`\n+---   - any: (only used for predicates) true if this predicate should match if ANY of the captured\n+---       nodes satisfy the predicate; otherwise, the predicate should match if ALL of the captured\n+---       nodes satsify the predicate.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1478864844",
            "id": 1478864844,
            "in_reply_to_id": 1477163490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YJa_M",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 600,
            "original_position": 314,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1863741484,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478864844/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-05T20:35:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478864844",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1478895270"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478895270"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok that makes much more sense, thank you for explaining.\r\n\r\nI think I'm ok with that route, it does mean we have to implement some predicates effectively twice (the logic between `eq?` and `any-eq?` is basically the same), but that is not a big deal (or we can just make a helper implementation, as you hinted).",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-05T20:50:16Z",
            "diff_hunk": "@@ -538,17 +585,19 @@ end\n --- Adds a new directive to be used in queries\n ---\n --- Handlers can set match level data by setting directly on the\n---- metadata object `metadata.key = value`, additionally, handlers\n+--- metadata object `metadata.key = value`. Additionally, handlers\n --- can set node level data by using the capture id on the\n --- metadata table `metadata[capture_id].key = value`\n ---\n ---@param name string Name of the directive, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[], metadata:table)\n----   - match: see |treesitter-query|\n----      - node-level data are accessible via `match[capture_id]`\n----   - pattern: see |treesitter-query|\n+---@param handler function(match:table<integer,TSNode[]>, pattern:integer, bufnr:integer, predicate:string[], metadata:table)\n+---   - match: A table mapping capture IDs to a list of captured nodes\n+---   - pattern: the index of the matching pattern in the query file\n ---   - predicate: list of strings containing the full directive being called, e.g.\n ---     `(node (#set! conceal \"-\"))` would get the predicate `{ \"#set!\", \"conceal\", \"-\" }`\n+---   - any: (only used for predicates) true if this predicate should match if ANY of the captured\n+---       nodes satisfy the predicate; otherwise, the predicate should match if ALL of the captured\n+---       nodes satsify the predicate.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1478895270",
            "id": 1478895270,
            "in_reply_to_id": 1477163490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YJiam",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 600,
            "original_position": 314,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1863788936,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478895270/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-05T20:50:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478895270",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1478936374"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478936374"
                }
            },
            "author_association": "MEMBER",
            "body": "I've just force pushed this change.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-05T21:38:21Z",
            "diff_hunk": "@@ -538,17 +585,19 @@ end\n --- Adds a new directive to be used in queries\n ---\n --- Handlers can set match level data by setting directly on the\n---- metadata object `metadata.key = value`, additionally, handlers\n+--- metadata object `metadata.key = value`. Additionally, handlers\n --- can set node level data by using the capture id on the\n --- metadata table `metadata[capture_id].key = value`\n ---\n ---@param name string Name of the directive, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[], metadata:table)\n----   - match: see |treesitter-query|\n----      - node-level data are accessible via `match[capture_id]`\n----   - pattern: see |treesitter-query|\n+---@param handler function(match:table<integer,TSNode[]>, pattern:integer, bufnr:integer, predicate:string[], metadata:table)\n+---   - match: A table mapping capture IDs to a list of captured nodes\n+---   - pattern: the index of the matching pattern in the query file\n ---   - predicate: list of strings containing the full directive being called, e.g.\n ---     `(node (#set! conceal \"-\"))` would get the predicate `{ \"#set!\", \"conceal\", \"-\" }`\n+---   - any: (only used for predicates) true if this predicate should match if ANY of the captured\n+---       nodes satisfy the predicate; otherwise, the predicate should match if ALL of the captured\n+---       nodes satsify the predicate.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1478936374",
            "id": 1478936374,
            "in_reply_to_id": 1477163490,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YJsc2",
            "original_commit_id": "d1eff27d6eff616481d1b044d78a5a86e13f547a",
            "original_line": 600,
            "original_position": 314,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1863855694,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478936374/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-05T21:38:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1478936374",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1479176927"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1479176927"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we have this test back? It was useful in the past to catch some errors on the built-in predicates.\r\n\r\nNow it appears to be:\r\n```\r\n{ \"has-ancestor?\", \"has-parent?\", \"vim-match?\", \"any-vim-match?\",\r\n  \"nth?\", \"if-first-row?\", \"is?\", \"eq?\", \"any-eq?\", \"lua-match?\",\r\n  \"has-type?\", \"match?\", \"any-match?\", \"contains?\", \"any-contains?\",\r\n  \"any-of?\", \"any-lua-match?\" }\r\n```",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-06T03:21:17Z",
            "diff_hunk": "@@ -486,55 +554,176 @@ end]]\n \n     local custom_query = '((identifier) @main (#is-main? @main))'\n \n-    local res = exec_lua(\n-      [[\n-    local query = vim.treesitter.query\n+    do\n+      local res = exec_lua(\n+        [[\n+      local query = vim.treesitter.query\n \n-    local function is_main(match, pattern, bufnr, predicate)\n-      local node = match[ predicate[2] ]\n+      local function is_main(match, pattern, bufnr, predicate, any)\n+        local nodes = match[ predicate[2] ]\n+        if not nodes or #nodes == 0 then\n+          return false\n+        end\n+        for _, node in ipairs(nodes) do\n+          local res = query.get_node_text(node, bufnr) == \"main\"\n+          if any and res then\n+            return true\n+          elseif not any and not res then\n+            return false\n+          end\n+        end\n+        return not any\n+      end\n \n-      return query.get_node_text(node, bufnr)\n+      local parser = vim.treesitter.get_parser(0, \"c\")\n+\n+      query.add_predicate(\"is-main?\", is_main)\n+\n+      local query = query.parse(\"c\", ...)\n+\n+      local nodes = {}\n+      for _, node in query:iter_captures(parser:parse()[1]:root(), 0) do\n+        table.insert(nodes, {node:range()})\n+      end\n+\n+      return nodes\n+      ]],\n+        custom_query\n+      )\n+\n+      eq({ { 0, 4, 0, 8 } }, res)\n     end\n \n-    local parser = vim.treesitter.get_parser(0, \"c\")\n+    do\n+      local res = exec_lua [[\n+        local query = vim.treesitter.query\n \n-    query.add_predicate(\"is-main?\", is_main)\n+        local t = {}\n+        for _, v in ipairs(query.list_predicates()) do\n+          t[v] = true\n+        end\n \n-    local query = query.parse(\"c\", ...)\n+        return t\n+      ]]\n \n-    local nodes = {}\n-    for _, node in query:iter_captures(parser:parse()[1]:root(), 0) do\n-      table.insert(nodes, {node:range()})\n+      eq(true, res['is-main?'])",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1479176927",
            "id": 1479176927,
            "line": 641,
            "node_id": "PRRC_kwDOAPphoM5YKnLf",
            "original_commit_id": "c469d32fe7ce5e3b10a4d86cdee7aae8683f0ba2",
            "original_line": 641,
            "original_position": 217,
            "original_start_line": null,
            "path": "test/functional/treesitter/parser_spec.lua",
            "position": 261,
            "pull_request_review_id": 1864212162,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1479176927/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-14T05:59:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1479176927",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1488889492"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1488889492"
                }
            },
            "author_association": "MEMBER",
            "body": "Update: please never mind, this is actually not an important detail that should not hold back this PR; we can fix this later as a follow-up.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-14T05:11:30Z",
            "diff_hunk": "@@ -486,55 +554,176 @@ end]]\n \n     local custom_query = '((identifier) @main (#is-main? @main))'\n \n-    local res = exec_lua(\n-      [[\n-    local query = vim.treesitter.query\n+    do\n+      local res = exec_lua(\n+        [[\n+      local query = vim.treesitter.query\n \n-    local function is_main(match, pattern, bufnr, predicate)\n-      local node = match[ predicate[2] ]\n+      local function is_main(match, pattern, bufnr, predicate, any)\n+        local nodes = match[ predicate[2] ]\n+        if not nodes or #nodes == 0 then\n+          return false\n+        end\n+        for _, node in ipairs(nodes) do\n+          local res = query.get_node_text(node, bufnr) == \"main\"\n+          if any and res then\n+            return true\n+          elseif not any and not res then\n+            return false\n+          end\n+        end\n+        return not any\n+      end\n \n-      return query.get_node_text(node, bufnr)\n+      local parser = vim.treesitter.get_parser(0, \"c\")\n+\n+      query.add_predicate(\"is-main?\", is_main)\n+\n+      local query = query.parse(\"c\", ...)\n+\n+      local nodes = {}\n+      for _, node in query:iter_captures(parser:parse()[1]:root(), 0) do\n+        table.insert(nodes, {node:range()})\n+      end\n+\n+      return nodes\n+      ]],\n+        custom_query\n+      )\n+\n+      eq({ { 0, 4, 0, 8 } }, res)\n     end\n \n-    local parser = vim.treesitter.get_parser(0, \"c\")\n+    do\n+      local res = exec_lua [[\n+        local query = vim.treesitter.query\n \n-    query.add_predicate(\"is-main?\", is_main)\n+        local t = {}\n+        for _, v in ipairs(query.list_predicates()) do\n+          t[v] = true\n+        end\n \n-    local query = query.parse(\"c\", ...)\n+        return t\n+      ]]\n \n-    local nodes = {}\n-    for _, node in query:iter_captures(parser:parse()[1]:root(), 0) do\n-      table.insert(nodes, {node:range()})\n+      eq(true, res['is-main?'])",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1488889492",
            "id": 1488889492,
            "in_reply_to_id": 1479176927,
            "line": 641,
            "node_id": "PRRC_kwDOAPphoM5YvqaU",
            "original_commit_id": "c469d32fe7ce5e3b10a4d86cdee7aae8683f0ba2",
            "original_line": 641,
            "original_position": 217,
            "original_start_line": null,
            "path": "test/functional/treesitter/parser_spec.lua",
            "position": 261,
            "pull_request_review_id": 1864212162,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1488889492/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-14T05:59:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1488889492",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1488890320"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1488890320"
                }
            },
            "author_association": "MEMBER",
            "body": "nit:\r\n\r\n```suggestion\r\n---@param handler function(match: table<integer,TSNode[]>, pattern: integer, source: integer|string, predicate: any[])\r\n```\r\n\r\nActually there is already a `TSPredicate` type defined below, so we can also reuse it (the existing type annotation was also a duplicate somehow).",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-14T05:13:03Z",
            "diff_hunk": "@@ -552,38 +657,93 @@ local directive_handlers = {\n --- Adds a new predicate to be used in queries\n ---\n ---@param name string Name of the predicate, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[])\n+---@param handler function(match: table<integer,TSNode[]>, pattern: integer, source: integer|string, predicate: any[], metadata: table)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1488890320",
            "id": 1488890320,
            "line": 660,
            "node_id": "PRRC_kwDOAPphoM5YvqnQ",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 660,
            "original_position": 364,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 364,
            "pull_request_review_id": 1864212162,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1488890320/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-14T05:59:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1488890320",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1488918869"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1488918869"
                }
            },
            "author_association": "MEMBER",
            "body": "Thanks for the efforts in compatibility APIs and soft-deprecation. Eventually (after a couple iterations of deprecation and removals) we would want to settle down with `iter_matches`.\r\n\r\nTo avoid changing it back to `iter_matches`, I suggest, instead of introducing a new method with different name (which might be deprecated again), introducing an option to `iter_matches(..., opts)`. Something like `multiple_nodes` or *`correct`*. One downside would be complicating the documentation.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-14T05:45:35Z",
            "diff_hunk": "@@ -778,15 +934,86 @@ end\n ---     for each match. This is used to prevent traversing too deep into a tree.\n ---\n ---@return (fun(): integer, table<integer,TSNode>, table): pattern id, match, metadata\n+---@deprecated\n function Query:iter_matches(node, source, start, stop, opts)\n+  vim.deprecate('iter_matches', 'iter_matches2', '0.12')\n+  if type(source) == 'number' and source == 0 then\n+    source = api.nvim_get_current_buf()\n+  end\n+\n+  start, stop = value_or_node_range(start, stop, node)\n+\n+  -- Tell _rawquery to return a match table of capture_id -> TSNode\n+  -- opts._use_deprecated_and_broken_api = true\n+\n+  local raw_iter = node:_rawquery(self.query, false, start, stop, opts) ---@type fun(): integer, TSMatch\n+  local function iter()\n+    local pattern, match = raw_iter()\n+    local metadata = {}\n+\n+    if match ~= nil then\n+      local active = self:match_preds(match, pattern, source)\n+      if not active then\n+        return iter() -- tail call: try next match\n+      end\n+\n+      self:apply_directives(match, pattern, source, metadata)\n+    end\n+\n+    -- Convert the match table into the old buggy version for backward\n+    -- compatibility. This is slow. Plugin authors, if you're reading this, stop\n+    -- using iter_matches!\n+    local old_match = {} ---@type table<integer, TSNode>\n+    for k, v in pairs(match or {}) do\n+      old_match[k] = v[#v]\n+    end\n+    return pattern, old_match, metadata\n+  end\n+  return iter\n+end\n+\n+--- Iterates the matches of self on a given range.\n+---\n+--- Iterate over all matches within a {node}. The arguments are the same as\n+--- for |Query:iter_captures()| but the iterated values are different:\n+--- an (1-based) index of the pattern in the query, a table mapping\n+--- capture indices to nodes, and metadata from any directives processing the match.\n+--- If the query has more than one pattern, the capture table might be sparse\n+--- and e.g. `pairs()` method should be used over `ipairs`.\n+--- Here is an example iterating over all captures in every match:\n+---\n+--- ```lua\n+--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, first, last) do\n+---   for id, nodes in pairs(match) do\n+---     local name = query.captures[id]\n+---     for _, node in ipairs(nodes) do\n+---       -- `node` was captured by the `name` capture in the match\n+---\n+---       local node_data = metadata[id] -- Node level metadata\n+---       ... use the info here ...\n+---     end\n+---   end\n+--- end\n+--- ```\n+---\n+---\n+---@param node TSNode under which the search will occur\n+---@param source (integer|string) Source buffer or string to search\n+---@param start? integer Starting line for the search. Defaults to `node:start()`.\n+---@param stop? integer Stopping line for the search (end-exclusive). Defaults to `node:end_()`.\n+---@param opts? table Optional keyword arguments:\n+---   - max_start_depth (integer) if non-zero, sets the maximum start depth\n+---     for each match. This is used to prevent traversing too deep into a tree.\n+---\n+---@return (fun(): integer, table<integer, TSNode[]>, table): pattern id, match, metadata\n+function Query:iter_matches2(node, source, start, stop, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1488918869",
            "id": 1488918869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YvxlV",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 1009,
            "original_position": 586,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1864212162,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1488918869/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-14T05:59:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1488918869",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1489165687"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1489165687"
                }
            },
            "author_association": "MEMBER",
            "body": "That's the best option, I feel (pun intended); since the option would be temporary, the documentation is not a big issue. Bonus points since we can use the same strategy (and timeline) for `iter_matches` and the handlers.\r\n\r\nThis also makes the name less of a critical issue; maybe `list` or `match_list` or `map_to_list` suffices. Or, if it's easier, flip the logic and use `return_node` or `single_node` or `single`, default `true` for now and later `false`.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-14T09:28:27Z",
            "diff_hunk": "@@ -778,15 +934,86 @@ end\n ---     for each match. This is used to prevent traversing too deep into a tree.\n ---\n ---@return (fun(): integer, table<integer,TSNode>, table): pattern id, match, metadata\n+---@deprecated\n function Query:iter_matches(node, source, start, stop, opts)\n+  vim.deprecate('iter_matches', 'iter_matches2', '0.12')\n+  if type(source) == 'number' and source == 0 then\n+    source = api.nvim_get_current_buf()\n+  end\n+\n+  start, stop = value_or_node_range(start, stop, node)\n+\n+  -- Tell _rawquery to return a match table of capture_id -> TSNode\n+  -- opts._use_deprecated_and_broken_api = true\n+\n+  local raw_iter = node:_rawquery(self.query, false, start, stop, opts) ---@type fun(): integer, TSMatch\n+  local function iter()\n+    local pattern, match = raw_iter()\n+    local metadata = {}\n+\n+    if match ~= nil then\n+      local active = self:match_preds(match, pattern, source)\n+      if not active then\n+        return iter() -- tail call: try next match\n+      end\n+\n+      self:apply_directives(match, pattern, source, metadata)\n+    end\n+\n+    -- Convert the match table into the old buggy version for backward\n+    -- compatibility. This is slow. Plugin authors, if you're reading this, stop\n+    -- using iter_matches!\n+    local old_match = {} ---@type table<integer, TSNode>\n+    for k, v in pairs(match or {}) do\n+      old_match[k] = v[#v]\n+    end\n+    return pattern, old_match, metadata\n+  end\n+  return iter\n+end\n+\n+--- Iterates the matches of self on a given range.\n+---\n+--- Iterate over all matches within a {node}. The arguments are the same as\n+--- for |Query:iter_captures()| but the iterated values are different:\n+--- an (1-based) index of the pattern in the query, a table mapping\n+--- capture indices to nodes, and metadata from any directives processing the match.\n+--- If the query has more than one pattern, the capture table might be sparse\n+--- and e.g. `pairs()` method should be used over `ipairs`.\n+--- Here is an example iterating over all captures in every match:\n+---\n+--- ```lua\n+--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, first, last) do\n+---   for id, nodes in pairs(match) do\n+---     local name = query.captures[id]\n+---     for _, node in ipairs(nodes) do\n+---       -- `node` was captured by the `name` capture in the match\n+---\n+---       local node_data = metadata[id] -- Node level metadata\n+---       ... use the info here ...\n+---     end\n+---   end\n+--- end\n+--- ```\n+---\n+---\n+---@param node TSNode under which the search will occur\n+---@param source (integer|string) Source buffer or string to search\n+---@param start? integer Starting line for the search. Defaults to `node:start()`.\n+---@param stop? integer Stopping line for the search (end-exclusive). Defaults to `node:end_()`.\n+---@param opts? table Optional keyword arguments:\n+---   - max_start_depth (integer) if non-zero, sets the maximum start depth\n+---     for each match. This is used to prevent traversing too deep into a tree.\n+---\n+---@return (fun(): integer, table<integer, TSNode[]>, table): pattern id, match, metadata\n+function Query:iter_matches2(node, source, start, stop, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1489165687",
            "id": 1489165687,
            "in_reply_to_id": 1488918869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ywt13",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 1009,
            "original_position": 586,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1879776897,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1489165687/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-14T10:03:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1489165687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1489667638"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1489667638"
                }
            },
            "author_association": "MEMBER",
            "body": "I considered using `TSPredicate` but that makes the generated docs less useful (someone reading the help docs doesn't know what `TSPredicate` is).",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-14T15:28:58Z",
            "diff_hunk": "@@ -552,38 +657,93 @@ local directive_handlers = {\n --- Adds a new predicate to be used in queries\n ---\n ---@param name string Name of the predicate, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[])\n+---@param handler function(match: table<integer,TSNode[]>, pattern: integer, source: integer|string, predicate: any[], metadata: table)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1489667638",
            "id": 1489667638,
            "in_reply_to_id": 1488890320,
            "line": 660,
            "node_id": "PRRC_kwDOAPphoM5YyoY2",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 660,
            "original_position": 364,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 364,
            "pull_request_review_id": 1880608360,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1489667638/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-14T15:28:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1489667638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1489679616"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1489679616"
                }
            },
            "author_association": "MEMBER",
            "body": "I see, that's a good point. Reminds myself of [#26721](https://github.com/neovim/neovim/pull/26721/files#diff-c9baf58a11444ecc08b1a8facc69b0bf9a8033d1b3a2771c6ccefd161e987b79R557) (which is outdated, a re-work will follow after this PR) where we had to write something explicitly to make generated docs useful. We can fix docs later, so either way is fine for the time being.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-14T15:36:33Z",
            "diff_hunk": "@@ -552,38 +657,93 @@ local directive_handlers = {\n --- Adds a new predicate to be used in queries\n ---\n ---@param name string Name of the predicate, without leading #\n----@param handler function(match:table<string,TSNode>, pattern:string, bufnr:integer, predicate:string[])\n+---@param handler function(match: table<integer,TSNode[]>, pattern: integer, source: integer|string, predicate: any[], metadata: table)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1489679616",
            "id": 1489679616,
            "in_reply_to_id": 1488890320,
            "line": 660,
            "node_id": "PRRC_kwDOAPphoM5YyrUA",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 660,
            "original_position": 364,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 364,
            "pull_request_review_id": 1880627557,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1489679616/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-14T15:40:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1489679616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1490256882"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490256882"
                }
            },
            "author_association": "MEMBER",
            "body": "A counterpoint in favor of a new function instead of an option: it makes it much more unlikely that new code will use the broken version of `iter_matches`. By deprecating `iter_matches` in favor of `iter_matches2` in our documentation, anyone searching for docs on `iter_matches` will be easily and obviously directed to use the newer version instead. In contrast, an option is much less obvious and much easier to miss.\r\n\r\nI suppose we could make the option VERY OBVIOUS in the docs. Perhaps something like this:\r\n\r\n````\r\n--- Iterates the matches of self on a given range.\r\n---\r\n--- Iterate over all matches within a {node}. The arguments are the same as for\r\n--- |Query:iter_captures()| but the iterated values are different: an (1-based)\r\n--- index of the pattern in the query, a table mapping capture indices to a list\r\n--- of nodes, and metadata from any directives processing the match.\r\n---\r\n--- You MUST set the \"correct\" option for this function to behave correctly!\r\n--- In older versions of Nvim this function has incorrect behavior: the correct\r\n--- behavior must be opted into for backward compatibility (the correct behavior\r\n--- will eventually become the default and the \"correct\" option will be removed).\r\n---\r\n--- Example:\r\n---\r\n--- ```lua\r\n--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, 0, -1, { correct = true}) do\r\n---   for id, nodes in pairs(match) do\r\n---     local name = query.captures[id]\r\n---     for _, node in ipairs(nodes) do\r\n---       -- `node` was captured by the `name` capture in the match\r\n---\r\n---       local node_data = metadata[id] -- Node level metadata\r\n---       ... use the info here ...\r\n---     end\r\n---   end\r\n--- end\r\n--- ```\r\n````\r\n\r\nEDIT: I think an obnoxious and annoying name like `\"correct\"` is better here than `\"match_list\"` or similar: the idea is that this is _not_ a configurable option in the normal sense, we want to make it very clear that the alternative is buggy and broken and NO ONE should continue to use it.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-15T01:24:50Z",
            "diff_hunk": "@@ -778,15 +934,86 @@ end\n ---     for each match. This is used to prevent traversing too deep into a tree.\n ---\n ---@return (fun(): integer, table<integer,TSNode>, table): pattern id, match, metadata\n+---@deprecated\n function Query:iter_matches(node, source, start, stop, opts)\n+  vim.deprecate('iter_matches', 'iter_matches2', '0.12')\n+  if type(source) == 'number' and source == 0 then\n+    source = api.nvim_get_current_buf()\n+  end\n+\n+  start, stop = value_or_node_range(start, stop, node)\n+\n+  -- Tell _rawquery to return a match table of capture_id -> TSNode\n+  -- opts._use_deprecated_and_broken_api = true\n+\n+  local raw_iter = node:_rawquery(self.query, false, start, stop, opts) ---@type fun(): integer, TSMatch\n+  local function iter()\n+    local pattern, match = raw_iter()\n+    local metadata = {}\n+\n+    if match ~= nil then\n+      local active = self:match_preds(match, pattern, source)\n+      if not active then\n+        return iter() -- tail call: try next match\n+      end\n+\n+      self:apply_directives(match, pattern, source, metadata)\n+    end\n+\n+    -- Convert the match table into the old buggy version for backward\n+    -- compatibility. This is slow. Plugin authors, if you're reading this, stop\n+    -- using iter_matches!\n+    local old_match = {} ---@type table<integer, TSNode>\n+    for k, v in pairs(match or {}) do\n+      old_match[k] = v[#v]\n+    end\n+    return pattern, old_match, metadata\n+  end\n+  return iter\n+end\n+\n+--- Iterates the matches of self on a given range.\n+---\n+--- Iterate over all matches within a {node}. The arguments are the same as\n+--- for |Query:iter_captures()| but the iterated values are different:\n+--- an (1-based) index of the pattern in the query, a table mapping\n+--- capture indices to nodes, and metadata from any directives processing the match.\n+--- If the query has more than one pattern, the capture table might be sparse\n+--- and e.g. `pairs()` method should be used over `ipairs`.\n+--- Here is an example iterating over all captures in every match:\n+---\n+--- ```lua\n+--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, first, last) do\n+---   for id, nodes in pairs(match) do\n+---     local name = query.captures[id]\n+---     for _, node in ipairs(nodes) do\n+---       -- `node` was captured by the `name` capture in the match\n+---\n+---       local node_data = metadata[id] -- Node level metadata\n+---       ... use the info here ...\n+---     end\n+---   end\n+--- end\n+--- ```\n+---\n+---\n+---@param node TSNode under which the search will occur\n+---@param source (integer|string) Source buffer or string to search\n+---@param start? integer Starting line for the search. Defaults to `node:start()`.\n+---@param stop? integer Stopping line for the search (end-exclusive). Defaults to `node:end_()`.\n+---@param opts? table Optional keyword arguments:\n+---   - max_start_depth (integer) if non-zero, sets the maximum start depth\n+---     for each match. This is used to prevent traversing too deep into a tree.\n+---\n+---@return (fun(): integer, table<integer, TSNode[]>, table): pattern id, match, metadata\n+function Query:iter_matches2(node, source, start, stop, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1490256882",
            "id": 1490256882,
            "in_reply_to_id": 1488918869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y04Py",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 1009,
            "original_position": 586,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1881592308,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490256882/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T01:27:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490256882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1490263141"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490263141"
                }
            },
            "author_association": "MEMBER",
            "body": "In any case, I committed the option variant in 159230e0d14d2560caa0e27d03ef3968fac464d9. Easy to drop that commit if we need to.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-15T01:36:14Z",
            "diff_hunk": "@@ -778,15 +934,86 @@ end\n ---     for each match. This is used to prevent traversing too deep into a tree.\n ---\n ---@return (fun(): integer, table<integer,TSNode>, table): pattern id, match, metadata\n+---@deprecated\n function Query:iter_matches(node, source, start, stop, opts)\n+  vim.deprecate('iter_matches', 'iter_matches2', '0.12')\n+  if type(source) == 'number' and source == 0 then\n+    source = api.nvim_get_current_buf()\n+  end\n+\n+  start, stop = value_or_node_range(start, stop, node)\n+\n+  -- Tell _rawquery to return a match table of capture_id -> TSNode\n+  -- opts._use_deprecated_and_broken_api = true\n+\n+  local raw_iter = node:_rawquery(self.query, false, start, stop, opts) ---@type fun(): integer, TSMatch\n+  local function iter()\n+    local pattern, match = raw_iter()\n+    local metadata = {}\n+\n+    if match ~= nil then\n+      local active = self:match_preds(match, pattern, source)\n+      if not active then\n+        return iter() -- tail call: try next match\n+      end\n+\n+      self:apply_directives(match, pattern, source, metadata)\n+    end\n+\n+    -- Convert the match table into the old buggy version for backward\n+    -- compatibility. This is slow. Plugin authors, if you're reading this, stop\n+    -- using iter_matches!\n+    local old_match = {} ---@type table<integer, TSNode>\n+    for k, v in pairs(match or {}) do\n+      old_match[k] = v[#v]\n+    end\n+    return pattern, old_match, metadata\n+  end\n+  return iter\n+end\n+\n+--- Iterates the matches of self on a given range.\n+---\n+--- Iterate over all matches within a {node}. The arguments are the same as\n+--- for |Query:iter_captures()| but the iterated values are different:\n+--- an (1-based) index of the pattern in the query, a table mapping\n+--- capture indices to nodes, and metadata from any directives processing the match.\n+--- If the query has more than one pattern, the capture table might be sparse\n+--- and e.g. `pairs()` method should be used over `ipairs`.\n+--- Here is an example iterating over all captures in every match:\n+---\n+--- ```lua\n+--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, first, last) do\n+---   for id, nodes in pairs(match) do\n+---     local name = query.captures[id]\n+---     for _, node in ipairs(nodes) do\n+---       -- `node` was captured by the `name` capture in the match\n+---\n+---       local node_data = metadata[id] -- Node level metadata\n+---       ... use the info here ...\n+---     end\n+---   end\n+--- end\n+--- ```\n+---\n+---\n+---@param node TSNode under which the search will occur\n+---@param source (integer|string) Source buffer or string to search\n+---@param start? integer Starting line for the search. Defaults to `node:start()`.\n+---@param stop? integer Stopping line for the search (end-exclusive). Defaults to `node:end_()`.\n+---@param opts? table Optional keyword arguments:\n+---   - max_start_depth (integer) if non-zero, sets the maximum start depth\n+---     for each match. This is used to prevent traversing too deep into a tree.\n+---\n+---@return (fun(): integer, table<integer, TSNode[]>, table): pattern id, match, metadata\n+function Query:iter_matches2(node, source, start, stop, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1490263141",
            "id": 1490263141,
            "in_reply_to_id": 1488918869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y05xl",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 1009,
            "original_position": 586,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1881601239,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490263141/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T01:45:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490263141",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1490307783"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490307783"
                }
            },
            "author_association": "MEMBER",
            "body": "This looks good. It would be even better if we can show `vim.deprecate` warning *once*. (It doesn't have to be now or in this PR, we can wait until the new APIs are finailzed) The deprecation warning message will be quite annoying, until all plugins fix their usage of `iter_matches`.\r\n\r\nDue to performance concern, the best place to do this would be around after L950 rather than inside iterator.\r\n\r\nI would also suggest we show warnings when the value was not explicitly chosen (`not opts` or `opts.correct == nil`); i.e. when `opts.correct = false`, warnings may be suppressed. But if we want to urge aggressively, that's also fine with me.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-15T02:50:48Z",
            "diff_hunk": "@@ -799,6 +962,18 @@ function Query:iter_matches(node, source, start, stop, opts)\n \n       self:apply_directives(match, pattern, source, metadata)\n     end\n+\n+    if not opts or not opts.correct then",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1490307783",
            "id": 1490307783,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y1ErH",
            "original_commit_id": "d6d4780308cd49c0dc521169fef71b62c017e19f",
            "original_line": 966,
            "original_position": 584,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1881534340,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490307783/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T09:35:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490307783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1490308436"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490308436"
                }
            },
            "author_association": "MEMBER",
            "body": "Might be potentially buggy; is there any case where `v` might not be a list, e.g. `k = \"active\"` or `k = \"pattern\"`?",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-15T02:52:04Z",
            "diff_hunk": "@@ -799,6 +962,18 @@ function Query:iter_matches(node, source, start, stop, opts)\n \n       self:apply_directives(match, pattern, source, metadata)\n     end\n+\n+    if not opts or not opts.correct then\n+      -- Convert the match table into the old buggy version for backward\n+      -- compatibility. This is slow. Plugin authors, if you're reading this, set the \"correct\"\n+      -- option!\n+      local old_match = {} ---@type table<integer, TSNode>\n+      for k, v in pairs(match or {}) do\n+        old_match[k] = v[#v]",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1490308436",
            "id": 1490308436,
            "line": 975,
            "node_id": "PRRC_kwDOAPphoM5Y1E1U",
            "original_commit_id": "d6d4780308cd49c0dc521169fef71b62c017e19f",
            "original_line": 972,
            "original_position": 590,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 593,
            "pull_request_review_id": 1881534340,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490308436/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T03:03:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490308436",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1490308668"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490308668"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, 0, -1, { correct = true }) do\r\n```",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-15T02:52:38Z",
            "diff_hunk": "@@ -748,45 +904,52 @@ end\n \n --- Iterates the matches of self on a given range.\n ---\n---- Iterate over all matches within a {node}. The arguments are the same as\n---- for |Query:iter_captures()| but the iterated values are different:\n---- an (1-based) index of the pattern in the query, a table mapping\n---- capture indices to nodes, and metadata from any directives processing the match.\n---- If the query has more than one pattern, the capture table might be sparse\n---- and e.g. `pairs()` method should be used over `ipairs`.\n---- Here is an example iterating over all captures in every match:\n+--- Iterate over all matches within a {node}. The arguments are the same as for\n+--- |Query:iter_captures()| but the iterated values are different: an (1-based)\n+--- index of the pattern in the query, a table mapping capture indices to a list\n+--- of nodes, and metadata from any directives processing the match.\n+---\n+--- You MUST set the \"correct\" option for this function to behave correctly!\n+--- In older versions of Nvim this function has incorrect behavior: the correct\n+--- behavior must be opted into for backward compatibility.\n+---\n+--- Example:\n ---\n --- ```lua\n---- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, first, last) do\n----   for id, node in pairs(match) do\n+--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, 0, -1, { correct = true}) do",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1490308668",
            "id": 1490308668,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y1E48",
            "original_commit_id": "d6d4780308cd49c0dc521169fef71b62c017e19f",
            "original_line": 919,
            "original_position": 535,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1881534340,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490308668/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T03:03:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490308668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1490317375"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490317375"
                }
            },
            "author_association": "MEMBER",
            "body": "Sounds good! I would say I slightly prefer some meaningful name (e.g. `as_list` or other candidates suggested by @clason), but no objections to going with an *obnoxious* name.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-15T03:10:44Z",
            "diff_hunk": "@@ -778,15 +934,86 @@ end\n ---     for each match. This is used to prevent traversing too deep into a tree.\n ---\n ---@return (fun(): integer, table<integer,TSNode>, table): pattern id, match, metadata\n+---@deprecated\n function Query:iter_matches(node, source, start, stop, opts)\n+  vim.deprecate('iter_matches', 'iter_matches2', '0.12')\n+  if type(source) == 'number' and source == 0 then\n+    source = api.nvim_get_current_buf()\n+  end\n+\n+  start, stop = value_or_node_range(start, stop, node)\n+\n+  -- Tell _rawquery to return a match table of capture_id -> TSNode\n+  -- opts._use_deprecated_and_broken_api = true\n+\n+  local raw_iter = node:_rawquery(self.query, false, start, stop, opts) ---@type fun(): integer, TSMatch\n+  local function iter()\n+    local pattern, match = raw_iter()\n+    local metadata = {}\n+\n+    if match ~= nil then\n+      local active = self:match_preds(match, pattern, source)\n+      if not active then\n+        return iter() -- tail call: try next match\n+      end\n+\n+      self:apply_directives(match, pattern, source, metadata)\n+    end\n+\n+    -- Convert the match table into the old buggy version for backward\n+    -- compatibility. This is slow. Plugin authors, if you're reading this, stop\n+    -- using iter_matches!\n+    local old_match = {} ---@type table<integer, TSNode>\n+    for k, v in pairs(match or {}) do\n+      old_match[k] = v[#v]\n+    end\n+    return pattern, old_match, metadata\n+  end\n+  return iter\n+end\n+\n+--- Iterates the matches of self on a given range.\n+---\n+--- Iterate over all matches within a {node}. The arguments are the same as\n+--- for |Query:iter_captures()| but the iterated values are different:\n+--- an (1-based) index of the pattern in the query, a table mapping\n+--- capture indices to nodes, and metadata from any directives processing the match.\n+--- If the query has more than one pattern, the capture table might be sparse\n+--- and e.g. `pairs()` method should be used over `ipairs`.\n+--- Here is an example iterating over all captures in every match:\n+---\n+--- ```lua\n+--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, first, last) do\n+---   for id, nodes in pairs(match) do\n+---     local name = query.captures[id]\n+---     for _, node in ipairs(nodes) do\n+---       -- `node` was captured by the `name` capture in the match\n+---\n+---       local node_data = metadata[id] -- Node level metadata\n+---       ... use the info here ...\n+---     end\n+---   end\n+--- end\n+--- ```\n+---\n+---\n+---@param node TSNode under which the search will occur\n+---@param source (integer|string) Source buffer or string to search\n+---@param start? integer Starting line for the search. Defaults to `node:start()`.\n+---@param stop? integer Stopping line for the search (end-exclusive). Defaults to `node:end_()`.\n+---@param opts? table Optional keyword arguments:\n+---   - max_start_depth (integer) if non-zero, sets the maximum start depth\n+---     for each match. This is used to prevent traversing too deep into a tree.\n+---\n+---@return (fun(): integer, table<integer, TSNode[]>, table): pattern id, match, metadata\n+function Query:iter_matches2(node, source, start, stop, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1490317375",
            "id": 1490317375,
            "in_reply_to_id": 1488918869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y1HA_",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 1009,
            "original_position": 586,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1881686255,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490317375/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T03:10:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490317375",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1490702556"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490702556"
                }
            },
            "author_association": "MEMBER",
            "body": "I still prefer a more descriptive name (_what_ does `correct` correct?), and the warning text can be more concise (but still very explicit). I can make a concrete suggestion, if you want.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-15T09:31:44Z",
            "diff_hunk": "@@ -778,15 +934,86 @@ end\n ---     for each match. This is used to prevent traversing too deep into a tree.\n ---\n ---@return (fun(): integer, table<integer,TSNode>, table): pattern id, match, metadata\n+---@deprecated\n function Query:iter_matches(node, source, start, stop, opts)\n+  vim.deprecate('iter_matches', 'iter_matches2', '0.12')\n+  if type(source) == 'number' and source == 0 then\n+    source = api.nvim_get_current_buf()\n+  end\n+\n+  start, stop = value_or_node_range(start, stop, node)\n+\n+  -- Tell _rawquery to return a match table of capture_id -> TSNode\n+  -- opts._use_deprecated_and_broken_api = true\n+\n+  local raw_iter = node:_rawquery(self.query, false, start, stop, opts) ---@type fun(): integer, TSMatch\n+  local function iter()\n+    local pattern, match = raw_iter()\n+    local metadata = {}\n+\n+    if match ~= nil then\n+      local active = self:match_preds(match, pattern, source)\n+      if not active then\n+        return iter() -- tail call: try next match\n+      end\n+\n+      self:apply_directives(match, pattern, source, metadata)\n+    end\n+\n+    -- Convert the match table into the old buggy version for backward\n+    -- compatibility. This is slow. Plugin authors, if you're reading this, stop\n+    -- using iter_matches!\n+    local old_match = {} ---@type table<integer, TSNode>\n+    for k, v in pairs(match or {}) do\n+      old_match[k] = v[#v]\n+    end\n+    return pattern, old_match, metadata\n+  end\n+  return iter\n+end\n+\n+--- Iterates the matches of self on a given range.\n+---\n+--- Iterate over all matches within a {node}. The arguments are the same as\n+--- for |Query:iter_captures()| but the iterated values are different:\n+--- an (1-based) index of the pattern in the query, a table mapping\n+--- capture indices to nodes, and metadata from any directives processing the match.\n+--- If the query has more than one pattern, the capture table might be sparse\n+--- and e.g. `pairs()` method should be used over `ipairs`.\n+--- Here is an example iterating over all captures in every match:\n+---\n+--- ```lua\n+--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, first, last) do\n+---   for id, nodes in pairs(match) do\n+---     local name = query.captures[id]\n+---     for _, node in ipairs(nodes) do\n+---       -- `node` was captured by the `name` capture in the match\n+---\n+---       local node_data = metadata[id] -- Node level metadata\n+---       ... use the info here ...\n+---     end\n+---   end\n+--- end\n+--- ```\n+---\n+---\n+---@param node TSNode under which the search will occur\n+---@param source (integer|string) Source buffer or string to search\n+---@param start? integer Starting line for the search. Defaults to `node:start()`.\n+---@param stop? integer Stopping line for the search (end-exclusive). Defaults to `node:end_()`.\n+---@param opts? table Optional keyword arguments:\n+---   - max_start_depth (integer) if non-zero, sets the maximum start depth\n+---     for each match. This is used to prevent traversing too deep into a tree.\n+---\n+---@return (fun(): integer, table<integer, TSNode[]>, table): pattern id, match, metadata\n+function Query:iter_matches2(node, source, start, stop, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1490702556",
            "id": 1490702556,
            "in_reply_to_id": 1488918869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y2lDc",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 1009,
            "original_position": 586,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1882230741,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490702556/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T09:31:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490702556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1490710297"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490710297"
                }
            },
            "author_association": "MEMBER",
            "body": "(I see it's already more concise in the PR; I'll still make a suggestion to reformulate slightly as it's missing the deprecation notice.)",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-15T09:37:47Z",
            "diff_hunk": "@@ -778,15 +934,86 @@ end\n ---     for each match. This is used to prevent traversing too deep into a tree.\n ---\n ---@return (fun(): integer, table<integer,TSNode>, table): pattern id, match, metadata\n+---@deprecated\n function Query:iter_matches(node, source, start, stop, opts)\n+  vim.deprecate('iter_matches', 'iter_matches2', '0.12')\n+  if type(source) == 'number' and source == 0 then\n+    source = api.nvim_get_current_buf()\n+  end\n+\n+  start, stop = value_or_node_range(start, stop, node)\n+\n+  -- Tell _rawquery to return a match table of capture_id -> TSNode\n+  -- opts._use_deprecated_and_broken_api = true\n+\n+  local raw_iter = node:_rawquery(self.query, false, start, stop, opts) ---@type fun(): integer, TSMatch\n+  local function iter()\n+    local pattern, match = raw_iter()\n+    local metadata = {}\n+\n+    if match ~= nil then\n+      local active = self:match_preds(match, pattern, source)\n+      if not active then\n+        return iter() -- tail call: try next match\n+      end\n+\n+      self:apply_directives(match, pattern, source, metadata)\n+    end\n+\n+    -- Convert the match table into the old buggy version for backward\n+    -- compatibility. This is slow. Plugin authors, if you're reading this, stop\n+    -- using iter_matches!\n+    local old_match = {} ---@type table<integer, TSNode>\n+    for k, v in pairs(match or {}) do\n+      old_match[k] = v[#v]\n+    end\n+    return pattern, old_match, metadata\n+  end\n+  return iter\n+end\n+\n+--- Iterates the matches of self on a given range.\n+---\n+--- Iterate over all matches within a {node}. The arguments are the same as\n+--- for |Query:iter_captures()| but the iterated values are different:\n+--- an (1-based) index of the pattern in the query, a table mapping\n+--- capture indices to nodes, and metadata from any directives processing the match.\n+--- If the query has more than one pattern, the capture table might be sparse\n+--- and e.g. `pairs()` method should be used over `ipairs`.\n+--- Here is an example iterating over all captures in every match:\n+---\n+--- ```lua\n+--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, first, last) do\n+---   for id, nodes in pairs(match) do\n+---     local name = query.captures[id]\n+---     for _, node in ipairs(nodes) do\n+---       -- `node` was captured by the `name` capture in the match\n+---\n+---       local node_data = metadata[id] -- Node level metadata\n+---       ... use the info here ...\n+---     end\n+---   end\n+--- end\n+--- ```\n+---\n+---\n+---@param node TSNode under which the search will occur\n+---@param source (integer|string) Source buffer or string to search\n+---@param start? integer Starting line for the search. Defaults to `node:start()`.\n+---@param stop? integer Stopping line for the search (end-exclusive). Defaults to `node:end_()`.\n+---@param opts? table Optional keyword arguments:\n+---   - max_start_depth (integer) if non-zero, sets the maximum start depth\n+---     for each match. This is used to prevent traversing too deep into a tree.\n+---\n+---@return (fun(): integer, table<integer, TSNode[]>, table): pattern id, match, metadata\n+function Query:iter_matches2(node, source, start, stop, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1490710297",
            "id": 1490710297,
            "in_reply_to_id": 1488918869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y2m8Z",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 1009,
            "original_position": 586,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1882251468,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490710297/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T09:37:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490710297",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1491865359"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491865359"
                }
            },
            "author_association": "MEMBER",
            "body": "Not in this code path.",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-16T01:39:24Z",
            "diff_hunk": "@@ -799,6 +962,18 @@ function Query:iter_matches(node, source, start, stop, opts)\n \n       self:apply_directives(match, pattern, source, metadata)\n     end\n+\n+    if not opts or not opts.correct then\n+      -- Convert the match table into the old buggy version for backward\n+      -- compatibility. This is slow. Plugin authors, if you're reading this, set the \"correct\"\n+      -- option!\n+      local old_match = {} ---@type table<integer, TSNode>\n+      for k, v in pairs(match or {}) do\n+        old_match[k] = v[#v]",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1491865359",
            "id": 1491865359,
            "in_reply_to_id": 1490308436,
            "line": 975,
            "node_id": "PRRC_kwDOAPphoM5Y7A8P",
            "original_commit_id": "d6d4780308cd49c0dc521169fef71b62c017e19f",
            "original_line": 972,
            "original_position": 590,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": 593,
            "pull_request_review_id": 1884181710,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491865359/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-16T01:39:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491865359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1491865809"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491865809"
                }
            },
            "author_association": "MEMBER",
            "body": "Concrete suggestion welcome. Whatever gets this thing out the door 🫠",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-16T01:40:20Z",
            "diff_hunk": "@@ -778,15 +934,86 @@ end\n ---     for each match. This is used to prevent traversing too deep into a tree.\n ---\n ---@return (fun(): integer, table<integer,TSNode>, table): pattern id, match, metadata\n+---@deprecated\n function Query:iter_matches(node, source, start, stop, opts)\n+  vim.deprecate('iter_matches', 'iter_matches2', '0.12')\n+  if type(source) == 'number' and source == 0 then\n+    source = api.nvim_get_current_buf()\n+  end\n+\n+  start, stop = value_or_node_range(start, stop, node)\n+\n+  -- Tell _rawquery to return a match table of capture_id -> TSNode\n+  -- opts._use_deprecated_and_broken_api = true\n+\n+  local raw_iter = node:_rawquery(self.query, false, start, stop, opts) ---@type fun(): integer, TSMatch\n+  local function iter()\n+    local pattern, match = raw_iter()\n+    local metadata = {}\n+\n+    if match ~= nil then\n+      local active = self:match_preds(match, pattern, source)\n+      if not active then\n+        return iter() -- tail call: try next match\n+      end\n+\n+      self:apply_directives(match, pattern, source, metadata)\n+    end\n+\n+    -- Convert the match table into the old buggy version for backward\n+    -- compatibility. This is slow. Plugin authors, if you're reading this, stop\n+    -- using iter_matches!\n+    local old_match = {} ---@type table<integer, TSNode>\n+    for k, v in pairs(match or {}) do\n+      old_match[k] = v[#v]\n+    end\n+    return pattern, old_match, metadata\n+  end\n+  return iter\n+end\n+\n+--- Iterates the matches of self on a given range.\n+---\n+--- Iterate over all matches within a {node}. The arguments are the same as\n+--- for |Query:iter_captures()| but the iterated values are different:\n+--- an (1-based) index of the pattern in the query, a table mapping\n+--- capture indices to nodes, and metadata from any directives processing the match.\n+--- If the query has more than one pattern, the capture table might be sparse\n+--- and e.g. `pairs()` method should be used over `ipairs`.\n+--- Here is an example iterating over all captures in every match:\n+---\n+--- ```lua\n+--- for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, first, last) do\n+---   for id, nodes in pairs(match) do\n+---     local name = query.captures[id]\n+---     for _, node in ipairs(nodes) do\n+---       -- `node` was captured by the `name` capture in the match\n+---\n+---       local node_data = metadata[id] -- Node level metadata\n+---       ... use the info here ...\n+---     end\n+---   end\n+--- end\n+--- ```\n+---\n+---\n+---@param node TSNode under which the search will occur\n+---@param source (integer|string) Source buffer or string to search\n+---@param start? integer Starting line for the search. Defaults to `node:start()`.\n+---@param stop? integer Stopping line for the search (end-exclusive). Defaults to `node:end_()`.\n+---@param opts? table Optional keyword arguments:\n+---   - max_start_depth (integer) if non-zero, sets the maximum start depth\n+---     for each match. This is used to prevent traversing too deep into a tree.\n+---\n+---@return (fun(): integer, table<integer, TSNode[]>, table): pattern id, match, metadata\n+function Query:iter_matches2(node, source, start, stop, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1491865809",
            "id": 1491865809,
            "in_reply_to_id": 1488918869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y7BDR",
            "original_commit_id": "cf8f69db5043a0b65f7c93fdb206d2f2adffbfb2",
            "original_line": 1009,
            "original_position": 586,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1884182369,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491865809/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-16T01:40:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491865809",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1491872637"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491872637"
                }
            },
            "author_association": "MEMBER",
            "body": "Not sure we need  `vim.deprecate` actually. The warning wouldn't appear until the 0.11 release cycle, but in that release cycle the option is being changed to be the default anyway (per @clason's [accelerated timeline](https://github.com/neovim/neovim/pull/24738#issuecomment-1943318653), which I agree with since treesitter still has experimental status).",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-16T01:54:01Z",
            "diff_hunk": "@@ -799,6 +962,18 @@ function Query:iter_matches(node, source, start, stop, opts)\n \n       self:apply_directives(match, pattern, source, metadata)\n     end\n+\n+    if not opts or not opts.correct then",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1491872637",
            "id": 1491872637,
            "in_reply_to_id": 1490307783,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y7Ct9",
            "original_commit_id": "d6d4780308cd49c0dc521169fef71b62c017e19f",
            "original_line": 966,
            "original_position": 584,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1884192192,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491872637/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-16T01:54:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491872637",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1492751716"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1492751716"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- WARNING: Set `correct=true` to ensure all matching nodes in a match are\r\n--- returned, otherwise only the last node in a match is returned, breaking captures\r\n--- involving quantifiers such as `(comment)+ @comment`. The default option\r\n--- `correct=false` is only provided for backward compatibility and will be removed\r\n--- after Nvim 0.10.\r\n```",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-16T17:02:22Z",
            "diff_hunk": "@@ -748,45 +904,53 @@ end\n \n --- Iterates the matches of self on a given range.\n ---\n---- Iterate over all matches within a {node}. The arguments are the same as\n---- for |Query:iter_captures()| but the iterated values are different:\n---- an (1-based) index of the pattern in the query, a table mapping\n---- capture indices to nodes, and metadata from any directives processing the match.\n---- If the query has more than one pattern, the capture table might be sparse\n---- and e.g. `pairs()` method should be used over `ipairs`.\n---- Here is an example iterating over all captures in every match:\n+--- Iterate over all matches within a {node}. The arguments are the same as for\n+--- |Query:iter_captures()| but the iterated values are different: an (1-based)\n+--- index of the pattern in the query, a table mapping capture indices to a list\n+--- of nodes, and metadata from any directives processing the match.\n+---\n+--- You MUST set the \"correct\" option for this function to behave correctly!\n+--- In older versions of Nvim this function has incorrect behavior: the correct\n+--- behavior must be opted into for backward compatibility.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1492751716",
            "id": 1492751716,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y-ZVk",
            "original_commit_id": "8a05b3078946676ab845599e78c1f3d6f0bf7515",
            "original_line": 914,
            "original_position": 528,
            "original_start_line": 912,
            "path": "runtime/lua/vim/treesitter/query.lua",
            "position": null,
            "pull_request_review_id": 1885604424,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1492751716/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-16T17:02:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1492751716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24738#discussion_r1492755423"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24738"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1492755423"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n• Treesitter\r\n  • |Query:iter_matches()|, |vim.treesitter.query.add_predicate()|, and\r\n    |vim.treesitter.query.add_directive()| accept a new `correct` option which\r\n    ensures that all matching nodes are returned as a table. The default option\r\n    `correct=false` returns only a single node, breaking captures with quantifiers\r\n    like `(comment)+ @comment; it is only provided for backward compatibility\r\n    and will be removed after Nvim 0.10.\r\n  • |vim.treesitter.query.add_predicate()| and\r\n    |vim.treesitter.query.add_directive()| now accept an options table rather\r\n    than a boolean \"force\" argument. To force a predicate or directive to\r\n    override an existing predicate or directive, use `{ force = true }`.\r\n```",
            "commit_id": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
            "created_at": "2024-02-16T17:05:20Z",
            "diff_hunk": "@@ -424,6 +424,21 @@ The following changes to existing APIs or features add new behavior.\n \n • |nvim_buf_call()| and |nvim_win_call()| now preserves any return value (NB: not multiple return values)\n \n+• Treesitter\n+  • |Query:iter_matches()|, |vim.treesitter.query.add_predicate()|, and\n+    |vim.treesitter.query.add_directive()| accept a new \"correct\" option which\n+    opts-in to correct matching behavior. When \"correct\" is set, the match\n+    table returned by each iteration of |Query:iter_matches()| (or that is\n+    passed to the handler function for predicates/directives) maps capture IDs\n+    to lists of nodes rather than to a single node. The latter behavior is\n+    incorrect and buggy, but is kept as the default for backward\n+    compatibility. In a future release, the correct behavior will become the\n+    default and the \"correct\" option will be removed.\n+  • |vim.treesitter.query.add_predicate()| and\n+    |vim.treesitter.query.add_directive()| now accept an options table rather\n+    than a boolean \"force\" argument. To force a predicate or directive to\n+    override an existing predicate or directive, use `{ force = true }`.",
            "html_url": "https://github.com/neovim/neovim/pull/24738#discussion_r1492755423",
            "id": 1492755423,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y-aPf",
            "original_commit_id": "8a05b3078946676ab845599e78c1f3d6f0bf7515",
            "original_line": 440,
            "original_position": 17,
            "original_start_line": 427,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1885609946,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1492755423/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-16T17:05:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1492755423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Regarding the predicates problem, something we can do is make that configurable as part of the predicate name:\r\n- Add a prefix (expected _before_ the `not`) that can be either `all`, `any`, or empty\r\n- Dependending on the prefix:\r\n  - Empty: expect a single node, execute the predicate on this node\r\n  - `any`: matches if any of the captured nodes matches the predicate\r\n  - `all`: left as an exercise to the reader\r\n\r\nThe implementation is fairly straightforward: each predicate handler is wrapped in something that handles the \"iteration\" part of the matching.\r\n\r\nThat would not require changing much on the user side: quantifiers are not supported yet, and all the predicates would thus behave as before. It could thus soften the breaking change associated with this PR.",
            "created_at": "2023-08-16T12:51:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1680547006",
            "id": 1680547006,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kKxy-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680547006/reactions"
            },
            "updated_at": "2023-08-16T12:51:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680547006",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
                "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
                "followers_url": "https://api.github.com/users/vigoux/followers",
                "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
                "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vigoux",
                "id": 39092278,
                "login": "vigoux",
                "node_id": "MDQ6VXNlcjM5MDkyMjc4",
                "organizations_url": "https://api.github.com/users/vigoux/orgs",
                "received_events_url": "https://api.github.com/users/vigoux/received_events",
                "repos_url": "https://api.github.com/users/vigoux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vigoux",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "What does upstream do? I worry a bit about adding (more) custom predicates that are incompatible...",
            "created_at": "2023-08-16T13:09:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1680576759",
            "id": 1680576759,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kK5D3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680576759/reactions"
            },
            "updated_at": "2023-08-16T13:09:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680576759",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For now, would it make sense to just apply predicates to all? 99% of the time there is only a single node for a capture.",
            "created_at": "2023-08-16T13:11:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1680579767",
            "id": 1680579767,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kK5y3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680579767/reactions"
            },
            "updated_at": "2023-08-16T13:12:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680579767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What does upstream do? I worry a bit about adding (more) custom predicates that are incompatible...\r\n\r\n~I just tested in the [online playground](https://tree-sitter.github.io/tree-sitter/playground) and it seems to just not match at all.~\r\n\r\n~Maybe _not matching_ when the captures are quantified is better ? We can maybe add new predicates that combine the other predicates in the future (by building a \"fake\" match or something ?).~\r\n\r\nEDIT: I was wrong.",
            "created_at": "2023-08-16T13:29:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1680610129",
            "id": 1680610129,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kLBNR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680610129/reactions"
            },
            "updated_at": "2023-08-16T13:50:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680610129",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
                "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
                "followers_url": "https://api.github.com/users/vigoux/followers",
                "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
                "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vigoux",
                "id": 39092278,
                "login": "vigoux",
                "node_id": "MDQ6VXNlcjM5MDkyMjc4",
                "organizations_url": "https://api.github.com/users/vigoux/orgs",
                "received_events_url": "https://api.github.com/users/vigoux/received_events",
                "repos_url": "https://api.github.com/users/vigoux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vigoux",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Maybe not matching when the captures are quantified is better ? We can maybe add new predicates that combine the other predicates in the future (by building a \"fake\" match or something ?).\r\n\r\nELI5? You mean not matching any predicated queries like: `(preproc_def)+ @test`? Wouldn't that be less elegant to implement than 'all'?",
            "created_at": "2023-08-16T13:39:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1680628068",
            "id": 1680628068,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kLFlk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680628068/reactions"
            },
            "updated_at": "2023-08-16T13:40:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680628068",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think the most expected behavior is if the predicate is applied to all matching captures independently (as if they were independent queries).\r\n\r\n",
            "created_at": "2023-08-16T13:41:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1680631107",
            "id": 1680631107,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kLGVD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680631107/reactions"
            },
            "updated_at": "2023-08-16T13:41:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680631107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Correction: the behavior of the predicate matching is to try to apply it on all captured nodes (see [here](https://github.com/tree-sitter/tree-sitter/blob/28b831456e2c3c1cc94d39caaee4c49533721ca9/lib/binding_web/binding.js#L833C12-L833C12))\r\n\r\nMaybe we should do the same for consistency then.",
            "created_at": "2023-08-16T13:48:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1680645506",
            "id": 1680645506,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kLJ2C",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680645506/reactions"
            },
            "updated_at": "2023-08-16T13:49:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680645506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
                "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
                "followers_url": "https://api.github.com/users/vigoux/followers",
                "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
                "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vigoux",
                "id": 39092278,
                "login": "vigoux",
                "node_id": "MDQ6VXNlcjM5MDkyMjc4",
                "organizations_url": "https://api.github.com/users/vigoux/orgs",
                "received_events_url": "https://api.github.com/users/vigoux/received_events",
                "repos_url": "https://api.github.com/users/vigoux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vigoux",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes (as long as they are broadly reasonable), and document it.\r\n\r\n(We could also raise this question upstream; maybe Max has changed his mind on that since then? @amaanq )",
            "created_at": "2023-08-16T14:14:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1680699742",
            "id": 1680699742,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kLXFe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680699742/reactions"
            },
            "updated_at": "2023-08-16T14:14:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680699742",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The query in nvim-treesitter/nvim-treesitter#5127 that I'm trying to match seems to be fixed with this PR\r\n```scheme\r\n; queries for golang\r\n(\r\n  (comment)+ @injection.content \r\n  .\r\n  (import_declaration\r\n    (import_spec path: (interpreted_string_literal) @_import_c))\r\n  (#eq? @_import_c \"\\\"C\\\"\")\r\n  (#lua-match? @injection.content \"^//\")\r\n  (#set! injection.language \"c\")\r\n  (#offset! @injection.content 0 2 0 0)\r\n  (#set! injection.combined))\r\n```\r\n\r\nAlso related: tree-sitter/tree-sitter#2468, it's suggested that the problem might come from downstream, as treesitter still captures all of the nodes, but right now, only the last node of the comment chain is highlighted properly",
            "created_at": "2023-08-16T14:16:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1680703891",
            "id": 1680703891,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kLYGT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680703891/reactions"
            },
            "updated_at": "2023-08-16T14:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680703891",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ahh, finally a genuine use for `injection.combined`.\r\n\r\nIt seems like this would also supersede https://github.com/neovim/neovim/pull/21310 (though I don't fully understand the problem that PR is trying to solve).",
            "created_at": "2023-08-16T14:19:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1680708843",
            "id": 1680708843,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kLZTr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680708843/reactions"
            },
            "updated_at": "2023-08-16T14:25:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680708843",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Yes (as long as they are broadly reasonable), and document it.\r\n> \r\n> (We could also raise this question upstream; maybe Max has changed his mind on that since then? @amaanq )\r\n\r\nI can ask him, but yeah currently predicates are meant to apply to every capture\r\n\r\n\r\n> What does upstream do? I worry a bit about adding (more) custom predicates that are incompatible...\r\n\r\nIf they make sense and are useful upstream could also adopt it",
            "created_at": "2023-08-16T17:37:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1681022421",
            "id": 1681022421,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kMl3V",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1681022421/reactions"
            },
            "updated_at": "2023-08-16T17:37:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1681022421",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29718261?v=4",
                "events_url": "https://api.github.com/users/amaanq/events{/privacy}",
                "followers_url": "https://api.github.com/users/amaanq/followers",
                "following_url": "https://api.github.com/users/amaanq/following{/other_user}",
                "gists_url": "https://api.github.com/users/amaanq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amaanq",
                "id": 29718261,
                "login": "amaanq",
                "node_id": "MDQ6VXNlcjI5NzE4MjYx",
                "organizations_url": "https://api.github.com/users/amaanq/orgs",
                "received_events_url": "https://api.github.com/users/amaanq/received_events",
                "repos_url": "https://api.github.com/users/amaanq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amaanq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amaanq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amaanq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'll change all the predicates to apply to every captures then. Though I think we can be clear about the fact that matches that are predicated _and_ quantified are unstable for now.\r\n\r\nFurthermore, I can't remember if nvim-treesitter still provides predicates, but they'll have to be updated to this new interface.",
            "created_at": "2023-08-17T07:37:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1681788993",
            "id": 1681788993,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kPhBB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1681788993/reactions"
            },
            "updated_at": "2023-08-17T07:37:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1681788993",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
                "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
                "followers_url": "https://api.github.com/users/vigoux/followers",
                "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
                "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vigoux",
                "id": 39092278,
                "login": "vigoux",
                "node_id": "MDQ6VXNlcjM5MDkyMjc4",
                "organizations_url": "https://api.github.com/users/vigoux/orgs",
                "received_events_url": "https://api.github.com/users/vigoux/received_events",
                "repos_url": "https://api.github.com/users/vigoux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vigoux",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Triple checking the actual implementation of the predicated quantified matches, the predicate returns `true` whenever any of the captured nodes satisfy the predicate:\r\nhttps://github.com/tree-sitter/tree-sitter/blob/eb3c2b378a509933c4b712aceac8c9c4ae28ca1a/lib/binding_web/binding.js#L861",
            "created_at": "2023-08-17T07:39:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1681792824",
            "id": 1681792824,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kPh84",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1681792824/reactions"
            },
            "updated_at": "2023-08-17T07:39:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1681792824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
                "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
                "followers_url": "https://api.github.com/users/vigoux/followers",
                "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
                "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vigoux",
                "id": 39092278,
                "login": "vigoux",
                "node_id": "MDQ6VXNlcjM5MDkyMjc4",
                "organizations_url": "https://api.github.com/users/vigoux/orgs",
                "received_events_url": "https://api.github.com/users/vigoux/received_events",
                "repos_url": "https://api.github.com/users/vigoux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vigoux",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'll change all the predicates to apply to every captures then. Though I think we can be clear about the fact that matches that are predicated _and_ quantified are unstable for now.\r\n> \r\n> Furthermore, I can't remember if nvim-treesitter still provides predicates, but they'll have to be updated to this new interface.\r\n\r\nThey do, although I've been trying to get rid of them. We could upstream `#has-type?`, which is the last genuine one (used in some indents).\r\n\r\nIf the change is breaking (which is OK), could you edit the PR description to show what the new format needs to be?",
            "created_at": "2023-08-17T07:42:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1681797665",
            "id": 1681797665,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5kPjIh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1681797665/reactions"
            },
            "updated_at": "2023-08-17T07:46:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1681797665",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "just for book keeping: supersedes #19563 #17099 #13343",
            "created_at": "2023-08-29T08:12:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1696974850",
            "id": 1696974850,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5lJcgC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1696974850/reactions"
            },
            "updated_at": "2023-08-29T08:12:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1696974850",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@vigoux https://github.com/tree-sitter/tree-sitter/pull/2532 is merged, if you can follow how upstream has it done that'd be great",
            "created_at": "2023-09-01T04:23:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1702135917",
            "id": 1702135917,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5ldIht",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1702135917/reactions"
            },
            "updated_at": "2023-09-01T04:23:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1702135917",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29718261?v=4",
                "events_url": "https://api.github.com/users/amaanq/events{/privacy}",
                "followers_url": "https://api.github.com/users/amaanq/followers",
                "following_url": "https://api.github.com/users/amaanq/following{/other_user}",
                "gists_url": "https://api.github.com/users/amaanq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amaanq",
                "id": 29718261,
                "login": "amaanq",
                "node_id": "MDQ6VXNlcjI5NzE4MjYx",
                "organizations_url": "https://api.github.com/users/amaanq/orgs",
                "received_events_url": "https://api.github.com/users/amaanq/received_events",
                "repos_url": "https://api.github.com/users/amaanq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amaanq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amaanq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amaanq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Can you summarize here how upstream behaves? It wasn't fully clear to me from the docs (as evidenced by my comment).",
            "created_at": "2023-09-01T07:17:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1702285383",
            "id": 1702285383,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5ldtBH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1702285383/reactions"
            },
            "updated_at": "2023-09-01T07:17:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1702285383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yeah I tacked on a footer that was a tl;dr about it but I'll explain more here:\r\n\r\nAll is default, for any-of, match, and eq (and we can/should extend that to other captures Neovim uses)\r\n\r\nThe any- prefix is used for match and eq, (doesn't make sense for any-of imo, I can't really see a use case for it)\r\n\r\nThe predicate api itself was unchanged (yes, there was flip-flopping about if eq? should allow multiple args but that never happened)\r\n\r\n",
            "created_at": "2023-09-01T10:44:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1702549658",
            "id": 1702549658,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5letia",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1702549658/reactions"
            },
            "updated_at": "2023-09-01T10:44:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1702549658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29718261?v=4",
                "events_url": "https://api.github.com/users/amaanq/events{/privacy}",
                "followers_url": "https://api.github.com/users/amaanq/followers",
                "following_url": "https://api.github.com/users/amaanq/following{/other_user}",
                "gists_url": "https://api.github.com/users/amaanq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amaanq",
                "id": 29718261,
                "login": "amaanq",
                "node_id": "MDQ6VXNlcjI5NzE4MjYx",
                "organizations_url": "https://api.github.com/users/amaanq/orgs",
                "received_events_url": "https://api.github.com/users/amaanq/received_events",
                "repos_url": "https://api.github.com/users/amaanq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amaanq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amaanq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amaanq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm trying to write a query for markdown which should capture multiple paragraphs, and combine them into single injection region:\r\n```\r\n(section\r\n  (\r\n    ((paragraph) @s (#match? @s \"^:::bib\"))\r\n    .\r\n    (paragraph)*\r\n    .\r\n    ((paragraph) @e (#match? @e \":::$\"))\r\n  ) @injection.content\r\n\r\n  (#set! injection.language \"bibtex\")\r\n  (#set! injection.include-children)\r\n  (#set! injection.combined)\r\n)\r\n```\r\nSo far every way I tried to do this only captures one of the paragraphs (usually the first one matched). Would this be possible after merging this PR?",
            "created_at": "2023-11-05T09:18:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1793681864",
            "id": 1793681864,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5q6WnI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1793681864/reactions"
            },
            "updated_at": "2023-11-05T09:18:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1793681864",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18511281?v=4",
                "events_url": "https://api.github.com/users/kamoshi/events{/privacy}",
                "followers_url": "https://api.github.com/users/kamoshi/followers",
                "following_url": "https://api.github.com/users/kamoshi/following{/other_user}",
                "gists_url": "https://api.github.com/users/kamoshi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kamoshi",
                "id": 18511281,
                "login": "kamoshi",
                "node_id": "MDQ6VXNlcjE4NTExMjgx",
                "organizations_url": "https://api.github.com/users/kamoshi/orgs",
                "received_events_url": "https://api.github.com/users/kamoshi/received_events",
                "repos_url": "https://api.github.com/users/kamoshi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kamoshi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kamoshi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kamoshi",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've just rebased on master and made a few other changes:\r\n\r\n- Builtin predicates and directives, the query linter, and some tests are updated to handle the new type of the `match` table (`table<integer, TSNode[]>`)\r\n- Added a few more test cases",
            "created_at": "2024-02-03T19:44:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1925439160",
            "id": 1925439160,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5yw964",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925439160/reactions"
            },
            "updated_at": "2024-02-03T19:44:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925439160",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I am not sure how best to handle metadata for directives which apply to multiple nodes. I'm thinking that for now we require directives to only be used on captures which map to only a single node.",
            "created_at": "2024-02-03T19:47:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1925439728",
            "id": 1925439728,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5yw-Dw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925439728/reactions"
            },
            "updated_at": "2024-02-03T19:47:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925439728",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We should follow upstream on this; they have implemented and documented this (because of this PR, actually). If there's something that is still open, we can ask them to extend this. ",
            "created_at": "2024-02-03T19:55:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1925441180",
            "id": 1925441180,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5yw-ac",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925441180/reactions"
            },
            "updated_at": "2024-02-03T19:55:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925441180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We should follow upstream on this; they have implemented and documented this (because of this PR, actually). If there's something that is still open, we can ask them to extend this.\r\n\r\nI think this is just a Neovim question. For example, `#offset!` adds a \"range\" field to the metadata table for a specific capture id. But if a capture ID maps to multiple nodes, how is that \"range\" represented? This is all handled internally within Neovim so it doesn't require any support from upstream, we just need to make a decision on how we want to handle this.\r\n\r\nFor now I think it should be fine to just not allow existing directives on captures that map to multiple nodes. This wasn't supported before anyway, so nobody should be relying on this behavior.",
            "created_at": "2024-02-03T20:00:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1925442060",
            "id": 1925442060,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5yw-oM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925442060/reactions"
            },
            "updated_at": "2024-02-03T20:00:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925442060",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ah, I see, upstream implemented predicates but not directives. Still, those are -- in general -- a thing upstream, so they could specify this (at least for the ones they have). \n\n@amaanq ?",
            "created_at": "2024-02-03T20:25:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1925447106",
            "id": 1925447106,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5yw_3C",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925447106/reactions"
            },
            "updated_at": "2024-02-03T20:25:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925447106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Overall, the semantics when it comes to multiple captures should be like \"all of the captures are ...\". \r\n\r\nThat is what is implemented here.\r\n\r\n>I don't think throwing errors when there are multiple captures is a good idea, because this can happen quite a lot often for any usual queries.\r\n\r\nWe don't do this. I'm not sure what you're referring to. We throw errors when a _directive_ is used with a single capture that matches multiple _nodes_, but I explained above why I think that's fine, for now.",
            "created_at": "2024-02-04T01:24:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1925513385",
            "id": 1925513385,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5yxQCp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925513385/reactions"
            },
            "updated_at": "2024-02-04T01:24:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925513385",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "One issue with this change is that every single match now allocates an extra table. I'm guessing this is why we are seeing some perf degradation that we should keep an eye on.\r\n\r\nOne way to alleviate this, which I'm not sure is a good idea, is for matches to return `Node|Node[]` instead of `Node`.\r\n\r\nAnother idea would be to give the match objects the same userdata-metatable treatmeant as TSNode, TSParser, etc.",
            "created_at": "2024-02-04T15:23:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1925792588",
            "id": 1925792588,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5yyUNM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925792588/reactions"
            },
            "updated_at": "2024-02-04T15:46:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925792588",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> think this is just a Neovim question. For example, `#offset!` adds a \"range\" field to the metadata table for a specific capture id. But if a capture ID maps to multiple nodes, how is that \"range\" represented? This is all handled internally within Neovim so it doesn't require any support from upstream, we just need to make a decision on how we want to handle this.\r\n\r\nI'll throw in my 2 cents, and note it doesn't have to end up being like this at all, but I think directives should apply to all the captured nodes, as opposed to predicates where sometimes behavior depends on the prefix of the predicate (any/all). It's useful to be able to inspect for *any* or *all* nodes evaluating to true for a certain predicate, since we care about the node's content, but when it comes to directives that is typically more about attaching metadata/applying some change to the entire capture as a whole, so I'd like to say that it should apply to every matching node when it comes to quantified captures. I might be forgetting a case where it's debatable to want this behavior though, since neovim has a lot more directives than upstream :sweat_smile:  ",
            "created_at": "2024-02-05T05:59:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1926284050",
            "id": 1926284050,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5y0MMS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1926284050/reactions"
            },
            "updated_at": "2024-02-05T05:59:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1926284050",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29718261?v=4",
                "events_url": "https://api.github.com/users/amaanq/events{/privacy}",
                "followers_url": "https://api.github.com/users/amaanq/followers",
                "following_url": "https://api.github.com/users/amaanq/following{/other_user}",
                "gists_url": "https://api.github.com/users/amaanq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amaanq",
                "id": 29718261,
                "login": "amaanq",
                "node_id": "MDQ6VXNlcjI5NzE4MjYx",
                "organizations_url": "https://api.github.com/users/amaanq/orgs",
                "received_events_url": "https://api.github.com/users/amaanq/received_events",
                "repos_url": "https://api.github.com/users/amaanq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amaanq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amaanq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amaanq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">One issue with this change is that every single match now allocates an extra table. I'm guessing this is why we are seeing some perf degradation that we should keep an eye on.\r\n\r\nWe are also re-creating the `match` table itself, rather than reusing it on each iteration of `iter_captures`. @wookayin was suggesting to do something similar in https://github.com/neovim/neovim/pull/27274. I don't know what kind of performance impact that has, but it's something to bear in mind.",
            "created_at": "2024-02-05T14:05:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1927085276",
            "id": 1927085276,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5y3Pzc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1927085276/reactions"
            },
            "updated_at": "2024-02-05T14:05:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1927085276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The current implementation punts the handling of \"any\" vs \"all\" semantics to the predicate handlers themselves by adding a new `any` argument to the predicate function signature. This is different from how `not-` is handled: the predicate handlers have no knowledge that the `not-` prefix is applied, the result of the handler is simply inverted in `match_preds`. We could do something similar for \"any\" vs \"all\", but this would require changing the implementation of all handlers to instead evaluate per _node_ (instead of per capture ID). I think this is probably the \"better\" solution overall, but is a much more severe breaking change.\r\n\r\nThoughts?",
            "created_at": "2024-02-05T14:08:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1927090838",
            "id": 1927090838,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5y3RKW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1927090838/reactions"
            },
            "updated_at": "2024-02-05T14:08:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1927090838",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> but this would require changing the implementation of all handlers to instead evaluate per node (instead of per capture ID). I think this is probably the \"better\" solution overall, but is a much more severe breaking change.\r\n\r\nWe can refactor and change the implementation of the internal logic of existing handlers in such a way, but I believe we actually don't need to change the signature of (outermost) predicate functions. After all, a predicate is a function that tells true or false for a set of nodes within a match, and I think `any-` vs `all-` semantics is something we can hide under the abstraction of predicate/directive (handler) APIs. Please see also https://github.com/neovim/neovim/pull/24738#discussion_r1478864844 for an example.\r\n\r\nThat said, it'd also be a good idea to provider a helper function to allow users to easily write `any-` or `all-` predicates (because these two would be by far the most common) by wrapping a per-node predicate, if any, into a full predicate.",
            "created_at": "2024-02-05T20:31:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1928044559",
            "id": 1928044559,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5y66AP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1928044559/reactions"
            },
            "updated_at": "2024-02-05T20:53:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1928044559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There was some discussion around performance regressions. I wrote a script to run `iter_matches` over `main.c` 100 times and calculate the elapsed time, both on `master` and with this PR (measurements are elapsed times in microseconds):\r\n\r\n**master**:\r\n```\r\nN=100, mean=25127.017020, std=1769.966197, min=22116.331000, max=33574.443000\r\n```\r\n\r\n**PR**:\r\n```\r\nN=100, mean=26696.668110, std=2104.962711, min=23944.352000, max=36450.894000\r\n```\r\n\r\n<details>\r\n<summary>Full script</summary>\r\n\r\n```lua\r\nlocal query = vim.treesitter.query.get(\"c\", \"highlights\")\r\nlocal parser = vim.treesitter.get_parser(0, \"c\")\r\nlocal root = parser:parse()[1]:root()\r\n\r\nlocal samples = {}\r\n\r\nlocal function compute()\r\n  local sum = 0\r\n  local sumsq = 0\r\n  local min = math.huge\r\n  local max = 0\r\n  local n = #samples\r\n  for i = 1, n  do\r\n    local sample = samples[i]\r\n    sum = sum + sample\r\n    sumsq = sumsq + (sample * sample)\r\n    if sample > max then\r\n      max = sample\r\n    end\r\n    if sample < min then\r\n      min = sample\r\n    end\r\n  end\r\n\r\n  local mean = sum / n\r\n  local sqsum = sum * sum\r\n  local std = math.sqrt((sumsq - (sqsum / n)) / (n - 1))\r\n  print(string.format('N=%d, mean=%f, std=%f, min=%f, max=%f', n, mean, std, min, max))\r\n  samples = {}\r\nend\r\n\r\nfor i = 1, 100 do\r\n  local start = vim.uv.hrtime()\r\n  for pattern, match, metadata in query:iter_matches(root, 0) do\r\n  end\r\n  local elapsed = vim.uv.hrtime() - start\r\n  samples[#samples + 1] = elapsed / 1000\r\nend\r\ncompute()\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>CPU Info</summary>\r\n\r\n```\r\nArchitecture:                       x86_64\r\nCPU op-mode(s):                     32-bit, 64-bit\r\nAddress sizes:                      48 bits physical, 48 bits virtual\r\nByte Order:                         Little Endian\r\nCPU(s):                             16\r\nOn-line CPU(s) list:                0-15\r\nVendor ID:                          AuthenticAMD\r\nModel name:                         AMD Ryzen 7 7700X 8-Core Processor\r\nCPU family:                         25\r\nModel:                              97\r\nThread(s) per core:                 2\r\nCore(s) per socket:                 8\r\nSocket(s):                          1\r\nStepping:                           2\r\nCPU(s) scaling MHz:                 58%\r\nCPU max MHz:                        5573.0000\r\nCPU min MHz:                        400.0000\r\nBogoMIPS:                           9000.51\r\nFlags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good amd_lbr_v2 nopl nonstop_tsc cpuid extd_apicid aperfmperf rapl pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 hw_pstate ssbd mba perfmon_v2 ibrs ibpb stibp ibrs_enhanced vmmcall fsgsbase bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local user_shstk avx512_bf16 clzero irperf xsaveerptr rdpru wbnoinvd cppc arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif x2avic v_spec_ctrl vnmi avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq rdpid overflow_recov succor smca fsrm flush_l1d\r\nVirtualization:                     AMD-V\r\nL1d cache:                          256 KiB (8 instances)\r\nL1i cache:                          256 KiB (8 instances)\r\nL2 cache:                           8 MiB (8 instances)\r\nL3 cache:                           32 MiB (1 instance)\r\nNUMA node(s):                       1\r\nNUMA node0 CPU(s):                  0-15\r\nVulnerability Gather data sampling: Not affected\r\nVulnerability Itlb multihit:        Not affected\r\nVulnerability L1tf:                 Not affected\r\nVulnerability Mds:                  Not affected\r\nVulnerability Meltdown:             Not affected\r\nVulnerability Mmio stale data:      Not affected\r\nVulnerability Retbleed:             Not affected\r\nVulnerability Spec rstack overflow: Vulnerable: Safe RET, no microcode\r\nVulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl\r\nVulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization\r\nVulnerability Spectre v2:           Mitigation; Enhanced / Automatic IBRS, IBPB conditional, STIBP always-on, RSB filling, PBRSB-eIBRS Not affected\r\nVulnerability Srbds:                Not affected\r\nVulnerability Tsx async abort:      Not affected\r\n```\r\n</details>\r\n\r\nSo the changes in this PR do make `iter_matches` a _little_ slower, but not meaningfully so.",
            "created_at": "2024-02-06T03:09:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1928703421",
            "id": 1928703421,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5y9a29",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1928703421/reactions"
            },
            "updated_at": "2024-02-08T14:26:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1928703421",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason, @lewis6991, and I discussed this in `#neovim-dev` on Matrix and came to the conclusion that this would be a massively breaking change as-is. So we must support a standard deprecation process. This will make upgrading to 0.10 much smoother but means that plugin authors must opt-in to correct behavior.\r\n\r\n`iter_matches` is soft-deprecated in 0.10 and replaced with `iter_matches2`. The usage and functionality is identical, except that the `match` table correctly maps capture IDs to _lists_ of nodes, rather than to a single node.\r\n\r\nAll builtin directives and predicates support the correct behavior. Callers of `add_predicate` and `add_directive` must opt-in to the correct behavior using a `correct` option:\r\n\r\n```lua\r\nvim.treesitter.query.add_predicate(\"foo?\", function(...) ... end, { correct = true })\r\n```\r\n\r\nYes, I know this option name is terrible. Yes, I know it sucks that correct usage of the API is penalized via more verbosity. I am 100% open to better ideas.\r\n\r\nThe `correct` option will become the default and be removed in 0.12. `iter_matches` will also be removed at that time, at which point maybe we can rename `iter_matches2` back to `iter_matches`.",
            "created_at": "2024-02-14T03:37:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1943034860",
            "id": 1943034860,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5z0Fvs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1943034860/reactions"
            },
            "updated_at": "2024-02-14T03:37:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1943034860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The correct option will become the default and be removed in 0.12. iter_matches will also be removed at that time, at which point maybe we can rename iter_matches2 back to iter_matches.\r\n\r\nI think for treesitter (due to its experimental status), we can accelerate the strategy. And absolutely rename afterwards. (Or rather, switch the default of the option and then later remove it.) My point was merely not to _instantly_ break all consumers and give them a bit of a heads-up.\r\n\r\nMaybe\r\n1. make new behavior opt-in for 0.10\r\n2. opt-out for 0.11 (i.e., immediately after 0.10 release)\r\n3. mandatory (remove option) for 0.12\r\n\r\nI would even consider accelerating 3. to happen close to the 0.11 release. This is a necessary change that fixes a huge and longstanding issue.",
            "created_at": "2024-02-14T08:51:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1943318653",
            "id": 1943318653,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM5z1LB9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1943318653/reactions"
            },
            "updated_at": "2024-02-14T10:04:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1943318653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'd still prefer if this option be named differently (my current favorite is `all`), but that's not a blocker for me.",
            "created_at": "2024-02-16T17:06:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1948901722",
            "id": 1948901722,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM50KeFa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1948901722/reactions"
            },
            "updated_at": "2024-02-16T17:06:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1948901722",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks a ton @gpanders, seriously awesome work!",
            "created_at": "2024-02-16T17:57:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-1948990630",
            "id": 1948990630,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM50Kzym",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 2,
                "laugh": 0,
                "rocket": 3,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1948990630/reactions"
            },
            "updated_at": "2024-02-16T17:57:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1948990630",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29718261?v=4",
                "events_url": "https://api.github.com/users/amaanq/events{/privacy}",
                "followers_url": "https://api.github.com/users/amaanq/followers",
                "following_url": "https://api.github.com/users/amaanq/following{/other_user}",
                "gists_url": "https://api.github.com/users/amaanq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amaanq",
                "id": 29718261,
                "login": "amaanq",
                "node_id": "MDQ6VXNlcjI5NzE4MjYx",
                "organizations_url": "https://api.github.com/users/amaanq/orgs",
                "received_events_url": "https://api.github.com/users/amaanq/received_events",
                "repos_url": "https://api.github.com/users/amaanq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amaanq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amaanq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amaanq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Is there an issue tracking this?\r\nBased on this [issue](https://github.com/nvim-treesitter/nvim-treesitter/issues/3196) it looks like this is related to for example folding nodes with a query such as this:\r\n`((import_declaration)+ @fold)`\r\n\r\nBut it doesn't seem to be working. ",
            "created_at": "2024-11-27T15:00:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/24738#issuecomment-2504096624",
            "id": 2504096624,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
            "node_id": "IC_kwDOAPphoM6VQXtw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2504096624/reactions"
            },
            "updated_at": "2024-11-28T08:31:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2504096624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25078429?v=4",
                "events_url": "https://api.github.com/users/oysandvik94/events{/privacy}",
                "followers_url": "https://api.github.com/users/oysandvik94/followers",
                "following_url": "https://api.github.com/users/oysandvik94/following{/other_user}",
                "gists_url": "https://api.github.com/users/oysandvik94/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oysandvik94",
                "id": 25078429,
                "login": "oysandvik94",
                "node_id": "MDQ6VXNlcjI1MDc4NDI5",
                "organizations_url": "https://api.github.com/users/oysandvik94/orgs",
                "received_events_url": "https://api.github.com/users/oysandvik94/received_events",
                "repos_url": "https://api.github.com/users/oysandvik94/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oysandvik94/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oysandvik94/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oysandvik94",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24738/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/24738/commits",
    "created_at": "2023-08-16T12:39:14Z",
    "diff_url": "https://github.com/neovim/neovim/pull/24738.diff",
    "draft": false,
    "head": {
        "label": "vigoux:fix/query-quantifiers",
        "ref": "fix/query-quantifiers",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/vigoux/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/vigoux/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/vigoux/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/vigoux/neovim/branches{/branch}",
            "clone_url": "https://github.com/vigoux/neovim.git",
            "collaborators_url": "https://api.github.com/repos/vigoux/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/vigoux/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/vigoux/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/vigoux/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/vigoux/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/vigoux/neovim/contributors",
            "created_at": "2020-04-14T17:09:25Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/vigoux/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/vigoux/neovim/downloads",
            "events_url": "https://api.github.com/repos/vigoux/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/vigoux/neovim/forks",
            "full_name": "vigoux/neovim",
            "git_commits_url": "https://api.github.com/repos/vigoux/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/vigoux/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/vigoux/neovim/git/tags{/sha}",
            "git_url": "git://github.com/vigoux/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/vigoux/neovim/hooks",
            "html_url": "https://github.com/vigoux/neovim",
            "id": 255673198,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/vigoux/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/vigoux/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/vigoux/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/vigoux/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/vigoux/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/vigoux/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/vigoux/neovim/merges",
            "milestones_url": "https://api.github.com/repos/vigoux/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNTU2NzMxOTg=",
            "notifications_url": "https://api.github.com/repos/vigoux/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
                "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
                "followers_url": "https://api.github.com/users/vigoux/followers",
                "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
                "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vigoux",
                "id": 39092278,
                "login": "vigoux",
                "node_id": "MDQ6VXNlcjM5MDkyMjc4",
                "organizations_url": "https://api.github.com/users/vigoux/orgs",
                "received_events_url": "https://api.github.com/users/vigoux/received_events",
                "repos_url": "https://api.github.com/users/vigoux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vigoux",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/vigoux/neovim/pulls{/number}",
            "pushed_at": "2024-02-16T17:14:49Z",
            "releases_url": "https://api.github.com/repos/vigoux/neovim/releases{/id}",
            "size": 248253,
            "ssh_url": "git@github.com:vigoux/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/vigoux/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/vigoux/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/vigoux/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/vigoux/neovim/subscription",
            "svn_url": "https://github.com/vigoux/neovim",
            "tags_url": "https://api.github.com/repos/vigoux/neovim/tags",
            "teams_url": "https://api.github.com/repos/vigoux/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/vigoux/neovim/git/trees{/sha}",
            "updated_at": "2020-05-15T10:06:46Z",
            "url": "https://api.github.com/repos/vigoux/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
            "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
            "followers_url": "https://api.github.com/users/vigoux/followers",
            "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
            "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/vigoux",
            "id": 39092278,
            "login": "vigoux",
            "node_id": "MDQ6VXNlcjM5MDkyMjc4",
            "organizations_url": "https://api.github.com/users/vigoux/orgs",
            "received_events_url": "https://api.github.com/users/vigoux/received_events",
            "repos_url": "https://api.github.com/users/vigoux/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/vigoux",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/24738",
    "id": 1477406405,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24738",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": true,
    "merge_commit_sha": "bd5008de07d29a6457ddc7fe13f9f85c9c4619d2",
    "merged_at": "2024-02-16T17:54:47Z",
    "milestone": {
        "closed_at": "2024-05-16T14:11:42Z",
        "closed_issues": 441,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": "2024-05-12T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 0,
        "state": "closed",
        "title": "0.10",
        "updated_at": "2024-10-13T18:39:03Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "PR_kwDOAPphoM5YD27F",
    "number": 24738,
    "patch_url": "https://github.com/neovim/neovim/pull/24738.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/24738/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/dd2500d933ca0f5428b00afd4a8168dbbb2b80d8",
    "title": "fix(treesitter): correctly handle query quantifiers",
    "updated_at": "2024-11-28T08:31:42Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/24738",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
        "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
        "followers_url": "https://api.github.com/users/vigoux/followers",
        "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
        "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vigoux",
        "id": 39092278,
        "login": "vigoux",
        "node_id": "MDQ6VXNlcjM5MDkyMjc4",
        "organizations_url": "https://api.github.com/users/vigoux/orgs",
        "received_events_url": "https://api.github.com/users/vigoux/received_events",
        "repos_url": "https://api.github.com/users/vigoux/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vigoux",
        "user_view_type": "public"
    }
}