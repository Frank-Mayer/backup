{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/18161/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/18161/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/18161"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/18161"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/18161/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/18161"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ab709eae6665e38f3bb7b524eef0466980cc749a"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5096,
            "forks_count": 5096,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1716,
            "open_issues_count": 1716,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-01-02T01:20:52Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 248449,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 72293,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-01-02T00:18:48Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 72293,
            "watchers_count": 72293,
            "web_commit_signoff_required": false
        },
        "sha": "e73ef5c09281fa45ce6b0a0959467722af2840e8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "No tests yet just wanted to get this up to see if this sort of implementation looks good. (See [this comment below](https://github.com/neovim/neovim/pull/18161#issuecomment-1101435066) for a demo screencap.)\r\n\r\nDocs can probably be improved, basically just copy-pasted the `vim.ui.select` docs and made the necessary changes.\r\n\r\nSee #17044",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18161#discussion_r852136890"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18161"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/852136890"
                }
            },
            "author_association": "MEMBER",
            "body": "There a better way of doing this maybe?",
            "commit_id": "ab709eae6665e38f3bb7b524eef0466980cc749a",
            "created_at": "2022-04-18T14:00:18Z",
            "diff_hunk": "@@ -55,6 +55,90 @@ function M.select(items, opts, on_choice)\n   end\n end\n \n+--- Prompts the user to pick one or multiple items from a collection of entries\n+---\n+---@param items table Arbitrary items\n+---@param opts table Additional options\n+---     - prompt (string|nil)\n+---               Text of the prompt. Defaults to `Select from list or press return to confirm: `\n+---     - format_item (function item -> text)\n+---               Function to format an\n+---               individual item from `items`. Defaults to `tostring`.\n+---     - kind (string|nil)\n+---               Arbitrary hint string indicating the item shape.\n+---               Plugins reimplementing `vim.ui.select_many` may wish to\n+---               use this to infer the structure or semantics of\n+---               `items`, or the context in which select_many() was called.\n+---@param on_choices function ((chosen_items|nil, indexes|nil) -> ())\n+---               Called once the user made a choice.\n+---               `indexes` is a list of 1-based indexes of `chosen_items` within `items`.\n+---               `nil` if the user aborted the dialog without selecting any items.\n+---\n+---\n+--- Example:\n+--- <pre>\n+--- vim.ui.select_many({ 'cheese', 'pepperoni', 'anchovies' }, {\n+---     prompt = 'Select your toppings:',\n+---     format_item = function(item)\n+---         return \"some \" .. item\n+---     end,\n+--- }, function(choices)\n+---     if choices then\n+---         for _, item in ipairs(choices) do\n+---             -- add topping to pizza or whatever\n+---         end\n+---     end\n+--- end)\n+--- </pre>\n+function M.select_many(items, opts, on_choices)\n+  vim.validate {\n+    items = { items, 'table', false },\n+    on_choices = { on_choices, 'function', false },\n+  }\n+  opts = opts or {}\n+  local selected = {}\n+  local selected_indexes = {}\n+  local choices = {opts.prompt or 'Select from list or press return to confirm: '}\n+  local format_item = opts.format_item or tostring\n+  for i, item in pairs(items) do\n+    table.insert(choices, string.format('%d: %s', i, format_item(item)))\n+  end\n+  while true do\n+    local chosen = vim.fn.inputlist(choices)\n+    if chosen == 0 then\n+      break\n+    else\n+      if vim.tbl_contains(selected, items[chosen]) then\n+        selected[chosen] = nil\n+        selected_indexes[chosen] = nil\n+\n+        choices[chosen+1] = choices[chosen+1]:sub(3, #choices[chosen+1])",
            "html_url": "https://github.com/neovim/neovim/pull/18161#discussion_r852136890",
            "id": 852136890,
            "line": 109,
            "node_id": "PRRC_kwDOAPphoM4yypO6",
            "original_commit_id": "5207ff00f03c8e88df7c30d72eb69da3cc7470b5",
            "original_line": 115,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/lua/vim/ui.lua",
            "position": 55,
            "pull_request_review_id": 944431845,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18161",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852136890/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-18T14:01:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852136890",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46855713?v=4",
                "events_url": "https://api.github.com/users/smolck/events{/privacy}",
                "followers_url": "https://api.github.com/users/smolck/followers",
                "following_url": "https://api.github.com/users/smolck/following{/other_user}",
                "gists_url": "https://api.github.com/users/smolck/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/smolck",
                "id": 46855713,
                "login": "smolck",
                "node_id": "MDQ6VXNlcjQ2ODU1NzEz",
                "organizations_url": "https://api.github.com/users/smolck/orgs",
                "received_events_url": "https://api.github.com/users/smolck/received_events",
                "repos_url": "https://api.github.com/users/smolck/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/smolck/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/smolck/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/smolck"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18161#discussion_r852137004"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18161"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/852137004"
                }
            },
            "author_association": "MEMBER",
            "body": "This TODO",
            "commit_id": "ab709eae6665e38f3bb7b524eef0466980cc749a",
            "created_at": "2022-04-18T14:00:32Z",
            "diff_hunk": "@@ -55,6 +55,90 @@ function M.select(items, opts, on_choice)\n   end\n end\n \n+--- Prompts the user to pick one or multiple items from a collection of entries\n+---\n+---@param items table Arbitrary items\n+---@param opts table Additional options\n+---     - prompt (string|nil)\n+---               Text of the prompt. Defaults to `Select from list or press return to confirm: `\n+---     - format_item (function item -> text)\n+---               Function to format an\n+---               individual item from `items`. Defaults to `tostring`.\n+---     - kind (string|nil)\n+---               Arbitrary hint string indicating the item shape.\n+---               Plugins reimplementing `vim.ui.select_many` may wish to\n+---               use this to infer the structure or semantics of\n+---               `items`, or the context in which select_many() was called.\n+---@param on_choices function ((chosen_items|nil, indexes|nil) -> ())\n+---               Called once the user made a choice.\n+---               `indexes` is a list of 1-based indexes of `chosen_items` within `items`.\n+---               `nil` if the user aborted the dialog without selecting any items.\n+---\n+---\n+--- Example:\n+--- <pre>\n+--- vim.ui.select_many({ 'cheese', 'pepperoni', 'anchovies' }, {\n+---     prompt = 'Select your toppings:',\n+---     format_item = function(item)\n+---         return \"some \" .. item\n+---     end,\n+--- }, function(choices)\n+---     if choices then\n+---         for _, item in ipairs(choices) do\n+---             -- add topping to pizza or whatever\n+---         end\n+---     end\n+--- end)\n+--- </pre>\n+function M.select_many(items, opts, on_choices)\n+  vim.validate {\n+    items = { items, 'table', false },\n+    on_choices = { on_choices, 'function', false },\n+  }\n+  opts = opts or {}\n+  local selected = {}\n+  local selected_indexes = {}\n+  local choices = {opts.prompt or 'Select from list or press return to confirm: '}\n+  local format_item = opts.format_item or tostring\n+  for i, item in pairs(items) do\n+    table.insert(choices, string.format('%d: %s', i, format_item(item)))\n+  end\n+  while true do\n+    local chosen = vim.fn.inputlist(choices)\n+    if chosen == 0 then\n+      break\n+    else\n+      if vim.tbl_contains(selected, items[chosen]) then\n+        selected[chosen] = nil\n+        selected_indexes[chosen] = nil\n+\n+        choices[chosen+1] = choices[chosen+1]:sub(3, #choices[chosen+1])\n+      else\n+        selected[chosen] = items[chosen]\n+        selected_indexes[chosen] = chosen\n+        choices[chosen+1] = '* ' .. choices[chosen+1]\n+      end\n+      vim.cmd('redraw')\n+    end\n+  end\n+  if #selected > 0 then\n+    -- Reconstruct tables with table.insert to ensure a list-like table,\n+    -- e.g. selected could end up like { [1] = 'choice 1', [3] = 'choice 3' }\n+    -- and this fixes that.\n+    --\n+    -- TODO(smolck): There's probably a better way to do this?",
            "html_url": "https://github.com/neovim/neovim/pull/18161#discussion_r852137004",
            "id": 852137004,
            "line": 123,
            "node_id": "PRRC_kwDOAPphoM4yypQs",
            "original_commit_id": "5207ff00f03c8e88df7c30d72eb69da3cc7470b5",
            "original_line": 129,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/ui.lua",
            "position": 69,
            "pull_request_review_id": 944431845,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18161",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852137004/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-18T14:01:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852137004",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46855713?v=4",
                "events_url": "https://api.github.com/users/smolck/events{/privacy}",
                "followers_url": "https://api.github.com/users/smolck/followers",
                "following_url": "https://api.github.com/users/smolck/following{/other_user}",
                "gists_url": "https://api.github.com/users/smolck/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/smolck",
                "id": 46855713,
                "login": "smolck",
                "node_id": "MDQ6VXNlcjQ2ODU1NzEz",
                "organizations_url": "https://api.github.com/users/smolck/orgs",
                "received_events_url": "https://api.github.com/users/smolck/received_events",
                "repos_url": "https://api.github.com/users/smolck/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/smolck/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/smolck/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/smolck"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18161#discussion_r852137181"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18161"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/852137181"
                }
            },
            "author_association": "MEMBER",
            "body": "Better default prompt?",
            "commit_id": "ab709eae6665e38f3bb7b524eef0466980cc749a",
            "created_at": "2022-04-18T14:00:50Z",
            "diff_hunk": "@@ -55,6 +55,90 @@ function M.select(items, opts, on_choice)\n   end\n end\n \n+--- Prompts the user to pick one or multiple items from a collection of entries\n+---\n+---@param items table Arbitrary items\n+---@param opts table Additional options\n+---     - prompt (string|nil)\n+---               Text of the prompt. Defaults to `Select from list or press return to confirm: `\n+---     - format_item (function item -> text)\n+---               Function to format an\n+---               individual item from `items`. Defaults to `tostring`.\n+---     - kind (string|nil)\n+---               Arbitrary hint string indicating the item shape.\n+---               Plugins reimplementing `vim.ui.select_many` may wish to\n+---               use this to infer the structure or semantics of\n+---               `items`, or the context in which select_many() was called.\n+---@param on_choices function ((chosen_items|nil, indexes|nil) -> ())\n+---               Called once the user made a choice.\n+---               `indexes` is a list of 1-based indexes of `chosen_items` within `items`.\n+---               `nil` if the user aborted the dialog without selecting any items.\n+---\n+---\n+--- Example:\n+--- <pre>\n+--- vim.ui.select_many({ 'cheese', 'pepperoni', 'anchovies' }, {\n+---     prompt = 'Select your toppings:',\n+---     format_item = function(item)\n+---         return \"some \" .. item\n+---     end,\n+--- }, function(choices)\n+---     if choices then\n+---         for _, item in ipairs(choices) do\n+---             -- add topping to pizza or whatever\n+---         end\n+---     end\n+--- end)\n+--- </pre>\n+function M.select_many(items, opts, on_choices)\n+  vim.validate {\n+    items = { items, 'table', false },\n+    on_choices = { on_choices, 'function', false },\n+  }\n+  opts = opts or {}\n+  local selected = {}\n+  local selected_indexes = {}\n+  local choices = {opts.prompt or 'Select from list or press return to confirm: '}",
            "html_url": "https://github.com/neovim/neovim/pull/18161#discussion_r852137181",
            "id": 852137181,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4yypTd",
            "original_commit_id": "5207ff00f03c8e88df7c30d72eb69da3cc7470b5",
            "original_line": 101,
            "original_position": 47,
            "original_start_line": null,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 944431845,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18161",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852137181/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-18T14:01:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852137181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46855713?v=4",
                "events_url": "https://api.github.com/users/smolck/events{/privacy}",
                "followers_url": "https://api.github.com/users/smolck/followers",
                "following_url": "https://api.github.com/users/smolck/following{/other_user}",
                "gists_url": "https://api.github.com/users/smolck/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/smolck",
                "id": 46855713,
                "login": "smolck",
                "node_id": "MDQ6VXNlcjQ2ODU1NzEz",
                "organizations_url": "https://api.github.com/users/smolck/orgs",
                "received_events_url": "https://api.github.com/users/smolck/received_events",
                "repos_url": "https://api.github.com/users/smolck/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/smolck/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/smolck/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/smolck"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18161#discussion_r852150362"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18161"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/852150362"
                }
            },
            "author_association": "MEMBER",
            "body": "I know the docs for `ui.select` uses the verb \"pick\", but IMO we should stick to a single verb (\"select\" in this case).\r\n\r\n```suggestion\r\n--- Prompts the user to select one or more items from a collection of entries\r\n```",
            "commit_id": "ab709eae6665e38f3bb7b524eef0466980cc749a",
            "created_at": "2022-04-18T14:21:12Z",
            "diff_hunk": "@@ -55,6 +55,90 @@ function M.select(items, opts, on_choice)\n   end\n end\n \n+--- Prompts the user to pick one or multiple items from a collection of entries",
            "html_url": "https://github.com/neovim/neovim/pull/18161#discussion_r852150362",
            "id": 852150362,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4yysha",
            "original_commit_id": "c6b80b908a05365c9501c07627675a69e353b675",
            "original_line": 58,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 944451680,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18161",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852150362/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-18T14:36:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852150362",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18161#discussion_r852151712"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18161"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/852151712"
                }
            },
            "author_association": "MEMBER",
            "body": "Weird line break here",
            "commit_id": "ab709eae6665e38f3bb7b524eef0466980cc749a",
            "created_at": "2022-04-18T14:23:06Z",
            "diff_hunk": "@@ -55,6 +55,90 @@ function M.select(items, opts, on_choice)\n   end\n end\n \n+--- Prompts the user to pick one or multiple items from a collection of entries\n+---\n+---@param items table Arbitrary items\n+---@param opts table Additional options\n+---     - prompt (string|nil)\n+---               Text of the prompt. Defaults to `Select from list or press return to confirm: `\n+---     - format_item (function item -> text)\n+---               Function to format an\n+---               individual item from `items`. Defaults to `tostring`.",
            "html_url": "https://github.com/neovim/neovim/pull/18161#discussion_r852151712",
            "id": 852151712,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4yys2g",
            "original_commit_id": "c6b80b908a05365c9501c07627675a69e353b675",
            "original_line": 66,
            "original_position": 12,
            "original_start_line": 65,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 944451680,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18161",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852151712/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-04-18T14:36:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852151712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18161#discussion_r852153177"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18161"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/852153177"
                }
            },
            "author_association": "MEMBER",
            "body": "Fun example, but can you think of something perhaps more directly related to something one might do in Neovim? For example the docs for `ui.select` show an example of choosing between tabs and spaces. Something in that same spirit would be better, I think.",
            "commit_id": "ab709eae6665e38f3bb7b524eef0466980cc749a",
            "created_at": "2022-04-18T14:25:06Z",
            "diff_hunk": "@@ -55,6 +55,90 @@ function M.select(items, opts, on_choice)\n   end\n end\n \n+--- Prompts the user to pick one or multiple items from a collection of entries\n+---\n+---@param items table Arbitrary items\n+---@param opts table Additional options\n+---     - prompt (string|nil)\n+---               Text of the prompt. Defaults to `Select from list or press return to confirm: `\n+---     - format_item (function item -> text)\n+---               Function to format an\n+---               individual item from `items`. Defaults to `tostring`.\n+---     - kind (string|nil)\n+---               Arbitrary hint string indicating the item shape.\n+---               Plugins reimplementing `vim.ui.select_many` may wish to\n+---               use this to infer the structure or semantics of\n+---               `items`, or the context in which select_many() was called.\n+---@param on_choices function ((chosen_items|nil, indexes|nil) -> ())\n+---               Called once the user made a choice.\n+---               `indexes` is a list of 1-based indexes of `chosen_items` within `items`.\n+---               `nil` if the user aborted the dialog without selecting any items.\n+---\n+---\n+--- Example:\n+--- <pre>\n+--- vim.ui.select_many({ 'cheese', 'pepperoni', 'anchovies' }, {\n+---     prompt = 'Select your toppings:',\n+---     format_item = function(item)\n+---         return \"some \" .. item\n+---     end,\n+--- }, function(choices)\n+---     if choices then\n+---         for _, item in ipairs(choices) do\n+---             -- add topping to pizza or whatever\n+---         end\n+---     end\n+--- end)",
            "html_url": "https://github.com/neovim/neovim/pull/18161#discussion_r852153177",
            "id": 852153177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4yytNZ",
            "original_commit_id": "c6b80b908a05365c9501c07627675a69e353b675",
            "original_line": 91,
            "original_position": 37,
            "original_start_line": 80,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 944451680,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18161",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852153177/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-04-18T14:36:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852153177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18161#discussion_r852157085"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18161"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/852157085"
                }
            },
            "author_association": "MEMBER",
            "body": "The `inputlist` output uses `<Enter>` so use that here too for consistency:\r\n\r\n```suggestion\r\n  local choices = {opts.prompt or 'Select from list or <Enter> to confirm: '}\r\n```",
            "commit_id": "ab709eae6665e38f3bb7b524eef0466980cc749a",
            "created_at": "2022-04-18T14:30:37Z",
            "diff_hunk": "@@ -55,6 +55,90 @@ function M.select(items, opts, on_choice)\n   end\n end\n \n+--- Prompts the user to pick one or multiple items from a collection of entries\n+---\n+---@param items table Arbitrary items\n+---@param opts table Additional options\n+---     - prompt (string|nil)\n+---               Text of the prompt. Defaults to `Select from list or press return to confirm: `\n+---     - format_item (function item -> text)\n+---               Function to format an\n+---               individual item from `items`. Defaults to `tostring`.\n+---     - kind (string|nil)\n+---               Arbitrary hint string indicating the item shape.\n+---               Plugins reimplementing `vim.ui.select_many` may wish to\n+---               use this to infer the structure or semantics of\n+---               `items`, or the context in which select_many() was called.\n+---@param on_choices function ((chosen_items|nil, indexes|nil) -> ())\n+---               Called once the user made a choice.\n+---               `indexes` is a list of 1-based indexes of `chosen_items` within `items`.\n+---               `nil` if the user aborted the dialog without selecting any items.\n+---\n+---\n+--- Example:\n+--- <pre>\n+--- vim.ui.select_many({ 'cheese', 'pepperoni', 'anchovies' }, {\n+---     prompt = 'Select your toppings:',\n+---     format_item = function(item)\n+---         return \"some \" .. item\n+---     end,\n+--- }, function(choices)\n+---     if choices then\n+---         for _, item in ipairs(choices) do\n+---             -- add topping to pizza or whatever\n+---         end\n+---     end\n+--- end)\n+--- </pre>\n+function M.select_many(items, opts, on_choices)\n+  vim.validate {\n+    items = { items, 'table', false },\n+    on_choices = { on_choices, 'function', false },\n+  }\n+  opts = opts or {}\n+  local selected = {}\n+  local selected_indexes = {}\n+  local choices = {opts.prompt or 'Select from list or press return to confirm: '}",
            "html_url": "https://github.com/neovim/neovim/pull/18161#discussion_r852157085",
            "id": 852157085,
            "in_reply_to_id": 852137181,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4yyuKd",
            "original_commit_id": "5207ff00f03c8e88df7c30d72eb69da3cc7470b5",
            "original_line": 101,
            "original_position": 47,
            "original_start_line": null,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 944451680,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18161",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852157085/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-18T14:36:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852157085",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18161#discussion_r852163041"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18161"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/852163041"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "perhaps enable some options?\r\ne.g. number, relative number and cursorline",
            "commit_id": "ab709eae6665e38f3bb7b524eef0466980cc749a",
            "created_at": "2022-04-18T14:39:21Z",
            "diff_hunk": "@@ -55,6 +55,90 @@ function M.select(items, opts, on_choice)\n   end\n end\n \n+--- Prompts the user to pick one or multiple items from a collection of entries\n+---\n+---@param items table Arbitrary items\n+---@param opts table Additional options\n+---     - prompt (string|nil)\n+---               Text of the prompt. Defaults to `Select from list or press return to confirm: `\n+---     - format_item (function item -> text)\n+---               Function to format an\n+---               individual item from `items`. Defaults to `tostring`.\n+---     - kind (string|nil)\n+---               Arbitrary hint string indicating the item shape.\n+---               Plugins reimplementing `vim.ui.select_many` may wish to\n+---               use this to infer the structure or semantics of\n+---               `items`, or the context in which select_many() was called.\n+---@param on_choices function ((chosen_items|nil, indexes|nil) -> ())\n+---               Called once the user made a choice.\n+---               `indexes` is a list of 1-based indexes of `chosen_items` within `items`.\n+---               `nil` if the user aborted the dialog without selecting any items.\n+---\n+---\n+--- Example:\n+--- <pre>\n+--- vim.ui.select_many({ 'cheese', 'pepperoni', 'anchovies' }, {\n+---     prompt = 'Select your toppings:',\n+---     format_item = function(item)\n+---         return \"some \" .. item\n+---     end,\n+--- }, function(choices)\n+---     if choices then\n+---         for _, item in ipairs(choices) do\n+---             -- add topping to pizza or whatever\n+---         end\n+---     end\n+--- end)",
            "html_url": "https://github.com/neovim/neovim/pull/18161#discussion_r852163041",
            "id": 852163041,
            "in_reply_to_id": 852153177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4yyvnh",
            "original_commit_id": "c6b80b908a05365c9501c07627675a69e353b675",
            "original_line": 91,
            "original_position": 37,
            "original_start_line": 80,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 944469772,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18161",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852163041/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-04-18T14:39:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/852163041",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18161#discussion_r853182093"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18161"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/853182093"
                }
            },
            "author_association": "MEMBER",
            "body": "How's it look now? Just made it select `'completeopt'` values because that seems fine enough but thoughts?",
            "commit_id": "ab709eae6665e38f3bb7b524eef0466980cc749a",
            "created_at": "2022-04-19T15:01:10Z",
            "diff_hunk": "@@ -55,6 +55,90 @@ function M.select(items, opts, on_choice)\n   end\n end\n \n+--- Prompts the user to pick one or multiple items from a collection of entries\n+---\n+---@param items table Arbitrary items\n+---@param opts table Additional options\n+---     - prompt (string|nil)\n+---               Text of the prompt. Defaults to `Select from list or press return to confirm: `\n+---     - format_item (function item -> text)\n+---               Function to format an\n+---               individual item from `items`. Defaults to `tostring`.\n+---     - kind (string|nil)\n+---               Arbitrary hint string indicating the item shape.\n+---               Plugins reimplementing `vim.ui.select_many` may wish to\n+---               use this to infer the structure or semantics of\n+---               `items`, or the context in which select_many() was called.\n+---@param on_choices function ((chosen_items|nil, indexes|nil) -> ())\n+---               Called once the user made a choice.\n+---               `indexes` is a list of 1-based indexes of `chosen_items` within `items`.\n+---               `nil` if the user aborted the dialog without selecting any items.\n+---\n+---\n+--- Example:\n+--- <pre>\n+--- vim.ui.select_many({ 'cheese', 'pepperoni', 'anchovies' }, {\n+---     prompt = 'Select your toppings:',\n+---     format_item = function(item)\n+---         return \"some \" .. item\n+---     end,\n+--- }, function(choices)\n+---     if choices then\n+---         for _, item in ipairs(choices) do\n+---             -- add topping to pizza or whatever\n+---         end\n+---     end\n+--- end)",
            "html_url": "https://github.com/neovim/neovim/pull/18161#discussion_r853182093",
            "id": 853182093,
            "in_reply_to_id": 852153177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4y2oaN",
            "original_commit_id": "c6b80b908a05365c9501c07627675a69e353b675",
            "original_line": 91,
            "original_position": 37,
            "original_start_line": 80,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 945866233,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18161",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/853182093/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-04-19T15:01:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/853182093",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46855713?v=4",
                "events_url": "https://api.github.com/users/smolck/events{/privacy}",
                "followers_url": "https://api.github.com/users/smolck/followers",
                "following_url": "https://api.github.com/users/smolck/following{/other_user}",
                "gists_url": "https://api.github.com/users/smolck/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/smolck",
                "id": 46855713,
                "login": "smolck",
                "node_id": "MDQ6VXNlcjQ2ODU1NzEz",
                "organizations_url": "https://api.github.com/users/smolck/orgs",
                "received_events_url": "https://api.github.com/users/smolck/received_events",
                "repos_url": "https://api.github.com/users/smolck/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/smolck/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/smolck/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/smolck"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "How will that look for the user?\r\nDoes he just have to input the numbers he want?\r\n(perhaps send a screen record)",
            "created_at": "2022-04-18T14:03:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1101433134",
            "id": 1101433134,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5Bpoku",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1101433134/reactions"
            },
            "updated_at": "2022-04-18T14:03:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1101433134",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  (perhaps send a screen record)\r\n\r\nYeah, thought about doing that originally, probably should've 😅 \r\n\r\nhttps://user-images.githubusercontent.com/46855713/163819693-8e5100ec-ff70-4a1c-9c72-58ba6410c4ec.mov\r\n\r\n\r\n",
            "created_at": "2022-04-18T14:06:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1101435066",
            "id": 1101435066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5BppC6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1101435066/reactions"
            },
            "updated_at": "2022-04-18T14:06:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1101435066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46855713?v=4",
                "events_url": "https://api.github.com/users/smolck/events{/privacy}",
                "followers_url": "https://api.github.com/users/smolck/followers",
                "following_url": "https://api.github.com/users/smolck/following{/other_user}",
                "gists_url": "https://api.github.com/users/smolck/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/smolck",
                "id": 46855713,
                "login": "smolck",
                "node_id": "MDQ6VXNlcjQ2ODU1NzEz",
                "organizations_url": "https://api.github.com/users/smolck/orgs",
                "received_events_url": "https://api.github.com/users/smolck/received_events",
                "repos_url": "https://api.github.com/users/smolck/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/smolck/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/smolck/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/smolck"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  basically just copy-pasted the vim.ui.select docs and made the necessary changes.\r\n\r\nIsn't that a sign that maybe this should be a parameter rather than a separate function?\r\n\r\nIn vscode, it's just a parameter, `canPickMany`: https://code.visualstudio.com/api/references/vscode-api#window.showQuickPick\r\n",
            "created_at": "2022-04-19T19:46:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1103039693",
            "id": 1103039693,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5BvwzN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1103039693/reactions"
            },
            "updated_at": "2022-04-19T19:46:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1103039693",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Isn't that a sign that maybe this should be a parameter rather than a separate function?\n> \n> \n> \n> In vscode, it's just a parameter, `canPickMany`: https://code.visualstudio.com/api/references/vscode-api#window.showQuickPick\n\n\nThis was originally what I did, via a `multiple_select` (name TBD) option to `select`, but the thought was this could be problematic? [From @mfussenegger in the Neovim Dev matrix room](https://matrix.to/#/!ixkiMdeKnoXIanEVeZ%3Amatrix.org/%24h2RIUlQzPCUC84YCq22d7ebJUPYgfdR2_ErtFa8t_K8):\n\n> I think it will have to be a vim.ui.select_many. Using new options will be problematic because external extensions may not support those, and I think in this case it will also affect the return value (or rather callback argument)\n\nSo I just went with that, but perhaps it could just be made an option.\n",
            "created_at": "2022-04-19T19:52:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1103049606",
            "id": 1103049606,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5BvzOG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1103049606/reactions"
            },
            "updated_at": "2022-04-19T19:52:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1103049606",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46855713?v=4",
                "events_url": "https://api.github.com/users/smolck/events{/privacy}",
                "followers_url": "https://api.github.com/users/smolck/followers",
                "following_url": "https://api.github.com/users/smolck/following{/other_user}",
                "gists_url": "https://api.github.com/users/smolck/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/smolck",
                "id": 46855713,
                "login": "smolck",
                "node_id": "MDQ6VXNlcjQ2ODU1NzEz",
                "organizations_url": "https://api.github.com/users/smolck/orgs",
                "received_events_url": "https://api.github.com/users/smolck/received_events",
                "repos_url": "https://api.github.com/users/smolck/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/smolck/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/smolck/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/smolck"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think it will have to be a vim.ui.select_many. Using new options will be problematic because external extensions may not support those, \r\n\r\nWait... what? We must not add bad interfaces just to support extensions that can't deal with possibly new parameters. Extensions must be able to handle that.\r\n\r\nIf our extensibility model ever promised that we wouldn't add new parameters or behaviors, that's insane and broken.",
            "created_at": "2022-04-19T20:13:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1103084967",
            "id": 1103084967,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5Bv72n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1103084967/reactions"
            },
            "updated_at": "2022-04-19T20:14:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1103084967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > I think it will have to be a vim.ui.select_many. Using new options will be problematic because external extensions may not support those,\r\n> \r\n> Wait... what? We must not add bad interfaces just to support extensions that can't deal with possibly new parameters. Extensions must be able to handle that.\r\n> \r\n> If our extensibility model ever promised that we wouldn't add new parameters or behaviors, that's insane and broken.\r\n\r\n`vim.ui.select` was added with the intention of being overridden by plugins. We have to consider that those implementations may not support new parameters immediately.\r\n\r\nIf we add a `pick_many` option (or whatever it will be called), plugin A could use this new option and would expect a list of value instead of a value as result. If a user also uses plugin B which overrides `vim.ui.select` but doesn't support this new option yet, plugin A would break because it receives an unexpected result.\r\n\r\nI guess plugin A could handle the case that the implementation may not support this new option, but I am not sure if people will account for that. Maybe pointing it out in the docs would be good enough as well?\r\n\r\nThe other reason I proposed to add a new function is that I am not a fan of functions which return different types/shapes based on an argument - maybe because in a static typed language with strict type system it usually makes for a clunky API because you cannot express this relationship between argument value and result type with most type systems. (And even if more ergonomic/feasible in a dynamic language, I find it can be confusing). I guess this is personal preference and I won't object if you/others disagree.\r\n",
            "created_at": "2022-04-19T20:50:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1103149277",
            "id": 1103149277,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5BwLjd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1103149277/reactions"
            },
            "updated_at": "2022-04-19T20:58:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1103149277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> not a fan of functions which return different types/shapes based on an argument\r\n\r\nFair point, but that's why select() should have returned a list or a structure from the start. \"one\" or \"many\" is not an important distinction. \"one\" is just a list of one thing.\r\n\r\nFor these \"vim.ui\" interfaces, we should probably always return structures. Especially because they are intended to be extensible.\r\n\r\n# Proposal\r\n\r\n1.  ~~Add a **new argument** that is passed to  `on_choice`~~\r\n    - ~~this is backwards-compatible~~\r\n    - ~~the old first argument is deprecated~~\r\n    - ~~the new argument is always a list of zero or more selected items~~\r\n1.  **Breaking change** to `on_choice`: always return a list of zero or more choices.",
            "created_at": "2022-04-24T00:24:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1107672393",
            "id": 1107672393,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5CBb1J",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 3,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107672393/reactions"
            },
            "updated_at": "2022-04-30T14:45:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107672393",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Not sure I understand what advantages there are to having a single function and an additional parameter opposed to two functions.\r\n\r\nFrom an implementation perspective it looks as if it boils down to:\r\n\r\n```\r\nif param then\r\n  ... multi_select_code\r\nelse\r\n  ... single_select_code\r\n```\r\n\r\nFrom a usage perspective, generalizing the result to a list means that users who want to use the select _one_ functionality will always have to write boilerplate like `if choice and #choice == 1 then .. choice[1]`.\r\nDistinguishing the two uses by having a `[a] -> Maybe a` function and a `[a] -> [a]` function seems a lot more convenient from a usage point of view. (And if there were strong types, it would be less error prone)\r\n\r\nI in general get the appeal to find a design that allows to cover multiple cases the same way, but I fail to see the advantages in this case.\r\n",
            "created_at": "2022-04-27T17:53:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1111311051",
            "id": 1111311051,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5CPULL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1111311051/reactions"
            },
            "updated_at": "2022-04-27T17:54:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1111311051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Not sure I understand what advantages there are to having a single function and an additional parameter opposed to two functions.\r\n\r\nThe documentation and interface are almost identical. Having large amounts of nearly-identical docs and APIs is a maintenance burden, and cognitive burden on users and reduces discoverability.\r\n\r\n> From a usage perspective, generalizing the result to a list means that users who want to use the select _one_ functionality will always have to write boilerplate like `if choice and #choice == 1 then .. choice[1]`.\r\n\r\n`choice` will never be `nil`, it would always be an empty list. Lua's `next()` function also can be useful: `if next(choice) then`. Providing an example that uses `next()` in the docstring, helps users. Providing special-case interfaces, hurts users by (1) increasing the surface-area of the API and (2) losing an opportunity to show composition and best practices.\r\n\r\nIf common tasks involving tables/lists/maps are verbose boilerplate, we we need to add more tools to `vim.*`. Things like `vim.first()`, `vim.last()`, etc. could make sense. The solution is not to have special variants of our interfaces.\r\n\r\nIn general we should focus on making tables/lists/maps easy to work with. ",
            "created_at": "2022-04-27T19:23:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1111392420",
            "id": 1111392420,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5CPoCk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1111392420/reactions"
            },
            "updated_at": "2022-04-27T19:28:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1111392420",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> choice will never be nil, it would always be an empty list. \r\n\r\nIf the list is a new parameter to stay backward compatible that is unfortunately not possible. Given that the plugins which can override it are not bound to the neovim release cycle there is also no version check, so plugins will have to check both args if they want to be forward & backward compatible.\r\n\r\nI'd make a different judgement call in this case but I don't have any other arguments either, so I concede.",
            "created_at": "2022-04-27T20:09:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1111433450",
            "id": 1111433450,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5CPyDq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1111433450/reactions"
            },
            "updated_at": "2022-04-27T20:09:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1111433450",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> plugins will have to check both args if they want to be forward & backward compatible.\r\n\r\nYep. I'm strongly leaning towards just making a breaking change here: `choice` is always a list.\r\n\r\n1. `vim.ui` is a new territory and we're still figuring out best practices here. \r\n2. We don't guarantee an API contract in Lua userland until Nvim 1.0.\r\n    - RPC `:help api-contract` is a strong contract because of the nature of RPC clients.\r\n3. Doubt there are too many plugins extending `vim.ui`. We can manually notify them.\r\n4. We can backport the breaking change to 0.7.1\r\n    - We did something similar for the LSP client, we made breaking changes last year.",
            "created_at": "2022-04-30T14:43:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1114000010",
            "id": 1114000010,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5CZkqK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1114000010/reactions"
            },
            "updated_at": "2022-04-30T14:43:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1114000010",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hello @justinmk @smolck. What is the state of this enhancement? ",
            "created_at": "2023-12-31T06:22:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/18161#issuecomment-1872686103",
            "id": 1872686103,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
            "node_id": "IC_kwDOAPphoM5vnuwX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1872686103/reactions"
            },
            "updated_at": "2023-12-31T11:01:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1872686103",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/42253013?v=4",
                "events_url": "https://api.github.com/users/oclay1st/events{/privacy}",
                "followers_url": "https://api.github.com/users/oclay1st/followers",
                "following_url": "https://api.github.com/users/oclay1st/following{/other_user}",
                "gists_url": "https://api.github.com/users/oclay1st/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oclay1st",
                "id": 42253013,
                "login": "oclay1st",
                "node_id": "MDQ6VXNlcjQyMjUzMDEz",
                "organizations_url": "https://api.github.com/users/oclay1st/orgs",
                "received_events_url": "https://api.github.com/users/oclay1st/received_events",
                "repos_url": "https://api.github.com/users/oclay1st/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oclay1st/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oclay1st/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oclay1st"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/18161/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/18161/commits",
    "created_at": "2022-04-18T13:59:49Z",
    "diff_url": "https://github.com/neovim/neovim/pull/18161.diff",
    "draft": false,
    "head": {
        "label": "smolck:vim.ui.select-multiple",
        "ref": "vim.ui.select-multiple",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/smolck/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/smolck/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/smolck/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/smolck/neovim/branches{/branch}",
            "clone_url": "https://github.com/smolck/neovim.git",
            "collaborators_url": "https://api.github.com/repos/smolck/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/smolck/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/smolck/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/smolck/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/smolck/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/smolck/neovim/contributors",
            "created_at": "2019-10-26T19:51:21Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/smolck/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/smolck/neovim/downloads",
            "events_url": "https://api.github.com/repos/smolck/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/smolck/neovim/forks",
            "full_name": "smolck/neovim",
            "git_commits_url": "https://api.github.com/repos/smolck/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/smolck/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/smolck/neovim/git/tags{/sha}",
            "git_url": "git://github.com/smolck/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/smolck/neovim/hooks",
            "html_url": "https://github.com/smolck/neovim",
            "id": 217761558,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/smolck/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/smolck/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/smolck/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/smolck/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/smolck/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/smolck/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/smolck/neovim/merges",
            "milestones_url": "https://api.github.com/repos/smolck/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3NjE1NTg=",
            "notifications_url": "https://api.github.com/repos/smolck/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46855713?v=4",
                "events_url": "https://api.github.com/users/smolck/events{/privacy}",
                "followers_url": "https://api.github.com/users/smolck/followers",
                "following_url": "https://api.github.com/users/smolck/following{/other_user}",
                "gists_url": "https://api.github.com/users/smolck/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/smolck",
                "id": 46855713,
                "login": "smolck",
                "node_id": "MDQ6VXNlcjQ2ODU1NzEz",
                "organizations_url": "https://api.github.com/users/smolck/orgs",
                "received_events_url": "https://api.github.com/users/smolck/received_events",
                "repos_url": "https://api.github.com/users/smolck/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/smolck/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/smolck/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/smolck"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/smolck/neovim/pulls{/number}",
            "pushed_at": "2022-09-27T12:48:59Z",
            "releases_url": "https://api.github.com/repos/smolck/neovim/releases{/id}",
            "size": 199556,
            "ssh_url": "git@github.com:smolck/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/smolck/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/smolck/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/smolck/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/smolck/neovim/subscription",
            "svn_url": "https://github.com/smolck/neovim",
            "tags_url": "https://api.github.com/repos/smolck/neovim/tags",
            "teams_url": "https://api.github.com/repos/smolck/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/smolck/neovim/git/trees{/sha}",
            "updated_at": "2021-11-22T14:10:58Z",
            "url": "https://api.github.com/repos/smolck/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "ab709eae6665e38f3bb7b524eef0466980cc749a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/46855713?v=4",
            "events_url": "https://api.github.com/users/smolck/events{/privacy}",
            "followers_url": "https://api.github.com/users/smolck/followers",
            "following_url": "https://api.github.com/users/smolck/following{/other_user}",
            "gists_url": "https://api.github.com/users/smolck/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/smolck",
            "id": 46855713,
            "login": "smolck",
            "node_id": "MDQ6VXNlcjQ2ODU1NzEz",
            "organizations_url": "https://api.github.com/users/smolck/orgs",
            "received_events_url": "https://api.github.com/users/smolck/received_events",
            "repos_url": "https://api.github.com/users/smolck/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/smolck/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/smolck/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/smolck"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/18161",
    "id": 912063852,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18161",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f96c0afa574031c88bfe4f2b54305b0d02ccfdd9",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM42XP1s",
    "number": 18161,
    "patch_url": "https://github.com/neovim/neovim/pull/18161.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/18161/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ab709eae6665e38f3bb7b524eef0466980cc749a",
    "title": "feat(ui): add vim.ui.select_many",
    "updated_at": "2023-12-31T11:01:13Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/18161",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/46855713?v=4",
        "events_url": "https://api.github.com/users/smolck/events{/privacy}",
        "followers_url": "https://api.github.com/users/smolck/followers",
        "following_url": "https://api.github.com/users/smolck/following{/other_user}",
        "gists_url": "https://api.github.com/users/smolck/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/smolck",
        "id": 46855713,
        "login": "smolck",
        "node_id": "MDQ6VXNlcjQ2ODU1NzEz",
        "organizations_url": "https://api.github.com/users/smolck/orgs",
        "received_events_url": "https://api.github.com/users/smolck/received_events",
        "repos_url": "https://api.github.com/users/smolck/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/smolck/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/smolck/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/smolck"
    }
}