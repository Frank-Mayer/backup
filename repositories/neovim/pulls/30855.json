{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30855/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30855/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/30855"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30855"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30855/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/524a040d1d26b0b37db0d8c8e548a0682a839fff"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5657,
            "forks_count": 5657,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1801,
            "open_issues_count": 1801,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-10-22T01:05:14Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 290505,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 82684,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-10-22T02:10:43Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 82684,
            "watchers_count": 82684,
            "web_commit_signoff_required": false
        },
        "sha": "86832dcd1922eee37acc26310f72aa70def1514b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem:\n\n`vim.validate()` takes two forms when it only needs one.\n\nSolution:\n\n- Teach the fast form all the features of the spec form.\n- Deprecate the spec form.\n- General optimizations for both forms.\n- Add a `message` argument which can be used alongside or in place\n  of the `optional` argument.",
    "closed_at": "2024-10-21T10:32:06Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1806316036"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806316036"
                }
            },
            "author_association": "MEMBER",
            "body": "for the new form i think we should not support the short names (\"t\", etc)",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-18T11:01:32Z",
            "diff_hunk": "@@ -349,24 +349,22 @@ end\n --- @param config vim.lsp.ClientConfig\n local function validate_config(config)\n   validate('config', config, 'table')\n-  validate({\n-    handlers = { config.handlers, 't', true },\n-    capabilities = { config.capabilities, 't', true },\n-    cmd_cwd = { config.cmd_cwd, optional_validator(is_dir), 'directory' },\n-    cmd_env = { config.cmd_env, 't', true },\n-    detached = { config.detached, 'b', true },\n-    name = { config.name, 's', true },\n-    on_error = { config.on_error, 'f', true },\n-    on_exit = { config.on_exit, { 'f', 't' }, true },\n-    on_init = { config.on_init, { 'f', 't' }, true },\n-    on_attach = { config.on_attach, { 'f', 't' }, true },\n-    settings = { config.settings, 't', true },\n-    commands = { config.commands, 't', true },\n-    before_init = { config.before_init, { 'f', 't' }, true },\n-    offset_encoding = { config.offset_encoding, 's', true },\n-    flags = { config.flags, 't', true },\n-    get_language_id = { config.get_language_id, 'f', true },\n-  })\n+  validate('handlers', config.handlers, 'table', true)\n+  validate('capabilities', config.capabilities, 'table', true)\n+  validate('cmd_cwd', config.cmd_cwd, optional_validator(is_dir), 'directory')\n+  validate('cmd_env', config.cmd_env, 'table', true)\n+  validate('detached', config.detached, 'boolean', true)\n+  validate('name', config.name, 'string', true)\n+  validate('on_error', config.on_error, 'function', true)\n+  validate('on_exit', config.on_exit, { 'function', 'table' }, true)\n+  validate('on_init', config.on_init, { 'function', 'table' }, true)\n+  validate('on_attach', config.on_attach, { 'function', 'table' }, true)\n+  validate('settings', config.settings, 'table', true)\n+  validate('commands', config.commands, 'table', true)\n+  validate('before_init', config.before_init, { 'function', 'table' }, true)\n+  validate('offset_encoding', config.offset_encoding, 'string', true)\n+  validate('flags', config.flags, 't', true)",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1806316036",
            "id": 1806316036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rqjIE",
            "original_commit_id": "82d3fbf2c3f80d61f00d8d40bbffeace33f8f668",
            "original_line": 366,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": null,
            "pull_request_review_id": 2377781549,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806316036/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-18T11:01:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806316036",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1806317336"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806317336"
                }
            },
            "author_association": "MEMBER",
            "body": "I agree, this was an oversight. I've soft-soft deprecated them; not really sure how to handle them without costs.",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-18T11:02:46Z",
            "diff_hunk": "@@ -349,24 +349,22 @@ end\n --- @param config vim.lsp.ClientConfig\n local function validate_config(config)\n   validate('config', config, 'table')\n-  validate({\n-    handlers = { config.handlers, 't', true },\n-    capabilities = { config.capabilities, 't', true },\n-    cmd_cwd = { config.cmd_cwd, optional_validator(is_dir), 'directory' },\n-    cmd_env = { config.cmd_env, 't', true },\n-    detached = { config.detached, 'b', true },\n-    name = { config.name, 's', true },\n-    on_error = { config.on_error, 'f', true },\n-    on_exit = { config.on_exit, { 'f', 't' }, true },\n-    on_init = { config.on_init, { 'f', 't' }, true },\n-    on_attach = { config.on_attach, { 'f', 't' }, true },\n-    settings = { config.settings, 't', true },\n-    commands = { config.commands, 't', true },\n-    before_init = { config.before_init, { 'f', 't' }, true },\n-    offset_encoding = { config.offset_encoding, 's', true },\n-    flags = { config.flags, 't', true },\n-    get_language_id = { config.get_language_id, 'f', true },\n-  })\n+  validate('handlers', config.handlers, 'table', true)\n+  validate('capabilities', config.capabilities, 'table', true)\n+  validate('cmd_cwd', config.cmd_cwd, optional_validator(is_dir), 'directory')\n+  validate('cmd_env', config.cmd_env, 'table', true)\n+  validate('detached', config.detached, 'boolean', true)\n+  validate('name', config.name, 'string', true)\n+  validate('on_error', config.on_error, 'function', true)\n+  validate('on_exit', config.on_exit, { 'function', 'table' }, true)\n+  validate('on_init', config.on_init, { 'function', 'table' }, true)\n+  validate('on_attach', config.on_attach, { 'function', 'table' }, true)\n+  validate('settings', config.settings, 'table', true)\n+  validate('commands', config.commands, 'table', true)\n+  validate('before_init', config.before_init, { 'function', 'table' }, true)\n+  validate('offset_encoding', config.offset_encoding, 'string', true)\n+  validate('flags', config.flags, 't', true)",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1806317336",
            "id": 1806317336,
            "in_reply_to_id": 1806316036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rqjcY",
            "original_commit_id": "82d3fbf2c3f80d61f00d8d40bbffeace33f8f668",
            "original_line": 366,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": null,
            "pull_request_review_id": 2377783715,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806317336/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-18T11:02:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806317336",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1806329146"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806329146"
                }
            },
            "author_association": "MEMBER",
            "body": "Since the new form is new in 0.11(?), I think we can just make the new form _not_ take short names without a full deprecation cycle.\r\n\r\nMaybe have two different types, one of which is deprecated and only used in form 2?",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-18T11:14:13Z",
            "diff_hunk": "@@ -349,24 +349,22 @@ end\n --- @param config vim.lsp.ClientConfig\n local function validate_config(config)\n   validate('config', config, 'table')\n-  validate({\n-    handlers = { config.handlers, 't', true },\n-    capabilities = { config.capabilities, 't', true },\n-    cmd_cwd = { config.cmd_cwd, optional_validator(is_dir), 'directory' },\n-    cmd_env = { config.cmd_env, 't', true },\n-    detached = { config.detached, 'b', true },\n-    name = { config.name, 's', true },\n-    on_error = { config.on_error, 'f', true },\n-    on_exit = { config.on_exit, { 'f', 't' }, true },\n-    on_init = { config.on_init, { 'f', 't' }, true },\n-    on_attach = { config.on_attach, { 'f', 't' }, true },\n-    settings = { config.settings, 't', true },\n-    commands = { config.commands, 't', true },\n-    before_init = { config.before_init, { 'f', 't' }, true },\n-    offset_encoding = { config.offset_encoding, 's', true },\n-    flags = { config.flags, 't', true },\n-    get_language_id = { config.get_language_id, 'f', true },\n-  })\n+  validate('handlers', config.handlers, 'table', true)\n+  validate('capabilities', config.capabilities, 'table', true)\n+  validate('cmd_cwd', config.cmd_cwd, optional_validator(is_dir), 'directory')\n+  validate('cmd_env', config.cmd_env, 'table', true)\n+  validate('detached', config.detached, 'boolean', true)\n+  validate('name', config.name, 'string', true)\n+  validate('on_error', config.on_error, 'function', true)\n+  validate('on_exit', config.on_exit, { 'function', 'table' }, true)\n+  validate('on_init', config.on_init, { 'function', 'table' }, true)\n+  validate('on_attach', config.on_attach, { 'function', 'table' }, true)\n+  validate('settings', config.settings, 'table', true)\n+  validate('commands', config.commands, 'table', true)\n+  validate('before_init', config.before_init, { 'function', 'table' }, true)\n+  validate('offset_encoding', config.offset_encoding, 'string', true)\n+  validate('flags', config.flags, 't', true)",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1806329146",
            "id": 1806329146,
            "in_reply_to_id": 1806316036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rqmU6",
            "original_commit_id": "82d3fbf2c3f80d61f00d8d40bbffeace33f8f668",
            "original_line": 366,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": null,
            "pull_request_review_id": 2377808002,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806329146/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-18T11:17:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806329146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1806333346"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806333346"
                }
            },
            "author_association": "MEMBER",
            "body": "Currently, the way it's written, forcing it to _not_ accept the short names is a bit cumbersome, but maybe it's worth it.",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-18T11:18:16Z",
            "diff_hunk": "@@ -349,24 +349,22 @@ end\n --- @param config vim.lsp.ClientConfig\n local function validate_config(config)\n   validate('config', config, 'table')\n-  validate({\n-    handlers = { config.handlers, 't', true },\n-    capabilities = { config.capabilities, 't', true },\n-    cmd_cwd = { config.cmd_cwd, optional_validator(is_dir), 'directory' },\n-    cmd_env = { config.cmd_env, 't', true },\n-    detached = { config.detached, 'b', true },\n-    name = { config.name, 's', true },\n-    on_error = { config.on_error, 'f', true },\n-    on_exit = { config.on_exit, { 'f', 't' }, true },\n-    on_init = { config.on_init, { 'f', 't' }, true },\n-    on_attach = { config.on_attach, { 'f', 't' }, true },\n-    settings = { config.settings, 't', true },\n-    commands = { config.commands, 't', true },\n-    before_init = { config.before_init, { 'f', 't' }, true },\n-    offset_encoding = { config.offset_encoding, 's', true },\n-    flags = { config.flags, 't', true },\n-    get_language_id = { config.get_language_id, 'f', true },\n-  })\n+  validate('handlers', config.handlers, 'table', true)\n+  validate('capabilities', config.capabilities, 'table', true)\n+  validate('cmd_cwd', config.cmd_cwd, optional_validator(is_dir), 'directory')\n+  validate('cmd_env', config.cmd_env, 'table', true)\n+  validate('detached', config.detached, 'boolean', true)\n+  validate('name', config.name, 'string', true)\n+  validate('on_error', config.on_error, 'function', true)\n+  validate('on_exit', config.on_exit, { 'function', 'table' }, true)\n+  validate('on_init', config.on_init, { 'function', 'table' }, true)\n+  validate('on_attach', config.on_attach, { 'function', 'table' }, true)\n+  validate('settings', config.settings, 'table', true)\n+  validate('commands', config.commands, 'table', true)\n+  validate('before_init', config.before_init, { 'function', 'table' }, true)\n+  validate('offset_encoding', config.offset_encoding, 'string', true)\n+  validate('flags', config.flags, 't', true)",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1806333346",
            "id": 1806333346,
            "in_reply_to_id": 1806316036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rqnWi",
            "original_commit_id": "82d3fbf2c3f80d61f00d8d40bbffeace33f8f668",
            "original_line": 366,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": null,
            "pull_request_review_id": 2377814931,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806333346/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-18T11:20:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806333346",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1806338207"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806338207"
                }
            },
            "author_association": "MEMBER",
            "body": "I think (some) code duplication is acceptable here if the duplicated code is self-contained and can be removed in bulk after the deprecation. (Not sure this applies here, though, and rejecting short names is not worth it at _all_ costs.)",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-18T11:22:50Z",
            "diff_hunk": "@@ -349,24 +349,22 @@ end\n --- @param config vim.lsp.ClientConfig\n local function validate_config(config)\n   validate('config', config, 'table')\n-  validate({\n-    handlers = { config.handlers, 't', true },\n-    capabilities = { config.capabilities, 't', true },\n-    cmd_cwd = { config.cmd_cwd, optional_validator(is_dir), 'directory' },\n-    cmd_env = { config.cmd_env, 't', true },\n-    detached = { config.detached, 'b', true },\n-    name = { config.name, 's', true },\n-    on_error = { config.on_error, 'f', true },\n-    on_exit = { config.on_exit, { 'f', 't' }, true },\n-    on_init = { config.on_init, { 'f', 't' }, true },\n-    on_attach = { config.on_attach, { 'f', 't' }, true },\n-    settings = { config.settings, 't', true },\n-    commands = { config.commands, 't', true },\n-    before_init = { config.before_init, { 'f', 't' }, true },\n-    offset_encoding = { config.offset_encoding, 's', true },\n-    flags = { config.flags, 't', true },\n-    get_language_id = { config.get_language_id, 'f', true },\n-  })\n+  validate('handlers', config.handlers, 'table', true)\n+  validate('capabilities', config.capabilities, 'table', true)\n+  validate('cmd_cwd', config.cmd_cwd, optional_validator(is_dir), 'directory')\n+  validate('cmd_env', config.cmd_env, 'table', true)\n+  validate('detached', config.detached, 'boolean', true)\n+  validate('name', config.name, 'string', true)\n+  validate('on_error', config.on_error, 'function', true)\n+  validate('on_exit', config.on_exit, { 'function', 'table' }, true)\n+  validate('on_init', config.on_init, { 'function', 'table' }, true)\n+  validate('on_attach', config.on_attach, { 'function', 'table' }, true)\n+  validate('settings', config.settings, 'table', true)\n+  validate('commands', config.commands, 'table', true)\n+  validate('before_init', config.before_init, { 'function', 'table' }, true)\n+  validate('offset_encoding', config.offset_encoding, 'string', true)\n+  validate('flags', config.flags, 't', true)",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1806338207",
            "id": 1806338207,
            "in_reply_to_id": 1806316036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rqoif",
            "original_commit_id": "82d3fbf2c3f80d61f00d8d40bbffeace33f8f668",
            "original_line": 366,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": null,
            "pull_request_review_id": 2377822860,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806338207/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-18T11:22:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806338207",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1806451938"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806451938"
                }
            },
            "author_association": "MEMBER",
            "body": "Managed to do this without any duplication.",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-18T12:57:47Z",
            "diff_hunk": "@@ -349,24 +349,22 @@ end\n --- @param config vim.lsp.ClientConfig\n local function validate_config(config)\n   validate('config', config, 'table')\n-  validate({\n-    handlers = { config.handlers, 't', true },\n-    capabilities = { config.capabilities, 't', true },\n-    cmd_cwd = { config.cmd_cwd, optional_validator(is_dir), 'directory' },\n-    cmd_env = { config.cmd_env, 't', true },\n-    detached = { config.detached, 'b', true },\n-    name = { config.name, 's', true },\n-    on_error = { config.on_error, 'f', true },\n-    on_exit = { config.on_exit, { 'f', 't' }, true },\n-    on_init = { config.on_init, { 'f', 't' }, true },\n-    on_attach = { config.on_attach, { 'f', 't' }, true },\n-    settings = { config.settings, 't', true },\n-    commands = { config.commands, 't', true },\n-    before_init = { config.before_init, { 'f', 't' }, true },\n-    offset_encoding = { config.offset_encoding, 's', true },\n-    flags = { config.flags, 't', true },\n-    get_language_id = { config.get_language_id, 'f', true },\n-  })\n+  validate('handlers', config.handlers, 'table', true)\n+  validate('capabilities', config.capabilities, 'table', true)\n+  validate('cmd_cwd', config.cmd_cwd, optional_validator(is_dir), 'directory')\n+  validate('cmd_env', config.cmd_env, 'table', true)\n+  validate('detached', config.detached, 'boolean', true)\n+  validate('name', config.name, 'string', true)\n+  validate('on_error', config.on_error, 'function', true)\n+  validate('on_exit', config.on_exit, { 'function', 'table' }, true)\n+  validate('on_init', config.on_init, { 'function', 'table' }, true)\n+  validate('on_attach', config.on_attach, { 'function', 'table' }, true)\n+  validate('settings', config.settings, 'table', true)\n+  validate('commands', config.commands, 'table', true)\n+  validate('before_init', config.before_init, { 'function', 'table' }, true)\n+  validate('offset_encoding', config.offset_encoding, 'string', true)\n+  validate('flags', config.flags, 't', true)",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1806451938",
            "id": 1806451938,
            "in_reply_to_id": 1806316036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rrETi",
            "original_commit_id": "82d3fbf2c3f80d61f00d8d40bbffeace33f8f668",
            "original_line": 366,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": null,
            "pull_request_review_id": 2378009875,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806451938/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-18T12:57:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806451938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1806754519"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806754519"
                }
            },
            "author_association": "MEMBER",
            "body": "1.0 ? :) though hopefully that is approximately the same timeframe.",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-18T16:27:50Z",
            "diff_hunk": "@@ -779,237 +781,241 @@ function vim.endswith(s, suffix)\n end\n \n do\n-  --- @alias vim.validate.LuaType\n+  --- @alias vim.validate.Type\n+  --- | 'boolean'\n+  --- | 'callable'\n+  --- | 'function'\n   --- | 'nil'\n   --- | 'number'\n   --- | 'string'\n-  --- | 'boolean'\n   --- | 'table'\n-  --- | 'function'\n   --- | 'thread'\n   --- | 'userdata'\n-  ---\n-  --- @alias vim.validate.Type vim.validate.LuaType | 't' | 's' | 'n' | 'f' | 'c'\n \n-  local type_names = {\n-    ['table'] = 'table',\n-    t = 'table',\n-    ['string'] = 'string',\n-    s = 'string',\n-    ['number'] = 'number',\n-    n = 'number',\n-    ['boolean'] = 'boolean',\n+  --- @alias vim.validate.Validator\n+  --- | vim.validate.Type\n+  --- | vim.validate.Type[]\n+  --- | fun(v:any):boolean, string?\n+\n+  local type_aliases = {\n     b = 'boolean',\n-    ['function'] = 'function',\n-    f = 'function',\n-    ['callable'] = 'callable',\n     c = 'callable',\n-    ['nil'] = 'nil',\n-    ['thread'] = 'thread',\n-    ['userdata'] = 'userdata',\n+    f = 'function',\n+    n = 'number',\n+    s = 'string',\n+    t = 'table',\n   }\n \n   --- @nodoc\n-  --- @class vim.validate.Spec [any, string|string[], boolean]\n+  --- @class vim.validate.Spec\n   --- @field [1] any Argument value\n-  --- @field [2] vim.validate.Type|vim.validate.Type[]|fun(v:any):boolean, string? Type name, or callable\n-  --- @field [3]? boolean\n+  --- @field [2] vim.validate.Validator Argument validator\n+  --- @field [3]? boolean|string Optional flag or error message\n \n   local function _is_type(val, t)\n     return type(val) == t or (t == 'callable' and vim.is_callable(val))\n   end\n \n   --- @param param_name string\n-  --- @param spec vim.validate.Spec\n+  --- @param val any\n+  --- @param validator vim.validate.Validator\n+  --- @param message? string\n+  --- @param allow_alias? boolean Allow short type names: 'n', 's', 't', 'b', 'f', 'c'\n   --- @return string?\n-  local function is_param_valid(param_name, spec)\n-    if type(spec) ~= 'table' then\n-      return string.format('opt[%s]: expected table, got %s', param_name, type(spec))\n-    end\n-\n-    local val = spec[1] -- Argument value\n-    local types = spec[2] -- Type name, or callable\n-    local optional = (true == spec[3])\n+  local function is_valid(param_name, val, validator, message, allow_alias)\n+    if type(validator) == 'string' then\n+      local expected = allow_alias and type_aliases[validator] or validator\n \n-    if type(types) == 'string' then\n-      types = { types }\n-    end\n+      if not expected then\n+        return string.format('invalid type name: %s', validator)\n+      end\n \n-    if vim.is_callable(types) then\n+      if not _is_type(val, expected) then\n+        return string.format('%s: expected %s, got %s', param_name, expected, type(val))\n+      end\n+    elseif vim.is_callable(validator) then\n       -- Check user-provided validation function\n-      local valid, optional_message = types(val)\n+      local valid, opt_msg = validator(val)\n       if not valid then\n         local error_message =\n-          string.format('%s: expected %s, got %s', param_name, (spec[3] or '?'), tostring(val))\n-        if optional_message ~= nil then\n-          error_message = string.format('%s. Info: %s', error_message, optional_message)\n+          string.format('%s: expected %s, got %s', param_name, message or '?', tostring(val))\n+\n+        if opt_msg then\n+          error_message = string.format('%s. Info: %s', error_message, opt_msg)\n         end\n \n         return error_message\n       end\n-    elseif type(types) == 'table' then\n-      local success = false\n-      for i, t in ipairs(types) do\n-        local t_name = type_names[t]\n-        if not t_name then\n+    elseif type(validator) == 'table' then\n+      for _, t in ipairs(validator) do\n+        local expected = allow_alias and type_aliases[t] or t\n+        if not expected then\n           return string.format('invalid type name: %s', t)\n         end\n-        types[i] = t_name\n \n-        if (optional and val == nil) or _is_type(val, t_name) then\n-          success = true\n-          break\n+        if _is_type(val, expected) then\n+          return -- success\n         end\n       end\n-      if not success then\n-        return string.format(\n-          '%s: expected %s, got %s',\n-          param_name,\n-          table.concat(types, '|'),\n-          type(val)\n-        )\n+\n+      -- Normalize validator types for error message\n+      if allow_alias then\n+        for i, t in ipairs(validator) do\n+          validator[i] = type_aliases[t] or t\n+        end\n       end\n+\n+      return string.format(\n+        '%s: expected %s, got %s',\n+        param_name,\n+        table.concat(validator, '|'),\n+        type(val)\n+      )\n     else\n-      return string.format('invalid type name: %s', tostring(types))\n+      return string.format('invalid validator: %s', tostring(validator))\n     end\n   end\n \n   --- @param opt table<vim.validate.Type,vim.validate.Spec>\n-  --- @return boolean, string?\n-  local function is_valid(opt)\n+  --- @return string?\n+  local function validate_spec(opt)\n     if type(opt) ~= 'table' then\n-      return false, string.format('opt: expected table, got %s', type(opt))\n+      return string.format('opt: expected table, got %s', type(opt))\n     end\n \n     local report --- @type table<string,string>?\n \n     for param_name, spec in pairs(opt) do\n-      local msg = is_param_valid(param_name, spec)\n-      if msg then\n+      local err_msg --- @type string?\n+      if type(spec) ~= 'table' then\n+        err_msg = string.format('opt[%s]: expected table, got %s', param_name, type(spec))\n+      else\n+        local value, validator = spec[1], spec[2]\n+        local msg = type(spec[3]) == 'string' and spec[3] or nil --[[@as string?]]\n+        local optional = spec[3] == true\n+        if not (optional and value == nil) then\n+          err_msg = is_valid(param_name, value, validator, msg, true)\n+        end\n+      end\n+\n+      if err_msg then\n         report = report or {}\n-        report[param_name] = msg\n+        report[param_name] = err_msg\n       end\n     end\n \n     if report then\n       for _, msg in vim.spairs(report) do -- luacheck: ignore\n-        return false, msg\n+        return msg\n       end\n     end\n-\n-    return true\n   end\n \n   --- Validate function arguments.\n   ---\n   --- This function has two valid forms:\n   ---\n-  --- 1. vim.validate(name: str, value: any, type: string, optional?: bool)\n-  --- 2. vim.validate(spec: table)\n+  --- 1. `vim.validate(name, value, validator[, optional][, message])`\n   ---\n-  --- Form 1 validates that argument {name} with value {value} has the type\n-  --- {type}. {type} must be a value returned by |lua-type()|. If {optional} is\n-  --- true, then {value} may be null. This form is significantly faster and\n-  --- should be preferred for simple cases.\n+  ---     Validates that argument {name} with value {value} satisfies\n+  ---     {validator}. If {optional} is given and is `true`, then {value} may be\n+  ---     `nil`. If {message} is given, then it is used as the expected type in the\n+  ---     error message.\n   ---\n-  --- Example:\n+  ---     Example:\n   ---\n-  --- ```lua\n-  --- function vim.startswith(s, prefix)\n-  ---   vim.validate('s', s, 'string')\n-  ---   vim.validate('prefix', prefix, 'string')\n-  ---   ...\n-  --- end\n-  --- ```\n+  ---     ```lua\n+  ---       function vim.startswith(s, prefix)\n+  ---         vim.validate('s', s, 'string')\n+  ---         vim.validate('prefix', prefix, 'string')\n+  ---         ...\n+  ---       end\n+  ---     ```\n   ---\n-  --- Form 2 validates a parameter specification (types and values). Specs are\n-  --- evaluated in alphanumeric order, until the first failure.\n+  --- 2. `vim.validate(spec)` (deprecated)\n+  ---     where `spec` is of type\n+  ---    `table<string,[value:any, validator: vim.validate.Validator, optional_or_msg? : boolean|string]>)`\n   ---\n-  --- Usage example:\n+  ---     Validates a argument specification.\n+  ---     Specs are evaluated in alphanumeric order, until the first failure.\n   ---\n-  --- ```lua\n-  --- function user.new(name, age, hobbies)\n-  ---   vim.validate{\n-  ---     name={name, 'string'},\n-  ---     age={age, 'number'},\n-  ---     hobbies={hobbies, 'table'},\n-  ---   }\n-  ---   ...\n-  --- end\n-  --- ```\n+  ---     Example:\n+  ---\n+  ---     ```lua\n+  ---       function user.new(name, age, hobbies)\n+  ---         vim.validate{\n+  ---           name={name, 'string'},\n+  ---           age={age, 'number'},\n+  ---           hobbies={hobbies, 'table'},\n+  ---         }\n+  ---         ...\n+  ---       end\n+  ---     ```\n   ---\n   --- Examples with explicit argument values (can be run directly):\n   ---\n   --- ```lua\n-  --- vim.validate{arg1={{'foo'}, 'table'}, arg2={'foo', 'string'}}\n+  --- vim.validate('arg1', {'foo'}, 'table')\n+  ---    --> NOP (success)\n+  --- vim.validate('arg2', 'foo', 'string')\n   ---    --> NOP (success)\n   ---\n-  --- vim.validate{arg1={1, 'table'}}\n+  --- vim.validate('arg1', 1, 'table')\n   ---    --> error('arg1: expected table, got number')\n   ---\n-  --- vim.validate{arg1={3, function(a) return (a % 2) == 0 end, 'even number'}}\n+  --- vim.validate('arg1', 3, function(a) return (a % 2) == 0 end, 'even number')\n   ---    --> error('arg1: expected even number, got 3')\n   --- ```\n   ---\n   --- If multiple types are valid they can be given as a list.\n   ---\n   --- ```lua\n-  --- vim.validate{arg1={{'foo'}, {'table', 'string'}}, arg2={'foo', {'table', 'string'}}}\n+  --- vim.validate('arg1', {'foo'}, {'table', 'string'})\n+  --- vim.validate('arg2', 'foo', {'table', 'string'})\n   --- -- NOP (success)\n   ---\n-  --- vim.validate{arg1={1, {'string', 'table'}}}\n+  --- vim.validate('arg1', 1, {'string', 'table'})\n   --- -- error('arg1: expected string|table, got number')\n   --- ```\n   ---\n-  ---@param opt table<vim.validate.Type,vim.validate.Spec> (table) Names of parameters to validate. Each key is a parameter\n-  ---          name; each value is a tuple in one of these forms:\n-  ---          1. (arg_value, type_name, optional)\n-  ---             - arg_value: argument value\n-  ---             - type_name: string|table type name, one of: (\"table\", \"t\", \"string\",\n-  ---               \"s\", \"number\", \"n\", \"boolean\", \"b\", \"function\", \"f\", \"nil\",\n-  ---               \"thread\", \"userdata\") or list of them.\n-  ---             - optional: (optional) boolean, if true, `nil` is valid\n-  ---          2. (arg_value, fn, msg)\n-  ---             - arg_value: argument value\n-  ---             - fn: any function accepting one argument, returns true if and\n-  ---               only if the argument is valid. Can optionally return an additional\n-  ---               informative error message as the second returned value.\n-  ---             - msg: (optional) error string if validation fails\n-  --- @overload fun(name: string, val: any, expected: vim.validate.LuaType, optional?: boolean)\n-  function vim.validate(opt, ...)\n-    local ok = false\n-    local err_msg ---@type string?\n-    local narg = select('#', ...)\n-    if narg == 0 then\n-      ok, err_msg = is_valid(opt)\n-    elseif narg >= 2 then\n-      -- Overloaded signature for fast/simple cases\n-      local name = opt --[[@as string]]\n-      local v, expected, optional = ... ---@type string, string, boolean?\n-      local actual = type(v)\n-\n-      ok = (actual == expected) or (v == nil and optional == true)\n+  --- @note `validator` set to a value returned by |lua-type()| provides the\n+  --- best performance.\n+  ---\n+  --- @param name string Argument name\n+  --- @param value string Argument value\n+  --- @param validator vim.validate.Validator\n+  ---   - (`string`): Any value that can be returned from |lua-type()| in addition to\n+  ---     `'callable'`.\n+  ---   - (`string[]`): A list of the above strings.\n+  ---   - (`fun(val:any): boolean, string?`) A function that returns a boolean and an optional\n+  ---     string message.\n+  --- @param optional? boolean Argument is optional (may be omitted)\n+  --- @param message? string message when validation fails\n+  --- @overload fun(name: string, val: any, validator: vim.validate.Validator, message: string)\n+  --- @overload fun(spec: table<string,[any, vim.validate.Validator, boolean|string]>)\n+  function vim.validate(name, value, validator, optional, message)\n+    local err_msg --- @type string?\n+    if validator then -- Form 1\n+      -- Check validator as a string first to optimize the common case.\n+      local ok = (type(value) == validator) or (value == nil and optional == true)\n       if not ok then\n-        if not jit and (actual ~= 'string' or actual ~= 'number') then\n-          -- PUC-Lua can only handle string and number for %s in string.format()\n-          v = vim.inspect(v)\n-        end\n-        err_msg = ('%s: expected %s, got %s%s'):format(\n-          name,\n-          expected,\n-          actual,\n-          v and (' (%s)'):format(v) or ''\n-        )\n+        local msg = type(optional) == 'string' and optional or message --[[@as string?]]\n+        -- Check more complicated validators\n+        err_msg = is_valid(name, value, validator, msg, false)\n       end\n+    elseif type(name) == 'table' then -- Form 2\n+      vim.deprecate('vim.validate', 'vim.validate(name, value, validator, optional_or_msg)', '0.13')",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1806754519",
            "id": 1806754519,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rsOLX",
            "original_commit_id": "7990156ef19f4381e2c22053f9ab11f351937e3c",
            "original_line": 1007,
            "original_position": 391,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2378540310,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806754519/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-18T16:28:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806754519",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1806755961"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806755961"
                }
            },
            "author_association": "MEMBER",
            "body": "Wow ok.",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-18T16:29:19Z",
            "diff_hunk": "@@ -779,237 +781,241 @@ function vim.endswith(s, suffix)\n end\n \n do\n-  --- @alias vim.validate.LuaType\n+  --- @alias vim.validate.Type\n+  --- | 'boolean'\n+  --- | 'callable'\n+  --- | 'function'\n   --- | 'nil'\n   --- | 'number'\n   --- | 'string'\n-  --- | 'boolean'\n   --- | 'table'\n-  --- | 'function'\n   --- | 'thread'\n   --- | 'userdata'\n-  ---\n-  --- @alias vim.validate.Type vim.validate.LuaType | 't' | 's' | 'n' | 'f' | 'c'\n \n-  local type_names = {\n-    ['table'] = 'table',\n-    t = 'table',\n-    ['string'] = 'string',\n-    s = 'string',\n-    ['number'] = 'number',\n-    n = 'number',\n-    ['boolean'] = 'boolean',\n+  --- @alias vim.validate.Validator\n+  --- | vim.validate.Type\n+  --- | vim.validate.Type[]\n+  --- | fun(v:any):boolean, string?\n+\n+  local type_aliases = {\n     b = 'boolean',\n-    ['function'] = 'function',\n-    f = 'function',\n-    ['callable'] = 'callable',\n     c = 'callable',\n-    ['nil'] = 'nil',\n-    ['thread'] = 'thread',\n-    ['userdata'] = 'userdata',\n+    f = 'function',\n+    n = 'number',\n+    s = 'string',\n+    t = 'table',\n   }\n \n   --- @nodoc\n-  --- @class vim.validate.Spec [any, string|string[], boolean]\n+  --- @class vim.validate.Spec\n   --- @field [1] any Argument value\n-  --- @field [2] vim.validate.Type|vim.validate.Type[]|fun(v:any):boolean, string? Type name, or callable\n-  --- @field [3]? boolean\n+  --- @field [2] vim.validate.Validator Argument validator\n+  --- @field [3]? boolean|string Optional flag or error message\n \n   local function _is_type(val, t)\n     return type(val) == t or (t == 'callable' and vim.is_callable(val))\n   end\n \n   --- @param param_name string\n-  --- @param spec vim.validate.Spec\n+  --- @param val any\n+  --- @param validator vim.validate.Validator\n+  --- @param message? string\n+  --- @param allow_alias? boolean Allow short type names: 'n', 's', 't', 'b', 'f', 'c'\n   --- @return string?\n-  local function is_param_valid(param_name, spec)\n-    if type(spec) ~= 'table' then\n-      return string.format('opt[%s]: expected table, got %s', param_name, type(spec))\n-    end\n-\n-    local val = spec[1] -- Argument value\n-    local types = spec[2] -- Type name, or callable\n-    local optional = (true == spec[3])\n+  local function is_valid(param_name, val, validator, message, allow_alias)\n+    if type(validator) == 'string' then\n+      local expected = allow_alias and type_aliases[validator] or validator\n \n-    if type(types) == 'string' then\n-      types = { types }\n-    end\n+      if not expected then\n+        return string.format('invalid type name: %s', validator)\n+      end\n \n-    if vim.is_callable(types) then\n+      if not _is_type(val, expected) then\n+        return string.format('%s: expected %s, got %s', param_name, expected, type(val))\n+      end\n+    elseif vim.is_callable(validator) then\n       -- Check user-provided validation function\n-      local valid, optional_message = types(val)\n+      local valid, opt_msg = validator(val)\n       if not valid then\n         local error_message =\n-          string.format('%s: expected %s, got %s', param_name, (spec[3] or '?'), tostring(val))\n-        if optional_message ~= nil then\n-          error_message = string.format('%s. Info: %s', error_message, optional_message)\n+          string.format('%s: expected %s, got %s', param_name, message or '?', tostring(val))\n+\n+        if opt_msg then\n+          error_message = string.format('%s. Info: %s', error_message, opt_msg)\n         end\n \n         return error_message\n       end\n-    elseif type(types) == 'table' then\n-      local success = false\n-      for i, t in ipairs(types) do\n-        local t_name = type_names[t]\n-        if not t_name then\n+    elseif type(validator) == 'table' then\n+      for _, t in ipairs(validator) do\n+        local expected = allow_alias and type_aliases[t] or t\n+        if not expected then\n           return string.format('invalid type name: %s', t)\n         end\n-        types[i] = t_name\n \n-        if (optional and val == nil) or _is_type(val, t_name) then\n-          success = true\n-          break\n+        if _is_type(val, expected) then\n+          return -- success\n         end\n       end\n-      if not success then\n-        return string.format(\n-          '%s: expected %s, got %s',\n-          param_name,\n-          table.concat(types, '|'),\n-          type(val)\n-        )\n+\n+      -- Normalize validator types for error message\n+      if allow_alias then\n+        for i, t in ipairs(validator) do\n+          validator[i] = type_aliases[t] or t\n+        end\n       end\n+\n+      return string.format(\n+        '%s: expected %s, got %s',\n+        param_name,\n+        table.concat(validator, '|'),\n+        type(val)\n+      )\n     else\n-      return string.format('invalid type name: %s', tostring(types))\n+      return string.format('invalid validator: %s', tostring(validator))\n     end\n   end\n \n   --- @param opt table<vim.validate.Type,vim.validate.Spec>\n-  --- @return boolean, string?\n-  local function is_valid(opt)\n+  --- @return string?\n+  local function validate_spec(opt)\n     if type(opt) ~= 'table' then\n-      return false, string.format('opt: expected table, got %s', type(opt))\n+      return string.format('opt: expected table, got %s', type(opt))\n     end\n \n     local report --- @type table<string,string>?\n \n     for param_name, spec in pairs(opt) do\n-      local msg = is_param_valid(param_name, spec)\n-      if msg then\n+      local err_msg --- @type string?\n+      if type(spec) ~= 'table' then\n+        err_msg = string.format('opt[%s]: expected table, got %s', param_name, type(spec))\n+      else\n+        local value, validator = spec[1], spec[2]\n+        local msg = type(spec[3]) == 'string' and spec[3] or nil --[[@as string?]]\n+        local optional = spec[3] == true\n+        if not (optional and value == nil) then\n+          err_msg = is_valid(param_name, value, validator, msg, true)\n+        end\n+      end\n+\n+      if err_msg then\n         report = report or {}\n-        report[param_name] = msg\n+        report[param_name] = err_msg\n       end\n     end\n \n     if report then\n       for _, msg in vim.spairs(report) do -- luacheck: ignore\n-        return false, msg\n+        return msg\n       end\n     end\n-\n-    return true\n   end\n \n   --- Validate function arguments.\n   ---\n   --- This function has two valid forms:\n   ---\n-  --- 1. vim.validate(name: str, value: any, type: string, optional?: bool)\n-  --- 2. vim.validate(spec: table)\n+  --- 1. `vim.validate(name, value, validator[, optional][, message])`\n   ---\n-  --- Form 1 validates that argument {name} with value {value} has the type\n-  --- {type}. {type} must be a value returned by |lua-type()|. If {optional} is\n-  --- true, then {value} may be null. This form is significantly faster and\n-  --- should be preferred for simple cases.\n+  ---     Validates that argument {name} with value {value} satisfies\n+  ---     {validator}. If {optional} is given and is `true`, then {value} may be\n+  ---     `nil`. If {message} is given, then it is used as the expected type in the\n+  ---     error message.\n   ---\n-  --- Example:\n+  ---     Example:\n   ---\n-  --- ```lua\n-  --- function vim.startswith(s, prefix)\n-  ---   vim.validate('s', s, 'string')\n-  ---   vim.validate('prefix', prefix, 'string')\n-  ---   ...\n-  --- end\n-  --- ```\n+  ---     ```lua\n+  ---       function vim.startswith(s, prefix)\n+  ---         vim.validate('s', s, 'string')\n+  ---         vim.validate('prefix', prefix, 'string')\n+  ---         ...\n+  ---       end\n+  ---     ```\n   ---\n-  --- Form 2 validates a parameter specification (types and values). Specs are\n-  --- evaluated in alphanumeric order, until the first failure.\n+  --- 2. `vim.validate(spec)` (deprecated)\n+  ---     where `spec` is of type\n+  ---    `table<string,[value:any, validator: vim.validate.Validator, optional_or_msg? : boolean|string]>)`\n   ---\n-  --- Usage example:\n+  ---     Validates a argument specification.\n+  ---     Specs are evaluated in alphanumeric order, until the first failure.\n   ---\n-  --- ```lua\n-  --- function user.new(name, age, hobbies)\n-  ---   vim.validate{\n-  ---     name={name, 'string'},\n-  ---     age={age, 'number'},\n-  ---     hobbies={hobbies, 'table'},\n-  ---   }\n-  ---   ...\n-  --- end\n-  --- ```\n+  ---     Example:\n+  ---\n+  ---     ```lua\n+  ---       function user.new(name, age, hobbies)\n+  ---         vim.validate{\n+  ---           name={name, 'string'},\n+  ---           age={age, 'number'},\n+  ---           hobbies={hobbies, 'table'},\n+  ---         }\n+  ---         ...\n+  ---       end\n+  ---     ```\n   ---\n   --- Examples with explicit argument values (can be run directly):\n   ---\n   --- ```lua\n-  --- vim.validate{arg1={{'foo'}, 'table'}, arg2={'foo', 'string'}}\n+  --- vim.validate('arg1', {'foo'}, 'table')\n+  ---    --> NOP (success)\n+  --- vim.validate('arg2', 'foo', 'string')\n   ---    --> NOP (success)\n   ---\n-  --- vim.validate{arg1={1, 'table'}}\n+  --- vim.validate('arg1', 1, 'table')\n   ---    --> error('arg1: expected table, got number')\n   ---\n-  --- vim.validate{arg1={3, function(a) return (a % 2) == 0 end, 'even number'}}\n+  --- vim.validate('arg1', 3, function(a) return (a % 2) == 0 end, 'even number')\n   ---    --> error('arg1: expected even number, got 3')\n   --- ```\n   ---\n   --- If multiple types are valid they can be given as a list.\n   ---\n   --- ```lua\n-  --- vim.validate{arg1={{'foo'}, {'table', 'string'}}, arg2={'foo', {'table', 'string'}}}\n+  --- vim.validate('arg1', {'foo'}, {'table', 'string'})\n+  --- vim.validate('arg2', 'foo', {'table', 'string'})\n   --- -- NOP (success)\n   ---\n-  --- vim.validate{arg1={1, {'string', 'table'}}}\n+  --- vim.validate('arg1', 1, {'string', 'table'})\n   --- -- error('arg1: expected string|table, got number')\n   --- ```\n   ---\n-  ---@param opt table<vim.validate.Type,vim.validate.Spec> (table) Names of parameters to validate. Each key is a parameter\n-  ---          name; each value is a tuple in one of these forms:\n-  ---          1. (arg_value, type_name, optional)\n-  ---             - arg_value: argument value\n-  ---             - type_name: string|table type name, one of: (\"table\", \"t\", \"string\",\n-  ---               \"s\", \"number\", \"n\", \"boolean\", \"b\", \"function\", \"f\", \"nil\",\n-  ---               \"thread\", \"userdata\") or list of them.\n-  ---             - optional: (optional) boolean, if true, `nil` is valid\n-  ---          2. (arg_value, fn, msg)\n-  ---             - arg_value: argument value\n-  ---             - fn: any function accepting one argument, returns true if and\n-  ---               only if the argument is valid. Can optionally return an additional\n-  ---               informative error message as the second returned value.\n-  ---             - msg: (optional) error string if validation fails\n-  --- @overload fun(name: string, val: any, expected: vim.validate.LuaType, optional?: boolean)\n-  function vim.validate(opt, ...)\n-    local ok = false\n-    local err_msg ---@type string?\n-    local narg = select('#', ...)\n-    if narg == 0 then\n-      ok, err_msg = is_valid(opt)\n-    elseif narg >= 2 then\n-      -- Overloaded signature for fast/simple cases\n-      local name = opt --[[@as string]]\n-      local v, expected, optional = ... ---@type string, string, boolean?\n-      local actual = type(v)\n-\n-      ok = (actual == expected) or (v == nil and optional == true)\n+  --- @note `validator` set to a value returned by |lua-type()| provides the\n+  --- best performance.\n+  ---\n+  --- @param name string Argument name\n+  --- @param value string Argument value\n+  --- @param validator vim.validate.Validator\n+  ---   - (`string`): Any value that can be returned from |lua-type()| in addition to\n+  ---     `'callable'`.\n+  ---   - (`string[]`): A list of the above strings.\n+  ---   - (`fun(val:any): boolean, string?`) A function that returns a boolean and an optional\n+  ---     string message.\n+  --- @param optional? boolean Argument is optional (may be omitted)\n+  --- @param message? string message when validation fails\n+  --- @overload fun(name: string, val: any, validator: vim.validate.Validator, message: string)\n+  --- @overload fun(spec: table<string,[any, vim.validate.Validator, boolean|string]>)\n+  function vim.validate(name, value, validator, optional, message)\n+    local err_msg --- @type string?\n+    if validator then -- Form 1\n+      -- Check validator as a string first to optimize the common case.\n+      local ok = (type(value) == validator) or (value == nil and optional == true)\n       if not ok then\n-        if not jit and (actual ~= 'string' or actual ~= 'number') then\n-          -- PUC-Lua can only handle string and number for %s in string.format()\n-          v = vim.inspect(v)\n-        end\n-        err_msg = ('%s: expected %s, got %s%s'):format(\n-          name,\n-          expected,\n-          actual,\n-          v and (' (%s)'):format(v) or ''\n-        )\n+        local msg = type(optional) == 'string' and optional or message --[[@as string?]]\n+        -- Check more complicated validators\n+        err_msg = is_valid(name, value, validator, msg, false)\n       end\n+    elseif type(name) == 'table' then -- Form 2\n+      vim.deprecate('vim.validate', 'vim.validate(name, value, validator, optional_or_msg)', '0.13')",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1806755961",
            "id": 1806755961,
            "in_reply_to_id": 1806754519,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rsOh5",
            "original_commit_id": "7990156ef19f4381e2c22053f9ab11f351937e3c",
            "original_line": 1007,
            "original_position": 391,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2378542755,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806755961/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-18T16:29:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1806755961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1807132764"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1807132764"
                }
            },
            "author_association": "MEMBER",
            "body": "Since these are no longer explicitly listed, I would argue that's not very clear what \"the above strings\" refers to.",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-19T01:07:52Z",
            "diff_hunk": "@@ -2434,40 +2432,42 @@ vim.validate({opt})                                           *vim.validate()*\n <\n \n     Examples with explicit argument values (can be run directly): >lua\n-        vim.validate{arg1={{'foo'}, 'table'}, arg2={'foo', 'string'}}\n+        vim.validate('arg1', {'foo'}, 'table')\n+           --> NOP (success)\n+        vim.validate('arg2', 'foo', 'string')\n            --> NOP (success)\n \n-        vim.validate{arg1={1, 'table'}}\n+        vim.validate('arg1', 1, 'table')\n            --> error('arg1: expected table, got number')\n \n-        vim.validate{arg1={3, function(a) return (a % 2) == 0 end, 'even number'}}\n+        vim.validate('arg1', 3, function(a) return (a % 2) == 0 end, 'even number')\n            --> error('arg1: expected even number, got 3')\n <\n \n     If multiple types are valid they can be given as a list. >lua\n-        vim.validate{arg1={{'foo'}, {'table', 'string'}}, arg2={'foo', {'table', 'string'}}}\n+        vim.validate('arg1', {'foo'}, {'table', 'string'})\n+        vim.validate('arg2', 'foo', {'table', 'string'})\n         -- NOP (success)\n \n-        vim.validate{arg1={1, {'string', 'table'}}}\n+        vim.validate('arg1', 1, {'string', 'table'})\n         -- error('arg1: expected string|table, got number')\n <\n \n-    Parameters: ~\n-      • {opt}  (`table`) Names of parameters to validate. Each key is a\n-               parameter name; each value is a tuple in one of these forms:\n-               1. (arg_value, type_name, optional)\n-                  • arg_value: argument value\n-                  • type_name: string|table type name, one of: (\"table\", \"t\",\n-                    \"string\", \"s\", \"number\", \"n\", \"boolean\", \"b\", \"function\",\n-                    \"f\", \"nil\", \"thread\", \"userdata\") or list of them.\n-                  • optional: (optional) boolean, if true, `nil` is valid\n-               2. (arg_value, fn, msg)\n-                  • arg_value: argument value\n-                  • fn: any function accepting one argument, returns true if\n-                    and only if the argument is valid. Can optionally return\n-                    an additional informative error message as the second\n-                    returned value.\n-                  • msg: (optional) error string if validation fails\n+    Note: ~\n+      • `validator` set to a value returned by |lua-type()| provides the best\n+        performance.\n+\n+    Parameters: ~\n+      • {name}       (`string`) Argument name\n+      • {value}      (`string`) Argument value\n+      • {validator}  (`vim.validate.Validator`)\n+                     • (`string`): Any value that can be returned from\n+                       |lua-type()| in addition to `'callable'`.\n+                     • (`string[]`): A list of the above strings.",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1807132764",
            "id": 1807132764,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rtqhc",
            "original_commit_id": "7990156ef19f4381e2c22053f9ab11f351937e3c",
            "original_line": 2466,
            "original_position": 103,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2379155557,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1807132764/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-19T01:09:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1807132764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1807208307"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1807208307"
                }
            },
            "author_association": "MEMBER",
            "body": "Were they listed before? I tried to reuse the old text that referenced `lua_type`. I can reword it and just list all the values if that's better?",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-19T06:49:26Z",
            "diff_hunk": "@@ -2434,40 +2432,42 @@ vim.validate({opt})                                           *vim.validate()*\n <\n \n     Examples with explicit argument values (can be run directly): >lua\n-        vim.validate{arg1={{'foo'}, 'table'}, arg2={'foo', 'string'}}\n+        vim.validate('arg1', {'foo'}, 'table')\n+           --> NOP (success)\n+        vim.validate('arg2', 'foo', 'string')\n            --> NOP (success)\n \n-        vim.validate{arg1={1, 'table'}}\n+        vim.validate('arg1', 1, 'table')\n            --> error('arg1: expected table, got number')\n \n-        vim.validate{arg1={3, function(a) return (a % 2) == 0 end, 'even number'}}\n+        vim.validate('arg1', 3, function(a) return (a % 2) == 0 end, 'even number')\n            --> error('arg1: expected even number, got 3')\n <\n \n     If multiple types are valid they can be given as a list. >lua\n-        vim.validate{arg1={{'foo'}, {'table', 'string'}}, arg2={'foo', {'table', 'string'}}}\n+        vim.validate('arg1', {'foo'}, {'table', 'string'})\n+        vim.validate('arg2', 'foo', {'table', 'string'})\n         -- NOP (success)\n \n-        vim.validate{arg1={1, {'string', 'table'}}}\n+        vim.validate('arg1', 1, {'string', 'table'})\n         -- error('arg1: expected string|table, got number')\n <\n \n-    Parameters: ~\n-      • {opt}  (`table`) Names of parameters to validate. Each key is a\n-               parameter name; each value is a tuple in one of these forms:\n-               1. (arg_value, type_name, optional)\n-                  • arg_value: argument value\n-                  • type_name: string|table type name, one of: (\"table\", \"t\",\n-                    \"string\", \"s\", \"number\", \"n\", \"boolean\", \"b\", \"function\",\n-                    \"f\", \"nil\", \"thread\", \"userdata\") or list of them.\n-                  • optional: (optional) boolean, if true, `nil` is valid\n-               2. (arg_value, fn, msg)\n-                  • arg_value: argument value\n-                  • fn: any function accepting one argument, returns true if\n-                    and only if the argument is valid. Can optionally return\n-                    an additional informative error message as the second\n-                    returned value.\n-                  • msg: (optional) error string if validation fails\n+    Note: ~\n+      • `validator` set to a value returned by |lua-type()| provides the best\n+        performance.\n+\n+    Parameters: ~\n+      • {name}       (`string`) Argument name\n+      • {value}      (`string`) Argument value\n+      • {validator}  (`vim.validate.Validator`)\n+                     • (`string`): Any value that can be returned from\n+                       |lua-type()| in addition to `'callable'`.\n+                     • (`string[]`): A list of the above strings.",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1807208307",
            "id": 1807208307,
            "in_reply_to_id": 1807132764,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rt89z",
            "original_commit_id": "7990156ef19f4381e2c22053f9ab11f351937e3c",
            "original_line": 2466,
            "original_position": 103,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2379245219,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1807208307/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-19T06:49:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1807208307",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30855#discussion_r1807390135"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1807390135"
                }
            },
            "author_association": "MEMBER",
            "body": "The git diff isn't great but it seems like `type_name` listed the types explicitly. Not a huge deal but a rewording would be better :)",
            "commit_id": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
            "created_at": "2024-10-19T15:42:52Z",
            "diff_hunk": "@@ -2434,40 +2432,42 @@ vim.validate({opt})                                           *vim.validate()*\n <\n \n     Examples with explicit argument values (can be run directly): >lua\n-        vim.validate{arg1={{'foo'}, 'table'}, arg2={'foo', 'string'}}\n+        vim.validate('arg1', {'foo'}, 'table')\n+           --> NOP (success)\n+        vim.validate('arg2', 'foo', 'string')\n            --> NOP (success)\n \n-        vim.validate{arg1={1, 'table'}}\n+        vim.validate('arg1', 1, 'table')\n            --> error('arg1: expected table, got number')\n \n-        vim.validate{arg1={3, function(a) return (a % 2) == 0 end, 'even number'}}\n+        vim.validate('arg1', 3, function(a) return (a % 2) == 0 end, 'even number')\n            --> error('arg1: expected even number, got 3')\n <\n \n     If multiple types are valid they can be given as a list. >lua\n-        vim.validate{arg1={{'foo'}, {'table', 'string'}}, arg2={'foo', {'table', 'string'}}}\n+        vim.validate('arg1', {'foo'}, {'table', 'string'})\n+        vim.validate('arg2', 'foo', {'table', 'string'})\n         -- NOP (success)\n \n-        vim.validate{arg1={1, {'string', 'table'}}}\n+        vim.validate('arg1', 1, {'string', 'table'})\n         -- error('arg1: expected string|table, got number')\n <\n \n-    Parameters: ~\n-      • {opt}  (`table`) Names of parameters to validate. Each key is a\n-               parameter name; each value is a tuple in one of these forms:\n-               1. (arg_value, type_name, optional)\n-                  • arg_value: argument value\n-                  • type_name: string|table type name, one of: (\"table\", \"t\",\n-                    \"string\", \"s\", \"number\", \"n\", \"boolean\", \"b\", \"function\",\n-                    \"f\", \"nil\", \"thread\", \"userdata\") or list of them.\n-                  • optional: (optional) boolean, if true, `nil` is valid\n-               2. (arg_value, fn, msg)\n-                  • arg_value: argument value\n-                  • fn: any function accepting one argument, returns true if\n-                    and only if the argument is valid. Can optionally return\n-                    an additional informative error message as the second\n-                    returned value.\n-                  • msg: (optional) error string if validation fails\n+    Note: ~\n+      • `validator` set to a value returned by |lua-type()| provides the best\n+        performance.\n+\n+    Parameters: ~\n+      • {name}       (`string`) Argument name\n+      • {value}      (`string`) Argument value\n+      • {validator}  (`vim.validate.Validator`)\n+                     • (`string`): Any value that can be returned from\n+                       |lua-type()| in addition to `'callable'`.\n+                     • (`string[]`): A list of the above strings.",
            "html_url": "https://github.com/neovim/neovim/pull/30855#discussion_r1807390135",
            "id": 1807390135,
            "in_reply_to_id": 1807132764,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rupW3",
            "original_commit_id": "7990156ef19f4381e2c22053f9ab11f351937e3c",
            "original_line": 2466,
            "original_position": 103,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2379559998,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1807390135/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-19T15:42:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1807390135",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Another advantage of the \"simple\" form is that it makes the order explicit, whereas with the \"spec\" form it could only be alphabetical (which may be part of the slowness).\r\n\r\nBesides that, and the creation of the table, what else is slow about the spec form?",
            "created_at": "2024-10-18T11:03:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/30855#issuecomment-2422207078",
            "id": 2422207078,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30855",
            "node_id": "IC_kwDOAPphoM6QX_Jm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422207078/reactions"
            },
            "updated_at": "2024-10-18T11:03:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422207078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The fact it invokes `is_valid` and `is_param_valid()`. I've optimized that somewhat in this change, however you can't get any faster than.\r\n\r\n```lua\r\n      ok = (actual == validator) or (val == nil and optional_or_msg == true)\r\n```\r\n\r\nWhich is done for every single call is this is expected to account for 90% of callsites.\r\n\r\n> Besides that, and the creation of the table, what else is slow about the spec form?\r\n\r\n_tables_ and iterating and indexing over said tables.",
            "created_at": "2024-10-18T11:05:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/30855#issuecomment-2422211182",
            "id": 2422211182,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30855",
            "node_id": "IC_kwDOAPphoM6QYAJu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422211182/reactions"
            },
            "updated_at": "2024-10-18T11:11:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422211182",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "do we actually need to deprecate the spec form or just de-emphasize it (minimize the docs and mention \"this is slow but you can use it if you like the format\")",
            "created_at": "2024-10-18T11:08:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/30855#issuecomment-2422216464",
            "id": 2422216464,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30855",
            "node_id": "IC_kwDOAPphoM6QYBcQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422216464/reactions"
            },
            "updated_at": "2024-10-18T11:08:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422216464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It doesn't offer any advantages to the other form, and it's more difficult to read.\r\n\r\nWe can give it a long deprecation life?",
            "created_at": "2024-10-18T11:09:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/30855#issuecomment-2422218419",
            "id": 2422218419,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30855",
            "node_id": "IC_kwDOAPphoM6QYB6z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422218419/reactions"
            },
            "updated_at": "2024-10-18T11:10:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422218419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30855/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/30855/commits",
    "created_at": "2024-10-18T10:36:34Z",
    "diff_url": "https://github.com/neovim/neovim/pull/30855.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:feat/validate_revamp",
        "ref": "feat/validate_revamp",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2024-10-21T10:38:47Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 284165,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2024-02-06T12:43:15Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "524a040d1d26b0b37db0d8c8e548a0682a839fff",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/30855",
    "id": 2132159304,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30855",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "file metadata/attributes, filenames, path manipulation",
            "id": 3386070083,
            "name": "filesystem",
            "node_id": "LA_kwDOAPphoM7J01RD",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filesystem"
        }
    ],
    "locked": false,
    "merge_commit_sha": "3572319b4cb1a4163624a5fe328886f1928dbc4a",
    "merged_at": "2024-10-21T10:32:06Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5_FitI",
    "number": 30855,
    "patch_url": "https://github.com/neovim/neovim/pull/30855.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/30855/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/524a040d1d26b0b37db0d8c8e548a0682a839fff",
    "title": "feat(vim.validate): improve fast form and deprecate spec form",
    "updated_at": "2024-10-21T10:37:35Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/30855",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    }
}