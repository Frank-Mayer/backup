{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28101/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28101/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/28101"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28101"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28101/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/5e1b7c5123a978bee7b8b29d83eebef0c22f5903"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5277,
            "forks_count": 5277,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1705,
            "open_issues_count": 1705,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-04-23T00:28:51Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 267079,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 76421,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-04-23T01:19:16Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 76421,
            "watchers_count": 76421,
            "web_commit_signoff_required": false
        },
        "sha": "6d732ad3c9a131bf913807ee9670ca0ea98e4d8e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Add a way to redraw certain elements that are not redrawn while Nvim is waiting\r\nfor input, or currently have no API to do so. This API covers all that can be\r\ndone with the :redraw* commands, in addition to the following new features:\r\n- Immediately move the cursor to a (non-current) window.\r\n- Target a specific window or buffer to mark for redraw.\r\n- Mark a buffer range for redraw (replaces nvim__buf_redraw_range()).\r\n- Redraw the 'statuscolumn'.\r\n\r\nResolve #20793\r\nCloses #26071",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1560887939"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1560887939"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                • `screen`: Immediately update the screen. Useful when\r\n```\r\nupdate (=redraw) is implied",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-11T11:37:22Z",
            "diff_hunk": "@@ -1307,6 +1307,32 @@ nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*\n                   |P|).\n       • {follow}  If true place cursor at end of inserted text.\n \n+nvim_redraw({opts})                                            *nvim_redraw()*\n+    Instruct Nvim to redraw various elements.\n+\n+    Parameters: ~\n+      • {opts}  Optional parameters.\n+                • `update_screen`: Immediately update the screen. Useful when",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1560887939",
            "id": 1560887939,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dCUKD",
            "original_commit_id": "aa86ade5caa0dd02eae42ced4c81b2b2c58a09f4",
            "original_line": 1315,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 1993969281,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1560887939/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-11T11:37:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1560887939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1560889569"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1560889569"
                }
            },
            "author_association": "MEMBER",
            "body": "In general, we should try to be consistent about \"update\" vs. \"redraw\" here (or, if there is a distinction, explain it).",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-11T11:38:07Z",
            "diff_hunk": "@@ -1307,6 +1307,32 @@ nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*\n                   |P|).\n       • {follow}  If true place cursor at end of inserted text.\n \n+nvim_redraw({opts})                                            *nvim_redraw()*\n+    Instruct Nvim to redraw various elements.\n+\n+    Parameters: ~\n+      • {opts}  Optional parameters.\n+                • `update_screen`: Immediately update the screen. Useful when",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1560889569",
            "id": 1560889569,
            "in_reply_to_id": 1560887939,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dCUjh",
            "original_commit_id": "aa86ade5caa0dd02eae42ced4c81b2b2c58a09f4",
            "original_line": 1315,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 1993971942,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1560889569/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-11T11:38:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1560889569",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1560900444"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1560900444"
                }
            },
            "author_association": "MEMBER",
            "body": "The implication of `update_screen` is that the actual buffer content in windows is redrawn, for which `update_screen()` is the only entry point internally. As opposed the various other \"widgets\" associated with a window which can also be targeted in this API and redrawn without redrawing the entire window, but would also be redrawn when `update_screen()` is called and they were pending for redraw.\r\n\r\nConsidering that, maybe this can be called `text` or `viewport` as it is referred to under `:h window`?\r\n\r\nOr ignore that distinction and just name it `flush`, and document that it pushes pending updates to the grid (and screen given that `ui_flush()` is called but I don't think the help needs to mention these distinctions), which is what actually happens.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-11T11:46:41Z",
            "diff_hunk": "@@ -1307,6 +1307,32 @@ nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*\n                   |P|).\n       • {follow}  If true place cursor at end of inserted text.\n \n+nvim_redraw({opts})                                            *nvim_redraw()*\n+    Instruct Nvim to redraw various elements.\n+\n+    Parameters: ~\n+      • {opts}  Optional parameters.\n+                • `update_screen`: Immediately update the screen. Useful when",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1560900444",
            "id": 1560900444,
            "in_reply_to_id": 1560887939,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dCXNc",
            "original_commit_id": "aa86ade5caa0dd02eae42ced4c81b2b2c58a09f4",
            "original_line": 1315,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 1993988822,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1560900444/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-11T12:00:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1560900444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1561120506"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1561120506"
                }
            },
            "author_association": "MEMBER",
            "body": "Thanks for the explanation. So `flush` is (to me!) closest in meaning (but still needs an explanation at this point in the documentation, or at least a taglink), but I defer to @bfredl ",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-11T14:27:42Z",
            "diff_hunk": "@@ -1307,6 +1307,32 @@ nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*\n                   |P|).\n       • {follow}  If true place cursor at end of inserted text.\n \n+nvim_redraw({opts})                                            *nvim_redraw()*\n+    Instruct Nvim to redraw various elements.\n+\n+    Parameters: ~\n+      • {opts}  Optional parameters.\n+                • `update_screen`: Immediately update the screen. Useful when",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1561120506",
            "id": 1561120506,
            "in_reply_to_id": 1560887939,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dDM76",
            "original_commit_id": "aa86ade5caa0dd02eae42ced4c81b2b2c58a09f4",
            "original_line": 1315,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 1994354564,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1561120506/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-11T14:27:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1561120506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562425085"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562425085"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it should be enough to do these around `update_screen()` inside its if-statement.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T11:31:58Z",
            "diff_hunk": "@@ -2389,3 +2389,169 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+enum {\n+  kStatusNone = 0x0,\n+  kStatusBar = 0x1,\n+  kStatusColumn = 0x2,\n+  kStatusLine = 0x4,\n+  kStatusTab = 0x8,\n+  kStatusAll = 0x10,\n+};\n+\n+static void redraw_status(win_T *wp, int status, bool *flush)\n+{\n+  if (*wp->w_p_stc != NUL && (status & (kStatusColumn|kStatusAll))) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Just hid or showing winbar for the first time, or drawing the statuscolumn.\n+  // Flush later because the window itself should be redrawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  if (*flush && (status & (kStatusBar|kStatusLine|kStatusAll))) {\n+    // When flushing later, just mark for redraw.\n+    wp->w_redr_status = true;\n+  } else if (status & (kStatusBar|kStatusLine)) {\n+    // Just redraw the 'winbar' or 'statusline'.\n+    win_check_ns_hl(wp);\n+    if (status & kStatusBar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (status & kStatusLine) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various elements.\n+///\n+/// @param opts  Optional parameters.\n+///               - flush: Update the screen with pending updates, even if\n+///                 Nvim is waiting for input and would normally not do so.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows when both are omitted.\n+///               - range: Buffer range to redraw, useful for decoration\n+///                 providers. Tuple `[first, last]`:\n+///                   - first: first line number of the range\n+///                   - last: last line number of the range\n+///               - cursor: Immediately update cursor position on the screen.\n+///               - status: Redraws (a combination of) the following status\n+///                 components (array of one or more strings):\n+///                 - \"bar\": |'winbar'|\n+///                 - \"column\": |'statuscolumn'|\n+///                 - \"line\": |'statusline'|\n+///                 - \"tab\": |'tabline'|\n+///                 - \"all\": All of the above\n+///               - win: Target a specific |window-ID| for `cursor`, `status`\n+///                 and `clear` updates. Current window when 0, all windows if\n+///                 omitted and applicable.\n+///               - buf: Target a specific buffer number for `range`, `status`,\n+///                 and `clear` updates, current buffer when 0 or omitted.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+  bool save_lz = p_lz;\n+  int save_rd = RedrawingDisabled;\n+  RedrawingDisabled = 0;\n+  p_lz = false;",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562425085",
            "id": 1562425085,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dILb9",
            "original_commit_id": "9b57649ff8d7144e0660723a341af80c463fe7c3",
            "original_line": 2460,
            "original_position": 76,
            "original_start_line": 2463,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 1996545923,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562425085/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-12T11:31:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562425085",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562426802"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562426802"
                }
            },
            "author_association": "MEMBER",
            "body": "if we treat `win` and `buf` as mutually exclusive, we should throw an error when both `buf` and `win` are supplied.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T11:33:55Z",
            "diff_hunk": "@@ -2389,3 +2389,169 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+enum {\n+  kStatusNone = 0x0,\n+  kStatusBar = 0x1,\n+  kStatusColumn = 0x2,\n+  kStatusLine = 0x4,\n+  kStatusTab = 0x8,\n+  kStatusAll = 0x10,\n+};\n+\n+static void redraw_status(win_T *wp, int status, bool *flush)\n+{\n+  if (*wp->w_p_stc != NUL && (status & (kStatusColumn|kStatusAll))) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Just hid or showing winbar for the first time, or drawing the statuscolumn.\n+  // Flush later because the window itself should be redrawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  if (*flush && (status & (kStatusBar|kStatusLine|kStatusAll))) {\n+    // When flushing later, just mark for redraw.\n+    wp->w_redr_status = true;\n+  } else if (status & (kStatusBar|kStatusLine)) {\n+    // Just redraw the 'winbar' or 'statusline'.\n+    win_check_ns_hl(wp);\n+    if (status & kStatusBar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (status & kStatusLine) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various elements.\n+///\n+/// @param opts  Optional parameters.\n+///               - flush: Update the screen with pending updates, even if\n+///                 Nvim is waiting for input and would normally not do so.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows when both are omitted.\n+///               - range: Buffer range to redraw, useful for decoration\n+///                 providers. Tuple `[first, last]`:\n+///                   - first: first line number of the range\n+///                   - last: last line number of the range\n+///               - cursor: Immediately update cursor position on the screen.\n+///               - status: Redraws (a combination of) the following status\n+///                 components (array of one or more strings):\n+///                 - \"bar\": |'winbar'|\n+///                 - \"column\": |'statuscolumn'|\n+///                 - \"line\": |'statusline'|\n+///                 - \"tab\": |'tabline'|\n+///                 - \"all\": All of the above\n+///               - win: Target a specific |window-ID| for `cursor`, `status`\n+///                 and `clear` updates. Current window when 0, all windows if\n+///                 omitted and applicable.\n+///               - buf: Target a specific buffer number for `range`, `status`,\n+///                 and `clear` updates, current buffer when 0 or omitted.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+  bool save_lz = p_lz;\n+  int save_rd = RedrawingDisabled;\n+  RedrawingDisabled = 0;\n+  p_lz = false;\n+\n+  if (HAS_KEY(opts, redraw, win)) {\n+    win = find_window_by_handle(opts->win, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, buf)) {\n+    buf = find_buffer_by_handle(opts->buf, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (opts->clear) {\n+    if (win != NULL) {\n+      redraw_later(win, UPD_NOT_VALID);\n+    } else if (buf != NULL) {\n+      redraw_buf_later(buf, UPD_NOT_VALID);",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562426802",
            "id": 1562426802,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dIL2y",
            "original_commit_id": "9b57649ff8d7144e0660723a341af80c463fe7c3",
            "original_line": 2469,
            "original_position": 96,
            "original_start_line": 2481,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 1996552036,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562426802/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-12T11:33:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562426802",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562428056"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562428056"
                }
            },
            "author_association": "MEMBER",
            "body": "then, if `win` is supplied but not `buf`, this either needs to throw an error or use the buffer of that window (ideally it would imply only redrawing the range for the specific window, but doing it for the buffer in the window is good enough).",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T11:35:23Z",
            "diff_hunk": "@@ -2389,3 +2389,169 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+enum {\n+  kStatusNone = 0x0,\n+  kStatusBar = 0x1,\n+  kStatusColumn = 0x2,\n+  kStatusLine = 0x4,\n+  kStatusTab = 0x8,\n+  kStatusAll = 0x10,\n+};\n+\n+static void redraw_status(win_T *wp, int status, bool *flush)\n+{\n+  if (*wp->w_p_stc != NUL && (status & (kStatusColumn|kStatusAll))) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Just hid or showing winbar for the first time, or drawing the statuscolumn.\n+  // Flush later because the window itself should be redrawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  if (*flush && (status & (kStatusBar|kStatusLine|kStatusAll))) {\n+    // When flushing later, just mark for redraw.\n+    wp->w_redr_status = true;\n+  } else if (status & (kStatusBar|kStatusLine)) {\n+    // Just redraw the 'winbar' or 'statusline'.\n+    win_check_ns_hl(wp);\n+    if (status & kStatusBar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (status & kStatusLine) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various elements.\n+///\n+/// @param opts  Optional parameters.\n+///               - flush: Update the screen with pending updates, even if\n+///                 Nvim is waiting for input and would normally not do so.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows when both are omitted.\n+///               - range: Buffer range to redraw, useful for decoration\n+///                 providers. Tuple `[first, last]`:\n+///                   - first: first line number of the range\n+///                   - last: last line number of the range\n+///               - cursor: Immediately update cursor position on the screen.\n+///               - status: Redraws (a combination of) the following status\n+///                 components (array of one or more strings):\n+///                 - \"bar\": |'winbar'|\n+///                 - \"column\": |'statuscolumn'|\n+///                 - \"line\": |'statusline'|\n+///                 - \"tab\": |'tabline'|\n+///                 - \"all\": All of the above\n+///               - win: Target a specific |window-ID| for `cursor`, `status`\n+///                 and `clear` updates. Current window when 0, all windows if\n+///                 omitted and applicable.\n+///               - buf: Target a specific buffer number for `range`, `status`,\n+///                 and `clear` updates, current buffer when 0 or omitted.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+  bool save_lz = p_lz;\n+  int save_rd = RedrawingDisabled;\n+  RedrawingDisabled = 0;\n+  p_lz = false;\n+\n+  if (HAS_KEY(opts, redraw, win)) {\n+    win = find_window_by_handle(opts->win, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, buf)) {\n+    buf = find_buffer_by_handle(opts->buf, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (opts->clear) {\n+    if (win != NULL) {\n+      redraw_later(win, UPD_NOT_VALID);\n+    } else if (buf != NULL) {\n+      redraw_buf_later(buf, UPD_NOT_VALID);\n+    } else {\n+      redraw_all_later(UPD_NOT_VALID);\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, range)) {\n+    VALIDATE(kv_size(opts->range) == 2\n+             && kv_A(opts->range, 0).type == kObjectTypeInteger\n+             && kv_A(opts->range, 1).type == kObjectTypeInteger,\n+             \"%s\", \"Invalid 'range': expected 2-tuple of Lua numbers\", {\n+      goto theend;\n+    });\n+    Integer first = kv_A(opts->range, 0).data.integer;\n+    Integer last = kv_A(opts->range, 1).data.integer;\n+    nvim__buf_redraw_range(buf ? buf->handle : curbuf->handle, first, last, err);",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562428056",
            "id": 1562428056,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dIMKY",
            "original_commit_id": "9b57649ff8d7144e0660723a341af80c463fe7c3",
            "original_line": 2499,
            "original_position": 111,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 1996556571,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562428056/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-12T11:35:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562428056",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562429059"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562429059"
                }
            },
            "author_association": "MEMBER",
            "body": "`win_redr_status()` checks `!redrawing()` as well.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T11:36:35Z",
            "diff_hunk": "@@ -2389,3 +2389,169 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+enum {\n+  kStatusNone = 0x0,\n+  kStatusBar = 0x1,\n+  kStatusColumn = 0x2,\n+  kStatusLine = 0x4,\n+  kStatusTab = 0x8,\n+  kStatusAll = 0x10,\n+};\n+\n+static void redraw_status(win_T *wp, int status, bool *flush)\n+{\n+  if (*wp->w_p_stc != NUL && (status & (kStatusColumn|kStatusAll))) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Just hid or showing winbar for the first time, or drawing the statuscolumn.\n+  // Flush later because the window itself should be redrawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  if (*flush && (status & (kStatusBar|kStatusLine|kStatusAll))) {\n+    // When flushing later, just mark for redraw.\n+    wp->w_redr_status = true;\n+  } else if (status & (kStatusBar|kStatusLine)) {\n+    // Just redraw the 'winbar' or 'statusline'.\n+    win_check_ns_hl(wp);\n+    if (status & kStatusBar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (status & kStatusLine) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various elements.\n+///\n+/// @param opts  Optional parameters.\n+///               - flush: Update the screen with pending updates, even if\n+///                 Nvim is waiting for input and would normally not do so.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows when both are omitted.\n+///               - range: Buffer range to redraw, useful for decoration\n+///                 providers. Tuple `[first, last]`:\n+///                   - first: first line number of the range\n+///                   - last: last line number of the range\n+///               - cursor: Immediately update cursor position on the screen.\n+///               - status: Redraws (a combination of) the following status\n+///                 components (array of one or more strings):\n+///                 - \"bar\": |'winbar'|\n+///                 - \"column\": |'statuscolumn'|\n+///                 - \"line\": |'statusline'|\n+///                 - \"tab\": |'tabline'|\n+///                 - \"all\": All of the above\n+///               - win: Target a specific |window-ID| for `cursor`, `status`\n+///                 and `clear` updates. Current window when 0, all windows if\n+///                 omitted and applicable.\n+///               - buf: Target a specific buffer number for `range`, `status`,\n+///                 and `clear` updates, current buffer when 0 or omitted.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+  bool save_lz = p_lz;\n+  int save_rd = RedrawingDisabled;\n+  RedrawingDisabled = 0;\n+  p_lz = false;",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562429059",
            "id": 1562429059,
            "in_reply_to_id": 1562425085,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dIMaD",
            "original_commit_id": "9b57649ff8d7144e0660723a341af80c463fe7c3",
            "original_line": 2460,
            "original_position": 76,
            "original_start_line": 2463,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 1996560301,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562429059/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-12T11:36:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562429059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562430502"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562430502"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, I considered exposing `win_upate()` to be able to target specific windows but I'm not sure that's a good idea. It would only be effective when `redrawing() == false`, otherwise the rest of the windows would be updated at the next `update_screen()` anyways.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T11:38:17Z",
            "diff_hunk": "@@ -2389,3 +2389,169 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+enum {\n+  kStatusNone = 0x0,\n+  kStatusBar = 0x1,\n+  kStatusColumn = 0x2,\n+  kStatusLine = 0x4,\n+  kStatusTab = 0x8,\n+  kStatusAll = 0x10,\n+};\n+\n+static void redraw_status(win_T *wp, int status, bool *flush)\n+{\n+  if (*wp->w_p_stc != NUL && (status & (kStatusColumn|kStatusAll))) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Just hid or showing winbar for the first time, or drawing the statuscolumn.\n+  // Flush later because the window itself should be redrawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  if (*flush && (status & (kStatusBar|kStatusLine|kStatusAll))) {\n+    // When flushing later, just mark for redraw.\n+    wp->w_redr_status = true;\n+  } else if (status & (kStatusBar|kStatusLine)) {\n+    // Just redraw the 'winbar' or 'statusline'.\n+    win_check_ns_hl(wp);\n+    if (status & kStatusBar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (status & kStatusLine) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various elements.\n+///\n+/// @param opts  Optional parameters.\n+///               - flush: Update the screen with pending updates, even if\n+///                 Nvim is waiting for input and would normally not do so.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows when both are omitted.\n+///               - range: Buffer range to redraw, useful for decoration\n+///                 providers. Tuple `[first, last]`:\n+///                   - first: first line number of the range\n+///                   - last: last line number of the range\n+///               - cursor: Immediately update cursor position on the screen.\n+///               - status: Redraws (a combination of) the following status\n+///                 components (array of one or more strings):\n+///                 - \"bar\": |'winbar'|\n+///                 - \"column\": |'statuscolumn'|\n+///                 - \"line\": |'statusline'|\n+///                 - \"tab\": |'tabline'|\n+///                 - \"all\": All of the above\n+///               - win: Target a specific |window-ID| for `cursor`, `status`\n+///                 and `clear` updates. Current window when 0, all windows if\n+///                 omitted and applicable.\n+///               - buf: Target a specific buffer number for `range`, `status`,\n+///                 and `clear` updates, current buffer when 0 or omitted.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+  bool save_lz = p_lz;\n+  int save_rd = RedrawingDisabled;\n+  RedrawingDisabled = 0;\n+  p_lz = false;\n+\n+  if (HAS_KEY(opts, redraw, win)) {\n+    win = find_window_by_handle(opts->win, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, buf)) {\n+    buf = find_buffer_by_handle(opts->buf, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (opts->clear) {\n+    if (win != NULL) {\n+      redraw_later(win, UPD_NOT_VALID);\n+    } else if (buf != NULL) {\n+      redraw_buf_later(buf, UPD_NOT_VALID);\n+    } else {\n+      redraw_all_later(UPD_NOT_VALID);\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, range)) {\n+    VALIDATE(kv_size(opts->range) == 2\n+             && kv_A(opts->range, 0).type == kObjectTypeInteger\n+             && kv_A(opts->range, 1).type == kObjectTypeInteger,\n+             \"%s\", \"Invalid 'range': expected 2-tuple of Lua numbers\", {\n+      goto theend;\n+    });\n+    Integer first = kv_A(opts->range, 0).data.integer;\n+    Integer last = kv_A(opts->range, 1).data.integer;\n+    nvim__buf_redraw_range(buf ? buf->handle : curbuf->handle, first, last, err);",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562430502",
            "id": 1562430502,
            "in_reply_to_id": 1562428056,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dIMwm",
            "original_commit_id": "9b57649ff8d7144e0660723a341af80c463fe7c3",
            "original_line": 2499,
            "original_position": 111,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 1996565448,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562430502/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-12T11:43:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562430502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562503696"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562503696"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think adding these new abbreviations is a good idea. I think it's better to use existing terminologies.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T12:47:33Z",
            "diff_hunk": "@@ -1307,6 +1307,34 @@ nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*\n                   |P|).\n       • {follow}  If true place cursor at end of inserted text.\n \n+nvim_redraw({opts})                                            *nvim_redraw()*\n+    Instruct Nvim to redraw various elements.\n+\n+    Parameters: ~\n+      • {opts}  Optional parameters.\n+                • flush: Update the screen with pending updates, even if Nvim\n+                  is waiting for input and would normally not do so.\n+                • clear: Forcefully redraw `win`, all windows containing\n+                  `buf`, or all windows when both are omitted.\n+                • range: Buffer range to redraw, useful for decoration\n+                  providers. Tuple `[first, last]`:\n+                  • first: first line number of the range\n+                  • last: last line number of the range\n+                • cursor: Immediately update cursor position on the screen.\n+                • status: Redraws (a combination of) the following status\n+                  components (array of one or more strings):\n+                  • \"bar\": |'winbar'|\n+                  • \"column\": |'statuscolumn'|\n+                  • \"line\": |'statusline'|\n+                  • \"tab\": |'tabline'|",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562503696",
            "id": 1562503696,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dIeoQ",
            "original_commit_id": "b8eba9d005da90e30186b42d64c7d58945372972",
            "original_line": 1329,
            "original_position": 23,
            "original_start_line": 1326,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 1996831302,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562503696/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-12T12:47:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562503696",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562516551"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562516551"
                }
            },
            "author_association": "MEMBER",
            "body": "Should the `opts` field still be named `status` in that case?",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T12:58:37Z",
            "diff_hunk": "@@ -1307,6 +1307,34 @@ nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*\n                   |P|).\n       • {follow}  If true place cursor at end of inserted text.\n \n+nvim_redraw({opts})                                            *nvim_redraw()*\n+    Instruct Nvim to redraw various elements.\n+\n+    Parameters: ~\n+      • {opts}  Optional parameters.\n+                • flush: Update the screen with pending updates, even if Nvim\n+                  is waiting for input and would normally not do so.\n+                • clear: Forcefully redraw `win`, all windows containing\n+                  `buf`, or all windows when both are omitted.\n+                • range: Buffer range to redraw, useful for decoration\n+                  providers. Tuple `[first, last]`:\n+                  • first: first line number of the range\n+                  • last: last line number of the range\n+                • cursor: Immediately update cursor position on the screen.\n+                • status: Redraws (a combination of) the following status\n+                  components (array of one or more strings):\n+                  • \"bar\": |'winbar'|\n+                  • \"column\": |'statuscolumn'|\n+                  • \"line\": |'statusline'|\n+                  • \"tab\": |'tabline'|",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562516551",
            "id": 1562516551,
            "in_reply_to_id": 1562503696,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dIhxH",
            "original_commit_id": "b8eba9d005da90e30186b42d64c7d58945372972",
            "original_line": 1329,
            "original_position": 23,
            "original_start_line": 1326,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 1996887989,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562516551/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-12T13:01:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562516551",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562531824"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562531824"
                }
            },
            "author_association": "MEMBER",
            "body": "I guess it's better to have them directly in `opts` as boolean fields, so that there will be fewer things to decide when something new needs to be added.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T13:11:43Z",
            "diff_hunk": "@@ -1307,6 +1307,34 @@ nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*\n                   |P|).\n       • {follow}  If true place cursor at end of inserted text.\n \n+nvim_redraw({opts})                                            *nvim_redraw()*\n+    Instruct Nvim to redraw various elements.\n+\n+    Parameters: ~\n+      • {opts}  Optional parameters.\n+                • flush: Update the screen with pending updates, even if Nvim\n+                  is waiting for input and would normally not do so.\n+                • clear: Forcefully redraw `win`, all windows containing\n+                  `buf`, or all windows when both are omitted.\n+                • range: Buffer range to redraw, useful for decoration\n+                  providers. Tuple `[first, last]`:\n+                  • first: first line number of the range\n+                  • last: last line number of the range\n+                • cursor: Immediately update cursor position on the screen.\n+                • status: Redraws (a combination of) the following status\n+                  components (array of one or more strings):\n+                  • \"bar\": |'winbar'|\n+                  • \"column\": |'statuscolumn'|\n+                  • \"line\": |'statusline'|\n+                  • \"tab\": |'tabline'|",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562531824",
            "id": 1562531824,
            "in_reply_to_id": 1562503696,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dIlfw",
            "original_commit_id": "b8eba9d005da90e30186b42d64c7d58945372972",
            "original_line": 1329,
            "original_position": 23,
            "original_start_line": 1326,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 1996953159,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562531824/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-12T13:16:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562531824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562565023"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562565023"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  if (status & ~kTabLine) {\r\n```",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T13:36:49Z",
            "diff_hunk": "@@ -2389,3 +2389,153 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+enum { kStatusColumn = 0x1, kStatusLine = 0x2, kTabLine = 0x4, kWinBar = 0x8, };\n+\n+static void redraw_status(win_T *wp, buf_T *buf, int status, bool *flush)\n+{\n+  if (buf != NULL && wp->w_buffer != buf) {\n+    return;\n+  }\n+\n+  if (*wp->w_p_stc != NUL && (status & kStatusColumn)) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Just hid or showing winbar for the first time, or drawing the statuscolumn.\n+  // Flush later because the window itself should be redrawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  if (*flush && (status & (kWinBar|kStatusLine))) {\n+    // When flushing later, just mark for redraw.\n+    wp->w_redr_status = true;\n+  } else if (status & (kWinBar|kStatusLine)) {\n+    // Not flushing later, only redraw the 'winbar' or 'statusline'.\n+    win_check_ns_hl(wp);\n+    if (status & kWinBar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (status & kStatusLine) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various elements.\n+///\n+/// @param opts  Optional parameters.\n+///               - flush: Update the screen with pending updates, even if\n+///                 Nvim is waiting for input and would normally not do so.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows when both are omitted.\n+///               - range: Buffer range to redraw, useful for decoration\n+///                 providers. Tuple `[first, last]`:\n+///                   - first: First line number of the range.\n+///                   - last: Last line number of the range.\n+///               - cursor: Immediately update cursor position on the screen.\n+///               - statuscolumn: Redraw the |statuscolumn| in `buf`, `win` or\n+///                 all windows.\n+///               - statusline: Redraw the |statusline| in `buf`, `win` or\n+///                 all windows.\n+///               - winbar: Redraw the |winbar| in `buf`, `win` or all\n+///                 windows.\n+///               - tabline: Redraw the |tabline|.\n+///               - win: Target a specific |window-ID| for `range`, `status`\n+///                 `cursor`, and `clear` updates. Current window when 0, all\n+///                 windows if omitted and applicable. Mutually exclusive\n+///                 with `buf`.\n+///               - buf: Target a specific buffer number for `range`, `status`,\n+///                 and `clear` updates, current buffer when 0 or omitted.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+  bool save_lz = p_lz;\n+  int save_rd = RedrawingDisabled;\n+  RedrawingDisabled = 0;\n+  p_lz = false;\n+\n+  if (HAS_KEY(opts, redraw, win)) {\n+    win = find_window_by_handle(opts->win, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, buf)) {\n+    VALIDATE(win == NULL, \"%s\", \"Invalid 'buf': already specified 'win'.\", {\n+      goto theend;\n+    });\n+    buf = find_buffer_by_handle(opts->buf, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (opts->clear) {\n+    if (win != NULL) {\n+      redraw_later(win, UPD_NOT_VALID);\n+    } else if (buf != NULL) {\n+      redraw_buf_later(buf, UPD_NOT_VALID);\n+    } else {\n+      redraw_all_later(UPD_NOT_VALID);\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, range)) {\n+    VALIDATE(kv_size(opts->range) == 2\n+             && kv_A(opts->range, 0).type == kObjectTypeInteger\n+             && kv_A(opts->range, 1).type == kObjectTypeInteger,\n+             \"%s\", \"Invalid 'range': expected 2-tuple of Lua numbers\", {\n+      goto theend;\n+    });\n+    Integer first = kv_A(opts->range, 0).data.integer;\n+    Integer last = kv_A(opts->range, 1).data.integer;\n+    Buffer handle = win ? win->w_buffer->handle : (buf ? buf->handle : curbuf->handle);\n+    nvim__buf_redraw_range(handle, first, last, err);\n+  }\n+\n+  bool flush = opts->flush || opts->clear;\n+  int status = ((opts->statuscolumn ? kStatusColumn : 0)\n+                | (opts->statusline ? kStatusLine : 0)\n+                | (opts->tabline ? kTabLine : 0)\n+                | (opts->winbar ? kWinBar : 0));\n+\n+  if (status & kTabLine) {\n+    // Just hid or showing tabline for the first time so flush later.\n+    if (redraw_tabline && firstwin->w_lines_valid == 0) {\n+      flush = true;\n+    } else {\n+      draw_tabline();\n+    }\n+  }\n+  if (status != kTabLine) {",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562565023",
            "id": 1562565023,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dItmf",
            "original_commit_id": "d83beb6396e71cbadafa763b048928ef5e2fdec7",
            "original_line": 2518,
            "original_position": 130,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 1997083706,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562565023/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-12T13:37:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562565023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562575046"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562575046"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe it's better to just mention here that these two are used a target a specific window/buffer for other optional parameters (without mentioning their names, as that isn't really useful), and make it clear in each optional parameter how it uses `buf`/`win`.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T13:43:12Z",
            "diff_hunk": "@@ -2389,3 +2389,153 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+enum { kStatusColumn = 0x1, kStatusLine = 0x2, kTabLine = 0x4, kWinBar = 0x8, };\n+\n+static void redraw_status(win_T *wp, buf_T *buf, int status, bool *flush)\n+{\n+  if (buf != NULL && wp->w_buffer != buf) {\n+    return;\n+  }\n+\n+  if (*wp->w_p_stc != NUL && (status & kStatusColumn)) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Just hid or showing winbar for the first time, or drawing the statuscolumn.\n+  // Flush later because the window itself should be redrawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  if (*flush && (status & (kWinBar|kStatusLine))) {\n+    // When flushing later, just mark for redraw.\n+    wp->w_redr_status = true;\n+  } else if (status & (kWinBar|kStatusLine)) {\n+    // Not flushing later, only redraw the 'winbar' or 'statusline'.\n+    win_check_ns_hl(wp);\n+    if (status & kWinBar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (status & kStatusLine) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various components.\n+///\n+/// @param opts  Optional parameters.\n+///               - flush: Update the screen with pending updates, even if\n+///                 Nvim is waiting for input and would normally not do so.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows when both are omitted.\n+///               - range: Buffer range to redraw, useful for decoration\n+///                 providers. Tuple `[first, last]`:\n+///                   - first: First line number of the range.\n+///                   - last: Last line number of the range.\n+///               - cursor: Immediately update cursor position on the screen.\n+///               - statuscolumn: Redraw the |'statuscolumn'| in `buf`, `win`\n+///                 or all windows.\n+///               - statusline: Redraw the |'statusline'| in `buf`, `win` or\n+///                 all windows.\n+///               - winbar: Redraw the |'winbar'| in `buf`, `win` or all\n+///                 windows.\n+///               - tabline: Redraw the |'tabline'|.\n+///               - win: Target a specific |window-ID| for `range`, `status`\n+///                 `cursor`, and `clear` updates. Current window when 0, all\n+///                 windows if omitted and applicable. Mutually exclusive\n+///                 with `buf`.\n+///               - buf: Target a specific buffer number for `range`, `status`,\n+///                 and `clear` updates, current buffer when 0 or omitted.",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562575046",
            "id": 1562575046,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dIwDG",
            "original_commit_id": "e5061bf2bbfaf7794c0d000768f4508ba126357f",
            "original_line": 2453,
            "original_position": 65,
            "original_start_line": 2448,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 1997118893,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562575046/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-12T13:44:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562575046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562602942"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562602942"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n             \"%s\", \"Invalid 'range': expected 2-tuple of Integers\", {\r\n```",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T14:04:43Z",
            "diff_hunk": "@@ -2389,3 +2389,151 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+enum { kStatusColumn = 0x1, kStatusLine = 0x2, kTabLine = 0x4, kWinBar = 0x8, };\n+\n+static void redraw_status(win_T *wp, buf_T *buf, int status, bool *flush)\n+{\n+  if (buf != NULL && wp->w_buffer != buf) {\n+    return;\n+  }\n+\n+  if (*wp->w_p_stc != NUL && (status & kStatusColumn)) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Just hid or showing winbar for the first time, or drawing the statuscolumn.\n+  // Flush later because the window itself should be redrawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  if (*flush && (status & (kWinBar|kStatusLine))) {\n+    // When flushing later, just mark for redraw.\n+    wp->w_redr_status = true;\n+  } else if (status & (kWinBar|kStatusLine)) {\n+    // Not flushing later, only redraw the 'winbar' or 'statusline'.\n+    win_check_ns_hl(wp);\n+    if (status & kWinBar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (status & kStatusLine) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various components.\n+///\n+/// @param opts  Optional parameters.\n+///               - win: Target a specific |window-ID| for various components.\n+///               - buf: Target a specific buffer number for various\n+///                 components.\n+///               - flush: Update the screen with pending updates, even if\n+///                 Nvim is waiting for input and would normally not do so.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows.\n+///               - range: Buffer range to redraw, useful for decoration\n+///                 providers. Expects a tuple `[first, last]` with the first\n+///                 and last line number of the range. Targets `buf`, the\n+///                 buffer in `win` or the current buffer.\n+///               - cursor: Immediately update cursor position on the screen\n+///                 in window `win` or the current window.\n+///               - statuscolumn: Redraw the |'statuscolumn'| in `buf`, `win`\n+///                 or all windows.\n+///               - statusline: Redraw the |'statusline'| in `buf`, `win` or\n+///                 all windows.\n+///               - winbar: Redraw the |'winbar'| in `buf`, `win` or all\n+///                 windows.\n+///               - tabline: Redraw the |'tabline'|.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+  bool save_lz = p_lz;\n+  int save_rd = RedrawingDisabled;\n+  RedrawingDisabled = 0;\n+  p_lz = false;\n+\n+  if (HAS_KEY(opts, redraw, win)) {\n+    win = find_window_by_handle(opts->win, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, buf)) {\n+    VALIDATE(win == NULL, \"%s\", \"Invalid 'buf': already specified 'win'.\", {\n+      goto theend;\n+    });\n+    buf = find_buffer_by_handle(opts->buf, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (opts->clear) {\n+    if (win != NULL) {\n+      redraw_later(win, UPD_NOT_VALID);\n+    } else if (buf != NULL) {\n+      redraw_buf_later(buf, UPD_NOT_VALID);\n+    } else {\n+      redraw_all_later(UPD_NOT_VALID);\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, range)) {\n+    VALIDATE(kv_size(opts->range) == 2\n+             && kv_A(opts->range, 0).type == kObjectTypeInteger\n+             && kv_A(opts->range, 1).type == kObjectTypeInteger,\n+             \"%s\", \"Invalid 'range': expected 2-tuple of Lua numbers\", {",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562602942",
            "id": 1562602942,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dI22-",
            "original_commit_id": "2ad590738d24e3258a8b3e21a0bf7e08c172e4ee",
            "original_line": 2493,
            "original_position": 105,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 1997231592,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562602942/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-12T14:04:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562602942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562605839"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562605839"
                }
            },
            "author_association": "MEMBER",
            "body": "Seemed more logical to me as well but then this should be updated first I think:\r\nhttps://github.com/neovim/neovim/blob/8697f3274b240a5a00774dba90329c00c4e914ab/src/nvim/lua/converter.c#L829\r\n\r\nNvm it's appropriate there I suppose, this was my thinking for `vim.redraw()` not `nvim_redraw()`.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T14:07:01Z",
            "diff_hunk": "@@ -2389,3 +2389,151 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+enum { kStatusColumn = 0x1, kStatusLine = 0x2, kTabLine = 0x4, kWinBar = 0x8, };\n+\n+static void redraw_status(win_T *wp, buf_T *buf, int status, bool *flush)\n+{\n+  if (buf != NULL && wp->w_buffer != buf) {\n+    return;\n+  }\n+\n+  if (*wp->w_p_stc != NUL && (status & kStatusColumn)) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Just hid or showing winbar for the first time, or drawing the statuscolumn.\n+  // Flush later because the window itself should be redrawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  if (*flush && (status & (kWinBar|kStatusLine))) {\n+    // When flushing later, just mark for redraw.\n+    wp->w_redr_status = true;\n+  } else if (status & (kWinBar|kStatusLine)) {\n+    // Not flushing later, only redraw the 'winbar' or 'statusline'.\n+    win_check_ns_hl(wp);\n+    if (status & kWinBar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (status & kStatusLine) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various components.\n+///\n+/// @param opts  Optional parameters.\n+///               - win: Target a specific |window-ID| for various components.\n+///               - buf: Target a specific buffer number for various\n+///                 components.\n+///               - flush: Update the screen with pending updates, even if\n+///                 Nvim is waiting for input and would normally not do so.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows.\n+///               - range: Buffer range to redraw, useful for decoration\n+///                 providers. Expects a tuple `[first, last]` with the first\n+///                 and last line number of the range. Targets `buf`, the\n+///                 buffer in `win` or the current buffer.\n+///               - cursor: Immediately update cursor position on the screen\n+///                 in window `win` or the current window.\n+///               - statuscolumn: Redraw the |'statuscolumn'| in `buf`, `win`\n+///                 or all windows.\n+///               - statusline: Redraw the |'statusline'| in `buf`, `win` or\n+///                 all windows.\n+///               - winbar: Redraw the |'winbar'| in `buf`, `win` or all\n+///                 windows.\n+///               - tabline: Redraw the |'tabline'|.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+  bool save_lz = p_lz;\n+  int save_rd = RedrawingDisabled;\n+  RedrawingDisabled = 0;\n+  p_lz = false;\n+\n+  if (HAS_KEY(opts, redraw, win)) {\n+    win = find_window_by_handle(opts->win, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, buf)) {\n+    VALIDATE(win == NULL, \"%s\", \"Invalid 'buf': already specified 'win'.\", {\n+      goto theend;\n+    });\n+    buf = find_buffer_by_handle(opts->buf, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (opts->clear) {\n+    if (win != NULL) {\n+      redraw_later(win, UPD_NOT_VALID);\n+    } else if (buf != NULL) {\n+      redraw_buf_later(buf, UPD_NOT_VALID);\n+    } else {\n+      redraw_all_later(UPD_NOT_VALID);\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, range)) {\n+    VALIDATE(kv_size(opts->range) == 2\n+             && kv_A(opts->range, 0).type == kObjectTypeInteger\n+             && kv_A(opts->range, 1).type == kObjectTypeInteger,\n+             \"%s\", \"Invalid 'range': expected 2-tuple of Lua numbers\", {",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562605839",
            "id": 1562605839,
            "in_reply_to_id": 1562602942,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dI3kP",
            "original_commit_id": "2ad590738d24e3258a8b3e21a0bf7e08c172e4ee",
            "original_line": 2493,
            "original_position": 105,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 1997243053,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562605839/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-12T14:08:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562605839",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1562606687"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562606687"
                }
            },
            "author_association": "MEMBER",
            "body": "API error messages usually don't end with a period\r\n```suggestion\r\n    VALIDATE(win == NULL, \"%s\", \"Invalid 'buf': already specified 'win'\", {\r\n```",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-12T14:07:42Z",
            "diff_hunk": "@@ -2389,3 +2389,151 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+enum { kStatusColumn = 0x1, kStatusLine = 0x2, kTabLine = 0x4, kWinBar = 0x8, };\n+\n+static void redraw_status(win_T *wp, buf_T *buf, int status, bool *flush)\n+{\n+  if (buf != NULL && wp->w_buffer != buf) {\n+    return;\n+  }\n+\n+  if (*wp->w_p_stc != NUL && (status & kStatusColumn)) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Just hid or showing winbar for the first time, or drawing the statuscolumn.\n+  // Flush later because the window itself should be redrawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  if (*flush && (status & (kWinBar|kStatusLine))) {\n+    // When flushing later, just mark for redraw.\n+    wp->w_redr_status = true;\n+  } else if (status & (kWinBar|kStatusLine)) {\n+    // Not flushing later, only redraw the 'winbar' or 'statusline'.\n+    win_check_ns_hl(wp);\n+    if (status & kWinBar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (status & kStatusLine) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various components.\n+///\n+/// @param opts  Optional parameters.\n+///               - win: Target a specific |window-ID| for various components.\n+///               - buf: Target a specific buffer number for various\n+///                 components.\n+///               - flush: Update the screen with pending updates, even if\n+///                 Nvim is waiting for input and would normally not do so.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows.\n+///               - range: Buffer range to redraw, useful for decoration\n+///                 providers. Expects a tuple `[first, last]` with the first\n+///                 and last line number of the range. Targets `buf`, the\n+///                 buffer in `win` or the current buffer.\n+///               - cursor: Immediately update cursor position on the screen\n+///                 in window `win` or the current window.\n+///               - statuscolumn: Redraw the |'statuscolumn'| in `buf`, `win`\n+///                 or all windows.\n+///               - statusline: Redraw the |'statusline'| in `buf`, `win` or\n+///                 all windows.\n+///               - winbar: Redraw the |'winbar'| in `buf`, `win` or all\n+///                 windows.\n+///               - tabline: Redraw the |'tabline'|.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+  bool save_lz = p_lz;\n+  int save_rd = RedrawingDisabled;\n+  RedrawingDisabled = 0;\n+  p_lz = false;\n+\n+  if (HAS_KEY(opts, redraw, win)) {\n+    win = find_window_by_handle(opts->win, err);\n+    if (ERROR_SET(err)) {\n+      goto theend;\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, buf)) {\n+    VALIDATE(win == NULL, \"%s\", \"Invalid 'buf': already specified 'win'.\", {",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1562606687",
            "id": 1562606687,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dI3xf",
            "original_commit_id": "2ad590738d24e3258a8b3e21a0bf7e08c172e4ee",
            "original_line": 2470,
            "original_position": 82,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 1997246505,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562606687/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-12T14:07:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1562606687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1564948656"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564948656"
                }
            },
            "author_association": "MEMBER",
            "body": "this is a private api, can we just remove it now?",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-14T22:03:31Z",
            "diff_hunk": "@@ -697,3 +698,18 @@ static void set_option_to(uint64_t channel_id, void *to, OptReqScope req_scope,\n     set_option_value_for(name.data, opt_idx, optval, opt_flags, req_scope, to, err);\n   });\n }\n+\n+/// @nodoc\n+/// @deprecated\n+void nvim__buf_redraw_range(Buffer buffer, Integer first, Integer last, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1564948656",
            "id": 1564948656,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dRziw",
            "original_commit_id": "89c223cbe39a851c780fc90df36e8c19bde071a5",
            "original_line": 704,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/api/deprecated.c",
            "position": null,
            "pull_request_review_id": 1999753707,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564948656/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T22:03:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564948656",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1564951201"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564951201"
                }
            },
            "author_association": "MEMBER",
            "body": "Fine by me but considering that it is [used](https://github.com/search?q=nvim__buf_redraw_range+language%3ALua+NOT+path%3Aruntime+NOT+api.lua&type=code) in the wild, a single release cycle with `@deprecated` could be reasonable?",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-14T22:11:10Z",
            "diff_hunk": "@@ -697,3 +698,18 @@ static void set_option_to(uint64_t channel_id, void *to, OptReqScope req_scope,\n     set_option_value_for(name.data, opt_idx, optval, opt_flags, req_scope, to, err);\n   });\n }\n+\n+/// @nodoc\n+/// @deprecated\n+void nvim__buf_redraw_range(Buffer buffer, Integer first, Integer last, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1564951201",
            "id": 1564951201,
            "in_reply_to_id": 1564948656,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dR0Kh",
            "original_commit_id": "89c223cbe39a851c780fc90df36e8c19bde071a5",
            "original_line": 704,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/api/deprecated.c",
            "position": null,
            "pull_request_review_id": 1999755038,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564951201/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T22:22:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564951201",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1564988163"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564988163"
                }
            },
            "author_association": "MEMBER",
            "body": "In general we should be pretty strict about not making efforts (deprecation cycles) for APIs that were marked as private. I see some important plugins in there, though I think it will be easy for them to migrate...",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-14T23:46:18Z",
            "diff_hunk": "@@ -697,3 +698,18 @@ static void set_option_to(uint64_t channel_id, void *to, OptReqScope req_scope,\n     set_option_value_for(name.data, opt_idx, optval, opt_flags, req_scope, to, err);\n   });\n }\n+\n+/// @nodoc\n+/// @deprecated\n+void nvim__buf_redraw_range(Buffer buffer, Integer first, Integer last, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1564988163",
            "id": 1564988163,
            "in_reply_to_id": 1564948656,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dR9MD",
            "original_commit_id": "89c223cbe39a851c780fc90df36e8c19bde071a5",
            "original_line": 704,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/api/deprecated.c",
            "position": null,
            "pull_request_review_id": 1999771403,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564988163/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T23:46:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564988163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1565238536"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565238536"
                }
            },
            "author_association": "MEMBER",
            "body": "I would just delete it already. otherwise `nvim__` prefix means **nothing** and there was no point in introducing it.\r\n\r\nThis should be seen as the same as plugins depending on internal functions in cffi, we need to accept those breaking all of the time.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-15T06:30:14Z",
            "diff_hunk": "@@ -697,3 +698,18 @@ static void set_option_to(uint64_t channel_id, void *to, OptReqScope req_scope,\n     set_option_value_for(name.data, opt_idx, optval, opt_flags, req_scope, to, err);\n   });\n }\n+\n+/// @nodoc\n+/// @deprecated\n+void nvim__buf_redraw_range(Buffer buffer, Integer first, Integer last, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1565238536",
            "id": 1565238536,
            "in_reply_to_id": 1564948656,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dS6UI",
            "original_commit_id": "89c223cbe39a851c780fc90df36e8c19bde071a5",
            "original_line": 704,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/api/deprecated.c",
            "position": null,
            "pull_request_review_id": 2000108093,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565238536/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-15T06:30:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565238536",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1565488497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565488497"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it should be reconsidered what `first` and `last` actually indicate, and document that. It seems that in `nvim__buf_redraw_range` `first` was a 0-indexed row number, whereas `last` was a 1-indexed line number (why?).",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-15T09:43:53Z",
            "diff_hunk": "@@ -2389,3 +2389,140 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+static void redraw_status(win_T *wp, Dict(redraw) *opts, bool *flush)\n+{\n+  if (opts->statuscolumn && *wp->w_p_stc != NUL) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Flush later in case winbar was just hidden or shown for the first time, or\n+  // statuscolumn is being drawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  // Mark for redraw in case flush will happen, otherwise redraw now.\n+  if (*flush && (opts->statusline || opts->winbar)) {\n+    wp->w_redr_status = true;\n+  } else if (opts->statusline || opts->winbar) {\n+    win_check_ns_hl(wp);\n+    if (opts->winbar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (opts->statusline) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various components.\n+///\n+/// @param opts  Optional parameters.\n+///               - win: Target a specific |window-ID| as described below.\n+///               - buf: Target a specific buffer number as described below.\n+///               - flush: Update the screen with pending updates.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows.\n+///               - range: Redraw a range in `buf`, the buffer in `win` or\n+///                 the current buffer. Useful for decoration providers.\n+///                 Expects a tuple `[first, last]` with the first and last\n+///                 line number of the range.\n+///               - cursor: Immediately update cursor position on the screen\n+///                 in `win` or the current window.\n+///               - statuscolumn: Redraw the 'statuscolumn' in `buf`, `win` or\n+///                 all windows.\n+///               - statusline: Redraw the 'statusline' in `buf`, `win` or all\n+///                 windows.\n+///               - winbar: Redraw the 'winbar' in `buf`, `win` or all windows.\n+///               - tabline: Redraw the 'tabline'.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+\n+  if (HAS_KEY(opts, redraw, win)) {\n+    win = find_window_by_handle(opts->win, err);\n+    if (ERROR_SET(err)) {\n+      return;\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, buf)) {\n+    VALIDATE(win == NULL, \"%s\", \"cannot use both 'buf' and 'win'\", {\n+      return;\n+    });\n+    buf = find_buffer_by_handle(opts->buf, err);\n+    if (ERROR_SET(err)) {\n+      return;\n+    }\n+  }\n+\n+  if (opts->clear) {\n+    if (win != NULL) {\n+      redraw_later(win, UPD_NOT_VALID);\n+    } else if (buf != NULL) {\n+      redraw_buf_later(buf, UPD_NOT_VALID);\n+    } else {\n+      redraw_all_later(UPD_NOT_VALID);\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, range)) {\n+    VALIDATE(kv_size(opts->range) == 2\n+             && kv_A(opts->range, 0).type == kObjectTypeInteger\n+             && kv_A(opts->range, 1).type == kObjectTypeInteger,\n+             \"%s\", \"Invalid 'range': Expected 2-tuple of Integers\", {\n+      return;\n+    });\n+    linenr_T first = (linenr_T)kv_A(opts->range, 0).data.integer;\n+    linenr_T last = (linenr_T)kv_A(opts->range, 1).data.integer;\n+    if (last < 0) {\n+      last = buf->b_ml.ml_line_count;\n+    }\n+    redraw_buf_range_later(win ? win->w_buffer : (buf ? buf : curbuf), first + 1, last);",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1565488497",
            "id": 1565488497,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dT3Vx",
            "original_commit_id": "2146c6cb711183fdb08bb6bad594481220afa0e2",
            "original_line": 2487,
            "original_position": 99,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 2000558597,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565488497/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-15T14:58:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565488497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1565582531"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565582531"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't that because `last` is exclusive? This is like most other APIs that take a line range.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-15T10:48:38Z",
            "diff_hunk": "@@ -2389,3 +2389,140 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+static void redraw_status(win_T *wp, Dict(redraw) *opts, bool *flush)\n+{\n+  if (opts->statuscolumn && *wp->w_p_stc != NUL) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Flush later in case winbar was just hidden or shown for the first time, or\n+  // statuscolumn is being drawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  // Mark for redraw in case flush will happen, otherwise redraw now.\n+  if (*flush && (opts->statusline || opts->winbar)) {\n+    wp->w_redr_status = true;\n+  } else if (opts->statusline || opts->winbar) {\n+    win_check_ns_hl(wp);\n+    if (opts->winbar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (opts->statusline) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various components.\n+///\n+/// @param opts  Optional parameters.\n+///               - win: Target a specific |window-ID| as described below.\n+///               - buf: Target a specific buffer number as described below.\n+///               - flush: Update the screen with pending updates.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows.\n+///               - range: Redraw a range in `buf`, the buffer in `win` or\n+///                 the current buffer. Useful for decoration providers.\n+///                 Expects a tuple `[first, last]` with the first and last\n+///                 line number of the range.\n+///               - cursor: Immediately update cursor position on the screen\n+///                 in `win` or the current window.\n+///               - statuscolumn: Redraw the 'statuscolumn' in `buf`, `win` or\n+///                 all windows.\n+///               - statusline: Redraw the 'statusline' in `buf`, `win` or all\n+///                 windows.\n+///               - winbar: Redraw the 'winbar' in `buf`, `win` or all windows.\n+///               - tabline: Redraw the 'tabline'.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+\n+  if (HAS_KEY(opts, redraw, win)) {\n+    win = find_window_by_handle(opts->win, err);\n+    if (ERROR_SET(err)) {\n+      return;\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, buf)) {\n+    VALIDATE(win == NULL, \"%s\", \"cannot use both 'buf' and 'win'\", {\n+      return;\n+    });\n+    buf = find_buffer_by_handle(opts->buf, err);\n+    if (ERROR_SET(err)) {\n+      return;\n+    }\n+  }\n+\n+  if (opts->clear) {\n+    if (win != NULL) {\n+      redraw_later(win, UPD_NOT_VALID);\n+    } else if (buf != NULL) {\n+      redraw_buf_later(buf, UPD_NOT_VALID);\n+    } else {\n+      redraw_all_later(UPD_NOT_VALID);\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, range)) {\n+    VALIDATE(kv_size(opts->range) == 2\n+             && kv_A(opts->range, 0).type == kObjectTypeInteger\n+             && kv_A(opts->range, 1).type == kObjectTypeInteger,\n+             \"%s\", \"Invalid 'range': Expected 2-tuple of Integers\", {\n+      return;\n+    });\n+    linenr_T first = (linenr_T)kv_A(opts->range, 0).data.integer;\n+    linenr_T last = (linenr_T)kv_A(opts->range, 1).data.integer;\n+    if (last < 0) {\n+      last = buf->b_ml.ml_line_count;\n+    }\n+    redraw_buf_range_later(win ? win->w_buffer : (buf ? buf : curbuf), first + 1, last);",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1565582531",
            "id": 1565582531,
            "in_reply_to_id": 1565488497,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dUOTD",
            "original_commit_id": "2146c6cb711183fdb08bb6bad594481220afa0e2",
            "original_line": 2487,
            "original_position": 99,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 2000743835,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565582531/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-15T10:50:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565582531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1565701663"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565701663"
                }
            },
            "author_association": "MEMBER",
            "body": "It also seems to me that the `nvim__buf_redraw_range(buf, 0, -1)` calls were \"abusing\" the API. I will try to [replace](https://github.com/neovim/neovim/compare/ef11b35a95e3a2c524d1292d00fdabde5b160892..1d4ff99a456277884f789e197a1da70b46bb8e7f) `clear` with `valid` in a way that I think should cover that use case. That should actually be more effective as well. I.e. lines will only be redrawn if the `on_win` callback for those LSP components actually placed decorations in the viewport. The `0, -1` range would redraw the entire window unconditionally.\r\n\r\nIt does seem that `valid = true` is **only** useful for decoration providers so I mentioned it in the docs. Marking a window with `UPD_VALID` only makes sense with the anticipation that a decoration provider may set `w_redr_top/bot`.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-15T12:20:44Z",
            "diff_hunk": "@@ -2389,3 +2389,140 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+static void redraw_status(win_T *wp, Dict(redraw) *opts, bool *flush)\n+{\n+  if (opts->statuscolumn && *wp->w_p_stc != NUL) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Flush later in case winbar was just hidden or shown for the first time, or\n+  // statuscolumn is being drawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  // Mark for redraw in case flush will happen, otherwise redraw now.\n+  if (*flush && (opts->statusline || opts->winbar)) {\n+    wp->w_redr_status = true;\n+  } else if (opts->statusline || opts->winbar) {\n+    win_check_ns_hl(wp);\n+    if (opts->winbar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (opts->statusline) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various components.\n+///\n+/// @param opts  Optional parameters.\n+///               - win: Target a specific |window-ID| as described below.\n+///               - buf: Target a specific buffer number as described below.\n+///               - flush: Update the screen with pending updates.\n+///               - clear: Forcefully redraw `win`, all windows containing\n+///                 `buf`, or all windows.\n+///               - range: Redraw a range in `buf`, the buffer in `win` or\n+///                 the current buffer. Useful for decoration providers.\n+///                 Expects a tuple `[first, last]` with the first and last\n+///                 line number of the range.\n+///               - cursor: Immediately update cursor position on the screen\n+///                 in `win` or the current window.\n+///               - statuscolumn: Redraw the 'statuscolumn' in `buf`, `win` or\n+///                 all windows.\n+///               - statusline: Redraw the 'statusline' in `buf`, `win` or all\n+///                 windows.\n+///               - winbar: Redraw the 'winbar' in `buf`, `win` or all windows.\n+///               - tabline: Redraw the 'tabline'.\n+void nvim_redraw(Dict(redraw) *opts, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = NULL;\n+  buf_T *buf = NULL;\n+\n+  if (HAS_KEY(opts, redraw, win)) {\n+    win = find_window_by_handle(opts->win, err);\n+    if (ERROR_SET(err)) {\n+      return;\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, buf)) {\n+    VALIDATE(win == NULL, \"%s\", \"cannot use both 'buf' and 'win'\", {\n+      return;\n+    });\n+    buf = find_buffer_by_handle(opts->buf, err);\n+    if (ERROR_SET(err)) {\n+      return;\n+    }\n+  }\n+\n+  if (opts->clear) {\n+    if (win != NULL) {\n+      redraw_later(win, UPD_NOT_VALID);\n+    } else if (buf != NULL) {\n+      redraw_buf_later(buf, UPD_NOT_VALID);\n+    } else {\n+      redraw_all_later(UPD_NOT_VALID);\n+    }\n+  }\n+\n+  if (HAS_KEY(opts, redraw, range)) {\n+    VALIDATE(kv_size(opts->range) == 2\n+             && kv_A(opts->range, 0).type == kObjectTypeInteger\n+             && kv_A(opts->range, 1).type == kObjectTypeInteger,\n+             \"%s\", \"Invalid 'range': Expected 2-tuple of Integers\", {\n+      return;\n+    });\n+    linenr_T first = (linenr_T)kv_A(opts->range, 0).data.integer;\n+    linenr_T last = (linenr_T)kv_A(opts->range, 1).data.integer;\n+    if (last < 0) {\n+      last = buf->b_ml.ml_line_count;\n+    }\n+    redraw_buf_range_later(win ? win->w_buffer : (buf ? buf : curbuf), first + 1, last);",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1565701663",
            "id": 1565701663,
            "in_reply_to_id": 1565488497,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dUrYf",
            "original_commit_id": "2146c6cb711183fdb08bb6bad594481220afa0e2",
            "original_line": 2487,
            "original_position": 99,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 2000953938,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565701663/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-16T18:49:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565701663",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1567150681"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1567150681"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n///\r\n/// @see |:redraw|\r\n///\r\n```\r\n\r\nLet's also mention `nvim_redraw()` from the docs for :mode/:redraw/:redrawstatus/etc.\r\n\r\nIn the future we should probably deprecate :redrawstatus/redrawtabline.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-16T10:53:03Z",
            "diff_hunk": "@@ -2389,3 +2389,144 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+static void redraw_status(win_T *wp, Dict(redraw) *opts, bool *flush)\n+{\n+  if (opts->statuscolumn && *wp->w_p_stc != NUL) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Flush later in case winbar was just hidden or shown for the first time, or\n+  // statuscolumn is being drawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  // Mark for redraw in case flush will happen, otherwise redraw now.\n+  if (*flush && (opts->statusline || opts->winbar)) {\n+    wp->w_redr_status = true;\n+  } else if (opts->statusline || opts->winbar) {\n+    win_check_ns_hl(wp);\n+    if (opts->winbar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (opts->statusline) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various components.\n+///",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1567150681",
            "id": 1567150681,
            "line": 2424,
            "node_id": "PRRC_kwDOAPphoM5daNJZ",
            "original_commit_id": "1ccbe4ef6b3019c7624e3b9bef0a3ab68b8636c6",
            "original_line": 2424,
            "original_position": 35,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 43,
            "pull_request_review_id": 2003292255,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1567150681/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-16T10:54:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1567150681",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1567160630"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1567160630"
                }
            },
            "author_association": "MEMBER",
            "body": "Sure. Could add a line like this to each command\r\n\r\n    See |nvim_redraw()| for a more granular alternative.\r\n\r\nOr add some kind of header above the bunch of them as those commands are grouped.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-16T11:01:10Z",
            "diff_hunk": "@@ -2389,3 +2389,144 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+static void redraw_status(win_T *wp, Dict(redraw) *opts, bool *flush)\n+{\n+  if (opts->statuscolumn && *wp->w_p_stc != NUL) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Flush later in case winbar was just hidden or shown for the first time, or\n+  // statuscolumn is being drawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  // Mark for redraw in case flush will happen, otherwise redraw now.\n+  if (*flush && (opts->statusline || opts->winbar)) {\n+    wp->w_redr_status = true;\n+  } else if (opts->statusline || opts->winbar) {\n+    win_check_ns_hl(wp);\n+    if (opts->winbar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (opts->statusline) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various components.\n+///",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1567160630",
            "id": 1567160630,
            "in_reply_to_id": 1567150681,
            "line": 2424,
            "node_id": "PRRC_kwDOAPphoM5daPk2",
            "original_commit_id": "1ccbe4ef6b3019c7624e3b9bef0a3ab68b8636c6",
            "original_line": 2424,
            "original_position": 35,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 43,
            "pull_request_review_id": 2003308381,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1567160630/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-16T11:50:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1567160630",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1567192852"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1567192852"
                }
            },
            "author_association": "MEMBER",
            "body": "> Could add a line like this to each command\r\n\r\nJust `See also |nvim_redraw()|.` on each command is the usual pattern. Headers are less effective for \"discovery\".",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-16T11:27:10Z",
            "diff_hunk": "@@ -2389,3 +2389,144 @@ Dictionary nvim_complete_set(Integer index, Dict(complete_set) *opts, Arena *are\n   }\n   return rv;\n }\n+\n+static void redraw_status(win_T *wp, Dict(redraw) *opts, bool *flush)\n+{\n+  if (opts->statuscolumn && *wp->w_p_stc != NUL) {\n+    wp->w_nrwidth_line_count = 0;\n+    changed_window_setting(wp);\n+  }\n+  win_grid_alloc(wp);\n+\n+  // Flush later in case winbar was just hidden or shown for the first time, or\n+  // statuscolumn is being drawn.\n+  if (wp->w_lines_valid == 0) {\n+    *flush = true;\n+  }\n+\n+  // Mark for redraw in case flush will happen, otherwise redraw now.\n+  if (*flush && (opts->statusline || opts->winbar)) {\n+    wp->w_redr_status = true;\n+  } else if (opts->statusline || opts->winbar) {\n+    win_check_ns_hl(wp);\n+    if (opts->winbar) {\n+      win_redr_winbar(wp);\n+    }\n+    if (opts->statusline) {\n+      win_redr_status(wp);\n+    }\n+    win_check_ns_hl(NULL);\n+  }\n+}\n+\n+/// Instruct Nvim to redraw various components.\n+///",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1567192852",
            "id": 1567192852,
            "in_reply_to_id": 1567150681,
            "line": 2424,
            "node_id": "PRRC_kwDOAPphoM5daXcU",
            "original_commit_id": "1ccbe4ef6b3019c7624e3b9bef0a3ab68b8636c6",
            "original_line": 2424,
            "original_position": 35,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 43,
            "pull_request_review_id": 2003360767,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1567192852/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-16T11:27:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1567192852",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1568652500"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568652500"
                }
            },
            "author_association": "MEMBER",
            "body": "If {opts} is empty what does it do?\r\n```suggestion\r\n    Instruct Nvim to redraw various components. By default (i.e. if {opts} is empty), ...\r\n```",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-17T10:55:57Z",
            "diff_hunk": "@@ -1307,6 +1307,33 @@ nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*\n                   |P|).\n       • {follow}  If true place cursor at end of inserted text.\n \n+nvim_redraw({opts})                                            *nvim_redraw()*\n+    Instruct Nvim to redraw various components.",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1568652500",
            "id": 1568652500,
            "line": 1311,
            "node_id": "PRRC_kwDOAPphoM5df7zU",
            "original_commit_id": "897b7ace0aa0d2db1c2c94cc69d010fc987d5e9e",
            "original_line": 1311,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": 5,
            "pull_request_review_id": 2005727932,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568652500/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-17T10:55:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568652500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1568653430"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568653430"
                }
            },
            "author_association": "MEMBER",
            "body": "is this still needed?",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-17T10:56:39Z",
            "diff_hunk": "@@ -13,6 +13,7 @@\n #include \"nvim/buffer_defs.h\"\n #include \"nvim/decoration.h\"\n #include \"nvim/decoration_defs.h\"\n+#include \"nvim/drawscreen.h\"",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1568653430",
            "id": 1568653430,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5df8B2",
            "original_commit_id": "897b7ace0aa0d2db1c2c94cc69d010fc987d5e9e",
            "original_line": 16,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/api/deprecated.c",
            "position": null,
            "pull_request_review_id": 2005729245,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568653430/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-17T10:56:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568653430",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1568655165"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568655165"
                }
            },
            "author_association": "MEMBER",
            "body": "is there a test for empty `opts` ? `nvim_redraw({})`",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-17T10:58:03Z",
            "diff_hunk": "@@ -4995,4 +4995,212 @@ describe('API', function()\n       eq(false, exec_lua('return _G.success'))\n     end)\n   end)\n+\n+  it('nvim_redraw', function()",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1568655165",
            "id": 1568655165,
            "line": 5019,
            "node_id": "PRRC_kwDOAPphoM5df8c9",
            "original_commit_id": "897b7ace0aa0d2db1c2c94cc69d010fc987d5e9e",
            "original_line": 5019,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": 5,
            "pull_request_review_id": 2005732154,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568655165/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-17T10:58:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568655165",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1568661355"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568661355"
                }
            },
            "author_association": "MEMBER",
            "body": "Currently nothing. What it should do is a good question. Could make it a shorthand for something or just error out.",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-17T11:03:32Z",
            "diff_hunk": "@@ -1307,6 +1307,33 @@ nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*\n                   |P|).\n       • {follow}  If true place cursor at end of inserted text.\n \n+nvim_redraw({opts})                                            *nvim_redraw()*\n+    Instruct Nvim to redraw various components.",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1568661355",
            "id": 1568661355,
            "in_reply_to_id": 1568652500,
            "line": 1311,
            "node_id": "PRRC_kwDOAPphoM5df99r",
            "original_commit_id": "897b7ace0aa0d2db1c2c94cc69d010fc987d5e9e",
            "original_line": 1311,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": 5,
            "pull_request_review_id": 2005742361,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568661355/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-17T11:04:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568661355",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28101#discussion_r1568681378"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568681378"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's make it an error until we think of something more useful",
            "commit_id": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
            "created_at": "2024-04-17T11:20:22Z",
            "diff_hunk": "@@ -1307,6 +1307,33 @@ nvim_put({lines}, {type}, {after}, {follow})                      *nvim_put()*\n                   |P|).\n       • {follow}  If true place cursor at end of inserted text.\n \n+nvim_redraw({opts})                                            *nvim_redraw()*\n+    Instruct Nvim to redraw various components.",
            "html_url": "https://github.com/neovim/neovim/pull/28101#discussion_r1568681378",
            "id": 1568681378,
            "in_reply_to_id": 1568652500,
            "line": 1311,
            "node_id": "PRRC_kwDOAPphoM5dgC2i",
            "original_commit_id": "897b7ace0aa0d2db1c2c94cc69d010fc987d5e9e",
            "original_line": 1311,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": 5,
            "pull_request_review_id": 2005774428,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568681378/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-17T11:20:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1568681378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "It seems that for some reason the Perl tests become very flaky on this PR. I guess that may have something to do with the added API metadata.",
            "created_at": "2024-04-12T22:33:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/28101#issuecomment-2052641914",
            "id": 2052641914,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28101",
            "node_id": "IC_kwDOAPphoM56WNR6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052641914/reactions"
            },
            "updated_at": "2024-04-12T22:33:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052641914",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is that our problem or up to the provider to handle?",
            "created_at": "2024-04-12T22:59:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/28101#issuecomment-2052663705",
            "id": 2052663705,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28101",
            "node_id": "IC_kwDOAPphoM56WSmZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052663705/reactions"
            },
            "updated_at": "2024-04-12T23:03:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052663705",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Not sure, but anyway it's out of the scope of this PR.",
            "created_at": "2024-04-12T23:12:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/28101#issuecomment-2052680823",
            "id": 2052680823,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28101",
            "node_id": "IC_kwDOAPphoM56WWx3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052680823/reactions"
            },
            "updated_at": "2024-04-12T23:12:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052680823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28101/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/28101/commits",
    "created_at": "2024-03-29T13:50:30Z",
    "diff_url": "https://github.com/neovim/neovim/pull/28101.diff",
    "draft": false,
    "head": {
        "label": "luukvbaal:redraw",
        "ref": "redraw",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/luukvbaal/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/luukvbaal/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/luukvbaal/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/luukvbaal/neovim/branches{/branch}",
            "clone_url": "https://github.com/luukvbaal/neovim.git",
            "collaborators_url": "https://api.github.com/repos/luukvbaal/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/luukvbaal/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/luukvbaal/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/luukvbaal/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/luukvbaal/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/luukvbaal/neovim/contributors",
            "created_at": "2022-07-05T23:21:47Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/luukvbaal/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/luukvbaal/neovim/downloads",
            "events_url": "https://api.github.com/repos/luukvbaal/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/luukvbaal/neovim/forks",
            "full_name": "luukvbaal/neovim",
            "git_commits_url": "https://api.github.com/repos/luukvbaal/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/luukvbaal/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/luukvbaal/neovim/git/tags{/sha}",
            "git_url": "git://github.com/luukvbaal/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/luukvbaal/neovim/hooks",
            "html_url": "https://github.com/luukvbaal/neovim",
            "id": 510922471,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/luukvbaal/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/luukvbaal/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/luukvbaal/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/luukvbaal/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/luukvbaal/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/luukvbaal/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/luukvbaal/neovim/merges",
            "milestones_url": "https://api.github.com/repos/luukvbaal/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHnQO5w",
            "notifications_url": "https://api.github.com/repos/luukvbaal/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/luukvbaal/neovim/pulls{/number}",
            "pushed_at": "2024-04-21T10:56:20Z",
            "releases_url": "https://api.github.com/repos/luukvbaal/neovim/releases{/id}",
            "size": 261889,
            "ssh_url": "git@github.com:luukvbaal/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/luukvbaal/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/luukvbaal/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/luukvbaal/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/luukvbaal/neovim/subscription",
            "svn_url": "https://github.com/luukvbaal/neovim",
            "tags_url": "https://api.github.com/repos/luukvbaal/neovim/tags",
            "teams_url": "https://api.github.com/repos/luukvbaal/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/luukvbaal/neovim/git/trees{/sha}",
            "updated_at": "2024-04-20T16:14:06Z",
            "url": "https://api.github.com/repos/luukvbaal/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
            "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
            "followers_url": "https://api.github.com/users/luukvbaal/followers",
            "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
            "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/luukvbaal",
            "id": 31730729,
            "login": "luukvbaal",
            "node_id": "MDQ6VXNlcjMxNzMwNzI5",
            "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
            "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
            "repos_url": "https://api.github.com/users/luukvbaal/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/luukvbaal"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/28101",
    "id": 1798019094,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28101",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "redraw, layout, presentation",
            "id": 718084050,
            "name": "display",
            "node_id": "MDU6TGFiZWw3MTgwODQwNTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/display"
        }
    ],
    "locked": false,
    "merge_commit_sha": "6df8679cd0dbffb32ddea8edc630a1349efe5782",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5rK5gW",
    "number": 28101,
    "patch_url": "https://github.com/neovim/neovim/pull/28101.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/28101/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/5e1b7c5123a978bee7b8b29d83eebef0c22f5903",
    "title": "feat(api): add nvim_redraw for more granular redrawing",
    "updated_at": "2024-04-21T10:56:31Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/28101",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
        "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
        "followers_url": "https://api.github.com/users/luukvbaal/followers",
        "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
        "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/luukvbaal",
        "id": 31730729,
        "login": "luukvbaal",
        "node_id": "MDQ6VXNlcjMxNzMwNzI5",
        "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
        "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
        "repos_url": "https://api.github.com/users/luukvbaal/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/luukvbaal"
    }
}