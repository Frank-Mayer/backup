{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/12437/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/12437/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/12437"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/12437"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/12437/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/1669e0113554c99ee207180f454f17988d3dac1d"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5142,
            "forks_count": 5142,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1740,
            "open_issues_count": 1740,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-01-16T01:33:17Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 247954,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 72793,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-01-16T01:52:35Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 72793,
            "watchers_count": 72793,
            "web_commit_signoff_required": false
        },
        "sha": "363d153bb94a965ff811d8c7514047264b37d61d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "This is a follow-up on #11781, where I noted that [`s:check_python` may be unnecessarily complicated](https://github.com/neovim/neovim/pull/11781#issuecomment-579313377) (see https://github.com/neovim/neovim/issues/11753#issuecomment-578715584 for details) and asked whether there'd be interest in simplifying it. @justinmk said [yes, \"as long as it results in a net reduction of code, and not a lot of indirection\"](https://github.com/neovim/neovim/pull/11781#issuecomment-581191973).\r\n\r\nLooking at the diff stats, the elephant in the room is that I actually ended up adding more code than I removed, but this is primarily because I ended up implementing reusable version comparison, including unit tests (see below). Hopefully adding tested code is less of a problem :) And if maintainers decide it should be removed, the PR will turn into a net reduction.\r\n\r\nI realize there are quite a lot of code changes here and I'm obviously very open to feedback and dialing down on some of these ideas. I just thought they would be easier to discuss if I actually made the changes, rather than suggest / theorize about them. Please don't take this as an outsider stomping all over the codebase and lacking respect; take this as a conversation starter :)\r\n\r\n### Demo and motivation\r\n\r\nThe main goal was to remove existing gnarliness and branching in Python provider detection and health checks, which currently leads to both false positives and false negatives.\r\n\r\nSay you have the following setup:\r\n\r\n```console\r\n$ python3 -m venv venv\r\n$ source venv/bin/activate\r\n(venv) $ pip install pynvim\r\n(venv) $ nvim -u NORC +'let g:python_host_prog = \"python3\" | checkhealth provider'\r\n```\r\n\r\nInstalling `pynvim` inside the virtualenv simulates suboptimal setup for Python 3; setting the Python 2 host prog to `python3` simulates having an interpreter which doesn't satisfy version requirements.\r\n\r\nCurrently, this is the health check output:\r\n\r\n![image](https://user-images.githubusercontent.com/2734517/83871946-520c5f00-a731-11ea-95ec-9c44e181b0ce.png)\r\n\r\nThe Python 2 provider gets set to a Python 3 interpreter (which can presumably break things) and just a warning is issued; the virtualenv problem slips by undetected (even though there is currently an error message for this type of situation, it just doesn't get triggered correctly).\r\n\r\nWith this PR, the health check would look something like this:\r\n\r\n![image](https://user-images.githubusercontent.com/2734517/83871710-d6aaad80-a730-11ea-8107-984c24e1a95d.png)\r\n\r\nTrying to set a Python 3 interpreter as the Python 2 provider becomes a hard error; the virtualenv problem is reported on.\r\n\r\n### High-level overview\r\n\r\n`provider/pythonx`:\r\n\r\n- shouldn't have a hardcoded list of Python executable names as possible candidates, it's a maintenance burden because new versions have to be added as they're released, and until they are, the provider will fail to detect them, which is inconvenient for early adopters of new Python releases who are on stable Neovim\r\n- it should instead consider all viable candidates found on the `$PATH`, i.e. *not* just the first one: if the first `python3` found on the `$PATH` can't `import neovim`, it makes sense to try the remaining ones as well\r\n- it should also return the full path to the provider interpreter (if one is successfully found) as well as its version, since it already has to determine them anyway\r\n\r\nThen, `s:check_python` in `health/provider`:\r\n\r\n- can entirely avoid having to figure out the full path to the provider interpreter on its own, which is error-prone and previously involved logic which didn't quite match that in `provider/pythonx`\r\n- it can also avoid having to figure out the Python version (which is not that error-prone, but why do it twice)\r\n- it can instead just focus on presenting correct troubleshooting messages\r\n\r\nAdditionally:\r\n\r\n- I don't think Neovim should make a special effort to troubleshoot `pyenv`. It's hard to keep diagnostics in sync with a third-party tool. All that matters is getting a working Python binary (of the correct version); if `pyenv` shims get in the way, it's *their* job to fail with informative output, which they generally do, and Neovim makes sure the user sees it, which should be enough.\r\n- I noticed some broken ad-hoc version comparisons while refactoring (using either vanilla string comparison or float/int conversions), so I decided to add a slightly more robust and reusable version comparison function to `lua-stdlib` and use that instead.\r\n\r\n  When I was part way through implementing it, I noticed that a `s:version_cmp` function was used for this purpose in other places. I still saw benefit in having a public, more feature complete function with unit tests for this purpose, so I went ahead and finished it, and replaced `s:version_cmp` with it. This is very much up for debate though, of course.\r\n\r\nI'm happy to discuss all of this further, either in this main thread or in threads attached to particular pieces of code.",
    "closed_at": "2024-01-13T15:11:33Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436062142"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436062142"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "typo: environemnt => environment\r\n",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T17:30:00Z",
            "diff_hunk": "@@ -286,148 +251,72 @@ function! s:check_python(version) abort\n   call health#report_start('Python ' . a:version . ' provider (optional)')\n \n   let pyname = 'python'.(a:version == 2 ? '' : '3')\n-  let python_exe = ''\n   let venv = exists('$VIRTUAL_ENV') ? resolve($VIRTUAL_ENV) : ''\n   let host_prog_var = pyname.'_host_prog'\n-  let python_multiple = []\n \n   if s:disabled_via_loaded_var(pyname)\n     return\n   endif\n \n-  let [pyenv, pyenv_root] = s:check_for_pyenv()\n-\n   if exists('g:'.host_prog_var)\n     call health#report_info(printf('Using: g:%s = \"%s\"', host_prog_var, get(g:, host_prog_var)))\n   endif\n \n-  let [pyname, pythonx_errors] = provider#pythonx#Detect(a:version)\n+  let [python_exe, pyversion, pythonx_errors] = provider#pythonx#Detect(a:version)\n \n-  if empty(pyname)\n-    call health#report_warn('No Python executable found that can `import neovim`. '\n-            \\ . 'Using the first available executable for diagnostics.')\n-  elseif exists('g:'.host_prog_var)\n-    let python_exe = pyname\n+  if empty(python_exe)\n+    call health#report_error('No Python '.a:version.' executable found that can `import neovim`.')\n   endif\n \n-  \" No Python executable could `import neovim`, or host_prog_var was used.\n+  \" No Python executable could `import neovim`, or host_prog_var was used and\n+  \" led to errors.\n   if !empty(pythonx_errors)\n-    call health#report_error('Python provider error:', pythonx_errors)\n-\n-  elseif !empty(pyname) && empty(python_exe)\n-    if !exists('g:'.host_prog_var)\n-      call health#report_info(printf('`g:%s` is not set.  Searching for '\n-            \\ . '%s in the environment.', host_prog_var, pyname))\n-    endif\n-\n-    if !empty(pyenv)\n-      let python_exe = s:trim(s:system([pyenv, 'which', pyname], '', 1))\n-\n-      if empty(python_exe)\n-        call health#report_warn(printf('pyenv could not find %s.', pyname))\n-      endif\n-    endif\n-\n-    if empty(python_exe)\n-      let python_exe = exepath(pyname)\n-\n-      if exists('$PATH')\n-        for path in split($PATH, has('win32') ? ';' : ':')\n-          let path_bin = s:normalize_path(path.'/'.pyname)\n-          if path_bin != s:normalize_path(python_exe)\n-                \\ && index(python_multiple, path_bin) == -1\n-                \\ && executable(path_bin)\n-            call add(python_multiple, path_bin)\n-          endif\n-        endfor\n-\n-        if len(python_multiple)\n-          \" This is worth noting since the user may install something\n-          \" that changes $PATH, like homebrew.\n-          call health#report_info(printf('Multiple %s executables found.  '\n-                \\ . 'Set `g:%s` to avoid surprises.', pyname, host_prog_var))\n-        endif\n-\n-        if python_exe =~# '\\<shims\\>'\n-          call health#report_warn(printf('`%s` appears to be a pyenv shim.', python_exe), [\n-                      \\ '`pyenv` is not in $PATH, your pyenv installation is broken. '\n-                      \\ .'Set `g:'.host_prog_var.'` to avoid surprises.',\n-                      \\ ])\n-        endif\n-      endif\n-    endif\n+    call health#report_warn('Python provider troubleshooting messages:', pythonx_errors)\n   endif\n \n-  if !empty(python_exe) && !exists('g:'.host_prog_var)\n-    if empty(venv) && !empty(pyenv)\n-          \\ && !empty(pyenv_root) && resolve(python_exe) !~# '^'.pyenv_root.'/'\n-      call health#report_warn('pyenv is not set up optimally.', [\n-            \\ printf('Create a virtualenv specifically '\n-            \\ . 'for Nvim using pyenv, and set `g:%s`.  This will avoid '\n-            \\ . 'the need to install the pynvim module in each '\n-            \\ . 'version/virtualenv.', host_prog_var)\n-            \\ ])\n-    elseif !empty(venv)\n-      if !empty(pyenv_root)\n-        let venv_root = pyenv_root\n-      else\n-        let venv_root = fnamemodify(venv, ':h')\n-      endif\n-\n-      if resolve(python_exe) !~# '^'.venv_root.'/'\n-        call health#report_warn('Your virtualenv is not set up optimally.', [\n-              \\ printf('Create a virtualenv specifically '\n-              \\ . 'for Nvim and use `g:%s`.  This will avoid '\n-              \\ . 'the need to install the pynvim module in each '\n-              \\ . 'virtualenv.', host_prog_var)\n-              \\ ])\n-      endif\n-    endif\n-  endif\n-\n-  if empty(python_exe) && !empty(pyname)\n-    \" An error message should have already printed.\n-    call health#report_error(printf('`%s` was not found.', pyname))\n-  elseif !empty(python_exe) && !s:check_bin(python_exe)\n-    let python_exe = ''\n+  if !empty(python_exe) && !empty(venv) \n+    \\ && s:python_exepath(python_exe) =~# '^'.venv.'/'\n+    \\ && !exists('g:'.host_prog_var)\n+    call health#report_warn('Your virtualenv is not set up optimally.', [\n+          \\ 'Set g:'.host_prog_var.' and install the pynvim module ONLY in that environment.',\n+          \\ 'You can use a global environemnt, or a virtualenv created specifically for Nvim.',",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436062142",
            "id": 436062142,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2MjE0Mg==",
            "original_commit_id": "b80f3391787cd0bb9351f99dba2bf43bc73aeaa7",
            "original_line": 282,
            "original_position": 233,
            "original_start_line": null,
            "path": "runtime/autoload/health/provider.vim",
            "position": null,
            "pull_request_review_id": 425489986,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436062142/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436062142",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6589866?v=4",
                "events_url": "https://api.github.com/users/brcolow/events{/privacy}",
                "followers_url": "https://api.github.com/users/brcolow/followers",
                "following_url": "https://api.github.com/users/brcolow/following{/other_user}",
                "gists_url": "https://api.github.com/users/brcolow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brcolow",
                "id": 6589866,
                "login": "brcolow",
                "node_id": "MDQ6VXNlcjY1ODk4NjY=",
                "organizations_url": "https://api.github.com/users/brcolow/orgs",
                "received_events_url": "https://api.github.com/users/brcolow/received_events",
                "repos_url": "https://api.github.com/users/brcolow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brcolow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brcolow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brcolow"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436159311"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436159311"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Well-spotted, thanks!",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T20:53:31Z",
            "diff_hunk": "@@ -286,148 +251,72 @@ function! s:check_python(version) abort\n   call health#report_start('Python ' . a:version . ' provider (optional)')\n \n   let pyname = 'python'.(a:version == 2 ? '' : '3')\n-  let python_exe = ''\n   let venv = exists('$VIRTUAL_ENV') ? resolve($VIRTUAL_ENV) : ''\n   let host_prog_var = pyname.'_host_prog'\n-  let python_multiple = []\n \n   if s:disabled_via_loaded_var(pyname)\n     return\n   endif\n \n-  let [pyenv, pyenv_root] = s:check_for_pyenv()\n-\n   if exists('g:'.host_prog_var)\n     call health#report_info(printf('Using: g:%s = \"%s\"', host_prog_var, get(g:, host_prog_var)))\n   endif\n \n-  let [pyname, pythonx_errors] = provider#pythonx#Detect(a:version)\n+  let [python_exe, pyversion, pythonx_errors] = provider#pythonx#Detect(a:version)\n \n-  if empty(pyname)\n-    call health#report_warn('No Python executable found that can `import neovim`. '\n-            \\ . 'Using the first available executable for diagnostics.')\n-  elseif exists('g:'.host_prog_var)\n-    let python_exe = pyname\n+  if empty(python_exe)\n+    call health#report_error('No Python '.a:version.' executable found that can `import neovim`.')\n   endif\n \n-  \" No Python executable could `import neovim`, or host_prog_var was used.\n+  \" No Python executable could `import neovim`, or host_prog_var was used and\n+  \" led to errors.\n   if !empty(pythonx_errors)\n-    call health#report_error('Python provider error:', pythonx_errors)\n-\n-  elseif !empty(pyname) && empty(python_exe)\n-    if !exists('g:'.host_prog_var)\n-      call health#report_info(printf('`g:%s` is not set.  Searching for '\n-            \\ . '%s in the environment.', host_prog_var, pyname))\n-    endif\n-\n-    if !empty(pyenv)\n-      let python_exe = s:trim(s:system([pyenv, 'which', pyname], '', 1))\n-\n-      if empty(python_exe)\n-        call health#report_warn(printf('pyenv could not find %s.', pyname))\n-      endif\n-    endif\n-\n-    if empty(python_exe)\n-      let python_exe = exepath(pyname)\n-\n-      if exists('$PATH')\n-        for path in split($PATH, has('win32') ? ';' : ':')\n-          let path_bin = s:normalize_path(path.'/'.pyname)\n-          if path_bin != s:normalize_path(python_exe)\n-                \\ && index(python_multiple, path_bin) == -1\n-                \\ && executable(path_bin)\n-            call add(python_multiple, path_bin)\n-          endif\n-        endfor\n-\n-        if len(python_multiple)\n-          \" This is worth noting since the user may install something\n-          \" that changes $PATH, like homebrew.\n-          call health#report_info(printf('Multiple %s executables found.  '\n-                \\ . 'Set `g:%s` to avoid surprises.', pyname, host_prog_var))\n-        endif\n-\n-        if python_exe =~# '\\<shims\\>'\n-          call health#report_warn(printf('`%s` appears to be a pyenv shim.', python_exe), [\n-                      \\ '`pyenv` is not in $PATH, your pyenv installation is broken. '\n-                      \\ .'Set `g:'.host_prog_var.'` to avoid surprises.',\n-                      \\ ])\n-        endif\n-      endif\n-    endif\n+    call health#report_warn('Python provider troubleshooting messages:', pythonx_errors)\n   endif\n \n-  if !empty(python_exe) && !exists('g:'.host_prog_var)\n-    if empty(venv) && !empty(pyenv)\n-          \\ && !empty(pyenv_root) && resolve(python_exe) !~# '^'.pyenv_root.'/'\n-      call health#report_warn('pyenv is not set up optimally.', [\n-            \\ printf('Create a virtualenv specifically '\n-            \\ . 'for Nvim using pyenv, and set `g:%s`.  This will avoid '\n-            \\ . 'the need to install the pynvim module in each '\n-            \\ . 'version/virtualenv.', host_prog_var)\n-            \\ ])\n-    elseif !empty(venv)\n-      if !empty(pyenv_root)\n-        let venv_root = pyenv_root\n-      else\n-        let venv_root = fnamemodify(venv, ':h')\n-      endif\n-\n-      if resolve(python_exe) !~# '^'.venv_root.'/'\n-        call health#report_warn('Your virtualenv is not set up optimally.', [\n-              \\ printf('Create a virtualenv specifically '\n-              \\ . 'for Nvim and use `g:%s`.  This will avoid '\n-              \\ . 'the need to install the pynvim module in each '\n-              \\ . 'virtualenv.', host_prog_var)\n-              \\ ])\n-      endif\n-    endif\n-  endif\n-\n-  if empty(python_exe) && !empty(pyname)\n-    \" An error message should have already printed.\n-    call health#report_error(printf('`%s` was not found.', pyname))\n-  elseif !empty(python_exe) && !s:check_bin(python_exe)\n-    let python_exe = ''\n+  if !empty(python_exe) && !empty(venv) \n+    \\ && s:python_exepath(python_exe) =~# '^'.venv.'/'\n+    \\ && !exists('g:'.host_prog_var)\n+    call health#report_warn('Your virtualenv is not set up optimally.', [\n+          \\ 'Set g:'.host_prog_var.' and install the pynvim module ONLY in that environment.',\n+          \\ 'You can use a global environemnt, or a virtualenv created specifically for Nvim.',",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436159311",
            "id": 436159311,
            "in_reply_to_id": 436062142,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTMxMQ==",
            "original_commit_id": "b80f3391787cd0bb9351f99dba2bf43bc73aeaa7",
            "original_line": 282,
            "original_position": 233,
            "original_start_line": null,
            "path": "runtime/autoload/health/provider.vim",
            "position": null,
            "pull_request_review_id": 425619106,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436159311/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436159311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436191880"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436191880"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Replaced with more elaborate function in `lua-stdlib` which has unit tests.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:28:01Z",
            "diff_hunk": "@@ -19,22 +19,6 @@ function! s:cmd_ok(cmd) abort\n   return v:shell_error == 0\n endfunction\n \n-\" Simple version comparison.\n-function! s:version_cmp(a, b) abort",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436191880",
            "id": 436191880,
            "line": 23,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5MTg4MA==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 23,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/autoload/health/provider.vim",
            "position": 5,
            "pull_request_review_id": 425662514,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436191880/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436191880",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436192044"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436192044"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Not necessary, this information is now returned by `provider#pythonx#Detect`.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:28:41Z",
            "diff_hunk": "@@ -183,39 +167,28 @@ endfunction\n \" Nvim's Python client was updated.\n \"\n \" Returns: [\n-\"     {python executable version},",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436192044",
            "id": 436192044,
            "line": 186,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5MjA0NA==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 186,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/autoload/health/provider.vim",
            "position": 27,
            "pull_request_review_id": 425662739,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436192044/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436192044",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436192323"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436192323"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Not necessary, the Python interpreter returned by the provider is already guaranteed to be executable.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:29:44Z",
            "diff_hunk": "@@ -244,39 +217,31 @@ function! s:version_info(python) abort\n   let nvim_path_base = fnamemodify(nvim_path, ':~:h')\n   let version_status = 'unknown; '.nvim_path_base\n   if !s:is_bad_response(nvim_version) && !s:is_bad_response(pypi_version)\n-    if s:version_cmp(nvim_version, pypi_version) == -1\n+    if luaeval('vim.cmp_versions(_A[1], _A[2])', [nvim_version, pypi_version]) == -1\n       let version_status = 'outdated; from '.nvim_path_base\n     else\n       let version_status = 'up to date'\n     endif\n   endif\n \n-  return [python_version, nvim_version, pypi_version, version_status]\n-endfunction\n-\n-\" Check the Python interpreter's usability.\n-function! s:check_bin(bin) abort",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436192323",
            "id": 436192323,
            "line": 258,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5MjMyMw==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 258,
            "original_position": 82,
            "original_start_line": null,
            "path": "runtime/autoload/health/provider.vim",
            "position": 81,
            "pull_request_review_id": 425663080,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436192323/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436192323",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436193305"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436193305"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I thought the original message was somewhat confusing/unclear when reading the code -- the function is called `s:disabled_via_loaded_var`, the previous branch reports \"Disabled\" and returns 1, this one *also* reports \"Disabled\" but doesn't.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:33:27Z",
            "diff_hunk": "@@ -244,39 +217,31 @@ function! s:version_info(python) abort\n   let nvim_path_base = fnamemodify(nvim_path, ':~:h')\n   let version_status = 'unknown; '.nvim_path_base\n   if !s:is_bad_response(nvim_version) && !s:is_bad_response(pypi_version)\n-    if s:version_cmp(nvim_version, pypi_version) == -1\n+    if luaeval('vim.cmp_versions(_A[1], _A[2])', [nvim_version, pypi_version]) == -1\n       let version_status = 'outdated; from '.nvim_path_base\n     else\n       let version_status = 'up to date'\n     endif\n   endif\n \n-  return [python_version, nvim_version, pypi_version, version_status]\n-endfunction\n-\n-\" Check the Python interpreter's usability.\n-function! s:check_bin(bin) abort\n-  if !filereadable(a:bin) && (!has('win32') || !filereadable(a:bin.'.exe'))\n-    call health#report_error(printf('\"%s\" was not found.', a:bin))\n-    return 0\n-  elseif executable(a:bin) != 1\n-    call health#report_error(printf('\"%s\" is not executable.', a:bin))\n-    return 0\n-  endif\n-  return 1\n+  return [nvim_version, pypi_version, version_status]\n endfunction\n \n \" Check \"loaded\" var for given a:provider.\n \" Returns 1 if the caller should return (skip checks).\n function! s:disabled_via_loaded_var(provider) abort\n   let loaded_var = 'g:loaded_'.a:provider.'_provider'\n-  if exists(loaded_var) && !exists('*provider#'.a:provider.'#Call')\n+  let call_func = 'provider#'.a:provider.'#Call'\n+  if exists(loaded_var) && !exists('*'.call_func)\n     let v = eval(loaded_var)\n     if 0 is v\n       call health#report_info('Disabled ('.loaded_var.'='.v.').')\n       return 1\n     else\n-      call health#report_info('Disabled ('.loaded_var.'='.v.').  This might be due to some previous error.')\n+      call health#report_info(printf('%s set to %s but %s function does not exist.  '\n+        \\ . 'This might be due to some previous error.  If you are setting %s manually '\n+        \\ . 'to disable the %s provider, set it to 0 to avoid this message.',\n+        \\ loaded_var, v, call_func, loaded_var, a:provider))",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436193305",
            "id": 436193305,
            "line": 244,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5MzMwNQ==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 244,
            "original_position": 110,
            "original_start_line": 279,
            "path": "runtime/autoload/health/provider.vim",
            "position": 109,
            "pull_request_review_id": 425664254,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436193305/reactions"
            },
            "side": "RIGHT",
            "start_line": 279,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436193305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436194242"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436194242"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is the safer way to invoke `pip` to make sure the right one is used.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:36:51Z",
            "diff_hunk": "@@ -286,148 +251,74 @@ function! s:check_python(version) abort\n   call health#report_start('Python ' . a:version . ' provider (optional)')\n \n   let pyname = 'python'.(a:version == 2 ? '' : '3')\n-  let python_exe = ''\n   let venv = exists('$VIRTUAL_ENV') ? resolve($VIRTUAL_ENV) : ''\n   let host_prog_var = pyname.'_host_prog'\n-  let python_multiple = []\n \n   if s:disabled_via_loaded_var(pyname)\n     return\n   endif\n \n-  let [pyenv, pyenv_root] = s:check_for_pyenv()\n-\n   if exists('g:'.host_prog_var)\n     call health#report_info(printf('Using: g:%s = \"%s\"', host_prog_var, get(g:, host_prog_var)))\n+  else\n+    call health#report_info(printf('g:%s is not set.  Searching for %s in the environment.', host_prog_var, pyname))\n   endif\n \n-  let [pyname, pythonx_errors] = provider#pythonx#Detect(a:version)\n+  let [python_exe, pyversion, pythonx_errors] = provider#pythonx#Detect(a:version)\n \n-  if empty(pyname)\n-    call health#report_warn('No Python executable found that can `import neovim`. '\n-            \\ . 'Using the first available executable for diagnostics.')\n-  elseif exists('g:'.host_prog_var)\n-    let python_exe = pyname\n+  if empty(python_exe)\n+    call health#report_error('No Python '.a:version.' executable found that can `import neovim`.')\n   endif\n \n-  \" No Python executable could `import neovim`, or host_prog_var was used.\n+  \" No Python executable could `import neovim`, or host_prog_var was used and\n+  \" led to errors.\n   if !empty(pythonx_errors)\n-    call health#report_error('Python provider error:', pythonx_errors)\n-\n-  elseif !empty(pyname) && empty(python_exe)\n-    if !exists('g:'.host_prog_var)\n-      call health#report_info(printf('`g:%s` is not set.  Searching for '\n-            \\ . '%s in the environment.', host_prog_var, pyname))\n-    endif\n-\n-    if !empty(pyenv)\n-      let python_exe = s:trim(s:system([pyenv, 'which', pyname], '', 1))\n-\n-      if empty(python_exe)\n-        call health#report_warn(printf('pyenv could not find %s.', pyname))\n-      endif\n-    endif\n-\n-    if empty(python_exe)\n-      let python_exe = exepath(pyname)\n-\n-      if exists('$PATH')\n-        for path in split($PATH, has('win32') ? ';' : ':')\n-          let path_bin = s:normalize_path(path.'/'.pyname)\n-          if path_bin != s:normalize_path(python_exe)\n-                \\ && index(python_multiple, path_bin) == -1\n-                \\ && executable(path_bin)\n-            call add(python_multiple, path_bin)\n-          endif\n-        endfor\n-\n-        if len(python_multiple)\n-          \" This is worth noting since the user may install something\n-          \" that changes $PATH, like homebrew.\n-          call health#report_info(printf('Multiple %s executables found.  '\n-                \\ . 'Set `g:%s` to avoid surprises.', pyname, host_prog_var))\n-        endif\n-\n-        if python_exe =~# '\\<shims\\>'\n-          call health#report_warn(printf('`%s` appears to be a pyenv shim.', python_exe), [\n-                      \\ '`pyenv` is not in $PATH, your pyenv installation is broken. '\n-                      \\ .'Set `g:'.host_prog_var.'` to avoid surprises.',\n-                      \\ ])\n-        endif\n-      endif\n-    endif\n-  endif\n-\n-  if !empty(python_exe) && !exists('g:'.host_prog_var)\n-    if empty(venv) && !empty(pyenv)\n-          \\ && !empty(pyenv_root) && resolve(python_exe) !~# '^'.pyenv_root.'/'\n-      call health#report_warn('pyenv is not set up optimally.', [\n-            \\ printf('Create a virtualenv specifically '\n-            \\ . 'for Nvim using pyenv, and set `g:%s`.  This will avoid '\n-            \\ . 'the need to install the pynvim module in each '\n-            \\ . 'version/virtualenv.', host_prog_var)\n-            \\ ])\n-    elseif !empty(venv)\n-      if !empty(pyenv_root)\n-        let venv_root = pyenv_root\n-      else\n-        let venv_root = fnamemodify(venv, ':h')\n-      endif\n-\n-      if resolve(python_exe) !~# '^'.venv_root.'/'\n-        call health#report_warn('Your virtualenv is not set up optimally.', [\n-              \\ printf('Create a virtualenv specifically '\n-              \\ . 'for Nvim and use `g:%s`.  This will avoid '\n-              \\ . 'the need to install the pynvim module in each '\n-              \\ . 'virtualenv.', host_prog_var)\n-              \\ ])\n-      endif\n-    endif\n+    call health#report_warn('Python provider troubleshooting messages:', pythonx_errors)\n   endif\n \n-  if empty(python_exe) && !empty(pyname)\n-    \" An error message should have already printed.\n-    call health#report_error(printf('`%s` was not found.', pyname))\n-  elseif !empty(python_exe) && !s:check_bin(python_exe)\n-    let python_exe = ''\n+  if !empty(python_exe) && !empty(venv) \n+    \\ && s:python_exepath(python_exe) =~# '^'.venv.'/'\n+    \\ && !exists('g:'.host_prog_var)\n+    call health#report_warn('Your virtualenv is not set up optimally.', [\n+          \\ 'Set g:'.host_prog_var.' and install the pynvim module ONLY in that environment.',\n+          \\ 'You can use a global environment, or a virtualenv created specifically for Nvim.',\n+          \\ 'This will avoid the need to install the pynvim module in each virtualenv.'])\n   endif\n \n   \" Diagnostic output\n-  call health#report_info('Executable: ' . (empty(python_exe) ? 'Not found' : python_exe))\n+  call health#report_info('Python provider executable: ' . (empty(python_exe) ? 'Not found' : python_exe))\n+  let python_multiple = provider#pythonx#GetPythonCandidates(a:version, $PATH, v:true)\n   if len(python_multiple)\n+    \" This is worth noting since the user may install something that changes\n+    \" $PATH, like Homebrew.\n+    call health#report_info(printf('Multiple Python %d candidates found.  '\n+          \\ . 'Set g:%s to avoid surprises.', a:version, host_prog_var))\n     for path_bin in python_multiple\n-      call health#report_info('Other python executable: ' . path_bin)\n+      if path_bin !=# python_exe\n+        call health#report_info(printf('Other Python %d candidate: %s', a:version, path_bin))\n+      endif\n     endfor\n   endif\n \n-  let pip = 'pip' . (a:version == 2 ? '' : '3')\n-\n   if empty(python_exe)\n     \" No Python executable can import 'neovim'. Check if any Python executable\n     \" can import 'pynvim'. If so, that Python failed to import 'neovim' as\n     \" well, which is most probably due to a failed pip upgrade:\n     \" https://github.com/neovim/neovim/wiki/Following-HEAD#20181118\n-    let [pynvim_exe, errors] = provider#pythonx#DetectByModule('pynvim', a:version)\n+    let [pynvim_exe, _, errors] = provider#pythonx#DetectByModule('pynvim', a:version)\n     if !empty(pynvim_exe)\n+      let pip = pynvim_exe . ' -m pip'",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436194242",
            "id": 436194242,
            "line": 311,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NDI0Mg==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 311,
            "original_position": 266,
            "original_start_line": null,
            "path": "runtime/autoload/health/provider.vim",
            "position": 262,
            "pull_request_review_id": 425665377,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436194242/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436194242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436194815"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436194815"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "These are some of the happy-go-lucky version checks I mentioned; they are no longer needed, `pythonx/provider` makes sure it only returns an appropriate Python 2 or 3 version that satisfies minimum version requirements.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:38:58Z",
            "diff_hunk": "@@ -286,148 +251,74 @@ function! s:check_python(version) abort\n   call health#report_start('Python ' . a:version . ' provider (optional)')\n \n   let pyname = 'python'.(a:version == 2 ? '' : '3')\n-  let python_exe = ''\n   let venv = exists('$VIRTUAL_ENV') ? resolve($VIRTUAL_ENV) : ''\n   let host_prog_var = pyname.'_host_prog'\n-  let python_multiple = []\n \n   if s:disabled_via_loaded_var(pyname)\n     return\n   endif\n \n-  let [pyenv, pyenv_root] = s:check_for_pyenv()\n-\n   if exists('g:'.host_prog_var)\n     call health#report_info(printf('Using: g:%s = \"%s\"', host_prog_var, get(g:, host_prog_var)))\n+  else\n+    call health#report_info(printf('g:%s is not set.  Searching for %s in the environment.', host_prog_var, pyname))\n   endif\n \n-  let [pyname, pythonx_errors] = provider#pythonx#Detect(a:version)\n+  let [python_exe, pyversion, pythonx_errors] = provider#pythonx#Detect(a:version)\n \n-  if empty(pyname)\n-    call health#report_warn('No Python executable found that can `import neovim`. '\n-            \\ . 'Using the first available executable for diagnostics.')\n-  elseif exists('g:'.host_prog_var)\n-    let python_exe = pyname\n+  if empty(python_exe)\n+    call health#report_error('No Python '.a:version.' executable found that can `import neovim`.')\n   endif\n \n-  \" No Python executable could `import neovim`, or host_prog_var was used.\n+  \" No Python executable could `import neovim`, or host_prog_var was used and\n+  \" led to errors.\n   if !empty(pythonx_errors)\n-    call health#report_error('Python provider error:', pythonx_errors)\n-\n-  elseif !empty(pyname) && empty(python_exe)\n-    if !exists('g:'.host_prog_var)\n-      call health#report_info(printf('`g:%s` is not set.  Searching for '\n-            \\ . '%s in the environment.', host_prog_var, pyname))\n-    endif\n-\n-    if !empty(pyenv)\n-      let python_exe = s:trim(s:system([pyenv, 'which', pyname], '', 1))\n-\n-      if empty(python_exe)\n-        call health#report_warn(printf('pyenv could not find %s.', pyname))\n-      endif\n-    endif\n-\n-    if empty(python_exe)\n-      let python_exe = exepath(pyname)\n-\n-      if exists('$PATH')\n-        for path in split($PATH, has('win32') ? ';' : ':')\n-          let path_bin = s:normalize_path(path.'/'.pyname)\n-          if path_bin != s:normalize_path(python_exe)\n-                \\ && index(python_multiple, path_bin) == -1\n-                \\ && executable(path_bin)\n-            call add(python_multiple, path_bin)\n-          endif\n-        endfor\n-\n-        if len(python_multiple)\n-          \" This is worth noting since the user may install something\n-          \" that changes $PATH, like homebrew.\n-          call health#report_info(printf('Multiple %s executables found.  '\n-                \\ . 'Set `g:%s` to avoid surprises.', pyname, host_prog_var))\n-        endif\n-\n-        if python_exe =~# '\\<shims\\>'\n-          call health#report_warn(printf('`%s` appears to be a pyenv shim.', python_exe), [\n-                      \\ '`pyenv` is not in $PATH, your pyenv installation is broken. '\n-                      \\ .'Set `g:'.host_prog_var.'` to avoid surprises.',\n-                      \\ ])\n-        endif\n-      endif\n-    endif\n-  endif\n-\n-  if !empty(python_exe) && !exists('g:'.host_prog_var)\n-    if empty(venv) && !empty(pyenv)\n-          \\ && !empty(pyenv_root) && resolve(python_exe) !~# '^'.pyenv_root.'/'\n-      call health#report_warn('pyenv is not set up optimally.', [\n-            \\ printf('Create a virtualenv specifically '\n-            \\ . 'for Nvim using pyenv, and set `g:%s`.  This will avoid '\n-            \\ . 'the need to install the pynvim module in each '\n-            \\ . 'version/virtualenv.', host_prog_var)\n-            \\ ])\n-    elseif !empty(venv)\n-      if !empty(pyenv_root)\n-        let venv_root = pyenv_root\n-      else\n-        let venv_root = fnamemodify(venv, ':h')\n-      endif\n-\n-      if resolve(python_exe) !~# '^'.venv_root.'/'\n-        call health#report_warn('Your virtualenv is not set up optimally.', [\n-              \\ printf('Create a virtualenv specifically '\n-              \\ . 'for Nvim and use `g:%s`.  This will avoid '\n-              \\ . 'the need to install the pynvim module in each '\n-              \\ . 'virtualenv.', host_prog_var)\n-              \\ ])\n-      endif\n-    endif\n+    call health#report_warn('Python provider troubleshooting messages:', pythonx_errors)\n   endif\n \n-  if empty(python_exe) && !empty(pyname)\n-    \" An error message should have already printed.\n-    call health#report_error(printf('`%s` was not found.', pyname))\n-  elseif !empty(python_exe) && !s:check_bin(python_exe)\n-    let python_exe = ''\n+  if !empty(python_exe) && !empty(venv) \n+    \\ && s:python_exepath(python_exe) =~# '^'.venv.'/'\n+    \\ && !exists('g:'.host_prog_var)\n+    call health#report_warn('Your virtualenv is not set up optimally.', [\n+          \\ 'Set g:'.host_prog_var.' and install the pynvim module ONLY in that environment.',\n+          \\ 'You can use a global environment, or a virtualenv created specifically for Nvim.',\n+          \\ 'This will avoid the need to install the pynvim module in each virtualenv.'])\n   endif\n \n   \" Diagnostic output\n-  call health#report_info('Executable: ' . (empty(python_exe) ? 'Not found' : python_exe))\n+  call health#report_info('Python provider executable: ' . (empty(python_exe) ? 'Not found' : python_exe))\n+  let python_multiple = provider#pythonx#GetPythonCandidates(a:version, $PATH, v:true)\n   if len(python_multiple)\n+    \" This is worth noting since the user may install something that changes\n+    \" $PATH, like Homebrew.\n+    call health#report_info(printf('Multiple Python %d candidates found.  '\n+          \\ . 'Set g:%s to avoid surprises.', a:version, host_prog_var))\n     for path_bin in python_multiple\n-      call health#report_info('Other python executable: ' . path_bin)\n+      if path_bin !=# python_exe\n+        call health#report_info(printf('Other Python %d candidate: %s', a:version, path_bin))\n+      endif\n     endfor\n   endif\n \n-  let pip = 'pip' . (a:version == 2 ? '' : '3')\n-\n   if empty(python_exe)\n     \" No Python executable can import 'neovim'. Check if any Python executable\n     \" can import 'pynvim'. If so, that Python failed to import 'neovim' as\n     \" well, which is most probably due to a failed pip upgrade:\n     \" https://github.com/neovim/neovim/wiki/Following-HEAD#20181118\n-    let [pynvim_exe, errors] = provider#pythonx#DetectByModule('pynvim', a:version)\n+    let [pynvim_exe, _, errors] = provider#pythonx#DetectByModule('pynvim', a:version)\n     if !empty(pynvim_exe)\n+      let pip = pynvim_exe . ' -m pip'\n       call health#report_error(\n             \\ 'Detected pip upgrade failure: Python executable can import \"pynvim\" but '\n             \\ . 'not \"neovim\": '. pynvim_exe,\n             \\ \"Use that Python version to reinstall \\\"pynvim\\\" and optionally \\\"neovim\\\".\\n\"\n             \\ . pip .\" uninstall pynvim neovim\\n\"\n             \\ . pip .\" install pynvim\\n\"\n-            \\ . pip .\" install neovim  # only if needed by third-party software\")\n+            \\ . pip .\" install neovim  # only if needed by third-party software\\n\"\n+            \\ . 'Retry with the --user flag if you get a permission error.')\n     endif\n   else\n-    let [pyversion, current, latest, status] = s:version_info(python_exe)\n-\n-    if a:version != str2nr(pyversion)\n-      call health#report_warn('Unexpected Python version.' .\n-                  \\ ' This could lead to confusing error messages.')\n-    endif\n-\n-    if a:version == 3 && str2float(pyversion) < 3.3\n-      call health#report_warn('Python 3.3+ is recommended.')\n-    endif",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436194815",
            "id": 436194815,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NDgxNQ==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 430,
            "original_position": 287,
            "original_start_line": 423,
            "path": "runtime/autoload/health/provider.vim",
            "position": null,
            "pull_request_review_id": 425666074,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436194815/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436194815",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436195072"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436195072"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This can never happen: in this branch, we're using a Python interpreter which has already proven it can `import neovim`.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:40:02Z",
            "diff_hunk": "@@ -437,54 +328,17 @@ function! s:check_python(version) abort\n       call health#report_info(printf('pynvim version: %s', current))\n     endif\n \n-    if s:is_bad_response(current)\n-      call health#report_error(\n-        \\ \"pynvim is not installed.\\nError: \".current,\n-        \\ ['Run in shell: '. pip .' install pynvim'])\n-    endif\n-",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436195072",
            "id": 436195072,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NTA3Mg==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 440,
            "original_position": 301,
            "original_start_line": 440,
            "path": "runtime/autoload/health/provider.vim",
            "position": null,
            "pull_request_review_id": 425666356,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436195072/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436195072",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436195853"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436195853"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`pyenv` has no useful information to contribute regarding Python provider detection (apart from the possible error output captured in `provider/pythonx`), and as I've argued previously, I don't think it's worth it to maintain troubleshooting code for a third-party tool for no particular reason.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:43:19Z",
            "diff_hunk": "@@ -437,54 +328,17 @@ function! s:check_python(version) abort\n       call health#report_info(printf('pynvim version: %s', current))\n     endif\n \n-    if s:is_bad_response(current)\n-      call health#report_error(\n-        \\ \"pynvim is not installed.\\nError: \".current,\n-        \\ ['Run in shell: '. pip .' install pynvim'])\n-    endif\n-\n     if s:is_bad_response(latest)\n-      call health#report_warn('Could not contact PyPI to get latest version.')\n+      call health#report_warn('Could not contact PyPI to check if pynvim is latest version.')\n       call health#report_error('HTTP request failed: '.latest)\n     elseif s:is_bad_response(status)\n       call health#report_warn(printf('Latest pynvim is NOT installed: %s', latest))\n-    elseif !s:is_bad_response(current)\n+    else\n       call health#report_ok(printf('Latest pynvim is installed.'))\n     endif\n   endif\n endfunction\n \n-\" Check if pyenv is available and a valid pyenv root can be found, then return\n-\" their respective paths. If either of those is invalid, return two empty\n-\" strings, effectivly ignoring pyenv.\n-function! s:check_for_pyenv() abort",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436195853",
            "id": 436195853,
            "line": 455,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NTg1Mw==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 455,
            "original_position": 318,
            "original_start_line": null,
            "path": "runtime/autoload/health/provider.vim",
            "position": 315,
            "pull_request_review_id": 425667304,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436195853/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436195853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436196151"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436196151"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think it might be a good idea to put these minimum versions in a more prominent place at the beginning of the file.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:44:45Z",
            "diff_hunk": "@@ -4,6 +4,8 @@ if exists('s:loaded_pythonx_provider')\n endif\n \n let s:loaded_pythonx_provider = 1\n+let s:min_python2_version = '2.6'\n+let s:min_python3_version = '3.3'",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436196151",
            "id": 436196151,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NjE1MQ==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 8,
            "original_position": 5,
            "original_start_line": 7,
            "path": "runtime/autoload/provider/pythonx.vim",
            "position": null,
            "pull_request_review_id": 425667694,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436196151/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436196151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436196684"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436196684"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It's better to return a list of errors, the health check formats it prettily. And the \"provider/pythonx: Could not load Python etc.\" message feels a bit redundant in the context that it's shown in.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:46:49Z",
            "diff_hunk": "@@ -22,96 +24,122 @@ function! provider#pythonx#Require(host) abort\n   return provider#Poll(args, a:host.orig_name, '$NVIM_PYTHON_LOG_FILE')\n endfunction\n \n-function! s:get_python_executable_from_host_var(major_version) abort\n-  return expand(get(g:, 'python'.(a:major_version == 3 ? '3' : '').'_host_prog', ''))\n+\" Turn a path with a host-specific directory separator into Vim's\n+\" comma-separated format.\n+function! s:to_comma_separated_path(path) abort\n+  if has('win32')\n+    let path_sep = ';'\n+    \" remove backslashes at the end of path items, they would turn into \\, and\n+    \" escape the , which globpath() expects as path separator\n+    let path = substitute(a:path, '\\\\\\+;', ';', 'g')\n+  else\n+    let path_sep = ':'\n+    let path = a:path\n+  endif\n+\n+  \" escape existing commas, so that they remain part of the individual paths\n+  let path = substitute(path, ',', '\\\\,', 'g')\n+\n+  \" deduplicate path items, otherwise globpath() returns even more duplicate\n+  \" matches for some reason\n+  let already_seen = {}\n+  let path_list = []\n+  for item in split(path, path_sep)\n+    if !has_key(already_seen, item)\n+      let already_seen[item] = v:true\n+      call add(path_list, item)\n+    endif\n+  endfor\n+\n+  return join(path_list, ',')\n endfunction\n \n-function! s:get_python_candidates(major_version) abort\n-  return {\n-        \\ 2: ['python2', 'python2.7', 'python2.6', 'python'],\n-        \\ 3: ['python3', 'python3.9', 'python3.8', 'python3.7', 'python3.6', 'python3.5',\n-        \\     'python3.4', 'python3.3', 'python']\n-        \\ }[a:major_version]\n+\" Returns a list of all Python executables found on path. a:convert specifies\n+\" whether the path to search needs to be converted from a host-specific\n+\" separator to the comma-separated format expected by globpath().\n+function! provider#pythonx#GetPythonCandidates(major_version, path, convert) abort\n+  let path = a:convert ? s:to_comma_separated_path(a:path) : a:path\n+  let starts_with_python = globpath(path, 'python*', v:true, v:true)\n+  let ext_pat = has('win32') ? '(\\\\.exe)?' : ''\n+  let matches_version = printf('v:val =~# \"\\\\v[\\\\/]python(%s)?(\\\\.[0-9]+)?%s$\"', a:major_version, ext_pat)\n+  return filter(starts_with_python, matches_version)\n endfunction\n \n-\" Returns [path_to_python_executable, error_message]\n+\" Returns [path_to_python_executable, python_version, error_messages]\n function! provider#pythonx#Detect(major_version) abort\n   return provider#pythonx#DetectByModule('neovim', a:major_version)\n endfunction\n \n-\" Returns [path_to_python_executable, error_message]\n+\" Returns [path_to_python_executable, python_version, error_messages]\n function! provider#pythonx#DetectByModule(module, major_version) abort\n-  let python_exe = s:get_python_executable_from_host_var(a:major_version)\n+  let host_prog = 'python'.(a:major_version == 3 ? '3' : '').'_host_prog'\n+  let python_exe = get(g:, host_prog, '')\n+  let errors = []\n \n   if !empty(python_exe)\n-    return [exepath(expand(python_exe)), '']\n+    let candidates = [exepath(expand(python_exe))]\n+    call add(errors, 'The g:'.host_prog.' you set cannot be used.')\n+  else\n+    let candidates = provider#pythonx#GetPythonCandidates(a:major_version, $PATH, v:true)\n   endif\n \n-  let candidates = s:get_python_candidates(a:major_version)\n-  let errors = []\n+  if empty(candidates)\n+    call add(errors, 'No candidates for a Python '.a:major_version.' executable found on $PATH.')\n+  endif\n \n   for exe in candidates\n-    let [result, error] = provider#pythonx#CheckForModule(exe, a:module, a:major_version)\n+    let [result, python_version, error] = provider#pythonx#CheckForModule(exe, a:module, a:major_version)\n     if result\n-      return [exe, error]\n+      return [exe, python_version, error]\n     endif\n     \" Accumulate errors in case we don't find any suitable Python executable.\n     call add(errors, error)\n   endfor\n \n   \" No suitable Python executable found.\n-  return ['', 'provider/pythonx: Could not load Python '.a:major_version.\":\\n\".join(errors, \"\\n\")]\n+  return ['', '', errors]",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436196684",
            "id": 436196684,
            "line": 101,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NjY4NA==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 101,
            "original_position": 103,
            "original_start_line": null,
            "path": "runtime/autoload/provider/pythonx.vim",
            "position": 104,
            "pull_request_review_id": 425668291,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436196684/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436196684",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436197396"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436197396"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I wouldn't special case problems with `pyenv` shims, the error output should be enough for the user to determine what's going on, especially since Neovim's addition to it is just a cryptic \"/foo/bar/python does not exist\".",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:49:56Z",
            "diff_hunk": "@@ -22,96 +24,122 @@ function! provider#pythonx#Require(host) abort\n   return provider#Poll(args, a:host.orig_name, '$NVIM_PYTHON_LOG_FILE')\n endfunction\n \n-function! s:get_python_executable_from_host_var(major_version) abort\n-  return expand(get(g:, 'python'.(a:major_version == 3 ? '3' : '').'_host_prog', ''))\n+\" Turn a path with a host-specific directory separator into Vim's\n+\" comma-separated format.\n+function! s:to_comma_separated_path(path) abort\n+  if has('win32')\n+    let path_sep = ';'\n+    \" remove backslashes at the end of path items, they would turn into \\, and\n+    \" escape the , which globpath() expects as path separator\n+    let path = substitute(a:path, '\\\\\\+;', ';', 'g')\n+  else\n+    let path_sep = ':'\n+    let path = a:path\n+  endif\n+\n+  \" escape existing commas, so that they remain part of the individual paths\n+  let path = substitute(path, ',', '\\\\,', 'g')\n+\n+  \" deduplicate path items, otherwise globpath() returns even more duplicate\n+  \" matches for some reason\n+  let already_seen = {}\n+  let path_list = []\n+  for item in split(path, path_sep)\n+    if !has_key(already_seen, item)\n+      let already_seen[item] = v:true\n+      call add(path_list, item)\n+    endif\n+  endfor\n+\n+  return join(path_list, ',')\n endfunction\n \n-function! s:get_python_candidates(major_version) abort\n-  return {\n-        \\ 2: ['python2', 'python2.7', 'python2.6', 'python'],\n-        \\ 3: ['python3', 'python3.9', 'python3.8', 'python3.7', 'python3.6', 'python3.5',\n-        \\     'python3.4', 'python3.3', 'python']\n-        \\ }[a:major_version]\n+\" Returns a list of all Python executables found on path. a:convert specifies\n+\" whether the path to search needs to be converted from a host-specific\n+\" separator to the comma-separated format expected by globpath().\n+function! provider#pythonx#GetPythonCandidates(major_version, path, convert) abort\n+  let path = a:convert ? s:to_comma_separated_path(a:path) : a:path\n+  let starts_with_python = globpath(path, 'python*', v:true, v:true)\n+  let ext_pat = has('win32') ? '(\\\\.exe)?' : ''\n+  let matches_version = printf('v:val =~# \"\\\\v[\\\\/]python(%s)?(\\\\.[0-9]+)?%s$\"', a:major_version, ext_pat)\n+  return filter(starts_with_python, matches_version)\n endfunction\n \n-\" Returns [path_to_python_executable, error_message]\n+\" Returns [path_to_python_executable, python_version, error_messages]\n function! provider#pythonx#Detect(major_version) abort\n   return provider#pythonx#DetectByModule('neovim', a:major_version)\n endfunction\n \n-\" Returns [path_to_python_executable, error_message]\n+\" Returns [path_to_python_executable, python_version, error_messages]\n function! provider#pythonx#DetectByModule(module, major_version) abort\n-  let python_exe = s:get_python_executable_from_host_var(a:major_version)\n+  let host_prog = 'python'.(a:major_version == 3 ? '3' : '').'_host_prog'\n+  let python_exe = get(g:, host_prog, '')\n+  let errors = []\n \n   if !empty(python_exe)\n-    return [exepath(expand(python_exe)), '']\n+    let candidates = [exepath(expand(python_exe))]\n+    call add(errors, 'The g:'.host_prog.' you set cannot be used.')\n+  else\n+    let candidates = provider#pythonx#GetPythonCandidates(a:major_version, $PATH, v:true)\n   endif\n \n-  let candidates = s:get_python_candidates(a:major_version)\n-  let errors = []\n+  if empty(candidates)\n+    call add(errors, 'No candidates for a Python '.a:major_version.' executable found on $PATH.')\n+  endif\n \n   for exe in candidates\n-    let [result, error] = provider#pythonx#CheckForModule(exe, a:module, a:major_version)\n+    let [result, python_version, error] = provider#pythonx#CheckForModule(exe, a:module, a:major_version)\n     if result\n-      return [exe, error]\n+      return [exe, python_version, error]\n     endif\n     \" Accumulate errors in case we don't find any suitable Python executable.\n     call add(errors, error)\n   endfor\n \n   \" No suitable Python executable found.\n-  return ['', 'provider/pythonx: Could not load Python '.a:major_version.\":\\n\".join(errors, \"\\n\")]\n+  return ['', '', errors]\n endfunction\n \n \" Returns array: [prog_exitcode, prog_version]\n function! s:import_module(prog, module) abort\n   let prog_version = system([a:prog, '-c' , printf(\n         \\ 'import sys; ' .\n         \\ 'sys.path = list(filter(lambda x: x != \"\", sys.path)); ' .\n-        \\ 'sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1])); ' .\n+        \\ 'sys.stdout.write(\".\".join(str(x) for x in sys.version_info[:3])); ' .\n         \\ 'import pkgutil; ' .\n-        \\ 'exit(2*int(pkgutil.get_loader(\"%s\") is None))',\n+        \\ 'sys.exit(2*int(pkgutil.get_loader(\"%s\") is None))',\n         \\ a:module)])\n   return [v:shell_error, prog_version]\n endfunction\n \n-\" Returns array: [was_success, error_message]\n-function! provider#pythonx#CheckForModule(prog, module, major_version) abort\n-  let prog_path = exepath(a:prog)\n-  if prog_path ==# ''\n-    return [0, a:prog . ' not found in search path or not executable.']\n-  endif\n+function! s:satisfies_version(target, ref_major, ref_minimum) abort\n+  return a:target =~# '^' . a:ref_major && luaeval('vim.cmp_versions(_A[1], _A[2]) >= 0', [a:target, a:ref_minimum])\n+endfunction\n \n-  let min_version = (a:major_version == 2) ? '2.6' : '3.3'\n+\" Returns array: [was_success, python_version, error_message]\n+function! provider#pythonx#CheckForModule(prog_path, module, major_version) abort\n+  let min_version = get(s:, 'min_python'.a:major_version.'_version')\n \n   \" Try to load module, and output Python version.\n   \" Exit codes:\n   \"   0  module can be loaded.\n   \"   2  module cannot be loaded.\n   \"   Otherwise something else went wrong (e.g. 1 or 127).\n-  let [prog_exitcode, prog_version] = s:import_module(a:prog, a:module)\n-\n-  if prog_exitcode == 2 || prog_exitcode == 0\n-    \" Check version only for expected return codes.\n-    if prog_version !~ '^' . a:major_version\n-      return [0, prog_path . ' is Python ' . prog_version . ' and cannot provide Python '\n-            \\ . a:major_version . '.']\n-    elseif prog_version =~ '^' . a:major_version && prog_version < min_version\n-      return [0, prog_path . ' is Python ' . prog_version . ' and cannot provide Python >= '\n-            \\ . min_version . '.']\n-    endif\n+  let [prog_exitcode, prog_version] = s:import_module(a:prog_path, a:module)\n+\n+  \" Check version only for expected return codes.\n+  if (prog_exitcode == 2 || prog_exitcode == 0) && !s:satisfies_version(prog_version, a:major_version, min_version)\n+    return [0, '', a:prog_path . ' is Python ' . prog_version . ' and cannot provide Python '\n+          \\ . a:major_version . ' >= ' . min_version . '.']\n   endif\n \n   if prog_exitcode == 2\n-    return [0, prog_path.' does not have the \"' . a:module . '\" module. :help provider-python']\n-  elseif prog_exitcode == 127\n-    \" This can happen with pyenv's shims.\n-    return [0, prog_path . ' does not exist: ' . prog_version]",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436197396",
            "id": 436197396,
            "line": 105,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NzM5Ng==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 105,
            "original_position": 163,
            "original_start_line": 107,
            "path": "runtime/autoload/provider/pythonx.vim",
            "position": 164,
            "pull_request_review_id": 425669198,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436197396/reactions"
            },
            "side": "LEFT",
            "start_line": 103,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436197396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436197727"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436197727"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This branch sounds like the user has a broken Python executable, I would encourage them to start by investigating whether they can even run it on the command line, before reporting an issue to Neovim.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:51:23Z",
            "diff_hunk": "@@ -22,96 +24,122 @@ function! provider#pythonx#Require(host) abort\n   return provider#Poll(args, a:host.orig_name, '$NVIM_PYTHON_LOG_FILE')\n endfunction\n \n-function! s:get_python_executable_from_host_var(major_version) abort\n-  return expand(get(g:, 'python'.(a:major_version == 3 ? '3' : '').'_host_prog', ''))\n+\" Turn a path with a host-specific directory separator into Vim's\n+\" comma-separated format.\n+function! s:to_comma_separated_path(path) abort\n+  if has('win32')\n+    let path_sep = ';'\n+    \" remove backslashes at the end of path items, they would turn into \\, and\n+    \" escape the , which globpath() expects as path separator\n+    let path = substitute(a:path, '\\\\\\+;', ';', 'g')\n+  else\n+    let path_sep = ':'\n+    let path = a:path\n+  endif\n+\n+  \" escape existing commas, so that they remain part of the individual paths\n+  let path = substitute(path, ',', '\\\\,', 'g')\n+\n+  \" deduplicate path items, otherwise globpath() returns even more duplicate\n+  \" matches for some reason\n+  let already_seen = {}\n+  let path_list = []\n+  for item in split(path, path_sep)\n+    if !has_key(already_seen, item)\n+      let already_seen[item] = v:true\n+      call add(path_list, item)\n+    endif\n+  endfor\n+\n+  return join(path_list, ',')\n endfunction\n \n-function! s:get_python_candidates(major_version) abort\n-  return {\n-        \\ 2: ['python2', 'python2.7', 'python2.6', 'python'],\n-        \\ 3: ['python3', 'python3.9', 'python3.8', 'python3.7', 'python3.6', 'python3.5',\n-        \\     'python3.4', 'python3.3', 'python']\n-        \\ }[a:major_version]\n+\" Returns a list of all Python executables found on path. a:convert specifies\n+\" whether the path to search needs to be converted from a host-specific\n+\" separator to the comma-separated format expected by globpath().\n+function! provider#pythonx#GetPythonCandidates(major_version, path, convert) abort\n+  let path = a:convert ? s:to_comma_separated_path(a:path) : a:path\n+  let starts_with_python = globpath(path, 'python*', v:true, v:true)\n+  let ext_pat = has('win32') ? '(\\\\.exe)?' : ''\n+  let matches_version = printf('v:val =~# \"\\\\v[\\\\/]python(%s)?(\\\\.[0-9]+)?%s$\"', a:major_version, ext_pat)\n+  return filter(starts_with_python, matches_version)\n endfunction\n \n-\" Returns [path_to_python_executable, error_message]\n+\" Returns [path_to_python_executable, python_version, error_messages]\n function! provider#pythonx#Detect(major_version) abort\n   return provider#pythonx#DetectByModule('neovim', a:major_version)\n endfunction\n \n-\" Returns [path_to_python_executable, error_message]\n+\" Returns [path_to_python_executable, python_version, error_messages]\n function! provider#pythonx#DetectByModule(module, major_version) abort\n-  let python_exe = s:get_python_executable_from_host_var(a:major_version)\n+  let host_prog = 'python'.(a:major_version == 3 ? '3' : '').'_host_prog'\n+  let python_exe = get(g:, host_prog, '')\n+  let errors = []\n \n   if !empty(python_exe)\n-    return [exepath(expand(python_exe)), '']\n+    let candidates = [exepath(expand(python_exe))]\n+    call add(errors, 'The g:'.host_prog.' you set cannot be used.')\n+  else\n+    let candidates = provider#pythonx#GetPythonCandidates(a:major_version, $PATH, v:true)\n   endif\n \n-  let candidates = s:get_python_candidates(a:major_version)\n-  let errors = []\n+  if empty(candidates)\n+    call add(errors, 'No candidates for a Python '.a:major_version.' executable found on $PATH.')\n+  endif\n \n   for exe in candidates\n-    let [result, error] = provider#pythonx#CheckForModule(exe, a:module, a:major_version)\n+    let [result, python_version, error] = provider#pythonx#CheckForModule(exe, a:module, a:major_version)\n     if result\n-      return [exe, error]\n+      return [exe, python_version, error]\n     endif\n     \" Accumulate errors in case we don't find any suitable Python executable.\n     call add(errors, error)\n   endfor\n \n   \" No suitable Python executable found.\n-  return ['', 'provider/pythonx: Could not load Python '.a:major_version.\":\\n\".join(errors, \"\\n\")]\n+  return ['', '', errors]\n endfunction\n \n \" Returns array: [prog_exitcode, prog_version]\n function! s:import_module(prog, module) abort\n   let prog_version = system([a:prog, '-c' , printf(\n         \\ 'import sys; ' .\n         \\ 'sys.path = list(filter(lambda x: x != \"\", sys.path)); ' .\n-        \\ 'sys.stdout.write(str(sys.version_info[0]) + \".\" + str(sys.version_info[1])); ' .\n+        \\ 'sys.stdout.write(\".\".join(str(x) for x in sys.version_info[:3])); ' .\n         \\ 'import pkgutil; ' .\n-        \\ 'exit(2*int(pkgutil.get_loader(\"%s\") is None))',\n+        \\ 'sys.exit(2*int(pkgutil.get_loader(\"%s\") is None))',\n         \\ a:module)])\n   return [v:shell_error, prog_version]\n endfunction\n \n-\" Returns array: [was_success, error_message]\n-function! provider#pythonx#CheckForModule(prog, module, major_version) abort\n-  let prog_path = exepath(a:prog)\n-  if prog_path ==# ''\n-    return [0, a:prog . ' not found in search path or not executable.']\n-  endif\n+function! s:satisfies_version(target, ref_major, ref_minimum) abort\n+  return a:target =~# '^' . a:ref_major && luaeval('vim.cmp_versions(_A[1], _A[2]) >= 0', [a:target, a:ref_minimum])\n+endfunction\n \n-  let min_version = (a:major_version == 2) ? '2.6' : '3.3'\n+\" Returns array: [was_success, python_version, error_message]\n+function! provider#pythonx#CheckForModule(prog_path, module, major_version) abort\n+  let min_version = get(s:, 'min_python'.a:major_version.'_version')\n \n   \" Try to load module, and output Python version.\n   \" Exit codes:\n   \"   0  module can be loaded.\n   \"   2  module cannot be loaded.\n   \"   Otherwise something else went wrong (e.g. 1 or 127).\n-  let [prog_exitcode, prog_version] = s:import_module(a:prog, a:module)\n-\n-  if prog_exitcode == 2 || prog_exitcode == 0\n-    \" Check version only for expected return codes.\n-    if prog_version !~ '^' . a:major_version\n-      return [0, prog_path . ' is Python ' . prog_version . ' and cannot provide Python '\n-            \\ . a:major_version . '.']\n-    elseif prog_version =~ '^' . a:major_version && prog_version < min_version\n-      return [0, prog_path . ' is Python ' . prog_version . ' and cannot provide Python >= '\n-            \\ . min_version . '.']\n-    endif\n+  let [prog_exitcode, prog_version] = s:import_module(a:prog_path, a:module)\n+\n+  \" Check version only for expected return codes.\n+  if (prog_exitcode == 2 || prog_exitcode == 0) && !s:satisfies_version(prog_version, a:major_version, min_version)\n+    return [0, '', a:prog_path . ' is Python ' . prog_version . ' and cannot provide Python '\n+          \\ . a:major_version . ' >= ' . min_version . '.']\n   endif\n \n   if prog_exitcode == 2\n-    return [0, prog_path.' does not have the \"' . a:module . '\" module. :help provider-python']\n-  elseif prog_exitcode == 127\n-    \" This can happen with pyenv's shims.\n-    return [0, prog_path . ' does not exist: ' . prog_version]\n+    return [0, '', a:prog_path.' does not have the \"' . a:module . '\" module. :help provider-python']\n   elseif prog_exitcode\n-    return [0, 'Checking ' . prog_path . ' caused an unknown error. '\n-          \\ . '(' . prog_exitcode . ', output: ' . prog_version . ')'\n-          \\ . ' Report this at https://github.com/neovim/neovim']\n+    return [0, '', 'Checking ' . a:prog_path . ' exited with error code ' . prog_exitcode . '. '\n+          \\ . 'If running the same executable from the command line works fine, report this at '\n+          \\ . \"https://github.com/neovim/neovim. This was the output:\\n\\n\" . prog_version . \"\\n\"]",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436197727",
            "id": 436197727,
            "line": 142,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NzcyNw==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 142,
            "original_position": 171,
            "original_start_line": 140,
            "path": "runtime/autoload/provider/pythonx.vim",
            "position": 172,
            "pull_request_review_id": 425669585,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436197727/reactions"
            },
            "side": "RIGHT",
            "start_line": 141,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436197727",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436198047"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436198047"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Because `provider#pythonx#Detect` now returns the full path to the provider interpreter, **its version**, and only then any errors.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-05T22:52:48Z",
            "diff_hunk": "@@ -773,7 +773,7 @@ function module.missing_provider(provider)\n     return prog == '' and (provider .. ' not detected') or false\n   elseif provider == 'python' or provider == 'python3' then\n     local py_major_version = (provider == 'python3' and 3 or 2)\n-    local errors = module.funcs['provider#pythonx#Detect'](py_major_version)[2]\n+    local errors = module.funcs['provider#pythonx#Detect'](py_major_version)[3]",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436198047",
            "id": 436198047,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5ODA0Nw==",
            "original_commit_id": "26aee000c617c2f86c801a1fc3f4ae3395108b95",
            "original_line": 776,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/helpers.lua",
            "position": null,
            "pull_request_review_id": 425669951,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436198047/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-07T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436198047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436689382"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436689382"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't like that sometimes this function returns a nicely formatted, informative map of semver versions and other times just returns a list of numbers.\r\n\r\nI think we should just remove \"non-strict\" mode from this. If you just want to compare dotted numbers, it's fine to write the 4 lines of code you have above splitting the numbers. (Do we use non-strict mode anywhere internally)?",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-08T13:15:55Z",
            "diff_hunk": "@@ -478,4 +478,105 @@ function vim.defer_fn(fn, timeout)\n   return timer\n end\n \n+--- Parse a version string into a table.\n+---\n+--@param ver (string): version string\n+--@param strict (optional bool): if true, a semver string is expected;\n+--       otherwise, just dotted numbers, possibly with junk at the end\n+--@return table with keys major, minor, patch, pre and build if strict,\n+--        otherwise with numerical indices\n+function vim.parse_version(ver, strict)\n+  local err_msg = string.format('invalid version string: \"%s\"', ver)\n+\n+  local numbers = {}\n+  local cursor, end_number, number\n+  repeat\n+    _, end_number, number = string.find(ver, '^(%d+)%.?', cursor)\n+    if number then\n+      cursor = end_number + 1\n+      table.insert(numbers, tonumber(number))\n+    end\n+  until not number\n+\n+  if #numbers == 0 or (strict and #numbers > 3) then\n+    error(err_msg)\n+  elseif not strict then\n+    return numbers",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436689382",
            "id": 436689382,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4OTM4Mg==",
            "original_commit_id": "d64ad585569512e56aeaa10f6adbd7d2f13812c8",
            "original_line": 684,
            "original_position": 27,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 426221894,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436689382/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-08T13:15:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436689382",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r436690694"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/436690694"
                }
            },
            "author_association": "MEMBER",
            "body": "The strict mode comments go here as well.\r\n\r\nOne suggestion might be that there should be a \"minimum comparison\" key or similar. For example, most of the time I probably just want to check major, minor patch. If they are the same, then I'll call that \"equal\" -- even if they aren't strictly equal. I'm not sure exactly the best way to handle that though.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-08T13:17:22Z",
            "diff_hunk": "@@ -478,4 +478,105 @@ function vim.defer_fn(fn, timeout)\n   return timer\n end\n \n+--- Parse a version string into a table.\n+---\n+--@param ver (string): version string\n+--@param strict (optional bool): if true, a semver string is expected;\n+--       otherwise, just dotted numbers, possibly with junk at the end\n+--@return table with keys major, minor, patch, pre and build if strict,\n+--        otherwise with numerical indices\n+function vim.parse_version(ver, strict)\n+  local err_msg = string.format('invalid version string: \"%s\"', ver)\n+\n+  local numbers = {}\n+  local cursor, end_number, number\n+  repeat\n+    _, end_number, number = string.find(ver, '^(%d+)%.?', cursor)\n+    if number then\n+      cursor = end_number + 1\n+      table.insert(numbers, tonumber(number))\n+    end\n+  until not number\n+\n+  if #numbers == 0 or (strict and #numbers > 3) then\n+    error(err_msg)\n+  elseif not strict then\n+    return numbers\n+  end\n+\n+  local _, end_pre, pre = string.find(ver, '^%-([0-9A-Za-z.-]+)', cursor)\n+  if pre then\n+    cursor = end_pre + 1\n+  end\n+\n+  local _, end_build, build = string.find(ver, '^%+([0-9A-Za-z.-]+)', cursor)\n+  if build then\n+    cursor = end_build + 1\n+  end\n+\n+  if cursor >= #ver then\n+    local major, minor, patch = unpack(numbers)\n+    return {major=major, minor=minor, patch=patch, pre=pre, build=build}\n+  else\n+    error(err_msg)\n+  end\n+end\n+\n+--- Compare two version strings.\n+---\n+--@param ver1, ver2 (string): version strings\n+--@param strict (optional bool): if true, semver strings are expected;\n+--       otherwise, just dotted numbers, possibly with junk at the end\n+--@return (number) 1 if ver1 is greater, -1 if it's smaller, 0 otherwise\n+function vim.cmp_versions(ver1, ver2, strict)",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r436690694",
            "id": 436690694,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MDY5NA==",
            "original_commit_id": "d64ad585569512e56aeaa10f6adbd7d2f13812c8",
            "original_line": 531,
            "original_position": 54,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 426223107,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436690694/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-08T13:17:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/436690694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r437754800"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/437754800"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I initially didn't have a non-strict mode, because I thought I'd just be replacing ad hoc string or numeric conversion based comparisons of Python versions where I had a good idea of the version string format. But then I came across the script-local function `s:version_cmp` in `health/provider`, which is used by some of the other provider checks and which just splits the version strings on periods, leniently converts the elements to numbers and compares them.\r\n\r\nI concluded `s:version_cmp` should also be replaced by the new version comparison function, but suddenly I wasn't so sure about the range of inputs these additional provider checks would feed it. `s:version_cmp` can basically soldier through any kind of input, even if you pass in `'foo'` and `'bar'`, it won't give up. By contrast, the strict version of the new `cmp_versions` function doesn't allow more than three dotted numbers, because that's what semver syntax stipulates, and chokes on trailing junk (on purpose).\r\n\r\nSo I realized a couple of things:\r\n\r\n1. Swapping out `s:version_cmp` for a strict `cmp_versions` might break some of the health checks, should they happen to involve version strings which don't conform to semver syntax (e.g. because they have some trailing junk, or because they have more than three numbers).\r\n2. Environment detection and troubleshooting is particularly hard to test because it involves external moving parts, so maybe there's value in having a more resilient mode for that.\r\n3. In strict semver syntax mode, there's just no way to parse version strings consisting of more than three dotted numbers. Still, being able to do this can occasionally be useful, even within semver itself -- the pre-release label is fairly freeform, it can consist of any number of dotted numbers, among other things, so when `cmp_versions` reaches the point where it needs to call itself recursively to compare pre-release labels, it does so in non-strict mode for precisely this reason. **(For easier orientation: this item addresses \"(Do we use non-strict mode anywhere internally)?\")**\r\n\r\nSo I ended up adding a non-strict mode, which is still stricter than `s:version_cmp` because it at least expects some numbers with periods between them, which seems like a reasonable baseline (so it would choke on `'foo'` and `'bar'` as invalid version strings). I made it the default, but it could conceivably be made opt-in instead if that would help you warm up to the notion :)\r\n\r\nIf none of this sounds convincing -- it's entirely possible I'm being too cautious -- then I guess let's remove it. I'll try and check the format of the version strings returned by those other provider programs which are currently compared via `s:version_cmp`, make any adjustments necessary so that the comparisons in the health checks don't error out even under strict `cmp_versions`, and we'll hope it doesn't break in the future or if people use weird pre-release versions of the providers etc.",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-09T22:21:18Z",
            "diff_hunk": "@@ -478,4 +478,105 @@ function vim.defer_fn(fn, timeout)\n   return timer\n end\n \n+--- Parse a version string into a table.\n+---\n+--@param ver (string): version string\n+--@param strict (optional bool): if true, a semver string is expected;\n+--       otherwise, just dotted numbers, possibly with junk at the end\n+--@return table with keys major, minor, patch, pre and build if strict,\n+--        otherwise with numerical indices\n+function vim.parse_version(ver, strict)\n+  local err_msg = string.format('invalid version string: \"%s\"', ver)\n+\n+  local numbers = {}\n+  local cursor, end_number, number\n+  repeat\n+    _, end_number, number = string.find(ver, '^(%d+)%.?', cursor)\n+    if number then\n+      cursor = end_number + 1\n+      table.insert(numbers, tonumber(number))\n+    end\n+  until not number\n+\n+  if #numbers == 0 or (strict and #numbers > 3) then\n+    error(err_msg)\n+  elseif not strict then\n+    return numbers",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r437754800",
            "id": 437754800,
            "in_reply_to_id": 436689382,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NDgwMA==",
            "original_commit_id": "d64ad585569512e56aeaa10f6adbd7d2f13812c8",
            "original_line": 684,
            "original_position": 27,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 427585917,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/437754800/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-09T22:32:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/437754800",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r437756423"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/437756423"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Re: strict mode, please see https://github.com/neovim/neovim/pull/12437#discussion_r437754800 and let's have that discussion there?\r\n\r\n> a \"minimum comparison\" key or similar\r\n\r\nThat's a good suggestion, thanks! I'll try and think of a way of incorporating it :)",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2020-06-09T22:25:46Z",
            "diff_hunk": "@@ -478,4 +478,105 @@ function vim.defer_fn(fn, timeout)\n   return timer\n end\n \n+--- Parse a version string into a table.\n+---\n+--@param ver (string): version string\n+--@param strict (optional bool): if true, a semver string is expected;\n+--       otherwise, just dotted numbers, possibly with junk at the end\n+--@return table with keys major, minor, patch, pre and build if strict,\n+--        otherwise with numerical indices\n+function vim.parse_version(ver, strict)\n+  local err_msg = string.format('invalid version string: \"%s\"', ver)\n+\n+  local numbers = {}\n+  local cursor, end_number, number\n+  repeat\n+    _, end_number, number = string.find(ver, '^(%d+)%.?', cursor)\n+    if number then\n+      cursor = end_number + 1\n+      table.insert(numbers, tonumber(number))\n+    end\n+  until not number\n+\n+  if #numbers == 0 or (strict and #numbers > 3) then\n+    error(err_msg)\n+  elseif not strict then\n+    return numbers\n+  end\n+\n+  local _, end_pre, pre = string.find(ver, '^%-([0-9A-Za-z.-]+)', cursor)\n+  if pre then\n+    cursor = end_pre + 1\n+  end\n+\n+  local _, end_build, build = string.find(ver, '^%+([0-9A-Za-z.-]+)', cursor)\n+  if build then\n+    cursor = end_build + 1\n+  end\n+\n+  if cursor >= #ver then\n+    local major, minor, patch = unpack(numbers)\n+    return {major=major, minor=minor, patch=patch, pre=pre, build=build}\n+  else\n+    error(err_msg)\n+  end\n+end\n+\n+--- Compare two version strings.\n+---\n+--@param ver1, ver2 (string): version strings\n+--@param strict (optional bool): if true, semver strings are expected;\n+--       otherwise, just dotted numbers, possibly with junk at the end\n+--@return (number) 1 if ver1 is greater, -1 if it's smaller, 0 otherwise\n+function vim.cmp_versions(ver1, ver2, strict)",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r437756423",
            "id": 437756423,
            "in_reply_to_id": 436690694,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjQyMw==",
            "original_commit_id": "d64ad585569512e56aeaa10f6adbd7d2f13812c8",
            "original_line": 531,
            "original_position": 54,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 427587906,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/437756423/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-06-09T22:25:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/437756423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12437#discussion_r725484963"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12437"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/725484963"
                }
            },
            "author_association": "MEMBER",
            "body": "\r\n> I think we should just remove \"non-strict\" mode from this. If you just want to compare dotted numbers, it's fine to write the 4 lines of code you have above splitting the numbers. (Do we use non-strict mode anywhere internally)?\r\n\r\nBut this is prone to bugs, see https://github.com/neovim/neovim/pull/15937",
            "commit_id": "1669e0113554c99ee207180f454f17988d3dac1d",
            "created_at": "2021-10-09T13:00:28Z",
            "diff_hunk": "@@ -478,4 +478,105 @@ function vim.defer_fn(fn, timeout)\n   return timer\n end\n \n+--- Parse a version string into a table.\n+---\n+--@param ver (string): version string\n+--@param strict (optional bool): if true, a semver string is expected;\n+--       otherwise, just dotted numbers, possibly with junk at the end\n+--@return table with keys major, minor, patch, pre and build if strict,\n+--        otherwise with numerical indices\n+function vim.parse_version(ver, strict)\n+  local err_msg = string.format('invalid version string: \"%s\"', ver)\n+\n+  local numbers = {}\n+  local cursor, end_number, number\n+  repeat\n+    _, end_number, number = string.find(ver, '^(%d+)%.?', cursor)\n+    if number then\n+      cursor = end_number + 1\n+      table.insert(numbers, tonumber(number))\n+    end\n+  until not number\n+\n+  if #numbers == 0 or (strict and #numbers > 3) then\n+    error(err_msg)\n+  elseif not strict then\n+    return numbers",
            "html_url": "https://github.com/neovim/neovim/pull/12437#discussion_r725484963",
            "id": 725484963,
            "in_reply_to_id": 436689382,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rPgWj",
            "original_commit_id": "d64ad585569512e56aeaa10f6adbd7d2f13812c8",
            "original_line": 684,
            "original_position": 27,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 775576861,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/725484963/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-09T13:00:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/725484963",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks for the PR. I will investigate this (but would like review from other maintainers if they're around for it)",
            "created_at": "2020-06-08T12:41:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-640578277",
            "id": 640578277,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDU3ODI3Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/640578277/reactions"
            },
            "updated_at": "2020-06-08T12:41:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/640578277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "One thought I had was now that Python 2 is end of life, I wonder if we should do anything differently with Python 2.",
            "created_at": "2020-06-08T12:57:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-640586334",
            "id": 640586334,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDU4NjMzNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/640586334/reactions"
            },
            "updated_at": "2020-06-08T12:57:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/640586334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm not worried about how much code you wrote. 250 lines of the code are the implementation and testing of version compare, which is somewhat orthogonal to the original problem. So overall it looks like you succeeded in removing code ;) I will look some more later.",
            "created_at": "2020-06-08T13:18:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-640597347",
            "id": 640597347,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDU5NzM0Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/640597347/reactions"
            },
            "updated_at": "2020-06-08T13:18:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/640597347",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> now that Python 2 is end of life, I wonder if we should do anything differently with Python 2\r\n\r\nGood point, I'm open to suggestions :) Will Neovim be deprecating Python 2 as a provider? Then the health checks could issue a deprecation warning.",
            "created_at": "2020-06-09T22:28:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-641614516",
            "id": 641614516,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTYxNDUxNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/641614516/reactions"
            },
            "updated_at": "2020-06-09T22:28:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/641614516",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Let's leave python 2 deprecation for a different time, although it would probably simplify quite a few things and I'm not sure how many people are even using the Python 2 plugin anyway... Let me know when you figure out exactly what you're looking to do for the semver stuff and I'll check this out again.",
            "created_at": "2020-06-14T19:21:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-643810270",
            "id": 643810270,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzgxMDI3MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/643810270/reactions"
            },
            "updated_at": "2020-06-14T19:21:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/643810270",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Let me know when you figure out exactly what you're looking to do for the semver stuff\r\n\r\nI'm kind of waiting for feedback there :) I laid out [a rationale for adding and defaulting to a non-strict version comparison mode](https://github.com/neovim/neovim/pull/12437#discussion_r437754800), but I'm happy to rip it out if it doesn't sound convincing, it's entirely up to you.\r\n\r\nOnce this bigger issue is resolved, I thought I'd take a look at that [\"minimum comparison\" feature](https://github.com/neovim/neovim/pull/12437#discussion_r436690694) you mentioned.",
            "created_at": "2020-06-15T10:33:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-644047091",
            "id": 644047091,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDA0NzA5MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/644047091/reactions"
            },
            "updated_at": "2020-06-15T10:33:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/644047091",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for digging this up!\r\n\r\n> I wonder if the functions should have a common prefix\r\n\r\nSounds good to me :) Shall I add that, and try to revive the PR, when I get a moment?\r\n\r\nWhat about [non-strict mode](https://github.com/neovim/neovim/pull/12437#discussion_r437754800) and [\"minimum comparison\" key](https://github.com/neovim/neovim/pull/12437#discussion_r436690694)?",
            "created_at": "2021-10-09T20:57:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-939360695",
            "id": 939360695,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM43_YG3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/939360695/reactions"
            },
            "updated_at": "2021-10-09T20:58:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/939360695",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Sounds good to me :) Shall I add that, and try to revive the PR, when I get a moment?\r\n\r\nWould be much appreciated !\r\n\r\n \r\n> What about [non-strict mode](https://github.com/neovim/neovim/pull/12437#discussion_r437754800) and [\"minimum comparison\" key](https://github.com/neovim/neovim/pull/12437#discussion_r436690694)?\r\n\r\n1. at a glance, the features as you have them in this PR look pretty self-contained and are covered by tests so I don't see the extra \"non-strict mode\" feature as net cost.\r\n2. \"minimum comparison\" OTOH seems like YAGNI, or at least a \"two way door\", i.e. we don't lose anything by waiting until later.\r\n",
            "created_at": "2021-10-09T22:54:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-939372745",
            "id": 939372745,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM43_bDJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/939372745/reactions"
            },
            "updated_at": "2021-10-09T22:55:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/939372745",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Fixed conflicts, I'll squash the commits and type up a suitable commit message when I get a moment (the PR started before the current linting policy). I'll also do a bit more manual testing of the provider checks to see everything is still working as intended as of one year ago.",
            "created_at": "2021-10-10T22:31:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-939563877",
            "id": 939563877,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM44AJtl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/939563877/reactions"
            },
            "updated_at": "2021-10-10T22:31:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/939563877",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Did some manual checks, refactor still working as intended. Squashed commits and wrote a summarizing message in compliance with linter.\r\n\r\nNot sure about the CI failure, any help, please?",
            "created_at": "2021-10-11T21:23:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-940452733",
            "id": 940452733,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM44Dit9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/940452733/reactions"
            },
            "updated_at": "2021-10-11T21:23:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/940452733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Not sure about the CI failure, any help, please?\r\n\r\nYou can run this test locally:\r\n\r\n```sh\r\nTEST_FILE=test/functional/provider/python_spec.lua make functionaltest\r\n```",
            "created_at": "2021-10-11T21:49:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-940467026",
            "id": 940467026,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM44DmNS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/940467026/reactions"
            },
            "updated_at": "2021-10-11T21:49:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/940467026",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@gpanders Thanks a lot for pointing me to the failing test, I think I've figured it out! Let's wait for CI to complete to be sure.\r\n\r\nQuick question though: did you figure out the failing test based on the CI log (by clicking on Details)? If so, any tips on how to do it? When I first asked for help, I was thoroughly confused because no logs showed up when I tried to expand the sections by clicking on those triangles:\r\n\r\n![image](https://user-images.githubusercontent.com/2734517/137031721-92248d12-7e45-454f-b211-f5b9971b86de.png)\r\n\r\nThen today, I noticed the logs *do* show up, they just take a (noticeable) while to load. But still, they ended with this message:\r\n\r\n![image](https://user-images.githubusercontent.com/2734517/137031927-113b3be3-0f46-49f4-ac77-f0f885049a15.png)\r\n\r\nWhich wasn't really helpful in determining what went wrong. Without your help, I wouldn't have been sure where in the CI log to look, even though the failure was there somewhere:\r\n\r\n![image](https://user-images.githubusercontent.com/2734517/137032227-ffae2aa6-178e-41f2-b780-7665936a867f.png)\r\n\r\nSo, how did you go about zeroing in on the failing test file in spite of this?",
            "created_at": "2021-10-12T21:38:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-941609478",
            "id": 941609478,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM44H9IG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/941609478/reactions"
            },
            "updated_at": "2021-10-12T21:38:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/941609478",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "OK, now the Windows CI runs are failing, and when I click on Details, the part of the logs that's shown is again not very helpful:\r\n\r\n![image](https://user-images.githubusercontent.com/2734517/137033588-b0ae3e6d-0c2f-44ab-aa81-83de28327bd9.png)\r\n\r\nNow thanks to @gpanders, I've learnt to search the logs for `python_spec.lua` for this particular PR, and that looks promising in terms of identifying the cause of this new failure as well, but that's fishing for one very particular type of fish. I'd love to learn how to *actually* fish, if anyone can spare a moment :)",
            "created_at": "2021-10-12T21:52:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-941625493",
            "id": 941625493,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM44IBCV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/941625493/reactions"
            },
            "updated_at": "2021-10-12T21:52:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/941625493",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@dlukes The way I fish is by pressing the gear box at the right, selecting \"raw logs\" and searching in my browser `[  ERROR   ]` or `[  FAIL  ]` alternatively download the logs, open nvim and search 😄  Github fancy log viewing is a pain.",
            "created_at": "2021-10-12T22:04:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-941634726",
            "id": 941634726,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM44IDSm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/941634726/reactions"
            },
            "updated_at": "2021-10-12T22:05:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/941634726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9699804?v=4",
                "events_url": "https://api.github.com/users/muniter/events{/privacy}",
                "followers_url": "https://api.github.com/users/muniter/followers",
                "following_url": "https://api.github.com/users/muniter/following{/other_user}",
                "gists_url": "https://api.github.com/users/muniter/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/muniter",
                "id": 9699804,
                "login": "muniter",
                "node_id": "MDQ6VXNlcjk2OTk4MDQ=",
                "organizations_url": "https://api.github.com/users/muniter/orgs",
                "received_events_url": "https://api.github.com/users/muniter/received_events",
                "repos_url": "https://api.github.com/users/muniter/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/muniter/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/muniter/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/muniter"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@muniter Thanks, that's useful! But then I guess this problem that I came across is particularly tricky in that it doesn't even seem to spit out an `[ ERROR ]` or `[ FAIL ]`? (See [the screenshot](https://user-images.githubusercontent.com/2734517/137032227-ffae2aa6-178e-41f2-b780-7665936a867f.png) that I posted earlier.)",
            "created_at": "2021-10-12T22:19:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-941654502",
            "id": 941654502,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM44IIHm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/941654502/reactions"
            },
            "updated_at": "2021-10-12T22:19:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/941654502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If you search for `[  ERR` you should find it (GitHub is apparently stripping extra spaces, there are two spaces between `[` and `ERR`):\r\n\r\n```\r\n2021-10-12T21:56:22.5035392Z [  ERROR   ] 3 errors, listed below:\r\n2021-10-12T21:56:22.5036098Z [  ERROR   ] test/functional\\plugin\\msgpack_spec.lua @ 274: autoload/msgpack.vim function msgpack#strftime works\r\n2021-10-12T21:56:22.5036889Z test\\helpers.lua:73: Expected objects to be the same.\r\n2021-10-12T21:56:22.5037355Z Passed in:\r\n2021-10-12T21:56:22.5037666Z (number) 0\r\n2021-10-12T21:56:22.5037992Z Expected:\r\n2021-10-12T21:56:22.5038339Z (string) '1970-01-01T00:00:00'\r\n```\r\n\r\nand\r\n\r\n```\r\n2021-10-12T21:56:22.5270817Z [  ERROR   ] test/functional\\provider\\python3_spec.lua @ 16: :python3 reports E319 if provider is missing\r\n2021-10-12T21:56:22.5271573Z test\\helpers.lua:136: expected failure, but got success\r\n2021-10-12T21:56:22.5271936Z \r\n2021-10-12T21:56:22.5272234Z stack traceback:\r\n2021-10-12T21:56:22.5272723Z \ttest\\helpers.lua:136: in function 'pcall_err_withfile'\r\n2021-10-12T21:56:22.5273292Z \ttest\\helpers.lua:159: in function 'pcall_err'\r\n2021-10-12T21:56:22.5274037Z \ttest/functional\\provider\\python3_spec.lua:18: in function <test/functional\\provider\\python3_spec.lua:16>\r\n```",
            "created_at": "2021-10-12T22:20:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-941657762",
            "id": 941657762,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM44II6i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/941657762/reactions"
            },
            "updated_at": "2021-10-12T22:21:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/941657762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks both of you very much for the input! Searching the logs outside of GitHub's fancy UI is indeed much easier :) I'm now pretty confident that knowing this, I would've been able to hunt down that first error that originally had me asking for help.\r\n\r\n> But then I guess this problem that I came across is particularly tricky in that it doesn't even seem to spit out an `[ ERROR ]` or `[ FAIL ]`?\r\n\r\nTurns out this wasn't the case after all -- the error was repeated in another part of the log, along with additional details, duly prefixed with `[ ERROR ]`. I just got tripped up by the fancy UI while searching.\r\n\r\nIn other news, CI has passed :tada:",
            "created_at": "2021-10-13T13:25:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-942306178",
            "id": 942306178,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM44KnOC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 3,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/942306178/reactions"
            },
            "updated_at": "2021-10-13T13:25:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/942306178",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "NONE",
            "body": "If you see the linked issue, if this PR solves that it would be great. But rebasing this PR to main is more effort than I would like to put in to solving this issue as the patch I have in my issue works for me fine.",
            "created_at": "2023-01-07T23:52:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1374658101",
            "id": 1374658101,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5R7541",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1374658101/reactions"
            },
            "updated_at": "2023-01-07T23:52:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1374658101",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18294397?v=4",
                "events_url": "https://api.github.com/users/RossSmyth/events{/privacy}",
                "followers_url": "https://api.github.com/users/RossSmyth/followers",
                "following_url": "https://api.github.com/users/RossSmyth/following{/other_user}",
                "gists_url": "https://api.github.com/users/RossSmyth/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/RossSmyth",
                "id": 18294397,
                "login": "RossSmyth",
                "node_id": "MDQ6VXNlcjE4Mjk0Mzk3",
                "organizations_url": "https://api.github.com/users/RossSmyth/orgs",
                "received_events_url": "https://api.github.com/users/RossSmyth/received_events",
                "repos_url": "https://api.github.com/users/RossSmyth/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/RossSmyth/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RossSmyth/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/RossSmyth"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@RossSmyth Rebased, could you please test if it addresses your issue if you have a moment?\r\n\r\n(EDIT: AFAICS, it probably will since the PR removes Pyenv troubleshooting as out of scope.)",
            "created_at": "2023-01-09T16:23:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1375902095",
            "id": 1375902095,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5SApmP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375902095/reactions"
            },
            "updated_at": "2023-01-09T16:24:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375902095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tjdevries I'm sure you're swamped, but do you think you could take a look at this some time in the relatively near future? Or failing that, assign a different reviewer, so that we can figure out if this is going in or getting closed? :)\r\n\r\nAbout the `news.txt` check: not sure if the correct resolution is adding the breaking change to `news.txt`, or just removing the mention from the commit message. While technically breaking, it's a relatively minor function that users are unlikely to call directly.\r\n\r\nAlso: there were quite a few changes from October 2021 when I last worked on this (e.g. dropping support for Python 2), the rebase was slightly unwieldy, and since it's diagnostic code, it has bad test coverage. If this gets merged and people subsequently report issues related to it, don't hesitate to @ me!",
            "created_at": "2023-01-09T16:34:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1375918657",
            "id": 1375918657,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5SAtpB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375918657/reactions"
            },
            "updated_at": "2023-01-09T16:34:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375918657",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yeah I will check it out when I get home. Thanks!",
            "created_at": "2023-01-09T16:39:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1375925651",
            "id": 1375925651,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5SAvWT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375925651/reactions"
            },
            "updated_at": "2023-01-09T16:39:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375925651",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18294397?v=4",
                "events_url": "https://api.github.com/users/RossSmyth/events{/privacy}",
                "followers_url": "https://api.github.com/users/RossSmyth/followers",
                "following_url": "https://api.github.com/users/RossSmyth/following{/other_user}",
                "gists_url": "https://api.github.com/users/RossSmyth/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/RossSmyth",
                "id": 18294397,
                "login": "RossSmyth",
                "node_id": "MDQ6VXNlcjE4Mjk0Mzk3",
                "organizations_url": "https://api.github.com/users/RossSmyth/orgs",
                "received_events_url": "https://api.github.com/users/RossSmyth/received_events",
                "repos_url": "https://api.github.com/users/RossSmyth/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/RossSmyth/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RossSmyth/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/RossSmyth"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "(I don't think the remaining CI failures -- apart from `news.txt` -- are on me, but maybe I'm not reading the logs correctly.)",
            "created_at": "2023-01-10T10:17:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1377027507",
            "id": 1377027507,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5SE8Wz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1377027507/reactions"
            },
            "updated_at": "2023-01-10T10:17:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1377027507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "NONE",
            "body": "I couldn't get neovim to build. It's not you're fault, I couldn't get a tagged version to build either. I never use cmake and it seems whenever I do it just doesn't work so I don't know.",
            "created_at": "2023-01-17T05:01:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1384834078",
            "id": 1384834078,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5SiuQe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1384834078/reactions"
            },
            "updated_at": "2023-01-17T05:01:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1384834078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18294397?v=4",
                "events_url": "https://api.github.com/users/RossSmyth/events{/privacy}",
                "followers_url": "https://api.github.com/users/RossSmyth/followers",
                "following_url": "https://api.github.com/users/RossSmyth/following{/other_user}",
                "gists_url": "https://api.github.com/users/RossSmyth/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/RossSmyth",
                "id": 18294397,
                "login": "RossSmyth",
                "node_id": "MDQ6VXNlcjE4Mjk0Mzk3",
                "organizations_url": "https://api.github.com/users/RossSmyth/orgs",
                "received_events_url": "https://api.github.com/users/RossSmyth/received_events",
                "repos_url": "https://api.github.com/users/RossSmyth/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/RossSmyth/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/RossSmyth/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/RossSmyth"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@RossSmyth That's OK, no worries :) As I said, this PR simply removes Pyenv troubleshooting, the line you had to change to stop giving you trouble is gone, so that particular issue should be resolved.",
            "created_at": "2023-01-19T12:04:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1396869822",
            "id": 1396869822,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5TQoq-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1396869822/reactions"
            },
            "updated_at": "2023-01-19T12:04:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1396869822",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "So while this PR was stalled waiting for feedback, Nvim apparently got a full Lua module for dealing with version comparisons: 0e7196438d8f856eecd7c90e160b79cbc8fb08dc\r\n\r\nI'm happy to update the PR to reflect this (remove my own version comparison functions and tests, resolve the conflicts, update my code to use the version comparison API that's already been merged), but please let me know if there's still interest first :) With kids and all, I have little spare time, so I'm trying to choose carefully on what to spend it. @tjdevries, @justinmk?",
            "created_at": "2023-04-03T09:27:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1493984515",
            "id": 1493984515,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5ZDGUD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1493984515/reactions"
            },
            "updated_at": "2023-04-03T09:27:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1493984515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This PR is massive and looks brutal to review. Are there unrelated improvements that we can split into a separate PRs perhaps?",
            "created_at": "2023-04-03T15:56:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1494580577",
            "id": 1494580577,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5ZFX1h",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1494580577/reactions"
            },
            "updated_at": "2023-04-03T15:56:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1494580577",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "As I said, all of the Lua additions concerning version comparison can be removed, as they're superseded by the recently merged https://github.com/neovim/neovim/commit/0e7196438d8f856eecd7c90e160b79cbc8fb08dc. The rest changes how Python provider detection and health checks work to make it more resilient and correct, not sure if it can be sliced up further as these two things are quite intertwined.",
            "created_at": "2023-04-04T01:53:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1495226343",
            "id": 1495226343,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5ZH1fn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1495226343/reactions"
            },
            "updated_at": "2023-04-04T01:53:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1495226343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The rest changes how Python provider detection and health checks work to make it more resilient and correct,\r\n\r\nThose changes are still very much appreciated. But will need to adapt them to the new Lua-based implementation: https://github.com/neovim/neovim/pull/26941\r\n\r\n",
            "created_at": "2024-01-13T15:11:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/12437#issuecomment-1890483610",
            "id": 1890483610,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
            "node_id": "IC_kwDOAPphoM5wrn2a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890483610/reactions"
            },
            "updated_at": "2024-01-13T15:11:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890483610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/12437/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/12437/commits",
    "created_at": "2020-06-04T15:45:01Z",
    "diff_url": "https://github.com/neovim/neovim/pull/12437.diff",
    "draft": false,
    "head": {
        "label": "dlukes:provider-pythonx",
        "ref": "provider-pythonx",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/dlukes/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/dlukes/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/dlukes/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/dlukes/neovim/branches{/branch}",
            "clone_url": "https://github.com/dlukes/neovim.git",
            "collaborators_url": "https://api.github.com/repos/dlukes/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/dlukes/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/dlukes/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/dlukes/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/dlukes/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/dlukes/neovim/contributors",
            "created_at": "2020-01-25T11:57:57Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/dlukes/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/dlukes/neovim/downloads",
            "events_url": "https://api.github.com/repos/dlukes/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/dlukes/neovim/forks",
            "full_name": "dlukes/neovim",
            "git_commits_url": "https://api.github.com/repos/dlukes/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/dlukes/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/dlukes/neovim/git/tags{/sha}",
            "git_url": "git://github.com/dlukes/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/dlukes/neovim/hooks",
            "html_url": "https://github.com/dlukes/neovim",
            "id": 236164117,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/dlukes/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/dlukes/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/dlukes/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/dlukes/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/dlukes/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/dlukes/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/dlukes/neovim/merges",
            "milestones_url": "https://api.github.com/repos/dlukes/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMzYxNjQxMTc=",
            "notifications_url": "https://api.github.com/repos/dlukes/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
                "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
                "followers_url": "https://api.github.com/users/dlukes/followers",
                "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
                "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dlukes",
                "id": 2734517,
                "login": "dlukes",
                "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
                "organizations_url": "https://api.github.com/users/dlukes/orgs",
                "received_events_url": "https://api.github.com/users/dlukes/received_events",
                "repos_url": "https://api.github.com/users/dlukes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dlukes"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/dlukes/neovim/pulls{/number}",
            "pushed_at": "2023-01-19T11:57:48Z",
            "releases_url": "https://api.github.com/repos/dlukes/neovim/releases{/id}",
            "size": 225753,
            "ssh_url": "git@github.com:dlukes/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/dlukes/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/dlukes/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/dlukes/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/dlukes/neovim/subscription",
            "svn_url": "https://github.com/dlukes/neovim",
            "tags_url": "https://api.github.com/repos/dlukes/neovim/tags",
            "teams_url": "https://api.github.com/repos/dlukes/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/dlukes/neovim/git/trees{/sha}",
            "updated_at": "2023-01-08T01:54:41Z",
            "url": "https://api.github.com/repos/dlukes/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "1669e0113554c99ee207180f454f17988d3dac1d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
            "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
            "followers_url": "https://api.github.com/users/dlukes/followers",
            "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
            "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/dlukes",
            "id": 2734517,
            "login": "dlukes",
            "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
            "organizations_url": "https://api.github.com/users/dlukes/orgs",
            "received_events_url": "https://api.github.com/users/dlukes/received_events",
            "repos_url": "https://api.github.com/users/dlukes/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/dlukes"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/12437",
    "id": 427929436,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12437",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 144672485,
            "name": "provider",
            "node_id": "MDU6TGFiZWwxNDQ2NzI0ODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/provider"
        }
    ],
    "locked": false,
    "merge_commit_sha": "2d60a1d3741824e558da73d388668e8b9b0184e8",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDI3OTI5NDM2",
    "number": 12437,
    "patch_url": "https://github.com/neovim/neovim/pull/12437.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/12437/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/1669e0113554c99ee207180f454f17988d3dac1d",
    "title": "Refactor Python provider detection and health checks",
    "updated_at": "2024-01-13T15:16:45Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/12437",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4",
        "events_url": "https://api.github.com/users/dlukes/events{/privacy}",
        "followers_url": "https://api.github.com/users/dlukes/followers",
        "following_url": "https://api.github.com/users/dlukes/following{/other_user}",
        "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dlukes",
        "id": 2734517,
        "login": "dlukes",
        "node_id": "MDQ6VXNlcjI3MzQ1MTc=",
        "organizations_url": "https://api.github.com/users/dlukes/orgs",
        "received_events_url": "https://api.github.com/users/dlukes/received_events",
        "repos_url": "https://api.github.com/users/dlukes/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dlukes"
    }
}