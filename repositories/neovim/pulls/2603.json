{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/2603/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/2603/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/2603"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/2603"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/2603/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/55f65735f2f7665787a09c4a99bab21a42a116b1"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5766,
            "forks_count": 5766,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1818,
            "open_issues_count": 1818,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-12-23T21:39:36Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 300480,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 84495,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-12-24T02:11:47Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 84495,
            "watchers_count": 84495,
            "web_commit_signoff_required": false
        },
        "sha": "7ff582f86c7b68a00f6a933df89aa876816304aa",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "As discussed in #2547, a \"Press Enter\" prompt can make an embedded nvim without an attached GUI freeze. We can't ignore \"Press Enter\" because we don't know that it's not expected. One hacky solution could be making a \"Press Enter\" autocmd, but I thought it'd be more generic to make it a function, allow the capturing of messages via vimL, and send a message, `\"PressEnter\"`, when the situation occurs.\n\n``` vim\n\" ~/.autoload/provider/message.vim\nfunction! provider#message#PressEnter(chan, msgid)\n  call rpcnotify(a:chan, 'vim_feedkeys', '<Cr>')\nendf\n\n\" Be notified about PressEnter events\ncall rpcnotify(chan, 'vim_subscribe', 'PressEnter')\n```\n\nThis function intercepts the method `\"PressEnter\"` and sends back the enter key. `a:chan` represents the channel that sent the message.\n\nMore generally, this allows one to define and implement methods by putting them in `~/autoload/provider/message.vim` and calling it `provider#message#{name}`. Another example: we can override existing methods:\n\n``` vim\n\" Intercepts 'vim_get_current_line'\nfunction! provider#message#vim_get_current_line(chan, id, text)\n  return 'HAHAHA'\nendfunction\n\n\" Arbitrary new methods\nfunction! provider#message#test(chan, id, x)\n  call rpcnotify(a:chan, 'test2', a:x, 10)\nendfunction\n\nfunction! provider#message#test2(chan, id, ...)\n  echom 'GOT '.join(a:000, ', ')\nendfunction\n```\n\nThe choice of using `provider#message*` function names and needing to put them in `*/provider/message.vim` maybe seems a little wonky, but it works surprisingly well. Ideally, they should be definable in a `.nvimrc`, but then again maybe the same could be said of the existing providers.\n\nI still have to write some documentation and the idea might need some refinement, being a proof of concept, so I'll keep it in WIP for now. Also, I'd like to implement some vimL functions: `rpc(un)subscribe` would allow scripter's control over whether a client gets notified under certain events rather than having clients fight over a single event. For example, at most one client should listen for `\"PressEnter\"`. `rpcbroadcast` would allow scripters to send arbitrary messages to all subscribed (by choice or via `rpcsubscribe`) channels.\n",
    "closed_at": "2024-12-17T12:31:59Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/2603#discussion_r29813490"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/29813490"
                }
            },
            "author_association": "MEMBER",
            "body": "I like the idea of sending messages (all messages) as events, but at a glance I don't get why there is a special \"PressEnter\" event. Can we have properties on a message event like `passive={true|false}` so that `message.c` (or an equivalent GUI implementation) knows what to do with it? Then, an interceptor could possibly set `passive=true` so that Press-Enter is avoided.\n",
            "commit_id": "55f65735f2f7665787a09c4a99bab21a42a116b1",
            "created_at": "2015-05-06T23:37:29Z",
            "diff_hunk": "@@ -436,48 +454,107 @@ static void handle_request(Channel *channel, msgpack_object *request)\n \n   if (error.set) {\n     // Validation failed, send response with error\n-    if (channel_write(channel,\n-                      serialize_response(channel->id,\n-                                         request_id,\n-                                         &error,\n-                                         NIL,\n-                                         &out_buffer))) {\n-      char buf[256];\n-      snprintf(buf, sizeof(buf),\n-               \"Channel %\" PRIu64 \" sent an invalid message, closed.\",\n-               channel->id);\n-      call_set_error(channel, buf);\n-    }\n+    request_set_error(&error, channel, request_id);\n     return;\n   }\n \n-  // Retrieve the request handler\n-  MsgpackRpcRequestHandler handler;\n   msgpack_object *method = msgpack_rpc_method(request);\n+  Array args = ARRAY_DICT_INIT;\n+  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n+\n+  char *meth_str = NULL;\n \n+  // Retrieve the request handler or intercept.\n+  bool intercepted = false;          // A provider owns this message.\n+  MsgpackRpcRequestHandler handler;  // Unused if intercepted.\n   if (method) {\n-    handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n-                                          method->via.bin.size);\n+    meth_str = xmemdupz(method->via.bin.ptr, method->via.bin.size);\n+    char func[256];\n+    snprintf(func, 256, \"provider#message#%s\", meth_str);\n+    if (eval_has_func(func)) {\n+      intercepted = true;\n+    } else {\n+      handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n+                                            method->via.bin.size);\n+    }\n   } else {\n     handler.fn = msgpack_rpc_handle_missing_method;\n     handler.defer = false;\n   }\n \n-  Array args = ARRAY_DICT_INIT;\n-  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n-  bool defer = (!kv_size(channel->call_stack) && handler.defer);\n+  // Always defer intercepted messages since they run vim script.\n+  bool defer = intercepted || (!kv_size(channel->call_stack) && handler.defer);\n   RequestEvent *event_data = xmalloc(sizeof(RequestEvent));\n   event_data->channel = channel;\n+  event_data->method = meth_str;\n   event_data->handler = handler;\n   event_data->args = args;\n   event_data->request_id = request_id;\n   incref(channel);\n   event_push((Event) {\n-    .handler = on_request_event,\n+    .handler = intercepted ? on_message_event : on_request_event,\n     .data = event_data\n   }, defer);\n }\n \n+static void on_message_event(Event event)",
            "html_url": "https://github.com/neovim/neovim/pull/2603#discussion_r29813490",
            "id": 29813490,
            "line": 512,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODEzNDkw",
            "original_commit_id": "cb051094c990d06c9b81fd2b244e000099341dbb",
            "original_line": null,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 173,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29813490/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2015-05-11T20:40:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29813490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/2603#discussion_r29813658"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/29813658"
                }
            },
            "author_association": "MEMBER",
            "body": "By the way, I am making a distinction here between a \"message event\" (i.e. an event with `type=message`) and other types of events. I see now that you are calling all types of events \"messages\".\n",
            "commit_id": "55f65735f2f7665787a09c4a99bab21a42a116b1",
            "created_at": "2015-05-06T23:40:58Z",
            "diff_hunk": "@@ -436,48 +454,107 @@ static void handle_request(Channel *channel, msgpack_object *request)\n \n   if (error.set) {\n     // Validation failed, send response with error\n-    if (channel_write(channel,\n-                      serialize_response(channel->id,\n-                                         request_id,\n-                                         &error,\n-                                         NIL,\n-                                         &out_buffer))) {\n-      char buf[256];\n-      snprintf(buf, sizeof(buf),\n-               \"Channel %\" PRIu64 \" sent an invalid message, closed.\",\n-               channel->id);\n-      call_set_error(channel, buf);\n-    }\n+    request_set_error(&error, channel, request_id);\n     return;\n   }\n \n-  // Retrieve the request handler\n-  MsgpackRpcRequestHandler handler;\n   msgpack_object *method = msgpack_rpc_method(request);\n+  Array args = ARRAY_DICT_INIT;\n+  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n+\n+  char *meth_str = NULL;\n \n+  // Retrieve the request handler or intercept.\n+  bool intercepted = false;          // A provider owns this message.\n+  MsgpackRpcRequestHandler handler;  // Unused if intercepted.\n   if (method) {\n-    handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n-                                          method->via.bin.size);\n+    meth_str = xmemdupz(method->via.bin.ptr, method->via.bin.size);\n+    char func[256];\n+    snprintf(func, 256, \"provider#message#%s\", meth_str);\n+    if (eval_has_func(func)) {\n+      intercepted = true;\n+    } else {\n+      handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n+                                            method->via.bin.size);\n+    }\n   } else {\n     handler.fn = msgpack_rpc_handle_missing_method;\n     handler.defer = false;\n   }\n \n-  Array args = ARRAY_DICT_INIT;\n-  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n-  bool defer = (!kv_size(channel->call_stack) && handler.defer);\n+  // Always defer intercepted messages since they run vim script.\n+  bool defer = intercepted || (!kv_size(channel->call_stack) && handler.defer);\n   RequestEvent *event_data = xmalloc(sizeof(RequestEvent));\n   event_data->channel = channel;\n+  event_data->method = meth_str;\n   event_data->handler = handler;\n   event_data->args = args;\n   event_data->request_id = request_id;\n   incref(channel);\n   event_push((Event) {\n-    .handler = on_request_event,\n+    .handler = intercepted ? on_message_event : on_request_event,\n     .data = event_data\n   }, defer);\n }\n \n+static void on_message_event(Event event)",
            "html_url": "https://github.com/neovim/neovim/pull/2603#discussion_r29813658",
            "id": 29813658,
            "line": 512,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODEzNjU4",
            "original_commit_id": "cb051094c990d06c9b81fd2b244e000099341dbb",
            "original_line": null,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 173,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29813658/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2015-05-11T20:40:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29813658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/2603#discussion_r29852882"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/29852882"
                }
            },
            "author_association": "NONE",
            "body": "I'm not sure what you mean by \"special\". `PressEnter` works the same way as other notifications like \"redraw\"... actually it seems that we don't use events like this very often. \n\n> Can we have properties on a message event like passive={true|false} so that message.c knows what to do with it?\n\n`message.c` doesn't do anything with it, it just lets subscribed channels know that it entered `PressEnter` mode and clients can be configured to respond by pressing enter.\n\nI feel there might be some miscommunication here, so please clarify if my response is a little off note.\n",
            "commit_id": "55f65735f2f7665787a09c4a99bab21a42a116b1",
            "created_at": "2015-05-07T13:49:10Z",
            "diff_hunk": "@@ -436,48 +454,107 @@ static void handle_request(Channel *channel, msgpack_object *request)\n \n   if (error.set) {\n     // Validation failed, send response with error\n-    if (channel_write(channel,\n-                      serialize_response(channel->id,\n-                                         request_id,\n-                                         &error,\n-                                         NIL,\n-                                         &out_buffer))) {\n-      char buf[256];\n-      snprintf(buf, sizeof(buf),\n-               \"Channel %\" PRIu64 \" sent an invalid message, closed.\",\n-               channel->id);\n-      call_set_error(channel, buf);\n-    }\n+    request_set_error(&error, channel, request_id);\n     return;\n   }\n \n-  // Retrieve the request handler\n-  MsgpackRpcRequestHandler handler;\n   msgpack_object *method = msgpack_rpc_method(request);\n+  Array args = ARRAY_DICT_INIT;\n+  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n+\n+  char *meth_str = NULL;\n \n+  // Retrieve the request handler or intercept.\n+  bool intercepted = false;          // A provider owns this message.\n+  MsgpackRpcRequestHandler handler;  // Unused if intercepted.\n   if (method) {\n-    handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n-                                          method->via.bin.size);\n+    meth_str = xmemdupz(method->via.bin.ptr, method->via.bin.size);\n+    char func[256];\n+    snprintf(func, 256, \"provider#message#%s\", meth_str);\n+    if (eval_has_func(func)) {\n+      intercepted = true;\n+    } else {\n+      handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n+                                            method->via.bin.size);\n+    }\n   } else {\n     handler.fn = msgpack_rpc_handle_missing_method;\n     handler.defer = false;\n   }\n \n-  Array args = ARRAY_DICT_INIT;\n-  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n-  bool defer = (!kv_size(channel->call_stack) && handler.defer);\n+  // Always defer intercepted messages since they run vim script.\n+  bool defer = intercepted || (!kv_size(channel->call_stack) && handler.defer);\n   RequestEvent *event_data = xmalloc(sizeof(RequestEvent));\n   event_data->channel = channel;\n+  event_data->method = meth_str;\n   event_data->handler = handler;\n   event_data->args = args;\n   event_data->request_id = request_id;\n   incref(channel);\n   event_push((Event) {\n-    .handler = on_request_event,\n+    .handler = intercepted ? on_message_event : on_request_event,\n     .data = event_data\n   }, defer);\n }\n \n+static void on_message_event(Event event)",
            "html_url": "https://github.com/neovim/neovim/pull/2603#discussion_r29852882",
            "id": 29852882,
            "line": 512,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODUyODgy",
            "original_commit_id": "cb051094c990d06c9b81fd2b244e000099341dbb",
            "original_line": null,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 173,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29852882/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2015-05-11T20:40:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29852882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/2603#discussion_r29854087"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/29854087"
                }
            },
            "author_association": "MEMBER",
            "body": "Note that I am using the term \"message\" specifically to mean user-facing messages in the statusline. I do not think we should overload that term (in our project) to be a synonym for notifications or events.\n\nI mean that instead of a PressEnter event, all messages should be raised as events. For the TUI (and any other UI that does not handle message events), `message.c` handles these events. Instead of a PressEnter event, each message event could have a flag that says whether it may potentially force PressEnter. A message handler can avoid Press-Enter by resetting that flag on each message.\n\nI may be irrationally avoiding the notion of a PressEnter event. Perhaps it would bother me less if it were called ModalDialog or WaitUI or something like that...\n",
            "commit_id": "55f65735f2f7665787a09c4a99bab21a42a116b1",
            "created_at": "2015-05-07T14:01:51Z",
            "diff_hunk": "@@ -436,48 +454,107 @@ static void handle_request(Channel *channel, msgpack_object *request)\n \n   if (error.set) {\n     // Validation failed, send response with error\n-    if (channel_write(channel,\n-                      serialize_response(channel->id,\n-                                         request_id,\n-                                         &error,\n-                                         NIL,\n-                                         &out_buffer))) {\n-      char buf[256];\n-      snprintf(buf, sizeof(buf),\n-               \"Channel %\" PRIu64 \" sent an invalid message, closed.\",\n-               channel->id);\n-      call_set_error(channel, buf);\n-    }\n+    request_set_error(&error, channel, request_id);\n     return;\n   }\n \n-  // Retrieve the request handler\n-  MsgpackRpcRequestHandler handler;\n   msgpack_object *method = msgpack_rpc_method(request);\n+  Array args = ARRAY_DICT_INIT;\n+  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n+\n+  char *meth_str = NULL;\n \n+  // Retrieve the request handler or intercept.\n+  bool intercepted = false;          // A provider owns this message.\n+  MsgpackRpcRequestHandler handler;  // Unused if intercepted.\n   if (method) {\n-    handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n-                                          method->via.bin.size);\n+    meth_str = xmemdupz(method->via.bin.ptr, method->via.bin.size);\n+    char func[256];\n+    snprintf(func, 256, \"provider#message#%s\", meth_str);\n+    if (eval_has_func(func)) {\n+      intercepted = true;\n+    } else {\n+      handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n+                                            method->via.bin.size);\n+    }\n   } else {\n     handler.fn = msgpack_rpc_handle_missing_method;\n     handler.defer = false;\n   }\n \n-  Array args = ARRAY_DICT_INIT;\n-  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n-  bool defer = (!kv_size(channel->call_stack) && handler.defer);\n+  // Always defer intercepted messages since they run vim script.\n+  bool defer = intercepted || (!kv_size(channel->call_stack) && handler.defer);\n   RequestEvent *event_data = xmalloc(sizeof(RequestEvent));\n   event_data->channel = channel;\n+  event_data->method = meth_str;\n   event_data->handler = handler;\n   event_data->args = args;\n   event_data->request_id = request_id;\n   incref(channel);\n   event_push((Event) {\n-    .handler = on_request_event,\n+    .handler = intercepted ? on_message_event : on_request_event,\n     .data = event_data\n   }, defer);\n }\n \n+static void on_message_event(Event event)",
            "html_url": "https://github.com/neovim/neovim/pull/2603#discussion_r29854087",
            "id": 29854087,
            "line": 512,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODU0MDg3",
            "original_commit_id": "cb051094c990d06c9b81fd2b244e000099341dbb",
            "original_line": null,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 173,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29854087/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2015-05-11T20:40:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29854087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/2603#discussion_r29858286"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/29858286"
                }
            },
            "author_association": "NONE",
            "body": "> Note that I am using the term \"message\" specifically to mean user-facing messages in the statusline. I do not think we should overload that term (in our project) to be a synonym for notifications or events.\n\nOk, I see. And actually, I've been considering using \"rpc\" instead, anyway. I agree, \"message\" wasn't very descriptive.\n\nSo, with your idea, should the notification include the contents of the message? Clients could then parse it for \"Press ENTER\" if they want to respond to what I'm calling PressEnter events. I think that could be generally useful, although I still worry about clients fighting for control over a single message containing \"Press ENTER\", or trying to control a \"MORE\" dialogue. I think we can send the contents of each message, but also have an extra event for the PressEnter or More parts.\n",
            "commit_id": "55f65735f2f7665787a09c4a99bab21a42a116b1",
            "created_at": "2015-05-07T14:42:57Z",
            "diff_hunk": "@@ -436,48 +454,107 @@ static void handle_request(Channel *channel, msgpack_object *request)\n \n   if (error.set) {\n     // Validation failed, send response with error\n-    if (channel_write(channel,\n-                      serialize_response(channel->id,\n-                                         request_id,\n-                                         &error,\n-                                         NIL,\n-                                         &out_buffer))) {\n-      char buf[256];\n-      snprintf(buf, sizeof(buf),\n-               \"Channel %\" PRIu64 \" sent an invalid message, closed.\",\n-               channel->id);\n-      call_set_error(channel, buf);\n-    }\n+    request_set_error(&error, channel, request_id);\n     return;\n   }\n \n-  // Retrieve the request handler\n-  MsgpackRpcRequestHandler handler;\n   msgpack_object *method = msgpack_rpc_method(request);\n+  Array args = ARRAY_DICT_INIT;\n+  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n+\n+  char *meth_str = NULL;\n \n+  // Retrieve the request handler or intercept.\n+  bool intercepted = false;          // A provider owns this message.\n+  MsgpackRpcRequestHandler handler;  // Unused if intercepted.\n   if (method) {\n-    handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n-                                          method->via.bin.size);\n+    meth_str = xmemdupz(method->via.bin.ptr, method->via.bin.size);\n+    char func[256];\n+    snprintf(func, 256, \"provider#message#%s\", meth_str);\n+    if (eval_has_func(func)) {\n+      intercepted = true;\n+    } else {\n+      handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n+                                            method->via.bin.size);\n+    }\n   } else {\n     handler.fn = msgpack_rpc_handle_missing_method;\n     handler.defer = false;\n   }\n \n-  Array args = ARRAY_DICT_INIT;\n-  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n-  bool defer = (!kv_size(channel->call_stack) && handler.defer);\n+  // Always defer intercepted messages since they run vim script.\n+  bool defer = intercepted || (!kv_size(channel->call_stack) && handler.defer);\n   RequestEvent *event_data = xmalloc(sizeof(RequestEvent));\n   event_data->channel = channel;\n+  event_data->method = meth_str;\n   event_data->handler = handler;\n   event_data->args = args;\n   event_data->request_id = request_id;\n   incref(channel);\n   event_push((Event) {\n-    .handler = on_request_event,\n+    .handler = intercepted ? on_message_event : on_request_event,\n     .data = event_data\n   }, defer);\n }\n \n+static void on_message_event(Event event)",
            "html_url": "https://github.com/neovim/neovim/pull/2603#discussion_r29858286",
            "id": 29858286,
            "line": 512,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODU4Mjg2",
            "original_commit_id": "cb051094c990d06c9b81fd2b244e000099341dbb",
            "original_line": null,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 173,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29858286/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2015-05-11T20:40:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29858286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/2603#discussion_r29862381"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/29862381"
                }
            },
            "author_association": "NONE",
            "body": "> should the notification include the contents of the message? Clients could then parse it for \"Press ENTER\" if they want to respond to what I'm calling PressEnter events.\n\nMessages are localised, parsing their textual content is thus by definition brittle.\n",
            "commit_id": "55f65735f2f7665787a09c4a99bab21a42a116b1",
            "created_at": "2015-05-07T15:20:13Z",
            "diff_hunk": "@@ -436,48 +454,107 @@ static void handle_request(Channel *channel, msgpack_object *request)\n \n   if (error.set) {\n     // Validation failed, send response with error\n-    if (channel_write(channel,\n-                      serialize_response(channel->id,\n-                                         request_id,\n-                                         &error,\n-                                         NIL,\n-                                         &out_buffer))) {\n-      char buf[256];\n-      snprintf(buf, sizeof(buf),\n-               \"Channel %\" PRIu64 \" sent an invalid message, closed.\",\n-               channel->id);\n-      call_set_error(channel, buf);\n-    }\n+    request_set_error(&error, channel, request_id);\n     return;\n   }\n \n-  // Retrieve the request handler\n-  MsgpackRpcRequestHandler handler;\n   msgpack_object *method = msgpack_rpc_method(request);\n+  Array args = ARRAY_DICT_INIT;\n+  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n+\n+  char *meth_str = NULL;\n \n+  // Retrieve the request handler or intercept.\n+  bool intercepted = false;          // A provider owns this message.\n+  MsgpackRpcRequestHandler handler;  // Unused if intercepted.\n   if (method) {\n-    handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n-                                          method->via.bin.size);\n+    meth_str = xmemdupz(method->via.bin.ptr, method->via.bin.size);\n+    char func[256];\n+    snprintf(func, 256, \"provider#message#%s\", meth_str);\n+    if (eval_has_func(func)) {\n+      intercepted = true;\n+    } else {\n+      handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n+                                            method->via.bin.size);\n+    }\n   } else {\n     handler.fn = msgpack_rpc_handle_missing_method;\n     handler.defer = false;\n   }\n \n-  Array args = ARRAY_DICT_INIT;\n-  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n-  bool defer = (!kv_size(channel->call_stack) && handler.defer);\n+  // Always defer intercepted messages since they run vim script.\n+  bool defer = intercepted || (!kv_size(channel->call_stack) && handler.defer);\n   RequestEvent *event_data = xmalloc(sizeof(RequestEvent));\n   event_data->channel = channel;\n+  event_data->method = meth_str;\n   event_data->handler = handler;\n   event_data->args = args;\n   event_data->request_id = request_id;\n   incref(channel);\n   event_push((Event) {\n-    .handler = on_request_event,\n+    .handler = intercepted ? on_message_event : on_request_event,\n     .data = event_data\n   }, defer);\n }\n \n+static void on_message_event(Event event)",
            "html_url": "https://github.com/neovim/neovim/pull/2603#discussion_r29862381",
            "id": 29862381,
            "line": 512,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODYyMzgx",
            "original_commit_id": "cb051094c990d06c9b81fd2b244e000099341dbb",
            "original_line": null,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 173,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29862381/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2015-05-11T20:40:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29862381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80906?v=4",
                "events_url": "https://api.github.com/users/kopischke/events{/privacy}",
                "followers_url": "https://api.github.com/users/kopischke/followers",
                "following_url": "https://api.github.com/users/kopischke/following{/other_user}",
                "gists_url": "https://api.github.com/users/kopischke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kopischke",
                "id": 80906,
                "login": "kopischke",
                "node_id": "MDQ6VXNlcjgwOTA2",
                "organizations_url": "https://api.github.com/users/kopischke/orgs",
                "received_events_url": "https://api.github.com/users/kopischke/received_events",
                "repos_url": "https://api.github.com/users/kopischke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kopischke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kopischke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kopischke",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/2603#discussion_r29862912"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/29862912"
                }
            },
            "author_association": "MEMBER",
            "body": "> Messages are localised, parsing their textual content is thus by definition brittle.\n\nMaybe the message ID could be sent instead.. only, in (Neo)vim, the message ID is the unlocalized (English) message (so still quite brittle).\n",
            "commit_id": "55f65735f2f7665787a09c4a99bab21a42a116b1",
            "created_at": "2015-05-07T15:25:41Z",
            "diff_hunk": "@@ -436,48 +454,107 @@ static void handle_request(Channel *channel, msgpack_object *request)\n \n   if (error.set) {\n     // Validation failed, send response with error\n-    if (channel_write(channel,\n-                      serialize_response(channel->id,\n-                                         request_id,\n-                                         &error,\n-                                         NIL,\n-                                         &out_buffer))) {\n-      char buf[256];\n-      snprintf(buf, sizeof(buf),\n-               \"Channel %\" PRIu64 \" sent an invalid message, closed.\",\n-               channel->id);\n-      call_set_error(channel, buf);\n-    }\n+    request_set_error(&error, channel, request_id);\n     return;\n   }\n \n-  // Retrieve the request handler\n-  MsgpackRpcRequestHandler handler;\n   msgpack_object *method = msgpack_rpc_method(request);\n+  Array args = ARRAY_DICT_INIT;\n+  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n+\n+  char *meth_str = NULL;\n \n+  // Retrieve the request handler or intercept.\n+  bool intercepted = false;          // A provider owns this message.\n+  MsgpackRpcRequestHandler handler;  // Unused if intercepted.\n   if (method) {\n-    handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n-                                          method->via.bin.size);\n+    meth_str = xmemdupz(method->via.bin.ptr, method->via.bin.size);\n+    char func[256];\n+    snprintf(func, 256, \"provider#message#%s\", meth_str);\n+    if (eval_has_func(func)) {\n+      intercepted = true;\n+    } else {\n+      handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n+                                            method->via.bin.size);\n+    }\n   } else {\n     handler.fn = msgpack_rpc_handle_missing_method;\n     handler.defer = false;\n   }\n \n-  Array args = ARRAY_DICT_INIT;\n-  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n-  bool defer = (!kv_size(channel->call_stack) && handler.defer);\n+  // Always defer intercepted messages since they run vim script.\n+  bool defer = intercepted || (!kv_size(channel->call_stack) && handler.defer);\n   RequestEvent *event_data = xmalloc(sizeof(RequestEvent));\n   event_data->channel = channel;\n+  event_data->method = meth_str;\n   event_data->handler = handler;\n   event_data->args = args;\n   event_data->request_id = request_id;\n   incref(channel);\n   event_push((Event) {\n-    .handler = on_request_event,\n+    .handler = intercepted ? on_message_event : on_request_event,\n     .data = event_data\n   }, defer);\n }\n \n+static void on_message_event(Event event)",
            "html_url": "https://github.com/neovim/neovim/pull/2603#discussion_r29862912",
            "id": 29862912,
            "line": 512,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODYyOTEy",
            "original_commit_id": "cb051094c990d06c9b81fd2b244e000099341dbb",
            "original_line": null,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 173,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29862912/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2015-05-11T20:40:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29862912",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/339435?v=4",
                "events_url": "https://api.github.com/users/fwalch/events{/privacy}",
                "followers_url": "https://api.github.com/users/fwalch/followers",
                "following_url": "https://api.github.com/users/fwalch/following{/other_user}",
                "gists_url": "https://api.github.com/users/fwalch/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fwalch",
                "id": 339435,
                "login": "fwalch",
                "node_id": "MDQ6VXNlcjMzOTQzNQ==",
                "organizations_url": "https://api.github.com/users/fwalch/orgs",
                "received_events_url": "https://api.github.com/users/fwalch/received_events",
                "repos_url": "https://api.github.com/users/fwalch/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fwalch/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fwalch/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fwalch",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/2603#discussion_r29863465"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/29863465"
                }
            },
            "author_association": "MEMBER",
            "body": "We would not detect press-enter by any parsing. We would have a flag. `message.c` knows whether a message will cause press-enter; it can set a flag indicating intent to do so on a message event.\n",
            "commit_id": "55f65735f2f7665787a09c4a99bab21a42a116b1",
            "created_at": "2015-05-07T15:31:24Z",
            "diff_hunk": "@@ -436,48 +454,107 @@ static void handle_request(Channel *channel, msgpack_object *request)\n \n   if (error.set) {\n     // Validation failed, send response with error\n-    if (channel_write(channel,\n-                      serialize_response(channel->id,\n-                                         request_id,\n-                                         &error,\n-                                         NIL,\n-                                         &out_buffer))) {\n-      char buf[256];\n-      snprintf(buf, sizeof(buf),\n-               \"Channel %\" PRIu64 \" sent an invalid message, closed.\",\n-               channel->id);\n-      call_set_error(channel, buf);\n-    }\n+    request_set_error(&error, channel, request_id);\n     return;\n   }\n \n-  // Retrieve the request handler\n-  MsgpackRpcRequestHandler handler;\n   msgpack_object *method = msgpack_rpc_method(request);\n+  Array args = ARRAY_DICT_INIT;\n+  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n+\n+  char *meth_str = NULL;\n \n+  // Retrieve the request handler or intercept.\n+  bool intercepted = false;          // A provider owns this message.\n+  MsgpackRpcRequestHandler handler;  // Unused if intercepted.\n   if (method) {\n-    handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n-                                          method->via.bin.size);\n+    meth_str = xmemdupz(method->via.bin.ptr, method->via.bin.size);\n+    char func[256];\n+    snprintf(func, 256, \"provider#message#%s\", meth_str);\n+    if (eval_has_func(func)) {\n+      intercepted = true;\n+    } else {\n+      handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n+                                            method->via.bin.size);\n+    }\n   } else {\n     handler.fn = msgpack_rpc_handle_missing_method;\n     handler.defer = false;\n   }\n \n-  Array args = ARRAY_DICT_INIT;\n-  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n-  bool defer = (!kv_size(channel->call_stack) && handler.defer);\n+  // Always defer intercepted messages since they run vim script.\n+  bool defer = intercepted || (!kv_size(channel->call_stack) && handler.defer);\n   RequestEvent *event_data = xmalloc(sizeof(RequestEvent));\n   event_data->channel = channel;\n+  event_data->method = meth_str;\n   event_data->handler = handler;\n   event_data->args = args;\n   event_data->request_id = request_id;\n   incref(channel);\n   event_push((Event) {\n-    .handler = on_request_event,\n+    .handler = intercepted ? on_message_event : on_request_event,\n     .data = event_data\n   }, defer);\n }\n \n+static void on_message_event(Event event)",
            "html_url": "https://github.com/neovim/neovim/pull/2603#discussion_r29863465",
            "id": 29863465,
            "line": 512,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODYzNDY1",
            "original_commit_id": "cb051094c990d06c9b81fd2b244e000099341dbb",
            "original_line": null,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 173,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29863465/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2015-05-11T20:40:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29863465",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/2603#discussion_r29866495"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/29866495"
                }
            },
            "author_association": "NONE",
            "body": "Ok, so we\\d do something like\n\n``` vim\ncall rpcsend(chan, 'message', ['{type}', '{modflag}', '{contents}']\n```\n\nwhere `{type}` could be \"message\" or \"error\", `{modflags}` could be a string, empty for a regular message or error, \"P\" for \"Press Enter\" or \"M\" for \"MORE\".\n\n> Maybe the message ID could be sent instead..\n\nJust for clarification, are you talking about the `E###:` part of `emsg`s?\n",
            "commit_id": "55f65735f2f7665787a09c4a99bab21a42a116b1",
            "created_at": "2015-05-07T16:00:19Z",
            "diff_hunk": "@@ -436,48 +454,107 @@ static void handle_request(Channel *channel, msgpack_object *request)\n \n   if (error.set) {\n     // Validation failed, send response with error\n-    if (channel_write(channel,\n-                      serialize_response(channel->id,\n-                                         request_id,\n-                                         &error,\n-                                         NIL,\n-                                         &out_buffer))) {\n-      char buf[256];\n-      snprintf(buf, sizeof(buf),\n-               \"Channel %\" PRIu64 \" sent an invalid message, closed.\",\n-               channel->id);\n-      call_set_error(channel, buf);\n-    }\n+    request_set_error(&error, channel, request_id);\n     return;\n   }\n \n-  // Retrieve the request handler\n-  MsgpackRpcRequestHandler handler;\n   msgpack_object *method = msgpack_rpc_method(request);\n+  Array args = ARRAY_DICT_INIT;\n+  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n+\n+  char *meth_str = NULL;\n \n+  // Retrieve the request handler or intercept.\n+  bool intercepted = false;          // A provider owns this message.\n+  MsgpackRpcRequestHandler handler;  // Unused if intercepted.\n   if (method) {\n-    handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n-                                          method->via.bin.size);\n+    meth_str = xmemdupz(method->via.bin.ptr, method->via.bin.size);\n+    char func[256];\n+    snprintf(func, 256, \"provider#message#%s\", meth_str);\n+    if (eval_has_func(func)) {\n+      intercepted = true;\n+    } else {\n+      handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n+                                            method->via.bin.size);\n+    }\n   } else {\n     handler.fn = msgpack_rpc_handle_missing_method;\n     handler.defer = false;\n   }\n \n-  Array args = ARRAY_DICT_INIT;\n-  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n-  bool defer = (!kv_size(channel->call_stack) && handler.defer);\n+  // Always defer intercepted messages since they run vim script.\n+  bool defer = intercepted || (!kv_size(channel->call_stack) && handler.defer);\n   RequestEvent *event_data = xmalloc(sizeof(RequestEvent));\n   event_data->channel = channel;\n+  event_data->method = meth_str;\n   event_data->handler = handler;\n   event_data->args = args;\n   event_data->request_id = request_id;\n   incref(channel);\n   event_push((Event) {\n-    .handler = on_request_event,\n+    .handler = intercepted ? on_message_event : on_request_event,\n     .data = event_data\n   }, defer);\n }\n \n+static void on_message_event(Event event)",
            "html_url": "https://github.com/neovim/neovim/pull/2603#discussion_r29866495",
            "id": 29866495,
            "line": 512,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODY2NDk1",
            "original_commit_id": "cb051094c990d06c9b81fd2b244e000099341dbb",
            "original_line": null,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 173,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29866495/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2015-05-11T20:40:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29866495",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/2603#discussion_r29876893"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/2603"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/29876893"
                }
            },
            "author_association": "MEMBER",
            "body": "> Just for clarification, are you talking about the E###: part of emsgs?\n\nNo, I meant the [MSGID](https://github.com/neovim/neovim/blob/master/src/nvim/po/de.po#L23) given to Gettext to look up the translation.\n",
            "commit_id": "55f65735f2f7665787a09c4a99bab21a42a116b1",
            "created_at": "2015-05-07T17:47:37Z",
            "diff_hunk": "@@ -436,48 +454,107 @@ static void handle_request(Channel *channel, msgpack_object *request)\n \n   if (error.set) {\n     // Validation failed, send response with error\n-    if (channel_write(channel,\n-                      serialize_response(channel->id,\n-                                         request_id,\n-                                         &error,\n-                                         NIL,\n-                                         &out_buffer))) {\n-      char buf[256];\n-      snprintf(buf, sizeof(buf),\n-               \"Channel %\" PRIu64 \" sent an invalid message, closed.\",\n-               channel->id);\n-      call_set_error(channel, buf);\n-    }\n+    request_set_error(&error, channel, request_id);\n     return;\n   }\n \n-  // Retrieve the request handler\n-  MsgpackRpcRequestHandler handler;\n   msgpack_object *method = msgpack_rpc_method(request);\n+  Array args = ARRAY_DICT_INIT;\n+  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n+\n+  char *meth_str = NULL;\n \n+  // Retrieve the request handler or intercept.\n+  bool intercepted = false;          // A provider owns this message.\n+  MsgpackRpcRequestHandler handler;  // Unused if intercepted.\n   if (method) {\n-    handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n-                                          method->via.bin.size);\n+    meth_str = xmemdupz(method->via.bin.ptr, method->via.bin.size);\n+    char func[256];\n+    snprintf(func, 256, \"provider#message#%s\", meth_str);\n+    if (eval_has_func(func)) {\n+      intercepted = true;\n+    } else {\n+      handler = msgpack_rpc_get_handler_for(method->via.bin.ptr,\n+                                            method->via.bin.size);\n+    }\n   } else {\n     handler.fn = msgpack_rpc_handle_missing_method;\n     handler.defer = false;\n   }\n \n-  Array args = ARRAY_DICT_INIT;\n-  msgpack_rpc_to_array(msgpack_rpc_args(request), &args);\n-  bool defer = (!kv_size(channel->call_stack) && handler.defer);\n+  // Always defer intercepted messages since they run vim script.\n+  bool defer = intercepted || (!kv_size(channel->call_stack) && handler.defer);\n   RequestEvent *event_data = xmalloc(sizeof(RequestEvent));\n   event_data->channel = channel;\n+  event_data->method = meth_str;\n   event_data->handler = handler;\n   event_data->args = args;\n   event_data->request_id = request_id;\n   incref(channel);\n   event_push((Event) {\n-    .handler = on_request_event,\n+    .handler = intercepted ? on_message_event : on_request_event,\n     .data = event_data\n   }, defer);\n }\n \n+static void on_message_event(Event event)",
            "html_url": "https://github.com/neovim/neovim/pull/2603#discussion_r29876893",
            "id": 29876893,
            "line": 512,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODc2ODkz",
            "original_commit_id": "cb051094c990d06c9b81fd2b244e000099341dbb",
            "original_line": null,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 173,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29876893/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2015-05-11T20:40:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/29876893",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/339435?v=4",
                "events_url": "https://api.github.com/users/fwalch/events{/privacy}",
                "followers_url": "https://api.github.com/users/fwalch/followers",
                "following_url": "https://api.github.com/users/fwalch/following{/other_user}",
                "gists_url": "https://api.github.com/users/fwalch/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fwalch",
                "id": 339435,
                "login": "fwalch",
                "node_id": "MDQ6VXNlcjMzOTQzNQ==",
                "organizations_url": "https://api.github.com/users/fwalch/orgs",
                "received_events_url": "https://api.github.com/users/fwalch/received_events",
                "repos_url": "https://api.github.com/users/fwalch/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fwalch/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fwalch/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fwalch",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I like this idea. Though for the specific case of calling a plugin vimscript function from an rplugin, I thought of adding a `vim_call_vimscript`  api function, so instead of\n\n```\nres = json.dumps(result)\nself.vim.command(\"call myplugin#result({}, {})\".format(index,res))\n```\n\none could do\n\n```\nself.vim.script_call(\"myplugin#result\", index, result)\n```\n\nand avoid the \"second serialization\" (or abusing temporary variables), and won't need to move callbacks to a seprate namespace.\n\nNot really sure I like the idea to override existing api rpc calls though. It might be useful for testing, but in general I think we want to implement vimscript on top of the api interface, and not the other way around.\n",
            "created_at": "2015-05-07T12:44:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/2603#issuecomment-99849664",
            "id": 99849664,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2603",
            "node_id": "MDEyOklzc3VlQ29tbWVudDk5ODQ5NjY0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/99849664/reactions"
            },
            "updated_at": "2015-05-07T12:44:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/99849664",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Not really sure I like the idea to override existing api rpc calls though. It might be useful for testing, but\n\nTesting was actually a large part of my motivation. Not being so adept at the Python client as I perhaps should be, I wanted to make vim itself able to act both parts.\n\nLetting users modify existing API functions was a bit of an unintended consequence of this strategy. It would be difficult to prevent one from defining a function that overlapped with an existing provider call unless we reserved the name in vimL, and then ignoring it when dispatching the message might be confusing.\n\nBut I think allowing the creation of arbitrary events/handlers can be very powerful. \n\nOne thing I was considering last night is that we could maybe put the handlers in a global, read only dictionary, which would allow the defining of methods outside of a `*/providers/message.vim` file. It would also allow us to guard against redefining existing API methods, if we really feel we need to.\n",
            "created_at": "2015-05-07T14:14:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/2603#issuecomment-99882246",
            "id": 99882246,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2603",
            "node_id": "MDEyOklzc3VlQ29tbWVudDk5ODgyMjQ2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/99882246/reactions"
            },
            "updated_at": "2015-05-07T14:14:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/99882246",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Anyone know how to diagnose a `cimport` error? (cc @justinmk?)\n\nIt says `invalid C type at line 1512` but the file being imported doesn't have that many lines, so maybe it's the preprocessed file, but...\n",
            "created_at": "2015-05-12T14:09:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/2603#issuecomment-101295969",
            "id": 101295969,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2603",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTI5NTk2OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/101295969/reactions"
            },
            "updated_at": "2015-05-12T14:09:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/101295969",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`vim.ui_attach` gives full control over message display. Alternatively, a current (non-ideal) approach is to wrap `vim.notify()`. \r\n\r\nExposing messages as events (\"autocmds\") may be warranted also.\r\n\r\nBut this PR is addressing the \"Press Enter\" problem, which @luukvbaal is working on.",
            "created_at": "2024-12-17T12:31:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/2603#issuecomment-2548337586",
            "id": 2548337586,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2603",
            "node_id": "IC_kwDOAPphoM6X5Iuy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2548337586/reactions"
            },
            "updated_at": "2024-12-17T12:31:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2548337586",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/2603/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/2603/commits",
    "created_at": "2015-05-06T23:25:07Z",
    "diff_url": "https://github.com/neovim/neovim/pull/2603.diff",
    "draft": false,
    "head": {
        "label": "splinterofchaos:notify-me",
        "ref": "notify-me",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/splinterofchaos/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/splinterofchaos/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/splinterofchaos/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/splinterofchaos/neovim/branches{/branch}",
            "clone_url": "https://github.com/splinterofchaos/neovim.git",
            "collaborators_url": "https://api.github.com/repos/splinterofchaos/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/splinterofchaos/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/splinterofchaos/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/splinterofchaos/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/splinterofchaos/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/splinterofchaos/neovim/contributors",
            "created_at": "2014-07-07T13:13:12Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/splinterofchaos/neovim/deployments",
            "description": "vim for the 21st century",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/splinterofchaos/neovim/downloads",
            "events_url": "https://api.github.com/repos/splinterofchaos/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/splinterofchaos/neovim/forks",
            "full_name": "splinterofchaos/neovim",
            "git_commits_url": "https://api.github.com/repos/splinterofchaos/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/splinterofchaos/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/splinterofchaos/neovim/git/tags{/sha}",
            "git_url": "git://github.com/splinterofchaos/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://neovim.org/",
            "hooks_url": "https://api.github.com/repos/splinterofchaos/neovim/hooks",
            "html_url": "https://github.com/splinterofchaos/neovim",
            "id": 21571013,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/splinterofchaos/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/splinterofchaos/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/splinterofchaos/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/splinterofchaos/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/splinterofchaos/neovim/labels{/name}",
            "language": "VimL",
            "languages_url": "https://api.github.com/repos/splinterofchaos/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/splinterofchaos/neovim/merges",
            "milestones_url": "https://api.github.com/repos/splinterofchaos/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMTU3MTAxMw==",
            "notifications_url": "https://api.github.com/repos/splinterofchaos/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/splinterofchaos/neovim/pulls{/number}",
            "pushed_at": "2015-08-23T03:58:16Z",
            "releases_url": "https://api.github.com/repos/splinterofchaos/neovim/releases{/id}",
            "size": 33560,
            "ssh_url": "git@github.com:splinterofchaos/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/splinterofchaos/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/splinterofchaos/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/splinterofchaos/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/splinterofchaos/neovim/subscription",
            "svn_url": "https://github.com/splinterofchaos/neovim",
            "tags_url": "https://api.github.com/repos/splinterofchaos/neovim/tags",
            "teams_url": "https://api.github.com/repos/splinterofchaos/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/splinterofchaos/neovim/git/trees{/sha}",
            "updated_at": "2015-04-15T19:23:11Z",
            "url": "https://api.github.com/repos/splinterofchaos/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "55f65735f2f7665787a09c4a99bab21a42a116b1",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
            "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
            "followers_url": "https://api.github.com/users/splinterofchaos/followers",
            "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
            "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/splinterofchaos",
            "id": 38515,
            "login": "splinterofchaos",
            "node_id": "MDQ6VXNlcjM4NTE1",
            "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
            "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
            "repos_url": "https://api.github.com/users/splinterofchaos/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/splinterofchaos",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/2603",
    "id": 34870645,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2603",
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "discussion has run its course, need decision how to proceed",
            "id": 83851236,
            "name": "needs:decision",
            "node_id": "MDU6TGFiZWw4Mzg1MTIzNg==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:decision"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "",
            "id": 109899557,
            "name": "vimscript",
            "node_id": "MDU6TGFiZWwxMDk4OTk1NTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vimscript"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 144672485,
            "name": "provider",
            "node_id": "MDU6TGFiZWwxNDQ2NzI0ODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/provider"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ4NzA2NDU=",
    "number": 2603,
    "patch_url": "https://github.com/neovim/neovim/pull/2603.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/2603/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/55f65735f2f7665787a09c4a99bab21a42a116b1",
    "title": "Intercept requests/notifications via vimL",
    "updated_at": "2024-12-17T12:31:59Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/2603",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
        "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
        "followers_url": "https://api.github.com/users/splinterofchaos/followers",
        "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
        "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/splinterofchaos",
        "id": 38515,
        "login": "splinterofchaos",
        "node_id": "MDQ6VXNlcjM4NTE1",
        "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
        "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
        "repos_url": "https://api.github.com/users/splinterofchaos/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/splinterofchaos",
        "user_view_type": "public"
    }
}