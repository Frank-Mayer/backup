{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29104/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29104/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/29104"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29104"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29104/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/8902220e4bfd360cddfd35bf9f196f47525d0888"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5467,
            "forks_count": 5467,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1738,
            "open_issues_count": 1738,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-06-18T01:52:59Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 274862,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 79235,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-06-18T01:56:59Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 79235,
            "watchers_count": 79235,
            "web_commit_signoff_required": false
        },
        "sha": "53afdf360cf195c02c22865f4e63b273d1ef152e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "I saw that #23461 was closed, so I rebased it on top of master and addressed a few of the pending comments. In the following days I'll continue working on this PR.\r\n\r\nShould close #23232",
    "closed_at": "2024-06-13T11:55:23Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1621798115"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1621798115"
                }
            },
            "author_association": "MEMBER",
            "body": "Can you model this check after the `external` check for `ripgrep`? Besides the version, the location can also be very important (system vs. \"overlay package manager\"). From painful experience, the full `curl -V` output can also be relevant -- there are package managers that install a curl without ssl support, and then suddenly nothing works...",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-05-31T06:23:54Z",
            "diff_hunk": "@@ -397,6 +397,23 @@ local function check_external_tools()\n   end\n end\n \n+local function check_network()",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1621798115",
            "id": 1621798115,
            "line": 400,
            "node_id": "PRRC_kwDOAPphoM5gqqzj",
            "original_commit_id": "942353d8388a47c28cbd570554637e1223fd5f60",
            "original_line": 400,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/health/health.lua",
            "position": 4,
            "pull_request_review_id": 2089979184,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1621798115/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-31T06:23:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1621798115",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1621863675"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1621863675"
                }
            },
            "author_association": "MEMBER",
            "body": "We should avoid adding configuration variables for this wherever possible. Since the decision has already been made that NetRW *delendam est* and we are very early in the dev cycle, we should just enable this by default (with a temporary(!) opt-out, hopefully to be removed by the time 0.11 is released). (If a suitable `curl` is found, of course.)\r\n\r\nAlso, why would someone _not_ want actual filetype matching? How much slower are we talking about -- milliseconds or minutes? I think the basic expectation (that we should meet) is that remote editing behaves just like local editing. This means we should just do full matching (with possibly a \"gimme _nao_, I know what I'm doing\" fast option -- again, hopefully to be removed if we can iron out the issues that make it desirable).",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-05-31T07:18:54Z",
            "diff_hunk": "@@ -154,13 +154,27 @@ UI\n • |CompleteDone| now sets the `reason` key in `v:event` which specifies the reason\n   for completion being done.\n \n+• Added |vim.net.fetch()| for requests.\n+\n+• Added |vim.net.download()| for file downloads.\n+\n ==============================================================================\n CHANGED FEATURES                                                 *news-changed*\n \n These existing features changed their behavior.\n \n • N/A\n \n+• `:e, :w, :[range]w!, and :r https://*,http://*,ftp://*,scp://*` can now\n+  use |vim.net.fetch()|. Opt-in via >lua\n+      vim.g.lua_net_enable = true\n+<\n+• `:e https://*,http://*,ftp://*,scp://*` now automatically matches\n+  filetype using the url. Optionally, you can enable (slower) automatic\n+  full-text filetype matching for editing remote files that don't have an\n+  extension (for example https://neovim.io/ -> `ft=html`) via >lua\n+      vim.g.lua_net_ft_full = true\n+<",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1621863675",
            "id": 1621863675,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5gq6z7",
            "original_commit_id": "942353d8388a47c28cbd570554637e1223fd5f60",
            "original_line": 177,
            "original_position": 24,
            "original_start_line": 168,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2090057036,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1621863675/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-31T07:23:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1621863675",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1623399017"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399017"
                }
            },
            "author_association": "MEMBER",
            "body": "These functions should not be defined here (since `plugin/` is executed unconditionally) but in `vim.net`. This file should just define autocommands with callbacks that are (private) functions in `vim.net`.",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-06-02T12:21:07Z",
            "diff_hunk": "@@ -0,0 +1,333 @@\n+if not vim.g.lua_net_enable then\n+  return\n+end\n+\n+local function url_safe_encode_byte(byte)\n+  local char_map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n+  return char_map:sub(byte % 64 + 1, byte % 64 + 1)\n+end\n+",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1623399017",
            "id": 1623399017,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5gwxpp",
            "original_commit_id": "942353d8388a47c28cbd570554637e1223fd5f60",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": 5,
            "path": "runtime/plugin/net.lua",
            "position": null,
            "pull_request_review_id": 2092288786,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399017/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-02T12:21:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399017",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1623399267"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399267"
                }
            },
            "author_association": "MEMBER",
            "body": "There's also a good chunk of code duplication in these callbacks, which further indicates that these should be refactored into dedicated functions.",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-06-02T12:22:48Z",
            "diff_hunk": "@@ -0,0 +1,333 @@\n+if not vim.g.lua_net_enable then\n+  return\n+end\n+\n+local function url_safe_encode_byte(byte)\n+  local char_map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n+  return char_map:sub(byte % 64 + 1, byte % 64 + 1)\n+end\n+",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1623399267",
            "id": 1623399267,
            "in_reply_to_id": 1623399017,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5gwxtj",
            "original_commit_id": "942353d8388a47c28cbd570554637e1223fd5f60",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": 5,
            "path": "runtime/plugin/net.lua",
            "position": null,
            "pull_request_review_id": 2092289075,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399267/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-02T12:22:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399267",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1623399325"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399325"
                }
            },
            "author_association": "MEMBER",
            "body": "(They also need documentation and type annotations, of course.)",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-06-02T12:23:14Z",
            "diff_hunk": "@@ -0,0 +1,333 @@\n+if not vim.g.lua_net_enable then\n+  return\n+end\n+\n+local function url_safe_encode_byte(byte)\n+  local char_map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n+  return char_map:sub(byte % 64 + 1, byte % 64 + 1)\n+end\n+",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1623399325",
            "id": 1623399325,
            "in_reply_to_id": 1623399017,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5gwxud",
            "original_commit_id": "942353d8388a47c28cbd570554637e1223fd5f60",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": 5,
            "path": "runtime/plugin/net.lua",
            "position": null,
            "pull_request_review_id": 2092289157,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399325/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-02T12:27:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1623399949"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399949"
                }
            },
            "author_association": "MEMBER",
            "body": "That needs a much better name. AFAICT this generates a random temporary file name?",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-06-02T12:26:12Z",
            "diff_hunk": "@@ -0,0 +1,333 @@\n+if not vim.g.lua_net_enable then\n+  return\n+end\n+\n+local function url_safe_encode_byte(byte)\n+  local char_map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n+  return char_map:sub(byte % 64 + 1, byte % 64 + 1)\n+end\n+\n+-- The main function to generate a path-safe string\n+local function generate_path_safe_string(len)",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1623399949",
            "id": 1623399949,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5gwx4N",
            "original_commit_id": "942353d8388a47c28cbd570554637e1223fd5f60",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": 10,
            "path": "runtime/plugin/net.lua",
            "position": null,
            "pull_request_review_id": 2092289157,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399949/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-02T12:27:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623399949",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1623532080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623532080"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> How much slower are we talking about -- milliseconds or minutes?\r\n\r\nI'm gonna disable this for now. If there are performance problems in the future, I'm gonna add it again",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-06-02T16:35:13Z",
            "diff_hunk": "@@ -154,13 +154,27 @@ UI\n • |CompleteDone| now sets the `reason` key in `v:event` which specifies the reason\n   for completion being done.\n \n+• Added |vim.net.fetch()| for requests.\n+\n+• Added |vim.net.download()| for file downloads.\n+\n ==============================================================================\n CHANGED FEATURES                                                 *news-changed*\n \n These existing features changed their behavior.\n \n • N/A\n \n+• `:e, :w, :[range]w!, and :r https://*,http://*,ftp://*,scp://*` can now\n+  use |vim.net.fetch()|. Opt-in via >lua\n+      vim.g.lua_net_enable = true\n+<\n+• `:e https://*,http://*,ftp://*,scp://*` now automatically matches\n+  filetype using the url. Optionally, you can enable (slower) automatic\n+  full-text filetype matching for editing remote files that don't have an\n+  extension (for example https://neovim.io/ -> `ft=html`) via >lua\n+      vim.g.lua_net_ft_full = true\n+<",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1623532080",
            "id": 1623532080,
            "in_reply_to_id": 1621863675,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5gxSIw",
            "original_commit_id": "942353d8388a47c28cbd570554637e1223fd5f60",
            "original_line": 177,
            "original_position": 24,
            "original_start_line": 168,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2092461675,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623532080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-02T16:35:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623532080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53507599?v=4",
                "events_url": "https://api.github.com/users/TheLeoP/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheLeoP/followers",
                "following_url": "https://api.github.com/users/TheLeoP/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheLeoP/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheLeoP",
                "id": 53507599,
                "login": "TheLeoP",
                "node_id": "MDQ6VXNlcjUzNTA3NTk5",
                "organizations_url": "https://api.github.com/users/TheLeoP/orgs",
                "received_events_url": "https://api.github.com/users/TheLeoP/received_events",
                "repos_url": "https://api.github.com/users/TheLeoP/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheLeoP/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheLeoP/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheLeoP"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1623666921"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623666921"
                }
            },
            "author_association": "MEMBER",
            "body": "what are the differences? at a glance doesn't look like they need to be separate functions.\r\n\r\nas clason also mentioned, we could start with a minimal version of `vim.net.fetch` which has the interface (signature) that we want, but only supports basic \"download\" behavior.",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-06-02T22:57:38Z",
            "diff_hunk": "@@ -4429,4 +4429,216 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+*HeaderTable*\n+\n+    Fields: ~\n+      • {_storage}  (`table<string, string[]>`)\n+      • {set}       (`fun(self: HeaderTableself: HeaderTablevalue: string[]|stringkey: string)`)\n+                    Set value of header.\n+      • {append}    (`fun(self: HeaderTableself: HeaderTablekey: string)`)\n+                    Append value to header.\n+      • {get}       (`fun(self: HeaderTableself: HeaderTablekey: string): string?`)\n+                    Get header value. For headers like cookies, use\n+                    |HeaderTable:get_all|.\n+      • {get_all}   (`fun(self: HeaderTableself: HeaderTablekey: string): string[]?`)\n+                    Get all header values.\n+      • {has}       (`fun(self: HeaderTableself: HeaderTablekey: string): boolean`)\n+\n+*vim.net.createCurlArgs.Opts*\n+\n+    Fields: ~\n+      • {method}             (`vim.net.httpMethod?`)\n+      • {redirect}           (`\"follow\"|\"error\"?`)\n+      • {data}               (`string|table<string, any>?`)\n+      • {headers}            (`HeaderTable|table<string, string|string[]>?`)\n+      • {download_location}  (`string?`)\n+      • {upload_file}        (`string?`)\n+      • {user}               (`string?`)\n+\n+\n+HeaderTable:append({key})                               *HeaderTable:append()*\n+    Append value to header.\n+\n+    Parameters: ~\n+      • {key}  (`string`) Non case-sensitive header name.\n+\n+HeaderTable:get({key})                                     *HeaderTable:get()*\n+    Get header value. For headers like cookies, use |HeaderTable:get_all|.\n+\n+    Parameters: ~\n+      • {key}  (`string`) Non case-sensitive header name.\n+\n+    Return: ~\n+        (`string?`)\n+\n+HeaderTable:get_all({key})                             *HeaderTable:get_all()*\n+    Get all header values.\n+\n+    Parameters: ~\n+      • {key}  (`string`) Non case-sensitive header name.\n+\n+    Return: ~\n+        (`string[]?`)\n+\n+HeaderTable:has({key})                                     *HeaderTable:has()*\n+\n+    Parameters: ~\n+      • {key}  (`string`) Non case-sensitive header name.\n+\n+    Return: ~\n+        (`boolean`) has true if the HeaderTable contains key.\n+\n+HeaderTable:set({value}, {key})                            *HeaderTable:set()*\n+    Set value of header.\n+\n+    Parameters: ~\n+      • {value}  (`string[]|string`) Header value.\n+      • {key}    (`string`) Non case-sensitive header name.\n+\n+vim.net.download({url}, {path}, {opts})                   *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    See man://curl for supported protocols. Not all protocols are fully\n+    tested.\n+\n+    Please carefully note the option differences with |vim.net.fetch()|,",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1623666921",
            "id": 1623666921,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5gxzDp",
            "original_commit_id": "942353d8388a47c28cbd570554637e1223fd5f60",
            "original_line": 4508,
            "original_position": 80,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2092619274,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623666921/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-02T22:57:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623666921",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1623670503"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623670503"
                }
            },
            "author_association": "MEMBER",
            "body": "let's drop this . make it non-optional",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-06-02T23:23:45Z",
            "diff_hunk": "@@ -46,10 +46,13 @@ augroup END\n augroup Network\n  au!\n  au BufReadCmd   file://*\t\t\t\t\t\t\t\t\t\t\tcall netrw#FileUrlEdit(expand(\"<amatch>\"))\n- au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*\texe \"sil doau BufReadPre \".fnameescape(expand(\"<amatch>\"))|call netrw#Nread(2,expand(\"<amatch>\"))|exe \"sil doau BufReadPost \".fnameescape(expand(\"<amatch>\"))\n- au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*\texe \"sil doau FileReadPre \".fnameescape(expand(\"<amatch>\"))|call netrw#Nread(1,expand(\"<amatch>\"))|exe \"sil doau FileReadPost \".fnameescape(expand(\"<amatch>\"))\n- au BufWriteCmd  ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*\t\t\texe \"sil doau BufWritePre \".fnameescape(expand(\"<amatch>\"))|exe 'Nwrite '.fnameescape(expand(\"<amatch>\"))|exe \"sil doau BufWritePost \".fnameescape(expand(\"<amatch>\"))\n- au FileWriteCmd ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*\t\t\texe \"sil doau FileWritePre \".fnameescape(expand(\"<amatch>\"))|exe \"'[,']\".'Nwrite '.fnameescape(expand(\"<amatch>\"))|exe \"sil doau FileWritePost \".fnameescape(expand(\"<amatch>\"))\n+ \" Enable vimscript implementations if user opts-out\n+ if exists(\"g:lua_net_disable\")",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1623670503",
            "id": 1623670503,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5gxz7n",
            "original_commit_id": "38b593f1c86c4f5be4acc32a53627b42ba6dbd23",
            "original_line": 50,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/plugin/netrwPlugin.vim",
            "position": null,
            "pull_request_review_id": 2092623724,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623670503/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-02T23:23:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623670503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1623892682"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623892682"
                }
            },
            "author_association": "MEMBER",
            "body": "Fetch is _much_ more general, allowing arbitrary requests (including _writing_, needed for `:e`). Download is a simplified interface for just... downloading a file (but not enough to implement `:e` over network). But note that you still need to expose some curl options since network conditions are very heterogeneous.\r\n\r\nSo both are needed (if both of these different features are wanted). I agree the name `fetch` is bad, though, and should be changed to make that clearer -- maybe `vim.net.request` (could mark it as private for now).\r\n",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-06-03T07:17:28Z",
            "diff_hunk": "@@ -4429,4 +4429,216 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+*HeaderTable*\n+\n+    Fields: ~\n+      • {_storage}  (`table<string, string[]>`)\n+      • {set}       (`fun(self: HeaderTableself: HeaderTablevalue: string[]|stringkey: string)`)\n+                    Set value of header.\n+      • {append}    (`fun(self: HeaderTableself: HeaderTablekey: string)`)\n+                    Append value to header.\n+      • {get}       (`fun(self: HeaderTableself: HeaderTablekey: string): string?`)\n+                    Get header value. For headers like cookies, use\n+                    |HeaderTable:get_all|.\n+      • {get_all}   (`fun(self: HeaderTableself: HeaderTablekey: string): string[]?`)\n+                    Get all header values.\n+      • {has}       (`fun(self: HeaderTableself: HeaderTablekey: string): boolean`)\n+\n+*vim.net.createCurlArgs.Opts*\n+\n+    Fields: ~\n+      • {method}             (`vim.net.httpMethod?`)\n+      • {redirect}           (`\"follow\"|\"error\"?`)\n+      • {data}               (`string|table<string, any>?`)\n+      • {headers}            (`HeaderTable|table<string, string|string[]>?`)\n+      • {download_location}  (`string?`)\n+      • {upload_file}        (`string?`)\n+      • {user}               (`string?`)\n+\n+\n+HeaderTable:append({key})                               *HeaderTable:append()*\n+    Append value to header.\n+\n+    Parameters: ~\n+      • {key}  (`string`) Non case-sensitive header name.\n+\n+HeaderTable:get({key})                                     *HeaderTable:get()*\n+    Get header value. For headers like cookies, use |HeaderTable:get_all|.\n+\n+    Parameters: ~\n+      • {key}  (`string`) Non case-sensitive header name.\n+\n+    Return: ~\n+        (`string?`)\n+\n+HeaderTable:get_all({key})                             *HeaderTable:get_all()*\n+    Get all header values.\n+\n+    Parameters: ~\n+      • {key}  (`string`) Non case-sensitive header name.\n+\n+    Return: ~\n+        (`string[]?`)\n+\n+HeaderTable:has({key})                                     *HeaderTable:has()*\n+\n+    Parameters: ~\n+      • {key}  (`string`) Non case-sensitive header name.\n+\n+    Return: ~\n+        (`boolean`) has true if the HeaderTable contains key.\n+\n+HeaderTable:set({value}, {key})                            *HeaderTable:set()*\n+    Set value of header.\n+\n+    Parameters: ~\n+      • {value}  (`string[]|string`) Header value.\n+      • {key}    (`string`) Non case-sensitive header name.\n+\n+vim.net.download({url}, {path}, {opts})                   *vim.net.download()*\n+    Asynchronously download a file. To read the response metadata, such as\n+    headers and body, use |vim.net.fetch()|.\n+\n+    See man://curl for supported protocols. Not all protocols are fully\n+    tested.\n+\n+    Please carefully note the option differences with |vim.net.fetch()|,",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1623892682",
            "id": 1623892682,
            "in_reply_to_id": 1623666921,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5gyqLK",
            "original_commit_id": "942353d8388a47c28cbd570554637e1223fd5f60",
            "original_line": 4508,
            "original_position": 80,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2092970065,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623892682/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-03T08:34:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1623892682",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29104#discussion_r1638056501"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29104"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1638056501"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm really not a fan of the vim.opt-style custom functions for basic table operations nor the headertable object. Could this not be a normal table instead? IIRC even python's requests package use a basic dictionary for providing headers.",
            "commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "created_at": "2024-06-13T11:34:27Z",
            "diff_hunk": "@@ -4432,4 +4432,175 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+*HeaderTable*\n+\n+    Fields: ~\n+      • {set}      (`fun(self: HeaderTableself: HeaderTablevalue: string[]|stringkey: string)`)\n+                   Set value of header.\n+      • {append}   (`fun(self: HeaderTableself: HeaderTablekey: string)`)\n+                   Append value to header.\n+      • {get}      (`fun(self: HeaderTableself: HeaderTablekey: string): string?`)\n+                   Get header value. For headers like cookies, use\n+                   |HeaderTable:get_all()|.\n+      • {get_all}  (`fun(self: HeaderTableself: HeaderTablekey: string): string[]?`)\n+                   Get all header values.\n+      • {has}      (`fun(self: HeaderTableself: HeaderTablekey: string): boolean`)\n+\n+*vim.net.createCurlArgs.Opts*\n+\n+    Fields: ~\n+      • {method}             (`vim.net.HttpMethod?`)\n+      • {redirect}           (`\"follow\"|\"error\"|\"none\"?`)\n+      • {data}               (`string|table<string, any>?`)\n+      • {headers}            (`HeaderTable|table<string, string|string[]>?`)\n+      • {download_location}  (`string?`)\n+      • {upload_file}        (`string?`)\n+      • {credentials}        (`string?`)\n+\n+\n+HeaderTable:append({key})                               *HeaderTable:append()*\n+    Append value to header.",
            "html_url": "https://github.com/neovim/neovim/pull/29104#discussion_r1638056501",
            "id": 1638056501,
            "line": 4465,
            "node_id": "PRRC_kwDOAPphoM5hosI1",
            "original_commit_id": "8902220e4bfd360cddfd35bf9f196f47525d0888",
            "original_line": 4465,
            "original_position": 34,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 34,
            "pull_request_review_id": 2115532741,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1638056501/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-13T11:35:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1638056501",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "To be honest, I think this code still needs a lot of work before it could be merged. Maybe it would be better to start with only `vim.net.download()`, and only consider `fetch()` after that is done?",
            "created_at": "2024-06-02T12:34:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/29104#issuecomment-2143830628",
            "id": 2143830628,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29104",
            "node_id": "IC_kwDOAPphoM5_yEJk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2143830628/reactions"
            },
            "updated_at": "2024-06-02T12:34:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2143830628",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Netrw seems to handle `https:/some/path/to/a/dir/` showing the contents of the dir inside `:Explore`. Is it expected this to be handled as well?",
            "created_at": "2024-06-02T23:17:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/29104#issuecomment-2144054101",
            "id": 2144054101,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29104",
            "node_id": "IC_kwDOAPphoM5_y6tV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2144054101/reactions"
            },
            "updated_at": "2024-06-02T23:17:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2144054101",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53507599?v=4",
                "events_url": "https://api.github.com/users/TheLeoP/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheLeoP/followers",
                "following_url": "https://api.github.com/users/TheLeoP/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheLeoP/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheLeoP",
                "id": 53507599,
                "login": "TheLeoP",
                "node_id": "MDQ6VXNlcjUzNTA3NTk5",
                "organizations_url": "https://api.github.com/users/TheLeoP/orgs",
                "received_events_url": "https://api.github.com/users/TheLeoP/received_events",
                "repos_url": "https://api.github.com/users/TheLeoP/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheLeoP/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheLeoP/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheLeoP"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Also, the Netrw implementation uses multiple commands (`ftp` for `ftp://`, for example). Is it expected to handle all of this protocols? My local version of `curl` seems to handle `ftp` just fine. What would be the expectations regarding protocol support for `curl` on the user local machine?",
            "created_at": "2024-06-02T23:19:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/29104#issuecomment-2144054617",
            "id": 2144054617,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29104",
            "node_id": "IC_kwDOAPphoM5_y61Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2144054617/reactions"
            },
            "updated_at": "2024-06-02T23:19:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2144054617",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53507599?v=4",
                "events_url": "https://api.github.com/users/TheLeoP/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheLeoP/followers",
                "following_url": "https://api.github.com/users/TheLeoP/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheLeoP/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheLeoP",
                "id": 53507599,
                "login": "TheLeoP",
                "node_id": "MDQ6VXNlcjUzNTA3NTk5",
                "organizations_url": "https://api.github.com/users/TheLeoP/orgs",
                "received_events_url": "https://api.github.com/users/TheLeoP/received_events",
                "repos_url": "https://api.github.com/users/TheLeoP/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheLeoP/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheLeoP/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheLeoP"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What would be the expectations regarding protocol support for `curl` on the user local machine?\r\n\r\nwhatever curl can easily handle is fine. or we can start with http[s] and add more later.\r\n\r\nbtw, please review comments starting from https://github.com/neovim/neovim/pull/23461#issuecomment-1660446261",
            "created_at": "2024-06-02T23:24:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/29104#issuecomment-2144055981",
            "id": 2144055981,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29104",
            "node_id": "IC_kwDOAPphoM5_y7Kt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2144055981/reactions"
            },
            "updated_at": "2024-06-02T23:24:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2144055981",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Could we implement gf and :edit https://... analogously to vim.ui.open (which provides gx)?\r\n\r\nWould this look like providing a `vim.ui.edit` that uses the logic that's currently inside the `[Buf/File][Read/Write]Cmd` and using it to create a default `gf` keymap? Then, the autocmd would also call `vim.ui.open`?",
            "created_at": "2024-06-02T23:43:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/29104#issuecomment-2144061958",
            "id": 2144061958,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29104",
            "node_id": "IC_kwDOAPphoM5_y8oG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2144061958/reactions"
            },
            "updated_at": "2024-06-02T23:43:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2144061958",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53507599?v=4",
                "events_url": "https://api.github.com/users/TheLeoP/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheLeoP/followers",
                "following_url": "https://api.github.com/users/TheLeoP/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheLeoP/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheLeoP",
                "id": 53507599,
                "login": "TheLeoP",
                "node_id": "MDQ6VXNlcjUzNTA3NTk5",
                "organizations_url": "https://api.github.com/users/TheLeoP/orgs",
                "received_events_url": "https://api.github.com/users/TheLeoP/received_events",
                "repos_url": "https://api.github.com/users/TheLeoP/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheLeoP/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheLeoP/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheLeoP"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Also, the Netrw implementation uses multiple commands (`ftp` for `ftp://`, for example). Is it expected to handle all of this protocols? My local version of `curl` seems to handle `ftp` just fine. What would be the expectations regarding protocol support for `curl` on the user local machine?\r\n\r\nThis was exactly my worry about relying on system curl. I don't know what the minimum expectable baseline is (I just know it's _very_ low). I think we need to rely on runtime checks here -- support everything that is reasonable (not necessarily for first PR) but fail gracefully if the local `curl` lacks support (`curl -V` should print a list of protocols; we probably want to cache that on first checking).",
            "created_at": "2024-06-03T08:40:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/29104#issuecomment-2144622155",
            "id": 2144622155,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29104",
            "node_id": "IC_kwDOAPphoM5_1FZL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2144622155/reactions"
            },
            "updated_at": "2024-06-03T08:40:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2144622155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I wonder if making this API public is premature. Could we not start using this internally for a while so we have time to iron out problems that show up encounter? Netrw could still use this under the hood ofc.",
            "created_at": "2024-06-13T11:48:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/29104#issuecomment-2165428659",
            "id": 2165428659,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29104",
            "node_id": "IC_kwDOAPphoM6BEdGz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165428659/reactions"
            },
            "updated_at": "2024-06-13T11:48:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165428659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@TheLeoP I really appreciate the effort, but I would like to structure it a bit more. (There's a reason the original PR languished and got closed in the end...) I really don't think trying to do the whole `vim.net` in one go is the best approach here.\r\n\r\nSo I will close this PR and would like to ask you to open a new, fresh, one where you just extract and polish the functionality needed for `vim.net.download()` _and nothing else_. (This will be bikeshedding enough since we need it to work on all supported platforms and under reasonable network peculiarities, like proxies.)\r\n\r\nOnce we're happy with that, we can build on that with `vim.net.request()` for the purpose of `:edit`ing over a simple network protocol (manually at first). Once we are happy with _that_, we can slowly replace bits of NetRW with it (which _is_ the end goal).\r\n\r\nAgain, this work is welcome, but the process would just be smoother (not least for you) if we do it in multiple self-contained steps.",
            "created_at": "2024-06-13T11:55:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/29104#issuecomment-2165443624",
            "id": 2165443624,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29104",
            "node_id": "IC_kwDOAPphoM6BEgwo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165443624/reactions"
            },
            "updated_at": "2024-06-13T11:58:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165443624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29104/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/29104/commits",
    "created_at": "2024-05-31T04:32:49Z",
    "diff_url": "https://github.com/neovim/neovim/pull/29104.diff",
    "draft": false,
    "head": {
        "label": "TheLeoP:vim.net",
        "ref": "vim.net",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/TheLeoP/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/TheLeoP/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/TheLeoP/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/TheLeoP/neovim/branches{/branch}",
            "clone_url": "https://github.com/TheLeoP/neovim.git",
            "collaborators_url": "https://api.github.com/repos/TheLeoP/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/TheLeoP/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/TheLeoP/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/TheLeoP/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/TheLeoP/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/TheLeoP/neovim/contributors",
            "created_at": "2024-04-26T13:23:21Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/TheLeoP/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/TheLeoP/neovim/downloads",
            "events_url": "https://api.github.com/repos/TheLeoP/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/TheLeoP/neovim/forks",
            "full_name": "TheLeoP/neovim",
            "git_commits_url": "https://api.github.com/repos/TheLeoP/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/TheLeoP/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/TheLeoP/neovim/git/tags{/sha}",
            "git_url": "git://github.com/TheLeoP/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/TheLeoP/neovim/hooks",
            "html_url": "https://github.com/TheLeoP/neovim",
            "id": 792341236,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/TheLeoP/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/TheLeoP/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/TheLeoP/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/TheLeoP/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/TheLeoP/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/TheLeoP/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/TheLeoP/neovim/merges",
            "milestones_url": "https://api.github.com/repos/TheLeoP/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOLzoq9A",
            "notifications_url": "https://api.github.com/repos/TheLeoP/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53507599?v=4",
                "events_url": "https://api.github.com/users/TheLeoP/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheLeoP/followers",
                "following_url": "https://api.github.com/users/TheLeoP/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheLeoP/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheLeoP",
                "id": 53507599,
                "login": "TheLeoP",
                "node_id": "MDQ6VXNlcjUzNTA3NTk5",
                "organizations_url": "https://api.github.com/users/TheLeoP/orgs",
                "received_events_url": "https://api.github.com/users/TheLeoP/received_events",
                "repos_url": "https://api.github.com/users/TheLeoP/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheLeoP/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheLeoP/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheLeoP"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/TheLeoP/neovim/pulls{/number}",
            "pushed_at": "2024-06-16T03:40:31Z",
            "releases_url": "https://api.github.com/repos/TheLeoP/neovim/releases{/id}",
            "size": 267866,
            "ssh_url": "git@github.com:TheLeoP/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/TheLeoP/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/TheLeoP/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/TheLeoP/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/TheLeoP/neovim/subscription",
            "svn_url": "https://github.com/TheLeoP/neovim",
            "tags_url": "https://api.github.com/repos/TheLeoP/neovim/tags",
            "teams_url": "https://api.github.com/repos/TheLeoP/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/TheLeoP/neovim/git/trees{/sha}",
            "updated_at": "2024-06-13T14:37:03Z",
            "url": "https://api.github.com/repos/TheLeoP/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "8902220e4bfd360cddfd35bf9f196f47525d0888",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/53507599?v=4",
            "events_url": "https://api.github.com/users/TheLeoP/events{/privacy}",
            "followers_url": "https://api.github.com/users/TheLeoP/followers",
            "following_url": "https://api.github.com/users/TheLeoP/following{/other_user}",
            "gists_url": "https://api.github.com/users/TheLeoP/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/TheLeoP",
            "id": 53507599,
            "login": "TheLeoP",
            "node_id": "MDQ6VXNlcjUzNTA3NTk5",
            "organizations_url": "https://api.github.com/users/TheLeoP/orgs",
            "received_events_url": "https://api.github.com/users/TheLeoP/received_events",
            "repos_url": "https://api.github.com/users/TheLeoP/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/TheLeoP/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TheLeoP/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/TheLeoP"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/29104",
    "id": 1897155623,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29104",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "fuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu",
            "id": 2745063166,
            "name": "netrw",
            "node_id": "MDU6TGFiZWwyNzQ1MDYzMTY2",
            "url": "https://api.github.com/repos/neovim/neovim/labels/netrw"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 5415073845,
            "name": "network",
            "node_id": "LA_kwDOAPphoM8AAAABQsN4NQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/network"
        }
    ],
    "locked": false,
    "merge_commit_sha": "ff5d3526c5e2dac0e126320974e26adfcacf514f",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5xFEwn",
    "number": 29104,
    "patch_url": "https://github.com/neovim/neovim/pull/29104.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/29104/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/8902220e4bfd360cddfd35bf9f196f47525d0888",
    "title": "feat(vim.net): fetch(), download(), and :e URL in lua",
    "updated_at": "2024-06-13T14:38:31Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/29104",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/53507599?v=4",
        "events_url": "https://api.github.com/users/TheLeoP/events{/privacy}",
        "followers_url": "https://api.github.com/users/TheLeoP/followers",
        "following_url": "https://api.github.com/users/TheLeoP/following{/other_user}",
        "gists_url": "https://api.github.com/users/TheLeoP/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/TheLeoP",
        "id": 53507599,
        "login": "TheLeoP",
        "node_id": "MDQ6VXNlcjUzNTA3NTk5",
        "organizations_url": "https://api.github.com/users/TheLeoP/orgs",
        "received_events_url": "https://api.github.com/users/TheLeoP/received_events",
        "repos_url": "https://api.github.com/users/TheLeoP/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/TheLeoP/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/TheLeoP/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/TheLeoP"
    }
}