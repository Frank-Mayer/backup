{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Description\n\nThis bug has a very unique behavior and was not easy to reproduce.\r\n\r\nFirst, it doesn't respond with \"No implementations found\" in all situations.\r\nAt first, the implementation behaves normally,\r\nto the correct line and column in the file.\r\nThis means that LSP and gopls are working fine.\r\n\r\nThen, if It try to go to definitions with a normal struct method that doesn't have an interface\r\ngo to definitions will create a buffer for that file and move it as normal.\r\nAnd that's as far as it goes.\r\n\r\nAfter that, most implementation actions on interfaces will emit a \"No implementations found\" response.\r\nThe code that moved normally above will not move either.\r\n\r\nHowever, if It close the buffer of the file It just moved to definition, the implementation works fine again.\r\nThe implementation works fine.\r\n\r\nThis situation is reproduced about 80-90% of the time, but not 100% of the time.\r\nIn some code situations, following the above instruction will work fine.\r\nHowever, if you navigate to the definition in another area, the implementation behavior will inevitably respond with \"No implementations found\".\r\nSimilarly, if it runs into this error situation, close all definition buffers and run\r\nand the implementation will behave normally again.\r\n\r\nThis test is the same for all the open source implementations of the GO language,\r\nneovim in minimal config mode.\r\n\r\nAdditionally, if it finds in a situation where the implementation behavior is not happening at once in code,\r\nthe definition action will jump to the definition of the interface, and from there\r\nCalling the implementation behavior from there will finally take to the implementation location.\r\nThis means that what should have been a single action is now split into two separate actions.\n\n### Neovim version\n\nNVIM v0.9.4\r\nBuild type: Release\r\nLuaJIT 2.1.1700008891\r\n\n\n### Nvim-lspconfig version\n\n_No response_\n\n### Operating system and version\n\nmacOS Sonoma 14.2.1(23C71)\n\n### Affected language servers\n\ngopls\n\n### Steps to reproduce\n\nlocal lazy = {}\r\n\r\nfunction lazy.install(path)\r\n  if not vim.loop.fs_stat(path) then\r\n    print('Installing lazy.nvim....')\r\n    vim.fn.system({\r\n      'git',\r\n      'clone',\r\n      '--filter=blob:none',\r\n      'https://github.com/folke/lazy.nvim.git',\r\n      '--branch=stable', -- latest stable release\r\n      path,\r\n    })\r\n  end\r\nend\r\n\r\nfunction lazy.setup(plugins)\r\n  if vim.g.plugins_ready then\r\n    return\r\n  end\r\n\r\n  -- You can \"comment out\" the line below after lazy.nvim is installed\r\n  lazy.install(lazy.path)\r\n\r\n  vim.opt.rtp:prepend(lazy.path)\r\n\r\n  require('lazy').setup(plugins, lazy.opts)\r\n  vim.g.plugins_ready = true\r\nend\r\n\r\nlazy.path = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'\r\nlazy.opts = {}\r\n\r\nlazy.setup({\r\n  {'folke/tokyonight.nvim'},\r\n  {'kyazdani42/nvim-web-devicons'},\r\n  {'nvim-lualine/lualine.nvim'},\r\n  {\"neovim/nvim-lspconfig\"},\r\n})\r\n\r\nrequire'lspconfig'.gopls.setup{}\r\n\r\n\n\n### Actual behavior\n\n1. open the source code that calls the interface's implementation.\r\n2. at the call location, call `lua vim.lsp.buf.implementation()` and watch it jump to the implementation's code location.\r\n3. return to the call location and move the cursor to the call location of the other struct method in the same source code and call `lua vim.lsp.buf.definition()` to move to the code location.\r\n4. come back and repeat step 2 again and see that you get the \"No implementations found\" error.\r\n5. close the buffer in the struct method code.\r\n6. Come back and repeat step 2 again to verify that it navigates to the code location correctly.\n\n### Expected behavior\n\nAlways properly go to implementation behavior at once.\n\n### Minimal config\n\n```Lua\nlocal on_windows = vim.loop.os_uname().version:match 'Windows'\r\n\r\nlocal function join_paths(...)\r\n  local path_sep = on_windows and '\\\\' or '/'\r\n  local result = table.concat({ ... }, path_sep)\r\n  return result\r\nend\r\n\r\nvim.cmd [[set runtimepath=$VIMRUNTIME]]\r\n\r\nlocal temp_dir = vim.loop.os_getenv 'TEMP' or '/tmp'\r\n\r\nvim.cmd('set packpath=' .. join_paths(temp_dir, 'nvim', 'site'))\r\n\r\nlocal package_root = join_paths(temp_dir, 'nvim', 'site', 'pack')\r\nlocal lspconfig_path = join_paths(package_root, 'test', 'start', 'nvim-lspconfig')\r\n\r\nif vim.fn.isdirectory(lspconfig_path) ~= 1 then\r\n  vim.fn.system { 'git', 'clone', 'https://github.com/neovim/nvim-lspconfig', lspconfig_path }\r\nend\r\n\r\nvim.lsp.set_log_level 'trace'\r\nrequire('vim.lsp.log').set_format_func(vim.inspect)\r\nlocal nvim_lsp = require 'lspconfig'\r\nlocal on_attach = function(_, bufnr)\r\n  local function buf_set_option(...)\r\n    vim.api.nvim_buf_set_option(bufnr, ...)\r\n  end\r\n\r\n  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')\r\n\r\n  -- Mappings.\r\n  local opts = { buffer = bufnr, noremap = true, silent = true }\r\n  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)\r\n  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)\r\n  vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)\r\n  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)\r\n  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)\r\n  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)\r\n  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)\r\n  vim.keymap.set('n', '<space>wl', function()\r\n    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))\r\n  end, opts)\r\n  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)\r\n  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)\r\n  vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)\r\n  vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)\r\n  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)\r\n  vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)\r\n  vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)\r\nend\r\n\r\n-- Add the server that troubles you here\r\nlocal name = 'gopls'\r\nlocal cmd = { 'gopls', '--mode=stdio' } -- needed for elixirls, lua_ls, omnisharp\r\nif not name then\r\n  print 'You have not defined a server name, please edit minimal_init.lua'\r\nend\r\nif not nvim_lsp[name].document_config.default_config.cmd and not cmd then\r\n  print [[You have not defined a server default cmd for a server\r\n    that requires it please edit minimal_init.lua]]\r\nend\r\n\r\nnvim_lsp[name].setup {\r\n  cmd = cmd,\r\n  on_attach = on_attach,\r\n}\r\n\r\nprint [[You can find your log at $HOME/.cache/nvim/lsp.log. Please paste in a github issue under a details tag as described in the issue template.]]\n```\n\n\n### LSP log\n\nnothingLogged",
    "closed_at": "2024-01-29T01:08:13Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks for your report. The configs in this repo are unsupported and provided only as a starting point. We depend on users (like you) to troubleshoot issues with their specific LSP setups and [send improvements](https://github.com/neovim/nvim-lspconfig/blob/master/CONTRIBUTING.md).\r\n\r\nIf you found a bug in the _core_ Nvim  `vim.lsp` module (not part of this repo), the best way to get it fixed is to [report to Nvim](https://github.com/neovim/neovim) (not nvim-lspconfig) with:\r\n- steps to reproduce it without the particular LSP server and other factors particular to your environment\r\n- (optional, but very helpful): by adding a failing test case to [lsp_spec.lua](https://github.com/neovim/neovim/blob/master/test/functional/plugin/lsp_spec.lua), which has code to setup a fake LSP server to simulate various scenarios",
            "created_at": "2024-01-29T01:08:13Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/issues/2957#issuecomment-1913799250",
            "id": 1913799250,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2957",
            "node_id": "IC_kwDODTQC185yEkJS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/1913799250/reactions"
            },
            "updated_at": "2024-01-29T01:08:13Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/1913799250",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2957/comments",
    "created_at": "2024-01-04T02:54:47Z",
    "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2957/events",
    "html_url": "https://github.com/neovim/nvim-lspconfig/issues/2957",
    "id": 2064913296,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "Something isn't working",
            "id": 1674892761,
            "name": "bug",
            "node_id": "MDU6TGFiZWwxNjc0ODkyNzYx",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels/bug"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2957/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDODTQC1857FBOQ",
    "number": 2957,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2957/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/nvim-lspconfig",
    "state": "closed",
    "state_reason": "not_planned",
    "timeline_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2957/timeline",
    "title": "LSP response \"No implementations found\", but gopls response LSP info",
    "updated_at": "2024-01-29T01:08:13Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2957",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2032376?v=4",
        "events_url": "https://api.github.com/users/newro/events{/privacy}",
        "followers_url": "https://api.github.com/users/newro/followers",
        "following_url": "https://api.github.com/users/newro/following{/other_user}",
        "gists_url": "https://api.github.com/users/newro/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/newro",
        "id": 2032376,
        "login": "newro",
        "node_id": "MDQ6VXNlcjIwMzIzNzY=",
        "organizations_url": "https://api.github.com/users/newro/orgs",
        "received_events_url": "https://api.github.com/users/newro/received_events",
        "repos_url": "https://api.github.com/users/newro/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/newro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/newro/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/newro"
    }
}