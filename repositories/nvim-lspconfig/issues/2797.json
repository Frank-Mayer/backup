{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Description\n\nNo matter what i pass , the setup seems to ignore everything. I read in the FAQ that this might be caused by duplicate `setups` but i only call setup once. Maybe internally something else happens ( how can i see when setup was called ?)..\r\n\r\nThings i noticed:\r\n* When the server fails due to it not finding the command ( since the one i gave got lost) the notification for the error gets printed twice...\r\n* Also i check after setup that my lsp was setup correctly \r\n`vim.notify(vim.inspect(lsp[name]))`\r\nand indeed it has my settings.\r\nThen they just get lost.\r\n\n\n### Neovim version\n\nNVIM v0.10.0-dev-f308440\r\nBuild type: Release\r\nLuaJIT 2.1.0-beta3\r\nRun \"nvim -V1 -v\" for more info\n\n### Nvim-lspconfig version\n\n        branch master         commit 0517d85\n\n### Operating system and version\n\nOS: NixOS 23.11.20230901.aa8aa7e (Tapir) x86_64\n\n### Affected language servers\n\nall\n\n### Steps to reproduce\n\nCant reproduce it using the minimal config , that seems to work fine.\r\nI have attached my config below.\n\n### Actual behavior\n\nAll servers run at default setting\n\n### Expected behavior\n\nServers follow my arguments given at setup\n\n### Minimal config\n\n```Lua\nThis sadly doesnt work on minimal config, here is mine.\r\n\r\n \r\n\r\nreturn {\r\n    {\r\n        \"neovim/nvim-lspconfig\",\r\n        dependencies = {\r\n            { \"folke/neodev.nvim\", opts = {} },\r\n            \"hrsh7th/cmp-nvim-lsp\"\r\n        },\r\n        event = { \"BufReadPre\", \"BufNewFile\" },\r\n        config = function()\r\n            local capabilities = vim.lsp.protocol.make_client_capabilities()\r\n            capabilities = require(\"cmp_nvim_lsp\").default_capabilities(capabilities)\r\n\r\n            vim.lsp.set_log_level('debug')\r\n            -- local util = require \"lspconfig.util\"\r\n            require(\"neodev\").setup({})\r\n\r\n            local border = {\r\n                { \"╭\", \"FloatBorder\" },\r\n                { \"─\", \"FloatBorder\" },\r\n                { \"╮\", \"FloatBorder\" },\r\n                { \"│\", \"FloatBorder\" },\r\n                { \"╯\", \"FloatBorder\" },\r\n                { \"─\", \"FloatBorder\" },\r\n                { \"╰\", \"FloatBorder\" },\r\n                { \"│\", \"FloatBorder\" },\r\n            }\r\n\r\n            local lsp = require(\"lspconfig\")\r\n            lsp.util.default_config = vim.tbl_extend(\r\n                \"force\",\r\n                lsp.util.default_config,\r\n                {\r\n                    autostart = true,\r\n                    handlers = {\r\n                        [\"textDocument/hover\"] = vim.lsp.with(vim.lsp.handlers.hover, {\r\n                            border = border,\r\n                        }),\r\n                        [\"textDocument/signatureHelp\"] = vim.lsp.with(vim.lsp.handlers.signature_help, {\r\n                            border = border,\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n            vim.diagnostic.config({\r\n                underline = true,\r\n                virtual_text = {\r\n                    prefix = \"\", -- Could be '●', '▎', 'x'\r\n                    spacing = 4,\r\n                },\r\n                -- virtual_text = false ,\r\n                update_in_insert = true,\r\n            })\r\n            -- LSP settings\r\n            local on_attach = function(client, bufnr)\r\n            end\r\n\r\n            local servers = {\r\n                jsonls = {},\r\n                bashls = {},\r\n                pylsp = {},\r\n                cmake = {},\r\n                html = {},\r\n                cssls = {},\r\n                quick_lint_js = {},\r\n                prismals = {\r\n                    cmd = {\r\n                        \"/home/inferno/docs/Packages/prisma-lsp/node_modules/@prisma/language-server/dist/src/bin.js\",\r\n                        \"--stdio\" },\r\n                },\r\n                nil_ls = {},\r\n                sqlls = {},\r\n                clangd = {},\r\n                texlab = {},\r\n                lua_ls = {},\r\n            }\r\n\r\n            for name, prop in pairs(servers) do\r\n                lsp[name].setup({\r\n                    on_attach = on_attach,\r\n                    capabilities = capabilities,\r\n                    cmd = prop.cmd,\r\n                    filetypes = prop.filetypes,\r\n                    settings = prop.settings\r\n                })\r\n                if prop.cmd then\r\n                    vim.notify(vim.inspect(lsp[name]))\r\n                end\r\n            end\r\n\r\n            vim.api.nvim_create_autocmd(\"LspAttach\", {\r\n                group = vim.api.nvim_create_augroup(\"UserLspConfig\", {}),\r\n                callback = function(ev)\r\n                    -- Enable completion triggered by <c-x><c-o>\r\n                    vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'\r\n                    -- Buffer local mappings.\r\n                    -- See `:help vim.lsp.*` for documentation on any of the below functions\r\n                    --\r\n                    local diagnostic        = vim.diagnostic\r\n                    local lsp_b             = vim.lsp.buf\r\n                    local map               = vim.keymap.set\r\n\r\n                    map(\"n\", \"[d\", diagnostic.goto_prev, { desc = \"prev error\", buffer = ev.buf })\r\n                    map(\"n\", \"]d\", diagnostic.goto_next, { desc = \"next error\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>lD\", lsp_b.declaration, { desc = \"declaration\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>lt\", lsp_b.type_definition, { desc = \"type definition\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>lpa\", lsp_b.add_workspace_folder,\r\n                        { desc = \"add workspace folder\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>lpl\", function() print(vim.inspect(lsp_b.list_workspace_folders())) end,\r\n                        { desc = \"list workspace folders\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>lpr\", lsp_b.remove_workspace_folder,\r\n                        { desc = \"remove workspace folder\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>li\", lsp_b.implementation, { desc = \"Show implementation\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>lh\", \"<cmd>Ouroboros<cr>\", { desc = \"Switch header\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>cR\", lsp_b.rename, { desc = \"rename\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>ca\", lsp_b.code_action, { desc = \"code action\", buffer = ev.buf })\r\n                    map(\"v\", \"<leader>ca\", lsp_b.code_action, { desc = \"code action\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>ce\", diagnostic.open_float, { desc = \"show line diagnostics\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>cs\", lsp_b.signature_help, { desc = \"signature help\", buffer = ev.buf })\r\n                    map(\"n\", \"K\", lsp_b.hover, { desc = \"hover\", buffer = ev.buf })\r\n                    map(\"v\", \"<space>=\", function() lsp_b.format({ async = true }) end,\r\n                        { desc = \"formatting\", buffer = ev.buf })\r\n                    map(\"n\", \"<leader>lI\", function() lsp_b.inlay_hint(0) end,\r\n                        { desc = \"Toggle inlay hints\", buffer = ev.buf }\r\n\r\n                    )\r\n                end,\r\n            })\r\n        end\r\n    },\r\n    {\r\n        \"pmizio/typescript-tools.nvim\",\r\n        dependencies = { \"nvim-lua/plenary.nvim\", \"neovim/nvim-lspconfig\" },\r\n        opts = {},\r\n        enable = true\r\n    },\r\n}\n```\n\n\n### LSP log\n\nhttps://gist.github.com/LamprosPitsillos/c645b40dda03d0ed1e0ee95986d8da80",
    "closed_at": "2023-09-08T01:21:43Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "debug your config then ",
            "created_at": "2023-09-08T01:21:43Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/issues/2797#issuecomment-1710950013",
            "id": 1710950013,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2797",
            "node_id": "IC_kwDODTQC185l-wZ9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/1710950013/reactions"
            },
            "updated_at": "2023-09-08T01:21:43Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/1710950013",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2797/comments",
    "created_at": "2023-09-07T15:58:41Z",
    "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2797/events",
    "html_url": "https://github.com/neovim/nvim-lspconfig/issues/2797",
    "id": 1886175609,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "Something isn't working",
            "id": 1674892761,
            "name": "bug",
            "node_id": "MDU6TGFiZWwxNjc0ODkyNzYx",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels/bug"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2797/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDODTQC185wbMF5",
    "number": 2797,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2797/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/nvim-lspconfig",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2797/timeline",
    "title": "Setup args given are ignored",
    "updated_at": "2023-09-08T01:21:43Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2797",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/61395246?v=4",
        "events_url": "https://api.github.com/users/LamprosPitsillos/events{/privacy}",
        "followers_url": "https://api.github.com/users/LamprosPitsillos/followers",
        "following_url": "https://api.github.com/users/LamprosPitsillos/following{/other_user}",
        "gists_url": "https://api.github.com/users/LamprosPitsillos/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/LamprosPitsillos",
        "id": 61395246,
        "login": "LamprosPitsillos",
        "node_id": "MDQ6VXNlcjYxMzk1MjQ2",
        "organizations_url": "https://api.github.com/users/LamprosPitsillos/orgs",
        "received_events_url": "https://api.github.com/users/LamprosPitsillos/received_events",
        "repos_url": "https://api.github.com/users/LamprosPitsillos/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/LamprosPitsillos/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/LamprosPitsillos/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/LamprosPitsillos"
    }
}