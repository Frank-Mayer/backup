{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Description\r\n\r\nThe current `nvim-lspconfig` configuration options for `ruff_lsp` allow extra CLI args to be provided, but these are apparently only for the `ruff` command. There is no way to provide arguments to the subcommands of `ruff` that actually do linting and formatting, such as `ruff check` and `ruff format`.\r\n\r\nFor example, to show that `nvim-lspconfig` doesn't pass provided args to `ruff format`, create a minimal `/tmp/pyproject.toml` file that adds a non-default option to preserve single quotes when formatting:\r\n\r\n```\r\n[tool.ruff.format]\r\n    quote-style = \"single\"\r\n```\r\n\r\nThen follow the steps outlined below with the minimal configuration.\r\n\r\n### Neovim version\r\n\r\nNVIM v0.10.0-dev-594ff34\r\nBuild type: RelWithDebInfo\r\nLuaJIT 2.1.1696795921\r\n\r\n### Nvim-lspconfig version\r\n\r\n38da5bbe1eaab2394056109e48c7e195bdb8fdfe\r\n\r\n### Operating system and version\r\n\r\nFedora Linux 38\r\n\r\n### Affected language servers\r\n\r\nruff_lsp\r\n\r\n### Steps to reproduce\r\n\r\n1. `nvim -nu minimal.lua`\r\n2. `:e test.py`\r\n3. Write `print('hello')`\r\n4. `:lua vim.lsp.buf.format()`\r\n\r\n### Actual behavior\r\n\r\nThe single quotes in the `print('hello')` statement are changed to double quotes (the default for `ruff format`), proving that the `/tmp/pyproject.toml` file is not being used, which would have preserved the single quotes. Running `ruff` on the command line with `ruff format --config=/tmp/pyproject.toml test.py` works as expected, producing `print('hello')`.\r\n\r\n### Expected behavior\r\n\r\nIf the `--config=/tmp/pyproject.toml` argument was successfully passed to `ruff format`, the options in `/tmp/pyproject.toml` would be used when formatting the buffer.\r\n\r\n### Minimal config\r\n\r\n```Lua\r\nlocal on_windows = vim.loop.os_uname().version:match 'Windows'\r\n\r\nlocal function join_paths(...)\r\n    local path_sep = on_windows and '\\\\' or '/'\r\n    local result = table.concat({ ... }, path_sep)\r\n    return result\r\nend\r\n\r\nvim.cmd [[set runtimepath=$VIMRUNTIME]]\r\n\r\nlocal temp_dir = vim.loop.os_getenv 'TEMP' or '/tmp'\r\n\r\nvim.cmd('set packpath=' .. join_paths(temp_dir, 'nvim', 'site'))\r\n\r\nlocal package_root = join_paths(temp_dir, 'nvim', 'site', 'pack')\r\nlocal lspconfig_path = join_paths(package_root, 'test', 'start', 'nvim-lspconfig')\r\n\r\nif vim.fn.isdirectory(lspconfig_path) ~= 1 then\r\n    vim.fn.system { 'git', 'clone', 'https://github.com/neovim/nvim-lspconfig', lspconfig_path }\r\nend\r\n\r\nvim.lsp.set_log_level 'trace'\r\nrequire('vim.lsp.log').set_format_func(vim.inspect)\r\nlocal nvim_lsp = require 'lspconfig'\r\nlocal on_attach = function(_, bufnr)\r\n    local function buf_set_option(...)\r\n        vim.api.nvim_buf_set_option(bufnr, ...)\r\n    end\r\n\r\n    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')\r\n\r\n    -- Mappings.\r\n    local opts = { buffer = bufnr, noremap = true, silent = true }\r\n    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)\r\n    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)\r\n    vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)\r\n    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)\r\n    vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)\r\n    vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)\r\n    vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)\r\n    vim.keymap.set('n', '<space>wl', function()\r\n        print(vim.inspect(vim.lsp.buf.list_workspace_folders()))\r\n    end, opts)\r\n    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)\r\n    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)\r\n    vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)\r\n    vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)\r\n    vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)\r\n    vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)\r\n    vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)\r\nend\r\n\r\n-- Add the server that troubles you here\r\nlocal name = 'ruff_lsp'\r\nif not name then\r\n    print 'You have not defined a server name, please edit minimal_init.lua'\r\nend\r\nif not nvim_lsp[name].document_config.default_config.cmd and not cmd then\r\n    print [[You have not defined a server default cmd for a server\r\n    that requires it please edit minimal_init.lua]]\r\nend\r\n\r\nnvim_lsp[name].setup {\r\n    init_options = {\r\n        settings = {\r\n            args = {\r\n                \"--config=/tmp/pyproject.toml\",\r\n            },\r\n        }\r\n    },\r\n\r\n    on_attach = on_attach,\r\n}\r\n\r\nprint [[You can find your log at $HOME/.cache/nvim/lsp.log. Please paste in a github issue under a details tag as described in the issue template.]]\r\n```\r\n\r\n\r\n### LSP log\r\n\r\nNone",
    "closed_at": "2023-10-21T17:47:41Z",
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2869/comments",
    "created_at": "2023-10-21T06:27:17Z",
    "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2869/events",
    "html_url": "https://github.com/neovim/nvim-lspconfig/issues/2869",
    "id": 1955350492,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "Something isn't working",
            "id": 1674892761,
            "name": "bug",
            "node_id": "MDU6TGFiZWwxNjc0ODkyNzYx",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels/bug"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2869/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDODTQC1850jEfc",
    "number": 2869,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2869/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/nvim-lspconfig",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2869/timeline",
    "title": " Args for ruff_lsp cannot be passed to ruff subcommands",
    "updated_at": "2023-10-21T17:47:41Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2869",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/12929327?v=4",
        "events_url": "https://api.github.com/users/meridionaljet/events{/privacy}",
        "followers_url": "https://api.github.com/users/meridionaljet/followers",
        "following_url": "https://api.github.com/users/meridionaljet/following{/other_user}",
        "gists_url": "https://api.github.com/users/meridionaljet/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/meridionaljet",
        "id": 12929327,
        "login": "meridionaljet",
        "node_id": "MDQ6VXNlcjEyOTI5MzI3",
        "organizations_url": "https://api.github.com/users/meridionaljet/orgs",
        "received_events_url": "https://api.github.com/users/meridionaljet/received_events",
        "repos_url": "https://api.github.com/users/meridionaljet/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/meridionaljet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/meridionaljet/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/meridionaljet"
    }
}