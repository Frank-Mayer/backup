{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Description\n\nI have put a function in on_attach which should activate the inlay hints, it works well in other languages, but not in rust.\r\n when I make a file change it is already seen\n\n### Neovim version\n\nNVIM v0.10.0-dev-ac353e8\r\nBuild type: RelWithDebInfo\r\nLuaJIT 2.1.169788790\n\n### Nvim-lspconfig version\n\nd0467b9574b48429debf83f8248d8cee79562586\n\n### Operating system and version\n\nArchLinux 6.5.9-arch2-1\n\n### Affected language servers\n\nrust_analyzer\n\n### Steps to reproduce\n\nset `vim.lsp.inlay_hint(bufnr, true)` in on_attach function\n\n### Actual behavior\n\nthe inlay hints are not seen in rust until the file is changed\r\n![imagen](https://github.com/neovim/nvim-lspconfig/assets/59105868/cef18dff-f88b-481a-b366-d4b0d93f3a71)\r\n\n\n### Expected behavior\n\nthe inlay hints should be seen when loading rust analyzer\r\n![imagen](https://github.com/neovim/nvim-lspconfig/assets/59105868/262ded6d-a204-4586-b6e9-903becc99b15)\r\n\n\n### Minimal config\n\n```Lua\nlocal on_windows = vim.loop.os_uname().version:match 'Windows'\r\n\r\nlocal function join_paths(...)\r\n  local path_sep = on_windows and '\\\\' or '/'\r\n  local result = table.concat({ ... }, path_sep)\r\n  return result\r\nend\r\n\r\nvim.cmd [[set runtimepath=$VIMRUNTIME]]\r\n\r\nlocal temp_dir = vim.loop.os_getenv 'TEMP' or '/tmp'\r\n\r\nvim.cmd('set packpath=' .. join_paths(temp_dir, 'nvim', 'site'))\r\n\r\nlocal package_root = join_paths(temp_dir, 'nvim', 'site', 'pack')\r\nlocal lspconfig_path = join_paths(package_root, 'test', 'start', 'nvim-lspconfig')\r\n\r\nif vim.fn.isdirectory(lspconfig_path) ~= 1 then\r\n  vim.fn.system { 'git', 'clone', 'https://github.com/neovim/nvim-lspconfig', lspconfig_path }\r\nend\r\n\r\nvim.lsp.set_log_level 'trace'\r\nrequire('vim.lsp.log').set_format_func(vim.inspect)\r\nlocal nvim_lsp = require 'lspconfig'\r\nlocal on_attach = function(client, bufnr)\r\n  local function buf_set_option(...)\r\n    vim.api.nvim_buf_set_option(bufnr, ...)\r\n  end\r\n\r\n  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')\r\n\r\n  if client.server_capabilities.inlayHintProvider then\r\n        local inlay_hints_group = vim.api.nvim_create_augroup('InlayHints', { clear = true })\r\n\r\n        -- Initial inlay hint display.\r\n        local mode = vim.api.nvim_get_mode().mode\r\n        vim.lsp.inlay_hint(bufnr, mode == 'n' or mode == 'v')\r\n\r\n        vim.api.nvim_create_autocmd('InsertEnter', {\r\n            group = inlay_hints_group,\r\n            buffer = bufnr,\r\n            callback = function()\r\n                vim.lsp.inlay_hint(bufnr, true)\r\n            end,\r\n        })\r\n        vim.api.nvim_create_autocmd('InsertLeave', {\r\n            group = inlay_hints_group,\r\n            buffer = bufnr,\r\n            callback = function()\r\n                -- vim.lsp.inlay_hint(bufnr, true)\r\n            end,\r\n        })\r\n    end\r\n\r\n  -- Mappings.\r\n  local opts = { buffer = bufnr, noremap = true, silent = true }\r\n  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)\r\n  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)\r\n  vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)\r\n  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)\r\n  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)\r\n  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)\r\n  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)\r\n  vim.keymap.set('n', '<space>wl', function()\r\n    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))\r\n  end, opts)\r\n  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)\r\n  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)\r\n  vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)\r\n  vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)\r\n  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)\r\n  vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)\r\n  vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)\r\nend\r\n\r\n-- Add the server that troubles you here\r\nlocal name = 'rust_analyzer'\r\nlocal cmd = { 'rust-analyzer'} -- needed for elixirls, lua_ls, omnisharp\r\nif not name then\r\n  print 'You have not defined a server name, please edit minimal_init.lua'\r\nend\r\nif not nvim_lsp[name].document_config.default_config.cmd and not cmd then\r\n  print [[You have not defined a server default cmd for a server\r\n    that requires it please edit minimal_init.lua]]\r\nend\r\n\r\nnvim_lsp[name].setup {\r\n  cmd = cmd,\r\n  on_attach = on_attach,\r\n}\r\n\r\nprint [[You can find your log at $HOME/.cache/nvim/lsp.log. Please paste in a github issue under a details tag as described in the issue template.]]\n```\n\n\n### LSP log\n\nhttps://gist.github.com/SrWither/d6c09b3f855539301e604a29fdb940c8",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2876/comments",
    "created_at": "2023-10-29T03:25:57Z",
    "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2876/events",
    "html_url": "https://github.com/neovim/nvim-lspconfig/issues/2876",
    "id": 1966828045,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "Something isn't working",
            "id": 1674892761,
            "name": "bug",
            "node_id": "MDU6TGFiZWwxNjc0ODkyNzYx",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels/bug"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2876/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDODTQC1851O2oN",
    "number": 2876,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2876/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/nvim-lspconfig",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2876/timeline",
    "title": "Inlay hints not working in rust analyzer on_attach",
    "updated_at": "2023-10-29T03:25:57Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/2876",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/59105868?v=4",
        "events_url": "https://api.github.com/users/SrWither/events{/privacy}",
        "followers_url": "https://api.github.com/users/SrWither/followers",
        "following_url": "https://api.github.com/users/SrWither/following{/other_user}",
        "gists_url": "https://api.github.com/users/SrWither/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/SrWither",
        "id": 59105868,
        "login": "SrWither",
        "node_id": "MDQ6VXNlcjU5MTA1ODY4",
        "organizations_url": "https://api.github.com/users/SrWither/orgs",
        "received_events_url": "https://api.github.com/users/SrWither/received_events",
        "repos_url": "https://api.github.com/users/SrWither/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/SrWither/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SrWither/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/SrWither"
    }
}