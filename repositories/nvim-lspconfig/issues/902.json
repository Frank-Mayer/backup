{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!-- Before reporting: search existing issues and ensure you are running the latest nightly of neovim and the latest version of nvim-lspconfig. Note that this repository implements configuration and initialization of language servers. Implementation of the language server spec itself is located in the neovim core repository-->\r\n\r\n- `nvim --version`: NVIM v0.5.0-dev+1309-g516551319\r\n- nvim-lsp version(commit hash): commit 0a921bf2be74d293c8a8d6dd70122c1d01151a30\r\n- What language server (If the problem is related to a specific language server): efm\r\n- Operating system/version: Debian GNU/Linux 10\r\n\r\n### How to reproduce the problem from neovim startup\r\nOpen a file which has efm attached to it. Close the file. Of note it does not always happen when writing the file (exiting with `:wq`, `:x`, or `ZZ`) but will always happen with `:q` or `:q!`.\r\n\r\n### Actual behaviour\r\nEverything works as intended as far as I can tell, efm will do its job but upon exit `Client 2 quit with exit code 2 and signal 0` will be printed to terminal. If using only efm  `Client 1 quit with exit code 2 and signal 0` will appear instead.\r\n\r\n### Expected behaviour\r\nNothing should be printed.\r\n\r\n### Minimal init.vim or init.lua and code sample\r\n<!-- You can download a minimal_init.lua from here \r\n      curl -fLO https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/test/minimal_init.lua \r\n      After editing to include your language server, run neovim with nvim -u minimal_init.lua -->\r\n\r\n```lua\r\n-- install packer\r\nlocal fn = vim.fn\r\n\r\nlocal install_path = '/tmp/nvim/site/pack/packer/start/packer.nvim'\r\n\r\nvim.cmd [[set packpath=/tmp/nvim/site]]\r\n\r\nlocal function load_plugins()\r\n  local use = require('packer').use\r\n  require(\"packer\").startup(\r\n    {\r\n      function()\r\n        use 'wbthomason/packer.nvim'\r\n        use \"neovim/nvim-lspconfig\"\r\n      end,\r\n      config = {package_root = '/tmp/nvim/site/pack'}\r\n    }\r\n  )\r\nend\r\n\r\n_G.load_config = function()\r\n  vim.lsp.set_log_level(\"trace\")\r\n  local nvim_lsp = require('lspconfig')\r\n  local on_attach = function(_, bufnr)\r\n    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end\r\n    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end\r\n\r\n    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')\r\n\r\n    -- Mappings.\r\n    local opts = { noremap=true, silent=true }\r\n    buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)\r\n    buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)\r\n    buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)\r\n    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)\r\n    buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)\r\n    buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)\r\n    buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)\r\n    buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)\r\n    buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)\r\n    buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)\r\n    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)\r\n    buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)\r\n    buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)\r\n    buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)\r\n    buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)\r\n  end\r\n\r\n  -- Add the server that troubles you here\r\n  local name = \"efm\"\r\n  local cmd = { \"/home/nick/.local/share/nvim/lspinstall/efm/efm-langserver\"} -- needed for elixirls, omnisharp, sumneko_lua\r\n\r\n  if not name then\r\n    print(\"You have not defined a server name, please edit minimal_init.lua\")\r\n  end\r\n  if not nvim_lsp[name].document_config.default_config.cmd and (not cmd) then\r\n    print([[You have not defined a server default cmd for a server\r\n      that requires it please edit minimal_init.lua]])\r\n  end\r\n\r\n  nvim_lsp[name].setup {\r\n      cmd = cmd,\r\n      on_attach = on_attach,\r\n      filetypes = {\r\n          'lua'\r\n        }\r\n    }\r\n\r\n  print([[You can find your log at $HOME/.cache/nvim/lsp.log. Please paste in a github issue under a details tag as described in the issue template.]])\r\n  end\r\n\r\nif fn.isdirectory(install_path) == 0 then\r\n  fn.system({'git', 'clone', 'https://github.com/wbthomason/packer.nvim', install_path})\r\n  load_plugins()\r\n  require('packer').sync()\r\n  vim.cmd 'autocmd User PackerComplete ++once lua load_config()'\r\nelse\r\n  load_plugins()\r\n  _G.load_config()\r\nend\r\n```\r\n\r\n### Health check\r\n<details>\r\n<summary>Checkhealth result</summary>\r\n\r\n```\r\n health#lspconfig#check\r\n  ========================================================================\r\n  ## Checking language server protocol configuration\r\n    - INFO: efm: configuration checked.\r\n    - INFO: bashls: configuration checked.\r\n    - INFO: sumneko_lua: configuration checked.\r\n    - INFO: pyright: configuration checked.\r\n```\r\n</details>\r\n\r\n\r\n\r\n### LSP log\r\n<!-- If not using the minimal_init.lua please add vim.lsp.set_log_level(\"debug\") to your lua block \r\n     in init.vim and paste a link to your log file, located at  $HOME/.cache/nvim/lsp.log (formerly $HOME/.local/share/nvim/lsp.log) -->\r\n<details>\r\n\r\n```\r\n[ START ] 2021-05-12T20:24:00-0400 ] LSP logging initiated\r\n[ INFO ] 2021-05-12T20:24:00-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:311 ]     \"Starting RPC client\"   {  args = {},  cmd = \"/home/nick/.local/share/nvim/lspinstall/efm/efm-langserver\",  extra = {}}\r\n[ DEBUG ] 2021-05-12T20:24:00-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp.lua:826 ]        \"LSP[efm]\"      \"initialize_params\"     {  capabilities = {    callHierarchy = {      dynamicRegistration = false,      <metatable> = <1>{        __tostring = <function 1>      }    },    textDocument = {      codeAction = {        codeActionLiteralSupport = {          codeActionKind = {            valueSet = { \"\", \"Empty\", \"QuickFix\", \"Refactor\", \"RefactorExtract\", \"RefactorInline\", \"RefactorRewrite\", \"Source\", \"SourceOrganizeImports\", \"quickfix\", \"refactor\", \"refactor.extract\", \"refactor.inline\", \"refactor.rewrite\", \"source\", \"source.organizeImports\" },            <metatable> = <table 1>          },          <metatable> = <table 1>        },        dynamicRegistration = false,        <metatable> = <table 1>      },      completion = {        completionItem = {          commitCharactersSupport = false,          deprecatedSupport = false,          documentationFormat = { \"markdown\", \"plaintext\" },          preselectSupport = false,          snippetSupport = false,          <metatable> = <table 1>        },        completionItemKind = {          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },          <metatable> = <table 1>        },        contextSupport = false,        dynamicRegistration = false,        <metatable> = <table 1>      },      declaration = {        linkSupport = true,        <metatable> = <table 1>      },      definition = {        linkSupport = true,        <metatable> = <table 1>      },      documentHighlight = {        dynamicRegistration = false,        <metatable> = <table 1>      },      documentSymbol = {        dynamicRegistration = false,        hierarchicalDocumentSymbolSupport = true,        symbolKind = {          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },          <metatable> = <table 1>        },        <metatable> = <table 1>      },      hover = {        contentFormat = { \"markdown\", \"plaintext\" },        dynamicRegistration = false,        <metatable> = <table 1>      },      implementation = {        linkSupport = true,        <metatable> = <table 1>      },      publishDiagnostics = {        relatedInformation = true,        tagSupport = {          valueSet = { 1, 2 },          <metatable> = <table 1>        },        <metatable> = <table 1>      },      references = {        dynamicRegistration = false,        <metatable> = <table 1>      },      rename = {        dynamicRegistration = false,        prepareSupport = true,        <metatable> = <table 1>      },      signatureHelp = {        dynamicRegistration = false,        signatureInformation = {          documentationFormat = { \"markdown\", \"plaintext\" },          <metatable> = <table 1>        },        <metatable> = <table 1>      },      synchronization = {        didSave = true,        dynamicRegistration = false,        willSave = false,        willSaveWaitUntil = false,        <metatable> = <table 1>      },      typeDefinition = {        linkSupport = true,        <metatable> = <table 1>      },      <metatable> = <table 1>    },    window = {      showDocument = {        support = false,        <metatable> = <table 1>      },      showMessage = {        messageActionItem = {          additionalPropertiesSupport = false,          <metatable> = <table 1>        },        <metatable> = <table 1>      },      workDoneProgress = true,      <metatable> = <table 1>    },    workspace = {      applyEdit = true,      configuration = true,      symbol = {        dynamicRegistration = false,        hierarchicalWorkspaceSymbolSupport = true,        symbolKind = {          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },          <metatable> = <table 1>        },        <metatable> = <table 1>      },      workspaceEdit = {        resourceOperations = { \"rename\", \"create\", \"delete\" },        <metatable> = <table 1>      },      workspaceFolders = true,      <metatable> = <table 1>    }  },  clientInfo = {    name = \"Neovim\",    version = \"0.5.0\"  },  initializationOptions = vim.empty_dict(),  processId = 25344,  rootPath = \"/home/nick/dotfiles\",  rootUri = \"file:///home/nick/dotfiles\",  trace = \"off\",  workspaceFolders = { {      name = \"/home/nick/dotfiles\",      uri = \"file:///home/nick/dotfiles\"    } }}\r\n[ DEBUG ] 2021-05-12T20:24:00-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:390 ]    \"rpc.send.payload\"      {  id = 1,  jsonrpc = \"2.0\",  method = \"initialize\",  params = {    capabilities = {      callHierarchy = {        dynamicRegistration = false,        <metatable> = <1>{          __tostring = <function 1>        }      },      textDocument = {        codeAction = {          codeActionLiteralSupport = {            codeActionKind = {              valueSet = { \"\", \"Empty\", \"QuickFix\", \"Refactor\", \"RefactorExtract\", \"RefactorInline\", \"RefactorRewrite\", \"Source\", \"SourceOrganizeImports\", \"quickfix\", \"refactor\", \"refactor.extract\", \"refactor.inline\", \"refactor.rewrite\", \"source\", \"source.organizeImports\" },              <metatable> = <table 1>            },            <metatable> = <table 1>          },          dynamicRegistration = false,          <metatable> = <table 1>        },        completion = {          completionItem = {            commitCharactersSupport = false,            deprecatedSupport = false,            documentationFormat = { \"markdown\", \"plaintext\" },            preselectSupport = false,            snippetSupport = false,            <metatable> = <table 1>          },          completionItemKind = {            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },            <metatable> = <table 1>          },          contextSupport = false,          dynamicRegistration = false,          <metatable> = <table 1>        },        declaration = {          linkSupport = true,          <metatable> = <table 1>        },        definition = {          linkSupport = true,          <metatable> = <table 1>        },        documentHighlight = {          dynamicRegistration = false,          <metatable> = <table 1>        },        documentSymbol = {          dynamicRegistration = false,          hierarchicalDocumentSymbolSupport = true,          symbolKind = {            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },            <metatable> = <table 1>          },          <metatable> = <table 1>        },        hover = {          contentFormat = { \"markdown\", \"plaintext\" },          dynamicRegistration = false,          <metatable> = <table 1>        },        implementation = {          linkSupport = true,          <metatable> = <table 1>        },        publishDiagnostics = {          relatedInformation = true,          tagSupport = {            valueSet = { 1, 2 },            <metatable> = <table 1>          },          <metatable> = <table 1>        },        references = {          dynamicRegistration = false,          <metatable> = <table 1>        },        rename = {          dynamicRegistration = false,          prepareSupport = true,          <metatable> = <table 1>        },        signatureHelp = {          dynamicRegistration = false,          signatureInformation = {            documentationFormat = { \"markdown\", \"plaintext\" },            <metatable> = <table 1>          },          <metatable> = <table 1>        },        synchronization = {          didSave = true,          dynamicRegistration = false,          willSave = false,          willSaveWaitUntil = false,          <metatable> = <table 1>        },        typeDefinition = {          linkSupport = true,          <metatable> = <table 1>        },        <metatable> = <table 1>      },      window = {        showDocument = {          support = false,          <metatable> = <table 1>        },        showMessage = {          messageActionItem = {            additionalPropertiesSupport = false,            <metatable> = <table 1>          },          <metatable> = <table 1>        },        workDoneProgress = true,        <metatable> = <table 1>      },      workspace = {        applyEdit = true,        configuration = true,        symbol = {          dynamicRegistration = false,          hierarchicalWorkspaceSymbolSupport = true,          symbolKind = {            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },            <metatable> = <table 1>          },          <metatable> = <table 1>        },        workspaceEdit = {          resourceOperations = { \"rename\", \"create\", \"delete\" },          <metatable> = <table 1>        },        workspaceFolders = true,        <metatable> = <table 1>      }    },    clientInfo = {      name = \"Neovim\",      version = \"0.5.0\"    },    initializationOptions = vim.empty_dict(),    processId = 25344,    rootPath = \"/home/nick/dotfiles\",    rootUri = \"file:///home/nick/dotfiles\",    trace = \"off\",    workspaceFolders = { {        name = \"/home/nick/dotfiles\",        uri = \"file:///home/nick/dotfiles\"      } }  }}\r\n[ ERROR ] 2021-05-12T20:24:00-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:457 ]    \"rpc\"   \"/home/nick/.local/share/nvim/lspinstall/efm/efm-langserver\"    \"stderr\"        \"2021/05/12 20:24:00 efm-langserver: no configuration file\\n2021/05/12 20:24:00 efm-langserver: reading on stdin, writing on stdout\\n\"\r\n[ DEBUG ] 2021-05-12T20:24:01-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:491 ]    \"decoded\"       {  id = 1,  jsonrpc = \"2.0\",  result = {    capabilities = {      textDocumentSync = 1,      workspace = {        workspaceFolders = {          changeNotifications = true,          supported = true        }      }    }  }}\r\n[ DEBUG ] 2021-05-12T20:24:01-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:390 ]    \"rpc.send.payload\"      {  jsonrpc = \"2.0\",  method = \"initialized\",  params = {    [true] = 6  }}\r\n[ DEBUG ] 2021-05-12T20:24:01-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp.lua:853 ]        \"LSP[efm]\"      \"server_capabilities\"   {  textDocumentSync = 1,  workspace = {    workspaceFolders = {      changeNotifications = true,      supported = true    }  }}\r\n[ INFO ] 2021-05-12T20:24:01-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp.lua:854 ] \"LSP[efm]\"      \"initialized\"   {  resolved_capabilities = {    call_hierarchy = false,    code_action = false,    code_lens = false,    code_lens_resolve = false,    completion = false,    declaration = false,    document_formatting = false,    document_highlight = false,    document_range_formatting = false,    document_symbol = false,    execute_command = false,    find_references = false,    goto_definition = false,    hover = false,    implementation = false,    rename = false,    signature_help = false,    signature_help_trigger_characters = {},    text_document_did_change = 1,    text_document_open_close = true,    text_document_save = true,    text_document_save_include_text = false,    text_document_will_save = false,    text_document_will_save_wait_until = false,    type_definition = false,    workspace_folder_properties = {      changeNotifications = true,      supported = true    },    workspace_symbol = false  }}\r\n[ DEBUG ] 2021-05-12T20:24:01-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:390 ]    \"rpc.send.payload\"      {  jsonrpc = \"2.0\",  method = \"textDocument/didOpen\",  params = {    textDocument = {      languageId = \"lua\",      text = \"-- Plugin install\\nrequire('plugins')\\nrequire('globals-lua')\\nrequire('settings')\\nrequire('keymapings')\\n\\n-- Plugins\\nrequire('nvimtree-lua')\\nrequire('colorscheme') -- after nvimtree\\nrequire('barbar-lua')\\nrequire('gitsigns-lua')\\nrequire('colorizer-lua')\\nrequire('galaxyline-lua')\\nrequire('autopairs-lua')\\nrequire('treesitter-lua')\\nrequire('telescope-lua')\\nrequire('ts-rainbow-lua')\\nrequire('lsp-sig-lua')\\n\\n-- LSP\\nrequire('compe-lua')\\nrequire('lsp')\\nrequire('lsp.lua-ls')\\nrequire('lsp.python-ls')\\nrequire('lsp.bash-ls')\\nrequire('lsp.efm-ls')\\n\",      uri = \"file:///home/nick/dotfiles/nvim/init.lua\",      version = 0    }  }}\r\n[ DEBUG ] 2021-05-12T20:24:01-0400 ] ...hfs-root/usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:442 ]  \"default_handler\"       \"textDocument/publishDiagnostics\"       {  client_id = 1,  params = {    diagnostics = {},    uri = \"file:///home/nick/dotfiles/nvim/init.lua\"  }}\r\n[ ERROR ] 2021-05-12T20:24:01-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:457 ]    \"rpc\"   \"/home/nick/.local/share/nvim/lspinstall/efm/efm-langserver\"    \"stderr\"        \"2021/05/12 20:24:01 lint for LanguageID not supported: lua\\n\"\r\n[ DEBUG ] 2021-05-12T20:24:01-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:491 ]    \"decoded\"       {  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = {},    uri = \"file:///home/nick/dotfiles/nvim/init.lua\",    version = 0  }}\r\n[ DEBUG ] 2021-05-12T20:24:01-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp.lua:679 ]        \"notification\"  \"textDocument/publishDiagnostics\"       {  diagnostics = {},  uri = \"file:///home/nick/dotfiles/nvim/init.lua\",  version = 0}\r\n[ DEBUG ] 2021-05-12T20:24:01-0400 ] ...hfs-root/usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:442 ]  \"default_handler\"       \"textDocument/publishDiagnostics\"       {  client_id = 1,  params = {    diagnostics = {},    uri = \"file:///home/nick/dotfiles/nvim/init.lua\",    version = 0  }}\r\n[ INFO ] 2021-05-12T20:24:02-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp.lua:1213 ]        \"exit_handler\"  { {    _on_attach = <function 1>,    cancel_request = <function 2>,    config = {      _on_attach = <function 3>,      capabilities = {        callHierarchy = {          dynamicRegistration = false,          <metatable> = <1>{            __tostring = <function 4>          }        },        textDocument = {          codeAction = {            codeActionLiteralSupport = {              codeActionKind = {                valueSet = { \"\", \"Empty\", \"QuickFix\", \"Refactor\", \"RefactorExtract\", \"RefactorInline\", \"RefactorRewrite\", \"Source\", \"SourceOrganizeImports\", \"quickfix\", \"refactor\", \"refactor.extract\", \"refactor.inline\", \"refactor.rewrite\", \"source\", \"source.organizeImports\" },                <metatable> = <table 1>              },              <metatable> = <table 1>            },            dynamicRegistration = false,            <metatable> = <table 1>          },          completion = {            completionItem = {              commitCharactersSupport = false,              deprecatedSupport = false,              documentationFormat = { \"markdown\", \"plaintext\" },              preselectSupport = false,              snippetSupport = false,              <metatable> = <table 1>            },            completionItemKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },              <metatable> = <table 1>            },            contextSupport = false,            dynamicRegistration = false,            <metatable> = <table 1>          },          declaration = {            linkSupport = true,            <metatable> = <table 1>          },          definition = {            linkSupport = true,            <metatable> = <table 1>          },          documentHighlight = {            dynamicRegistration = false,            <metatable> = <table 1>          },          documentSymbol = {            dynamicRegistration = false,            hierarchicalDocumentSymbolSupport = true,            symbolKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },              <metatable> = <table 1>            },            <metatable> = <table 1>          },          hover = {            contentFormat = { \"markdown\", \"plaintext\" },            dynamicRegistration = false,            <metatable> = <table 1>          },          implementation = {            linkSupport = true,            <metatable> = <table 1>          },          publishDiagnostics = {            relatedInformation = true,            tagSupport = {              valueSet = { 1, 2 },              <metatable> = <table 1>            },            <metatable> = <table 1>          },          references = {            dynamicRegistration = false,            <metatable> = <table 1>          },          rename = {            dynamicRegistration = false,            prepareSupport = true,            <metatable> = <table 1>          },          signatureHelp = {            dynamicRegistration = false,            signatureInformation = {              documentationFormat = { \"markdown\", \"plaintext\" },              <metatable> = <table 1>            },            <metatable> = <table 1>          },          synchronization = {            didSave = true,            dynamicRegistration = false,            willSave = false,            willSaveWaitUntil = false,            <metatable> = <table 1>          },          typeDefinition = {            linkSupport = true,            <metatable> = <table 1>          },          <metatable> = <table 1>        },        window = {          showDocument = {            support = false,            <metatable> = <table 1>          },          showMessage = {            messageActionItem = {              additionalPropertiesSupport = false,              <metatable> = <table 1>            },            <metatable> = <table 1>          },          workDoneProgress = true,          <metatable> = <table 1>        },        workspace = {          applyEdit = true,          configuration = true,          symbol = {            dynamicRegistration = false,            hierarchicalWorkspaceSymbolSupport = true,            symbolKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },              <metatable> = <table 1>            },            <metatable> = <table 1>          },          workspaceEdit = {            resourceOperations = { \"rename\", \"create\", \"delete\" },            <metatable> = <table 1>          },          workspaceFolders = true,          <metatable> = <table 1>        }      },      cmd = { \"/home/nick/.local/share/nvim/lspinstall/efm/efm-langserver\" },      filetypes = { \"lua\" },      flags = {},      get_language_id = <function 5>,      handlers = <2>{},      init_options = vim.empty_dict(),      log_level = 2,      message_level = 2,      name = \"efm\",      on_attach = <function 6>,      on_exit = <function 7>,      on_init = <function 8>,      root_dir = \"/home/nick/dotfiles\",      settings = vim.empty_dict(),      <metatable> = <table 1>    },    handlers = <table 2>,    id = 1,    initialized = true,    is_stopped = <function 9>,    messages = {      messages = {},      name = \"efm\",      progress = {},      status = {}    },    name = \"efm\",    notify = <function 10>,    offset_encoding = \"utf-16\",    request = <function 11>,    request_sync = <function 12>,    resolved_capabilities = {      call_hierarchy = false,      code_action = false,      code_lens = false,      code_lens_resolve = false,      completion = false,      declaration = false,      document_formatting = false,      document_highlight = false,      document_range_formatting = false,      document_symbol = false,      execute_command = false,      find_references = false,      goto_definition = false,      hover = false,      implementation = false,      rename = false,      signature_help = false,      signature_help_trigger_characters = {},      text_document_did_change = 1,      text_document_open_close = true,      text_document_save = true,      text_document_save_include_text = false,      text_document_will_save = false,      text_document_will_save_wait_until = false,      type_definition = false,      workspace_folder_properties = {        changeNotifications = true,        supported = true      },      workspace_symbol = false    },    rpc = {      handle = <userdata 1>,      notify = <function 13>,      pid = 25348,      request = <function 14>    },    server_capabilities = {      textDocumentSync = 1,      workspace = {        workspaceFolders = {          changeNotifications = true,          supported = true        }      }    },    stop = <function 15>,    supports_method = <function 16>,    workspaceFolders = { {        name = \"/home/nick/dotfiles\",        uri = \"file:///home/nick/dotfiles\"      } },    workspace_did_change_configuration = <function 17>  } }\r\n[ DEBUG ] 2021-05-12T20:24:02-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:390 ]    \"rpc.send.payload\"      {  id = 2,  jsonrpc = \"2.0\",  method = \"shutdown\"}\r\n[ ERROR ] 2021-05-12T20:24:02-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:457 ]    \"rpc\"   \"/home/nick/.local/share/nvim/lspinstall/efm/efm-langserver\"    \"stderr\"        \"panic: runtime error: invalid memory address or nil pointer dereference\\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x20 pc=0x563a4a]\\n\\ngoroutine 7 [running]:\\ntime.(*Timer).Stop(...)\\n\\t/usr/local/go/src/time/sleep.go:76\\ngithub.com/mattn/efm-langserver/langserver.(*langHandler).handleShutdown(0xc000130000, 0x5f6640, 0xc0000160b0, 0xc000134000, 0xc0001b80f0, 0x595200, 0xc00018c3f0, 0xc0001b23a0, 0x0)\\n\\t/home/nick/.local/share/nvim/lspinstall/efm/pkg/mod/github.com/mattn/efm-langserver@v0.0.29/langserver/handle_shutdown.go:10 +0x2a\\ngithub.com/mattn/efm-langserver/langserver.(*langHandler).handle(0xc000130000, 0x5f6640, 0xc0000160b0, 0xc000134000, 0xc0001b80f0, 0x595200, 0xc00018c3f0\"\r\n[ ERROR ] 2021-05-12T20:24:02-0400 ] /squashfs-root/usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:457 ]    \"rpc\"   \"/home/nick/.local/share/nvim/lspinstall/efm/efm-langserver\"    \"stderr\"        \", 0x0, 0x0)\\n\\t/home/nick/.local/share/nvim/lspinstall/efm/pkg/mod/github.com/mattn/efm-langserver@v0.0.29/langserver/handler.go:559 +0x19c\\ngithub.com/sourcegraph/jsonrpc2.(*HandlerWithErrorConfigurer).Handle(0xc0000104a0, 0x5f6640, 0xc0000160b0, 0xc000134000, 0xc0001b80f0)\\n\\t/home/nick/.local/share/nvim/lspinstall/efm/pkg/mod/github.com/sourcegraph/jsonrpc2@v0.0.0-20191222043438-96c4efab7ee2/handler_with_error.go:21 +0x73\\ngithub.com/sourcegraph/jsonrpc2.(*Conn).readMessages(0xc000134000, 0x5f6640, 0xc0000160b0)\\n\\t/home/nick/.local/share/nvim/lspinstall/efm/pkg/mod/github.com/sourcegraph/jsonrpc2@v0.0.0-20191222043438-96c4efab7ee2/jsonrpc2.go:522 +0x57e\\ncreated by github.com/sourcegraph/jsonrpc2.NewConn\\n\\t/home/nick/.local/share/nvim/lspinstall/efm/pkg/mod/github.com/sourcegraph/jsonrpc2@v0.0.0-20191222043438-96c4efab7ee2/jsonrpc2.go:334 +0x1d5\\n\"\r\n```\r\n\r\n<summary>Log file</summary>\r\n\r\n</details>\r\n",
    "closed_at": "2021-05-13T03:10:43Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
        "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
        "followers_url": "https://api.github.com/users/mjlbach/followers",
        "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
        "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mjlbach",
        "id": 13316262,
        "login": "mjlbach",
        "node_id": "MDQ6VXNlcjEzMzE2MjYy",
        "organizations_url": "https://api.github.com/users/mjlbach/orgs",
        "received_events_url": "https://api.github.com/users/mjlbach/received_events",
        "repos_url": "https://api.github.com/users/mjlbach/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mjlbach",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "You already filed https://github.com/mattn/efm-langserver/issues/127\r\n\r\nWe just transparently report the exit code when it's not zero https://github.com/mjlbach/neovim/blob/21035cff9f1d279e3cb5ec866916bfa231cdbaa2/runtime/lua/vim/lsp.lua#L738-L743",
            "created_at": "2021-05-13T03:10:43Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/issues/902#issuecomment-840258861",
            "id": 840258861,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/902",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg0MDI1ODg2MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/840258861/reactions"
            },
            "updated_at": "2021-05-13T03:10:43Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/840258861",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
                "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
                "followers_url": "https://api.github.com/users/mjlbach/followers",
                "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
                "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mjlbach",
                "id": 13316262,
                "login": "mjlbach",
                "node_id": "MDQ6VXNlcjEzMzE2MjYy",
                "organizations_url": "https://api.github.com/users/mjlbach/orgs",
                "received_events_url": "https://api.github.com/users/mjlbach/received_events",
                "repos_url": "https://api.github.com/users/mjlbach/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mjlbach",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I am not sure why it's closed but can anyone explain what is the cause and how to solve it?\nI am having this issue with a fresh install of [kickstart](https://github.com/dam9000/kickstart-modular.nvim)",
            "created_at": "2024-11-26T22:55:08Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/issues/902#issuecomment-2502116423",
            "id": 2502116423,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/902",
            "node_id": "IC_kwDODTQC186VI0RH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2502116423/reactions"
            },
            "updated_at": "2024-11-26T22:55:28Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2502116423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/57415306?v=4",
                "events_url": "https://api.github.com/users/danimatuko/events{/privacy}",
                "followers_url": "https://api.github.com/users/danimatuko/followers",
                "following_url": "https://api.github.com/users/danimatuko/following{/other_user}",
                "gists_url": "https://api.github.com/users/danimatuko/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/danimatuko",
                "id": 57415306,
                "login": "danimatuko",
                "node_id": "MDQ6VXNlcjU3NDE1MzA2",
                "organizations_url": "https://api.github.com/users/danimatuko/orgs",
                "received_events_url": "https://api.github.com/users/danimatuko/received_events",
                "repos_url": "https://api.github.com/users/danimatuko/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/danimatuko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danimatuko/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/danimatuko",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/902/comments",
    "created_at": "2021-05-13T00:34:46Z",
    "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/902/events",
    "html_url": "https://github.com/neovim/nvim-lspconfig/issues/902",
    "id": 890591753,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "Something isn't working",
            "id": 1674892761,
            "name": "bug",
            "node_id": "MDU6TGFiZWwxNjc0ODkyNzYx",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels/bug"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/902/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU4OTA1OTE3NTM=",
    "number": 902,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/902/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/nvim-lspconfig",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/902/timeline",
    "title": "Client 2 (1) quit with exit code 2 and signal 0",
    "updated_at": "2024-11-26T22:55:28Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/902",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24359105?v=4",
        "events_url": "https://api.github.com/users/Nickroll/events{/privacy}",
        "followers_url": "https://api.github.com/users/Nickroll/followers",
        "following_url": "https://api.github.com/users/Nickroll/following{/other_user}",
        "gists_url": "https://api.github.com/users/Nickroll/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Nickroll",
        "id": 24359105,
        "login": "Nickroll",
        "node_id": "MDQ6VXNlcjI0MzU5MTA1",
        "organizations_url": "https://api.github.com/users/Nickroll/orgs",
        "received_events_url": "https://api.github.com/users/Nickroll/received_events",
        "repos_url": "https://api.github.com/users/Nickroll/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Nickroll/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Nickroll/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Nickroll",
        "user_view_type": "public"
    }
}