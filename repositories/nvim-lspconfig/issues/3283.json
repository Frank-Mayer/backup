{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Description\n\nSo ....\r\n\r\n1. I get a visual range with:\r\n```lua\r\n  local start_pos = vim.fn.getcharpos(\"'<\")\r\n  local end_pos = vim.fn.getcharpos(\"'>\")\r\n```\r\n  \r\n  2. I have brute forced every single 1 and 0 possible there....\r\n```lua\r\n  local start_row = start_pos[2] - 1\r\n  local start_col = start_pos[3] - 1\r\n  local end_row = end_pos[2] - 1\r\n  local end_col = end_pos[3] - 1\r\n```\r\n\r\n3. I desperately try to pass the range to buf.code_action\r\n```lua\r\n    local opts = {\r\n      context = {\r\n        diagnostics = {}, \r\n        only = nil,\r\n      },\r\n      range = {\r\n        start = { start_row, start_col },\r\n        [\"end\"] = { end_row, end_col },\r\n      },\r\n    }\r\n    vim.lsp.buf.code_action(opts)\r\n```\r\n\r\n4. I have plenty of prints etc to show the value before/after the index modifs...\r\n\r\n5. Every single attempt at a method extraction I've made I've been told to \"select a complete statement\". Wether tried on just one line, or mutlitple. Whatest giveth ?\r\n\r\nFor those who want to see/try the whole function:\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n```lua\r\nlocal M = {}\r\n\r\nfunction M.code_action_on_selection()\r\n  -- Capture the current mode\r\n  local mode = vim.api.nvim_get_mode().mode\r\n  print(\"Current mode:\", mode)\r\n\r\n  -- Check if we're in visual mode\r\n  if not string.match(mode, \"^[vV\\22]\") then\r\n    vim.notify(\"This function should be called in visual mode\", vim.log.levels.WARN)\r\n    return\r\n  end\r\n\r\n  -- Markers update when leaving visual mode\r\n  vim.cmd([[ execute \"normal! \\<ESC>\" ]])\r\n\r\n  local start_pos = vim.fn.getcharpos(\"'<\")\r\n  local end_pos = vim.fn.getcharpos(\"'>\")\r\n\r\n  -- Print raw positions\r\n  print(\"Raw start position:\", vim.inspect(start_pos))\r\n  print(\"Raw end position:\", vim.inspect(end_pos))\r\n\r\n  -- Check if positions are valid\r\n  if not start_pos or not end_pos or #start_pos < 4 or #end_pos < 4 then\r\n    vim.notify(\"Invalid position data\", vim.log.levels.ERROR)\r\n    return\r\n  end\r\n\r\n  -- Convert positions to zero-indexed (LSP format)\r\n  local start_row = start_pos[2] - 1\r\n  local start_col = start_pos[3] - 1\r\n  local end_row = end_pos[2] - 1\r\n  local end_col = end_pos[3] - 1\r\n\r\n  -- Print converted positions\r\n  print(\"Converted start position: line =\", start_row, \"character =\", start_col)\r\n  print(\"Converted end position: line =\", end_row, \"character =\", end_col)\r\n\r\n  -- Ensure that the range is valid\r\n  if start_row >= 0 and start_col >= 0 and end_row >= 0 and end_col >= 0 then\r\n    local range = {\r\n      start = { line = start_row, character = start_col },\r\n      [\"end\"] = { line = end_row, character = end_col },\r\n    }\r\n\r\n    -- Print the final range\r\n    print(\"Final range:\", vim.inspect(range))\r\n\r\n    local opts = {\r\n      context = {\r\n        diagnostics = {},\r\n        only = nil,\r\n      },\r\n      range = {\r\n        start = { start_row, start_col },\r\n        [\"end\"] = { end_row, end_col },\r\n      },\r\n    }\r\n\r\n    -- Invoke code action with the range\r\n    vim.lsp.buf.code_action(opts)\r\n  else\r\n    vim.notify(\"Invalid selection range for code action\", vim.log.levels.ERROR)\r\n  end\r\nend\r\n\r\nreturn M\r\n```\r\n</details>\r\n\r\nBefore you ask... when using a fuzzzyfiner for code actions (Telescope), the visual selection will be dropped. This seems then to be the only way to pass a visual selection to a lsp client.\r\n\r\nNot really a lsp config issue... but didn't know where else to post this sry.\r\n\r\nAnd yes, I've tried with ...\r\n```lua\r\n  local start_pos = vim.fn.getpos(\"'<\")\r\n  local end_pos = vim.fn.getpos(\"'>\")\r\n```\r\n... too, to apparently no avail. Not gonna brute force the 0/1 for this one too. Main issue with this one seems to be the \"infinite/eof\" number we get for the ending character, altough I'm not so sure it's really a problem.",
    "closed_at": "2024-08-24T06:15:25Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "vim.fn.getpos",
            "created_at": "2024-08-24T06:15:25Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/issues/3283#issuecomment-2308148430",
            "id": 2308148430,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3283",
            "node_id": "IC_kwDODTQC186Jk4zO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2308148430/reactions"
            },
            "updated_at": "2024-08-24T06:15:25Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2308148430",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3283/comments",
    "created_at": "2024-08-23T21:57:00Z",
    "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3283/events",
    "html_url": "https://github.com/neovim/nvim-lspconfig/issues/3283",
    "id": 2483954068,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "Something isn't working",
            "id": 1674892761,
            "name": "bug",
            "node_id": "MDU6TGFiZWwxNjc0ODkyNzYx",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels/bug"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3283/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDODTQC186UDiGU",
    "number": 3283,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3283/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/nvim-lspconfig",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3283/timeline",
    "title": "Cannot figure out, for the life of me, what to pass to vim.lsp.buf.code_action() as a range.",
    "updated_at": "2024-08-24T06:15:25Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3283",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/71520287?v=4",
        "events_url": "https://api.github.com/users/avario-cpu/events{/privacy}",
        "followers_url": "https://api.github.com/users/avario-cpu/followers",
        "following_url": "https://api.github.com/users/avario-cpu/following{/other_user}",
        "gists_url": "https://api.github.com/users/avario-cpu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/avario-cpu",
        "id": 71520287,
        "login": "avario-cpu",
        "node_id": "MDQ6VXNlcjcxNTIwMjg3",
        "organizations_url": "https://api.github.com/users/avario-cpu/orgs",
        "received_events_url": "https://api.github.com/users/avario-cpu/received_events",
        "repos_url": "https://api.github.com/users/avario-cpu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/avario-cpu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/avario-cpu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/avario-cpu"
    }
}