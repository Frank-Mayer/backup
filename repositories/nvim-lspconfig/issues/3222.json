{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Description\r\n\r\nplainly, `on_attach` isnt working\r\n\r\nthis is my on_attach:\r\n```lua\r\n      local on_attach = function(bufnr, client)\r\n        if client == nil then\r\n          print(\"LSP client is nil!\")\r\n          return\r\n        end\r\n        local function buf_set_keymap(...)\r\n          vim.api.nvim_buf_set_keymap(bufnr, ...)\r\n        end\r\n        local function buf_set_option(...)\r\n          vim.api.nvim_buf_set_option(bufnr, ...)\r\n        end\r\n        local function opts(desc)\r\n          return { desc = desc, noremap = true, silent = true }\r\n        end\r\n        local methods = vim.lsp.protocol.Methods\r\n        buf_set_option(\"omnifunc\", \"v:lua.vim.lsp.omnifunc\")\r\n        buf_set_keymap(\"n\", \"gr\", \"<cmd>Lspsaga finder ref<CR>\", opts(\"LSP Finder [References] \"))\r\n        buf_set_keymap(\"n\", \"gd\", \"<cmd>Lspsaga finder def<CR>\", opts(\"LSP Finder [Definition] \"))\r\n        buf_set_keymap(\"n\", \"gI\", \"<cmd>Lspsaga finder imp<CR>\", opts(\"LSP Finder [Implementation] \"))\r\n        buf_set_keymap(\"n\", \"gD\", \"<cmd>Lspsaga finder tyd<CR>\", opts(\"LSP Finder [Type Definition] \"))\r\n        buf_set_keymap(\"n\", \"[d\", \"<cmd>lua vim.diagnostic.goto_prev()<CR>\", opts(\"Diagnostic Jump Prev\"))\r\n        buf_set_keymap(\"n\", \"]d\", \"<cmd>lua vim.diagnostic.goto_next()<CR>\", opts(\"Diagnostic Jump Next\"))\r\n        client.server_capabilities.document_formatting = true\r\n        require(\"lsp_signature\").on_attach({\r\n          bind = true,\r\n          debug = true,\r\n          floating_window = true,\r\n          floating_window_above_cur_line = false,\r\n          hint_enable = true,\r\n          fix_pos = true,\r\n          floating_window_above_first = true,\r\n          log_path = vim.fn.expand(\"$HOME\") .. \"/tmp/sig.log\",\r\n          padding = \" \",\r\n          handler_opts = {\r\n            border = \"rounded\",\r\n          },\r\n        })\r\n        if client and client.server_capabilities.documentHighlightProvider then\r\n          local highlight_augroup = vim.api.nvim_create_augroup(\"NeutronVimLSPHighlight\", { clear = false })\r\n          vim.api.nvim_create_autocmd({ \"CursorHold\", \"CursorHoldI\" }, {\r\n            buffer = client.buf,\r\n            group = highlight_augroup,\r\n            callback = vim.lsp.buf.document_highlight,\r\n          })\r\n\r\n          vim.api.nvim_create_autocmd({ \"CursorMoved\", \"CursorMovedI\" }, {\r\n            buffer = client.buf,\r\n            group = highlight_augroup,\r\n            callback = vim.lsp.buf.clear_references,\r\n          })\r\n\r\n          vim.api.nvim_create_autocmd(\"LspDetach\", {\r\n            group = vim.api.nvim_create_augroup(\"NeutronVimLSPDetach\", { clear = true }),\r\n            callback = function(bufnr2)\r\n              vim.lsp.buf.clear_references()\r\n              vim.api.nvim_clear_autocmds({ group = \"NeutronVimLSPHighlight\", buffer = bufnr2.buf })\r\n            end,\r\n          })\r\n        end\r\n        if client.supports_method(methods.textDocument_signatureHelp) then\r\n          buf_set_keymap(\"i\", \"<C-t>\", function()\r\n            -- Close the completion menu first (if open).\r\n            local cmp = require(\"cmp\")\r\n            if cmp.visible() then\r\n              cmp.close()\r\n            end\r\n\r\n            vim.lsp.buf.signature_help()\r\n          end, opts(\"Signature help\"))\r\n        end\r\n        if vim.fn.has(\"nvim-0.10.0\") == 1 then\r\n          if client.supports_method(methods.textDocument_inlayHint) then\r\n            local inlay_hints_group = vim.api.nvim_create_augroup(\"toggle_inlay_hints\", { clear = false })\r\n            vim.defer_fn(function()\r\n              local mode = vim.api.nvim_get_mode().mode\r\n              vim.lsp.inlay_hint.enable(mode == \"n\" or mode == \"v\", { bufnr = bufnr })\r\n            end, 500)\r\n\r\n            vim.api.nvim_create_autocmd(\"InsertEnter\", {\r\n              group = inlay_hints_group,\r\n              desc = \"Enable inlay hints\",\r\n              buffer = bufnr,\r\n              callback = function()\r\n                vim.lsp.inlay_hint.enable(false, { bufnr = bufnr })\r\n              end,\r\n            })\r\n            vim.api.nvim_create_autocmd(\"InsertLeave\", {\r\n              group = inlay_hints_group,\r\n              desc = \"Disable inlay hints\",\r\n              buffer = bufnr,\r\n              callback = function()\r\n                vim.lsp.inlay_hint.enable(true, { bufnr = bufnr })\r\n              end,\r\n            })\r\n          end\r\n          if client.supports_method(methods.textDocument_codeLens) then\r\n            local code_lens_group = vim.api.nvim_create_augroup(\"toggle_code_lens\", { clear = false })\r\n            vim.defer_fn(function()\r\n              vim.lsp.codelens.refresh()\r\n            end, 500)\r\n\r\n            vim.api.nvim_create_autocmd({ \"BufEnter\", \"CursorHold\", \"InsertLeave\" }, {\r\n              buffer = bufnr,\r\n              callback = vim.lsp.codelens.refresh,\r\n              desc = \"Refresh Code Lens\",\r\n              group = code_lens_group,\r\n            })\r\n          end\r\n        end\r\n      end\r\n```\r\n\r\nso idk whats wrong.\r\n\r\n<details><summary>this is my whole config</summary>\r\n\r\n```lua\r\nreturn {\r\n  {\r\n    \"neovim/nvim-lspconfig\",\r\n    event = { \"LazyFile\" },\r\n    keys = {\r\n      {\r\n        \"gT\",\r\n        function()\r\n          local buf = vim.api.nvim_get_current_buf()\r\n          local clients = vim.lsp.get_clients({ bufnr = buf })\r\n          if not vim.tbl_isempty(clients) then\r\n            vim.cmd(\"LspStop\")\r\n          else\r\n            vim.cmd(\"LspStart\")\r\n          end\r\n        end,\r\n        desc = \"Toggle LSP\",\r\n      },\r\n    },\r\n    dependencies = {\r\n      {\r\n        \"hrsh7th/cmp-nvim-lsp\",\r\n        event = { \"LspAttach\", \"InsertEnter\" },\r\n        lazy = true,\r\n      },\r\n      {\r\n        \"antosha417/nvim-lsp-file-operations\",\r\n        event = { \"LspAttach\" },\r\n        dependencies = {\r\n          \"nvim-lua/plenary.nvim\",\r\n          \"nvim-tree/nvim-tree.lua\",\r\n        },\r\n        lazy = true,\r\n        config = true,\r\n      },\r\n      {\r\n        \"ray-x/lsp_signature.nvim\",\r\n        lazy = true,\r\n        event = \"InsertEnter\",\r\n      },\r\n      {\r\n        \"LukasPietzschmann/boo.nvim\",\r\n        lazy = true,\r\n        event = \"LspAttach\",\r\n        opts = { focus_on_open = false },\r\n      },\r\n      {\r\n        \"zeioth/garbage-day.nvim\",\r\n        dependencies = \"neovim/nvim-lspconfig\",\r\n        enabled = function()\r\n          if vim.fn.has(\"nvim-0.10.0\") == 1 then\r\n            return true\r\n          end\r\n          return false\r\n        end,\r\n        event = { \"LspAttach\" },\r\n        opts = {\r\n          notifications = true,\r\n        },\r\n      },\r\n    },\r\n    config = function()\r\n      local lspconfig_status_ok, lspconfig = pcall(require, \"lspconfig\")\r\n      if not lspconfig_status_ok then\r\n        print(\"lspconfig not found!\")\r\n      end\r\n      local cmp_nvim_lsp_status_ok, cmp_nvim_lsp = pcall(require, \"cmp_nvim_lsp\")\r\n      if not cmp_nvim_lsp_status_ok then\r\n        print(\"cmp_nvim_lsp not found!\")\r\n      end\r\n      local lsp_file_operations_status_ok, lsp_file_operations = pcall(require, \"lsp-file-operations\")\r\n      if not lsp_file_operations_status_ok then\r\n        print(\"lsp_file_operations not found!\")\r\n      end\r\n      local icons_ok, icons = pcall(require, \"NeutronVim.core.icons\")\r\n      if not icons_ok then\r\n        print(\"Unable to import icons!\")\r\n      end\r\n      lsp_file_operations.setup()\r\n      local on_attach = function(bufnr, client)\r\n        if client == nil then\r\n          print(\"LSP client is nil!\")\r\n          return\r\n        end\r\n        local function buf_set_keymap(...)\r\n          vim.api.nvim_buf_set_keymap(bufnr, ...)\r\n        end\r\n        local function buf_set_option(...)\r\n          vim.api.nvim_buf_set_option(bufnr, ...)\r\n        end\r\n        local function opts(desc)\r\n          return { desc = desc, noremap = true, silent = true }\r\n        end\r\n        local methods = vim.lsp.protocol.Methods\r\n        buf_set_option(\"omnifunc\", \"v:lua.vim.lsp.omnifunc\")\r\n        buf_set_keymap(\"n\", \"gr\", \"<cmd>Lspsaga finder ref<CR>\", opts(\"LSP Finder [References] \"))\r\n        buf_set_keymap(\"n\", \"gd\", \"<cmd>Lspsaga finder def<CR>\", opts(\"LSP Finder [Definition] \"))\r\n        buf_set_keymap(\"n\", \"gI\", \"<cmd>Lspsaga finder imp<CR>\", opts(\"LSP Finder [Implementation] \"))\r\n        buf_set_keymap(\"n\", \"gD\", \"<cmd>Lspsaga finder tyd<CR>\", opts(\"LSP Finder [Type Definition] \"))\r\n        buf_set_keymap(\"n\", \"[d\", \"<cmd>lua vim.diagnostic.goto_prev()<CR>\", opts(\"Diagnostic Jump Prev\"))\r\n        buf_set_keymap(\"n\", \"]d\", \"<cmd>lua vim.diagnostic.goto_next()<CR>\", opts(\"Diagnostic Jump Next\"))\r\n        client.server_capabilities.document_formatting = true\r\n        require(\"lsp_signature\").on_attach({\r\n          bind = true,\r\n          debug = true,\r\n          floating_window = true,\r\n          floating_window_above_cur_line = false,\r\n          hint_enable = true,\r\n          fix_pos = true,\r\n          floating_window_above_first = true,\r\n          log_path = vim.fn.expand(\"$HOME\") .. \"/tmp/sig.log\",\r\n          padding = \" \",\r\n          handler_opts = {\r\n            border = \"rounded\",\r\n          },\r\n        })\r\n        if client and client.server_capabilities.documentHighlightProvider then\r\n          local highlight_augroup = vim.api.nvim_create_augroup(\"NeutronVimLSPHighlight\", { clear = false })\r\n          vim.api.nvim_create_autocmd({ \"CursorHold\", \"CursorHoldI\" }, {\r\n            buffer = client.buf,\r\n            group = highlight_augroup,\r\n            callback = vim.lsp.buf.document_highlight,\r\n          })\r\n\r\n          vim.api.nvim_create_autocmd({ \"CursorMoved\", \"CursorMovedI\" }, {\r\n            buffer = client.buf,\r\n            group = highlight_augroup,\r\n            callback = vim.lsp.buf.clear_references,\r\n          })\r\n\r\n          vim.api.nvim_create_autocmd(\"LspDetach\", {\r\n            group = vim.api.nvim_create_augroup(\"NeutronVimLSPDetach\", { clear = true }),\r\n            callback = function(bufnr2)\r\n              vim.lsp.buf.clear_references()\r\n              vim.api.nvim_clear_autocmds({ group = \"NeutronVimLSPHighlight\", buffer = bufnr2.buf })\r\n            end,\r\n          })\r\n        end\r\n        if client.supports_method(methods.textDocument_signatureHelp) then\r\n          buf_set_keymap(\"i\", \"<C-t>\", function()\r\n            -- Close the completion menu first (if open).\r\n            local cmp = require(\"cmp\")\r\n            if cmp.visible() then\r\n              cmp.close()\r\n            end\r\n\r\n            vim.lsp.buf.signature_help()\r\n          end, opts(\"Signature help\"))\r\n        end\r\n        if vim.fn.has(\"nvim-0.10.0\") == 1 then\r\n          if client.supports_method(methods.textDocument_inlayHint) then\r\n            local inlay_hints_group = vim.api.nvim_create_augroup(\"toggle_inlay_hints\", { clear = false })\r\n            vim.defer_fn(function()\r\n              local mode = vim.api.nvim_get_mode().mode\r\n              vim.lsp.inlay_hint.enable(mode == \"n\" or mode == \"v\", { bufnr = bufnr })\r\n            end, 500)\r\n\r\n            vim.api.nvim_create_autocmd(\"InsertEnter\", {\r\n              group = inlay_hints_group,\r\n              desc = \"Enable inlay hints\",\r\n              buffer = bufnr,\r\n              callback = function()\r\n                vim.lsp.inlay_hint.enable(false, { bufnr = bufnr })\r\n              end,\r\n            })\r\n            vim.api.nvim_create_autocmd(\"InsertLeave\", {\r\n              group = inlay_hints_group,\r\n              desc = \"Disable inlay hints\",\r\n              buffer = bufnr,\r\n              callback = function()\r\n                vim.lsp.inlay_hint.enable(true, { bufnr = bufnr })\r\n              end,\r\n            })\r\n          end\r\n          if client.supports_method(methods.textDocument_codeLens) then\r\n            local code_lens_group = vim.api.nvim_create_augroup(\"toggle_code_lens\", { clear = false })\r\n            vim.defer_fn(function()\r\n              vim.lsp.codelens.refresh()\r\n            end, 500)\r\n\r\n            vim.api.nvim_create_autocmd({ \"BufEnter\", \"CursorHold\", \"InsertLeave\" }, {\r\n              buffer = bufnr,\r\n              callback = vim.lsp.codelens.refresh,\r\n              desc = \"Refresh Code Lens\",\r\n              group = code_lens_group,\r\n            })\r\n          end\r\n        end\r\n      end\r\n      local capabilities =\r\n        vim.tbl_deep_extend(\"force\", vim.lsp.protocol.make_client_capabilities(), cmp_nvim_lsp.default_capabilities())\r\n      capabilities.textDocument.completion = cmp_nvim_lsp.default_capabilities().textDocument.completion\r\n      local signs = {\r\n        Error = icons.diagnostics.Error,\r\n        Warn = icons.diagnostics.Warning,\r\n        Hint = icons.diagnostics.Hint,\r\n        Info = icons.diagnostics.Info,\r\n      }\r\n      for type, icon in pairs(signs) do\r\n        local hl = \"DiagnosticSign\" .. type\r\n        vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })\r\n      end\r\n      vim.diagnostic.config({\r\n        signs = { text = { \"\", \"\", \"\", \"\" } }, -- {\"\", \"\", \"\"}\r\n        float = {\r\n          show_header = true,\r\n          border = \"rounded\",\r\n          suffix = \"\",\r\n          focusable = false,\r\n          enabled = false,\r\n          source = \"always\",\r\n          header = { \"  Diagnostics\", \"String\" },\r\n          prefix = function(_, _, _)\r\n            return \"  \", \"String\"\r\n          end, -- icons:       \r\n        },\r\n        update_in_insert = false,\r\n        underline = true,\r\n        severity_sort = true,\r\n      })\r\n      require(\"lspconfig.ui.windows\").default_options.border = \"rounded\"\r\n      lspconfig[\"rust_analyzer\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n        cmd = {\r\n          \"rustup\",\r\n          \"run\",\r\n          \"stable\",\r\n          \"rust-analyzer\",\r\n        },\r\n      })\r\n      local util = require(\"lspconfig/util\")\r\n      local path = util.path\r\n      lspconfig[\"html\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n      })\r\n      lspconfig[\"tsserver\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n      })\r\n      lspconfig[\"clangd\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n      })\r\n      lspconfig[\"cmake\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n      })\r\n      lspconfig[\"bashls\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n      })\r\n      lspconfig[\"basedpyright\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n        settings = {\r\n          python = {\r\n            analysis = {\r\n              autoSearchPaths = true,\r\n              useLibraryCodeForTypes = true,\r\n              diagnosticMode = \"openFilesOnly\",\r\n            },\r\n          },\r\n        },\r\n        root_dir = function(fname)\r\n          return util.root_pattern(\".git\", \"setup.py\", \"setup.cfg\", \"pyproject.toml\", \"requirements.txt\")(fname)\r\n            or util.path.dirname(fname)\r\n        end,\r\n        before_init = function(_, config)\r\n          local default_venv_path = path.join(vim.env.HOME, \"virtualenvs\", os.getenv(\"VIRTUAL_ENV\"), \"bin\", \"python\")\r\n          config.settings.python.pythonPath = default_venv_path\r\n        end,\r\n      })\r\n      lspconfig[\"cssls\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n      })\r\n      lspconfig[\"marksman\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n      })\r\n      lspconfig[\"vimls\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n      })\r\n      lspconfig[\"lua_ls\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n        settings = {\r\n          Lua = {\r\n            runtime = { version = \"LuaJIT\", path = vim.split(package.path, \";\") },\r\n            completion = { keywordSnippet = \"Disable\", callSnippet = \"Replace\" },\r\n            diagnostics = {\r\n              globals = { \"vim\", \"describe\", \"it\", \"before_each\", \"after_each\" },\r\n            },\r\n            hint = {\r\n              enable = true,\r\n            },\r\n            codeLens = {\r\n              enable = true,\r\n            },\r\n            workspace = {\r\n              library = {\r\n                [vim.fn.expand(\"$VIMRUNTIME/lua\")] = true,\r\n                [vim.fn.expand(\"$VIMRUNTIME/lua/vim/lsp\")] = true,\r\n                [vim.fn.stdpath(\"config\") .. \"/lua\"] = true,\r\n              },\r\n              checkThirdParty = false,\r\n            },\r\n            -- telemetry = { enable = false },\r\n          },\r\n        },\r\n      })\r\n    end,\r\n  },\r\n  {\r\n    \"folke/lazydev.nvim\",\r\n    ft = \"lua\",\r\n    config = true,\r\n    enabled = function()\r\n      if vim.fn.has(\"nvim-0.10.0\") == 1 then\r\n        return true\r\n      end\r\n      return false\r\n    end,\r\n  },\r\n}\r\n```\r\n</details> \r\n\r\nmaybe unrelated but i wanted help with lua_ls: https://new.reddit.com/r/neovim/comments/1debxtc/lua_ls_sweating_up_my_device/\r\n\r\n<details><summary>check this too!</summary>\r\n\r\nwhile using this keymaps:\r\n```lua\r\n-- Move text up and down [in all modes] with `J` and `K`\r\nmap(\"n\", \"J\", \":m .+1<cr>==\", { desc = \"Move down\", silent = true })\r\nmap(\"n\", \"K\", \":m .-2<cr>==\", { desc = \"Move up\", silent = true })\r\nmap(\"i\", \"<C-k>\", \"<esc><cmd>m .-2<cr>==gi\", { desc = \"Move up\", silent = true })\r\nmap(\"i\", \"<C-j>\", \"<esc><cmd>m .+1<cr>==gi\", { desc = \"Move down\", silent = true })\r\nmap(\"v\", \"J\", \":m '>+1<CR>gv=gv\", { desc = \"Move down\", silent = true })\r\nmap(\"v\", \"K\", \":m '<-2<CR>gv=gv\", { desc = \"Move up\", silent = true })\r\n```\r\ni noticed this:\r\n![image](https://github.com/neovim/nvim-lspconfig/assets/84800625/729dc566-7abc-41ae-b301-7fbf98277126)\r\n\r\nso how to minimize that damage to my cpu:\r\nmy luals config:\r\n```lua\r\n      lspconfig[\"lua_ls\"].setup({\r\n        capabilities = capabilities,\r\n        on_attach = on_attach,\r\n        settings = {\r\n          Lua = {\r\n            runtime = { version = \"LuaJIT\", path = vim.split(package.path, \";\") },\r\n            completion = { keywordSnippet = \"Disable\", callSnippet = \"Replace\" },\r\n            diagnostics = {\r\n              globals = { \"vim\", \"describe\", \"it\", \"before_each\", \"after_each\" },\r\n            },\r\n            hint = {\r\n              enable = true,\r\n            },\r\n            codeLens = {\r\n              enable = true,\r\n            },\r\n            workspace = {\r\n              library = {\r\n                [vim.fn.expand(\"$VIMRUNTIME/lua\")] = true,\r\n                [vim.fn.expand(\"$VIMRUNTIME/lua/vim/lsp\")] = true,\r\n                [vim.fn.stdpath(\"config\") .. \"/lua\"] = true,\r\n              },\r\n              checkThirdParty = false,\r\n            },\r\n            -- telemetry = { enable = false },\r\n          },\r\n        },\r\n      })\r\n```\r\n</details>\r\n\r\nand yeah pls dont close this for not providing `minimal.lua` because i suck at it 🙏🏻",
    "closed_at": "2024-06-27T06:00:22Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "first param is client ",
            "created_at": "2024-06-27T06:00:22Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/issues/3222#issuecomment-2193866891",
            "id": 2193866891,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3222",
            "node_id": "IC_kwDODTQC186Cw8CL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2193866891/reactions"
            },
            "updated_at": "2024-06-27T06:00:22Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2193866891",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "author_association": "NONE",
            "body": "> first param is client\r\n\r\nSorry about that but I just tried switching places, and it doesn't matter (earlier first param was client) ",
            "created_at": "2024-06-27T06:12:56Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/issues/3222#issuecomment-2193881321",
            "id": 2193881321,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3222",
            "node_id": "IC_kwDODTQC186Cw_jp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2193881321/reactions"
            },
            "updated_at": "2024-06-27T06:12:56Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2193881321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/84800625?v=4",
                "events_url": "https://api.github.com/users/daUnknownCoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/daUnknownCoder/followers",
                "following_url": "https://api.github.com/users/daUnknownCoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/daUnknownCoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/daUnknownCoder",
                "id": 84800625,
                "login": "daUnknownCoder",
                "node_id": "MDQ6VXNlcjg0ODAwNjI1",
                "organizations_url": "https://api.github.com/users/daUnknownCoder/orgs",
                "received_events_url": "https://api.github.com/users/daUnknownCoder/received_events",
                "repos_url": "https://api.github.com/users/daUnknownCoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/daUnknownCoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/daUnknownCoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/daUnknownCoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "It doesn't matter whatever I put there but it doesn't attach (not only for lua_ls but for every language)\r\nCheck : https://www.reddit.com/r/neovim/comments/1dnl0f9/lsp_stuff_not_working/",
            "created_at": "2024-06-27T06:15:08Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/issues/3222#issuecomment-2193883924",
            "id": 2193883924,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3222",
            "node_id": "IC_kwDODTQC186CxAMU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2193883924/reactions"
            },
            "updated_at": "2024-06-27T06:20:52Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2193883924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/84800625?v=4",
                "events_url": "https://api.github.com/users/daUnknownCoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/daUnknownCoder/followers",
                "following_url": "https://api.github.com/users/daUnknownCoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/daUnknownCoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/daUnknownCoder",
                "id": 84800625,
                "login": "daUnknownCoder",
                "node_id": "MDQ6VXNlcjg0ODAwNjI1",
                "organizations_url": "https://api.github.com/users/daUnknownCoder/orgs",
                "received_events_url": "https://api.github.com/users/daUnknownCoder/received_events",
                "repos_url": "https://api.github.com/users/daUnknownCoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/daUnknownCoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/daUnknownCoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/daUnknownCoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "hi @glepnir are we re-opening this?\r\n\r\nidk if this is related but, i recently started using `lsp_lines.nvim` in favor of `vim.diagnostic.open_float()` which stopped working recently due to this",
            "created_at": "2024-06-27T19:03:17Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/issues/3222#issuecomment-2195479311",
            "id": 2195479311,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3222",
            "node_id": "IC_kwDODTQC186C3FsP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2195479311/reactions"
            },
            "updated_at": "2024-06-27T19:06:29Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2195479311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/84800625?v=4",
                "events_url": "https://api.github.com/users/daUnknownCoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/daUnknownCoder/followers",
                "following_url": "https://api.github.com/users/daUnknownCoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/daUnknownCoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/daUnknownCoder",
                "id": 84800625,
                "login": "daUnknownCoder",
                "node_id": "MDQ6VXNlcjg0ODAwNjI1",
                "organizations_url": "https://api.github.com/users/daUnknownCoder/orgs",
                "received_events_url": "https://api.github.com/users/daUnknownCoder/received_events",
                "repos_url": "https://api.github.com/users/daUnknownCoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/daUnknownCoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/daUnknownCoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/daUnknownCoder"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3222/comments",
    "created_at": "2024-06-26T18:23:59Z",
    "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3222/events",
    "html_url": "https://github.com/neovim/nvim-lspconfig/issues/3222",
    "id": 2376004371,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "Something isn't working",
            "id": 1674892761,
            "name": "bug",
            "node_id": "MDU6TGFiZWwxNjc0ODkyNzYx",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels/bug"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3222/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDODTQC186NnvMT",
    "number": 3222,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3222/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/nvim-lspconfig",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3222/timeline",
    "title": "`on_attach` not working whatever i do",
    "updated_at": "2024-06-27T19:06:29Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3222",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/84800625?v=4",
        "events_url": "https://api.github.com/users/daUnknownCoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/daUnknownCoder/followers",
        "following_url": "https://api.github.com/users/daUnknownCoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/daUnknownCoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/daUnknownCoder",
        "id": 84800625,
        "login": "daUnknownCoder",
        "node_id": "MDQ6VXNlcjg0ODAwNjI1",
        "organizations_url": "https://api.github.com/users/daUnknownCoder/orgs",
        "received_events_url": "https://api.github.com/users/daUnknownCoder/received_events",
        "repos_url": "https://api.github.com/users/daUnknownCoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/daUnknownCoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/daUnknownCoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/daUnknownCoder"
    }
}